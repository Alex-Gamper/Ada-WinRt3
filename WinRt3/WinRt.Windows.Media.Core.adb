--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.AppService;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Media.Capture;
with WinRt.Windows.Media.Capture.Frames;
with WinRt.Windows.Media.Devices;
with WinRt.Windows.Media.Devices.Core;
with WinRt.Windows.Media.Effects;
with WinRt.Windows.Media.FaceAnalysis;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Media.Playback;
with WinRt.Windows.Media.Protection;
with WinRt.Windows.Media.Streaming.Adaptive;
with WinRt.Windows.Networking.BackgroundTransfer;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.FileProperties;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Core is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_LowLightFusionResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Media.Core.ILowLightFusionResult, GenericObject);
   package AsyncOperationCompletedHandler_LowLightFusionResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Media.Core.ILowLightFusionResult, GenericObject);

   package IAsyncOperation_MediaStreamSample is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Core.IMediaStreamSample);
   package AsyncOperationCompletedHandler_MediaStreamSample is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Core.IMediaStreamSample);

   package IMap_Guid_IInspectable is new WinRt.Windows.Foundation.Collections.IMap (WinRt.Guid, WinRt.IInspectable);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioStreamDescriptor

   procedure Initialize (this : in out AudioStreamDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioStreamDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioStreamDescriptor, IAudioStreamDescriptor_Ptr);
   begin
      if this.m_IAudioStreamDescriptor /= null then
         if this.m_IAudioStreamDescriptor.all /= null then
            RefCount := this.m_IAudioStreamDescriptor.all.Release;
            Free (this.m_IAudioStreamDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioStreamDescriptor

   function Constructor
   (
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class
   )
   return AudioStreamDescriptor is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.AudioStreamDescriptor");
      m_Factory    : access IAudioStreamDescriptorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Core.IAudioStreamDescriptor;
   begin
      return RetVal : AudioStreamDescriptor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStreamDescriptorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (encodingProperties.m_IAudioEncodingProperties.all, m_ComRetVal'Access);
            Retval.m_IAudioStreamDescriptor := new Windows.Media.Core.IAudioStreamDescriptor;
            Retval.m_IAudioStreamDescriptor.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioStreamDescriptor

   function get_EncodingProperties
   (
      this : in out AudioStreamDescriptor
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := this.m_IAudioStreamDescriptor.all.get_EncodingProperties (m_ComRetVal'Access);
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_IsSelected
   (
      this : in out AudioStreamDescriptor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.get_IsSelected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Name
   (
      this : in out AudioStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.put_Name (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Name
   (
      this : in out AudioStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out AudioStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out AudioStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LeadingEncoderPadding
   (
      this : in out AudioStreamDescriptor;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IAudioStreamDescriptor2, WinRt.Windows.Media.Core.IID_IAudioStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.put_LeadingEncoderPadding (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LeadingEncoderPadding
   (
      this : in out AudioStreamDescriptor
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IAudioStreamDescriptor2, WinRt.Windows.Media.Core.IID_IAudioStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.get_LeadingEncoderPadding (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_TrailingEncoderPadding
   (
      this : in out AudioStreamDescriptor;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IAudioStreamDescriptor2, WinRt.Windows.Media.Core.IID_IAudioStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.put_TrailingEncoderPadding (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TrailingEncoderPadding
   (
      this : in out AudioStreamDescriptor
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IAudioStreamDescriptor2, WinRt.Windows.Media.Core.IID_IAudioStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.get_TrailingEncoderPadding (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Label
   (
      this : in out AudioStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor2, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out AudioStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor2, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Copy
   (
      this : in out AudioStreamDescriptor
   )
   return WinRt.Windows.Media.Core.AudioStreamDescriptor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioStreamDescriptor3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IAudioStreamDescriptor;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IAudioStreamDescriptor_Interface, WinRt.Windows.Media.Core.IAudioStreamDescriptor3, WinRt.Windows.Media.Core.IID_IAudioStreamDescriptor3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.AudioStreamDescriptor do
         m_Interface := QInterface (this.m_IAudioStreamDescriptor.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioStreamDescriptor := new Windows.Media.Core.IAudioStreamDescriptor;
         Retval.m_IAudioStreamDescriptor.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioTrack

   procedure Initialize (this : in out AudioTrack) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioTrack) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaTrack, IMediaTrack_Ptr);
   begin
      if this.m_IMediaTrack /= null then
         if this.m_IMediaTrack.all /= null then
            RefCount := this.m_IMediaTrack.all.Release;
            Free (this.m_IMediaTrack);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioTrack

   function get_Id
   (
      this : in out AudioTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaTrack.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out AudioTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaTrack.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TrackKind
   (
      this : in out AudioTrack
   )
   return WinRt.Windows.Media.Core.MediaTrackKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaTrackKind;
   begin
      Hr := this.m_IMediaTrack.all.get_TrackKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Label
   (
      this : in out AudioTrack;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaTrack.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out AudioTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaTrack.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_OpenFailed
   (
      this : in out AudioTrack;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IAudioTrack, WinRt.Windows.Media.Core.IID_IAudioTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTrack.all);
      Hr := m_Interface.add_OpenFailed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_OpenFailed
   (
      this : in out AudioTrack;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IAudioTrack, WinRt.Windows.Media.Core.IID_IAudioTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTrack.all);
      Hr := m_Interface.remove_OpenFailed (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetEncodingProperties
   (
      this : in out AudioTrack
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IAudioTrack, WinRt.Windows.Media.Core.IID_IAudioTrack'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IMediaTrack.all);
         Hr := m_Interface.GetEncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_PlaybackItem
   (
      this : in out AudioTrack
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IAudioTrack, WinRt.Windows.Media.Core.IID_IAudioTrack'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         m_Interface := QInterface (this.m_IMediaTrack.all);
         Hr := m_Interface.get_PlaybackItem (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_Name
   (
      this : in out AudioTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IAudioTrack, WinRt.Windows.Media.Core.IID_IAudioTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTrack.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportInfo
   (
      this : in out AudioTrack
   )
   return WinRt.Windows.Media.Core.AudioTrackSupportInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IAudioTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IAudioTrackSupportInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IAudioTrack, WinRt.Windows.Media.Core.IID_IAudioTrack'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.AudioTrackSupportInfo do
         m_Interface := QInterface (this.m_IMediaTrack.all);
         Hr := m_Interface.get_SupportInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioTrackSupportInfo := new Windows.Media.Core.IAudioTrackSupportInfo;
         Retval.m_IAudioTrackSupportInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioTrackOpenFailedEventArgs

   procedure Initialize (this : in out AudioTrackOpenFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioTrackOpenFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioTrackOpenFailedEventArgs, IAudioTrackOpenFailedEventArgs_Ptr);
   begin
      if this.m_IAudioTrackOpenFailedEventArgs /= null then
         if this.m_IAudioTrackOpenFailedEventArgs.all /= null then
            RefCount := this.m_IAudioTrackOpenFailedEventArgs.all.Release;
            Free (this.m_IAudioTrackOpenFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioTrackOpenFailedEventArgs

   function get_ExtendedError
   (
      this : in out AudioTrackOpenFailedEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IAudioTrackOpenFailedEventArgs.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioTrackSupportInfo

   procedure Initialize (this : in out AudioTrackSupportInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioTrackSupportInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioTrackSupportInfo, IAudioTrackSupportInfo_Ptr);
   begin
      if this.m_IAudioTrackSupportInfo /= null then
         if this.m_IAudioTrackSupportInfo.all /= null then
            RefCount := this.m_IAudioTrackSupportInfo.all.Release;
            Free (this.m_IAudioTrackSupportInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioTrackSupportInfo

   function get_DecoderStatus
   (
      this : in out AudioTrackSupportInfo
   )
   return WinRt.Windows.Media.Core.MediaDecoderStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaDecoderStatus;
   begin
      Hr := this.m_IAudioTrackSupportInfo.all.get_DecoderStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Degradation
   (
      this : in out AudioTrackSupportInfo
   )
   return WinRt.Windows.Media.Core.AudioDecoderDegradation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.AudioDecoderDegradation;
   begin
      Hr := this.m_IAudioTrackSupportInfo.all.get_Degradation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DegradationReason
   (
      this : in out AudioTrackSupportInfo
   )
   return WinRt.Windows.Media.Core.AudioDecoderDegradationReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.AudioDecoderDegradationReason;
   begin
      Hr := this.m_IAudioTrackSupportInfo.all.get_DegradationReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MediaSourceStatus
   (
      this : in out AudioTrackSupportInfo
   )
   return WinRt.Windows.Media.Core.MediaSourceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaSourceStatus;
   begin
      Hr := this.m_IAudioTrackSupportInfo.all.get_MediaSourceStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChapterCue

   procedure Initialize (this : in out ChapterCue) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChapterCue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChapterCue, IChapterCue_Ptr);
   begin
      if this.m_IChapterCue /= null then
         if this.m_IChapterCue.all /= null then
            RefCount := this.m_IChapterCue.all.Release;
            Free (this.m_IChapterCue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChapterCue

   function Constructor return ChapterCue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.ChapterCue");
      m_ComRetVal  : aliased Windows.Media.Core.IChapterCue;
   begin
      return RetVal : ChapterCue do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IChapterCue := new Windows.Media.Core.IChapterCue;
            Retval.m_IChapterCue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChapterCue

   procedure put_Title
   (
      this : in out ChapterCue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChapterCue.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Title
   (
      this : in out ChapterCue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChapterCue.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_StartTime
   (
      this : in out ChapterCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IChapterCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChapterCue.all);
      Hr := m_Interface.put_StartTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StartTime
   (
      this : in out ChapterCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IChapterCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChapterCue.all);
      Hr := m_Interface.get_StartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out ChapterCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IChapterCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChapterCue.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out ChapterCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IChapterCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChapterCue.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out ChapterCue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IChapterCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChapterCue.all);
      Hr := m_Interface.put_Id (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out ChapterCue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IChapterCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChapterCue.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CodecInfo

   procedure Initialize (this : in out CodecInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out CodecInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICodecInfo, ICodecInfo_Ptr);
   begin
      if this.m_ICodecInfo /= null then
         if this.m_ICodecInfo.all /= null then
            RefCount := this.m_ICodecInfo.all.Release;
            Free (this.m_ICodecInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CodecInfo

   function get_Kind
   (
      this : in out CodecInfo
   )
   return WinRt.Windows.Media.Core.CodecKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.CodecKind;
   begin
      Hr := this.m_ICodecInfo.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Category
   (
      this : in out CodecInfo
   )
   return WinRt.Windows.Media.Core.CodecCategory is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.CodecCategory;
   begin
      Hr := this.m_ICodecInfo.all.get_Category (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Subtypes
   (
      this : in out CodecInfo
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ICodecInfo.all.get_Subtypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DisplayName
   (
      this : in out CodecInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICodecInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsTrusted
   (
      this : in out CodecInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICodecInfo.all.get_IsTrusted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CodecQuery

   procedure Initialize (this : in out CodecQuery) is
   begin
      null;
   end;

   procedure Finalize (this : in out CodecQuery) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICodecQuery, ICodecQuery_Ptr);
   begin
      if this.m_ICodecQuery /= null then
         if this.m_ICodecQuery.all /= null then
            RefCount := this.m_ICodecQuery.all.Release;
            Free (this.m_ICodecQuery);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CodecQuery

   function Constructor return CodecQuery is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.CodecQuery");
      m_ComRetVal  : aliased Windows.Media.Core.ICodecQuery;
   begin
      return RetVal : CodecQuery do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICodecQuery := new Windows.Media.Core.ICodecQuery;
            Retval.m_ICodecQuery.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CodecQuery

   function FindAllAsync
   (
      this : in out CodecQuery;
      kind : Windows.Media.Core.CodecKind;
      category : Windows.Media.Core.CodecCategory;
      subType_x : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subType_x : WinRt.HString := To_HString (subType_x);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3250953980, 29151, 21812, (176, 63, 225, 138, 143, 190, 120, 187 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1488924028, 44699, 24347, (139, 102, 95, 241, 187, 177, 2, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ICodecQuery.all.FindAllAsync (kind, category, HStr_subType_x, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_subType_x);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CodecSubtypes is

      function get_VideoFormatDV25
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatDV25 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatDV50
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatDV50 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatDvc
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatDvc (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatDvh1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatDvh1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatDvhD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatDvhD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatDvsd
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatDvsd (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatDvsl
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatDvsl (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatH263
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatH263 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatH264
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatH264 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatH265
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatH265 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatH264ES
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatH264ES (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatHevc
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatHevc (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatHevcES
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatHevcES (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatM4S2
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatM4S2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMjpg
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMjpg (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMP43
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMP43 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMP4S
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMP4S (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMP4V
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMP4V (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMpeg2
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMpeg2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatVP80
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatVP80 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatVP90
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatVP90 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMpg1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMpg1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMss1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMss1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatMss2
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatMss2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatWmv1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatWmv1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatWmv2
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatWmv2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatWmv3
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatWmv3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormatWvc1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormatWvc1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VideoFormat420O
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoFormat420O (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatAac
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatAac (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatAdts
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatAdts (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatAlac
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatAlac (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatAmrNB
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatAmrNB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatAmrWB
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatAmrWB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatAmrWP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatAmrWP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatDolbyAC3
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatDolbyAC3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatDolbyAC3Spdif
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatDolbyAC3Spdif (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatDolbyDDPlus
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatDolbyDDPlus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatDrm
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatDrm (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatDts
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatDts (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatFlac
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatFlac (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatFloat
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatFloat (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatMP3
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatMP3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatMPeg
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatMPeg (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatMsp1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatMsp1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatOpus
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatOpus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatPcm
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatPcm (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatWmaSpdif
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatWmaSpdif (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatWMAudioLossless
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatWMAudioLossless (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatWMAudioV8
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatWMAudioV8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AudioFormatWMAudioV9
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.CodecSubtypes");
         m_Factory        : access WinRt.Windows.Media.Core.ICodecSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICodecSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AudioFormatWMAudioV9 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end CodecSubtypes;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataCue

   procedure Initialize (this : in out DataCue) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataCue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataCue, IDataCue_Ptr);
   begin
      if this.m_IDataCue /= null then
         if this.m_IDataCue.all /= null then
            RefCount := this.m_IDataCue.all.Release;
            Free (this.m_IDataCue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DataCue

   function Constructor return DataCue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.DataCue");
      m_ComRetVal  : aliased Windows.Media.Core.IDataCue;
   begin
      return RetVal : DataCue do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDataCue := new Windows.Media.Core.IDataCue;
            Retval.m_IDataCue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataCue

   procedure put_Data
   (
      this : in out DataCue;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataCue.all.put_Data (value);
   end;

   function get_Data
   (
      this : in out DataCue
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IDataCue.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartTime
   (
      this : in out DataCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IDataCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataCue.all);
      Hr := m_Interface.put_StartTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StartTime
   (
      this : in out DataCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IDataCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataCue.all);
      Hr := m_Interface.get_StartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out DataCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IDataCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataCue.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out DataCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IDataCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataCue.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out DataCue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IDataCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataCue.all);
      Hr := m_Interface.put_Id (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out DataCue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IDataCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataCue.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out DataCue
   )
   return WinRt.Windows.Foundation.Collections.PropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IDataCue2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IDataCue_Interface, WinRt.Windows.Media.Core.IDataCue2, WinRt.Windows.Media.Core.IID_IDataCue2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.PropertySet do
         m_Interface := QInterface (this.m_IDataCue.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceDetectedEventArgs

   procedure Initialize (this : in out FaceDetectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FaceDetectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFaceDetectedEventArgs, IFaceDetectedEventArgs_Ptr);
   begin
      if this.m_IFaceDetectedEventArgs /= null then
         if this.m_IFaceDetectedEventArgs.all /= null then
            RefCount := this.m_IFaceDetectedEventArgs.all.Release;
            Free (this.m_IFaceDetectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceDetectedEventArgs

   function get_ResultFrame
   (
      this : in out FaceDetectedEventArgs
   )
   return WinRt.Windows.Media.Core.FaceDetectionEffectFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IFaceDetectionEffectFrame;
   begin
      return RetVal : WinRt.Windows.Media.Core.FaceDetectionEffectFrame do
         Hr := this.m_IFaceDetectedEventArgs.all.get_ResultFrame (m_ComRetVal'Access);
         Retval.m_IFaceDetectionEffectFrame := new Windows.Media.Core.IFaceDetectionEffectFrame;
         Retval.m_IFaceDetectionEffectFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceDetectionEffect

   procedure Initialize (this : in out FaceDetectionEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out FaceDetectionEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFaceDetectionEffect, IFaceDetectionEffect_Ptr);
   begin
      if this.m_IFaceDetectionEffect /= null then
         if this.m_IFaceDetectionEffect.all /= null then
            RefCount := this.m_IFaceDetectionEffect.all.Release;
            Free (this.m_IFaceDetectionEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceDetectionEffect

   procedure put_Enabled
   (
      this : in out FaceDetectionEffect;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFaceDetectionEffect.all.put_Enabled (value);
   end;

   function get_Enabled
   (
      this : in out FaceDetectionEffect
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFaceDetectionEffect.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredDetectionInterval
   (
      this : in out FaceDetectionEffect;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFaceDetectionEffect.all.put_DesiredDetectionInterval (value);
   end;

   function get_DesiredDetectionInterval
   (
      this : in out FaceDetectionEffect
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IFaceDetectionEffect.all.get_DesiredDetectionInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_FaceDetected
   (
      this : in out FaceDetectionEffect;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IFaceDetectionEffect.all.add_FaceDetected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FaceDetected
   (
      this : in out FaceDetectionEffect;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFaceDetectionEffect.all.remove_FaceDetected (cookie);
   end;

   procedure SetProperties
   (
      this : in out FaceDetectionEffect;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaExtension := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffect_Interface, WinRt.Windows.Media.IMediaExtension, WinRt.Windows.Media.IID_IMediaExtension'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffect.all);
      Hr := m_Interface.SetProperties (configuration);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceDetectionEffectDefinition

   procedure Initialize (this : in out FaceDetectionEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out FaceDetectionEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Media.Effects.IVideoEffectDefinition;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Media.Effects.IVideoEffectDefinition, WinRt.Windows.Media.Effects.IVideoEffectDefinition_Ptr);
   begin
      if this.m_IVideoEffectDefinition /= null then
         if this.m_IVideoEffectDefinition.all /= null then
            RefCount := this.m_IVideoEffectDefinition.all.Release;
            Free (this.m_IVideoEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FaceDetectionEffectDefinition

   function Constructor return FaceDetectionEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.FaceDetectionEffectDefinition");
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoEffectDefinition;
   begin
      return RetVal : FaceDetectionEffectDefinition do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVideoEffectDefinition := new Windows.Media.Effects.IVideoEffectDefinition;
            Retval.m_IVideoEffectDefinition.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceDetectionEffectDefinition

   function get_ActivatableClassId
   (
      this : in out FaceDetectionEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_ActivatableClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out FaceDetectionEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DetectionMode
   (
      this : in out FaceDetectionEffectDefinition;
      value : Windows.Media.Core.FaceDetectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition, WinRt.Windows.Media.Core.IID_IFaceDetectionEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_DetectionMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DetectionMode
   (
      this : in out FaceDetectionEffectDefinition
   )
   return WinRt.Windows.Media.Core.FaceDetectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.FaceDetectionMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition, WinRt.Windows.Media.Core.IID_IFaceDetectionEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_DetectionMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SynchronousDetectionEnabled
   (
      this : in out FaceDetectionEffectDefinition;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition, WinRt.Windows.Media.Core.IID_IFaceDetectionEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.put_SynchronousDetectionEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SynchronousDetectionEnabled
   (
      this : in out FaceDetectionEffectDefinition
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Effects.IVideoEffectDefinition_Interface, WinRt.Windows.Media.Core.IFaceDetectionEffectDefinition, WinRt.Windows.Media.Core.IID_IFaceDetectionEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEffectDefinition.all);
      Hr := m_Interface.get_SynchronousDetectionEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceDetectionEffectFrame

   procedure Initialize (this : in out FaceDetectionEffectFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out FaceDetectionEffectFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFaceDetectionEffectFrame, IFaceDetectionEffectFrame_Ptr);
   begin
      if this.m_IFaceDetectionEffectFrame /= null then
         if this.m_IFaceDetectionEffectFrame.all /= null then
            RefCount := this.m_IFaceDetectionEffectFrame.all.Release;
            Free (this.m_IFaceDetectionEffectFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceDetectionEffectFrame

   function get_DetectedFaces
   (
      this : in out FaceDetectionEffectFrame
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFaceDetectionEffectFrame.all.get_DetectedFaces (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out FaceDetectionEffectFrame
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsReadOnly
   (
      this : in out FaceDetectionEffectFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.get_IsReadOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RelativeTime
   (
      this : in out FaceDetectionEffectFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.put_RelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RelativeTime
   (
      this : in out FaceDetectionEffectFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.get_RelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SystemRelativeTime
   (
      this : in out FaceDetectionEffectFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.put_SystemRelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SystemRelativeTime
   (
      this : in out FaceDetectionEffectFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.get_SystemRelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Duration
   (
      this : in out FaceDetectionEffectFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out FaceDetectionEffectFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsDiscontinuous
   (
      this : in out FaceDetectionEffectFrame;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.put_IsDiscontinuous (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDiscontinuous
   (
      this : in out FaceDetectionEffectFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.get_IsDiscontinuous (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ExtendedProperties
   (
      this : in out FaceDetectionEffectFrame
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.get_ExtendedProperties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out FaceDetectionEffectFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IFaceDetectionEffectFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFaceDetectionEffectFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HighDynamicRangeControl

   procedure Initialize (this : in out HighDynamicRangeControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out HighDynamicRangeControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHighDynamicRangeControl, IHighDynamicRangeControl_Ptr);
   begin
      if this.m_IHighDynamicRangeControl /= null then
         if this.m_IHighDynamicRangeControl.all /= null then
            RefCount := this.m_IHighDynamicRangeControl.all.Release;
            Free (this.m_IHighDynamicRangeControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HighDynamicRangeControl

   procedure put_Enabled
   (
      this : in out HighDynamicRangeControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHighDynamicRangeControl.all.put_Enabled (value);
   end;

   function get_Enabled
   (
      this : in out HighDynamicRangeControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHighDynamicRangeControl.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HighDynamicRangeOutput

   procedure Initialize (this : in out HighDynamicRangeOutput) is
   begin
      null;
   end;

   procedure Finalize (this : in out HighDynamicRangeOutput) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHighDynamicRangeOutput, IHighDynamicRangeOutput_Ptr);
   begin
      if this.m_IHighDynamicRangeOutput /= null then
         if this.m_IHighDynamicRangeOutput.all /= null then
            RefCount := this.m_IHighDynamicRangeOutput.all.Release;
            Free (this.m_IHighDynamicRangeOutput);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HighDynamicRangeOutput

   function get_Certainty
   (
      this : in out HighDynamicRangeOutput
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IHighDynamicRangeOutput.all.get_Certainty (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameControllers
   (
      this : in out HighDynamicRangeOutput
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHighDynamicRangeOutput.all.get_FrameControllers (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageCue

   procedure Initialize (this : in out ImageCue) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageCue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageCue, IImageCue_Ptr);
   begin
      if this.m_IImageCue /= null then
         if this.m_IImageCue.all /= null then
            RefCount := this.m_IImageCue.all.Release;
            Free (this.m_IImageCue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ImageCue

   function Constructor return ImageCue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.ImageCue");
      m_ComRetVal  : aliased Windows.Media.Core.IImageCue;
   begin
      return RetVal : ImageCue do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IImageCue := new Windows.Media.Core.IImageCue;
            Retval.m_IImageCue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageCue

   function get_Position
   (
      this : in out ImageCue
   )
   return WinRt.Windows.Media.Core.TimedTextPoint is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextPoint;
   begin
      Hr := this.m_IImageCue.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out ImageCue;
      value : Windows.Media.Core.TimedTextPoint
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageCue.all.put_Position (value);
   end;

   function get_Extent
   (
      this : in out ImageCue
   )
   return WinRt.Windows.Media.Core.TimedTextSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextSize;
   begin
      Hr := this.m_IImageCue.all.get_Extent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Extent
   (
      this : in out ImageCue;
      value : Windows.Media.Core.TimedTextSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageCue.all.put_Extent (value);
   end;

   procedure put_SoftwareBitmap
   (
      this : in out ImageCue;
      value : Windows.Graphics.Imaging.SoftwareBitmap'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageCue.all.put_SoftwareBitmap (value.m_ISoftwareBitmap.all);
   end;

   function get_SoftwareBitmap
   (
      this : in out ImageCue
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := this.m_IImageCue.all.get_SoftwareBitmap (m_ComRetVal'Access);
         Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
         Retval.m_ISoftwareBitmap.all := m_ComRetVal;
      end return;
   end;

   procedure put_StartTime
   (
      this : in out ImageCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IImageCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageCue.all);
      Hr := m_Interface.put_StartTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StartTime
   (
      this : in out ImageCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IImageCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageCue.all);
      Hr := m_Interface.get_StartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out ImageCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IImageCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageCue.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out ImageCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IImageCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageCue.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out ImageCue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IImageCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageCue.all);
      Hr := m_Interface.put_Id (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out ImageCue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IImageCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageCue.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InitializeMediaStreamSourceRequestedEventArgs

   procedure Initialize (this : in out InitializeMediaStreamSourceRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InitializeMediaStreamSourceRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInitializeMediaStreamSourceRequestedEventArgs, IInitializeMediaStreamSourceRequestedEventArgs_Ptr);
   begin
      if this.m_IInitializeMediaStreamSourceRequestedEventArgs /= null then
         if this.m_IInitializeMediaStreamSourceRequestedEventArgs.all /= null then
            RefCount := this.m_IInitializeMediaStreamSourceRequestedEventArgs.all.Release;
            Free (this.m_IInitializeMediaStreamSourceRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InitializeMediaStreamSourceRequestedEventArgs

   function get_Source
   (
      this : in out InitializeMediaStreamSourceRequestedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaStreamSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSource do
         Hr := this.m_IInitializeMediaStreamSourceRequestedEventArgs.all.get_Source (m_ComRetVal'Access);
         Retval.m_IMediaStreamSource := new Windows.Media.Core.IMediaStreamSource;
         Retval.m_IMediaStreamSource.all := m_ComRetVal;
      end return;
   end;

   function get_RandomAccessStream
   (
      this : in out InitializeMediaStreamSourceRequestedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_IInitializeMediaStreamSourceRequestedEventArgs.all.get_RandomAccessStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out InitializeMediaStreamSourceRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IInitializeMediaStreamSourceRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body LowLightFusion is

      function get_SupportedBitmapPixelFormats
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.LowLightFusion");
         m_Factory        : access WinRt.Windows.Media.Core.ILowLightFusionStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILowLightFusionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SupportedBitmapPixelFormats (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MaxSupportedFrameCount
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.LowLightFusion");
         m_Factory        : access WinRt.Windows.Media.Core.ILowLightFusionStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILowLightFusionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaxSupportedFrameCount (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function FuseAsync
      (
         frameSet : GenericObject
      )
      return WinRt.Windows.Media.Core.LowLightFusionResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.LowLightFusion");
         m_Factory        : access WinRt.Windows.Media.Core.ILowLightFusionStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LowLightFusionResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LowLightFusionResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Media.Core.ILowLightFusionResult;
         m_IID            : aliased WinRt.IID := (2721066029, 26293, 22983, (171, 151, 63, 87, 147, 226, 29, 67 )); -- Windows.Media.Core.LowLightFusionResult;
         m_HandlerIID     : aliased WinRt.IID := (1251291074, 61390, 21109, (144, 208, 54, 137, 190, 38, 246, 102 ));
         m_Handler        : AsyncOperationCompletedHandler_LowLightFusionResult.Kind := new AsyncOperationCompletedHandler_LowLightFusionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LowLightFusionResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LowLightFusionResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LowLightFusionResult.Kind_Delegate, AsyncOperationCompletedHandler_LowLightFusionResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Media.Core.LowLightFusionResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILowLightFusionStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FuseAsync (frameSet, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ILowLightFusionResult := new Windows.Media.Core.ILowLightFusionResult;
                        Retval.m_ILowLightFusionResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end LowLightFusion;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLightFusionResult

   procedure Initialize (this : in out LowLightFusionResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLightFusionResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLightFusionResult, ILowLightFusionResult_Ptr);
   begin
      if this.m_ILowLightFusionResult /= null then
         if this.m_ILowLightFusionResult.all /= null then
            RefCount := this.m_ILowLightFusionResult.all.Release;
            Free (this.m_ILowLightFusionResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLightFusionResult

   function get_Frame
   (
      this : in out LowLightFusionResult
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := this.m_ILowLightFusionResult.all.get_Frame (m_ComRetVal'Access);
         Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
         Retval.m_ISoftwareBitmap.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out LowLightFusionResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ILowLightFusionResult_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILowLightFusionResult.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBinder

   procedure Initialize (this : in out MediaBinder) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBinder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBinder, IMediaBinder_Ptr);
   begin
      if this.m_IMediaBinder /= null then
         if this.m_IMediaBinder.all /= null then
            RefCount := this.m_IMediaBinder.all.Release;
            Free (this.m_IMediaBinder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaBinder

   function Constructor return MediaBinder is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.MediaBinder");
      m_ComRetVal  : aliased Windows.Media.Core.IMediaBinder;
   begin
      return RetVal : MediaBinder do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaBinder := new Windows.Media.Core.IMediaBinder;
            Retval.m_IMediaBinder.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBinder

   function add_Binding
   (
      this : in out MediaBinder;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaBinder.all.add_Binding (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Binding
   (
      this : in out MediaBinder;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBinder.all.remove_Binding (token);
   end;

   function get_Token
   (
      this : in out MediaBinder
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaBinder.all.get_Token (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Token
   (
      this : in out MediaBinder;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaBinder.all.put_Token (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Source
   (
      this : in out MediaBinder
   )
   return WinRt.Windows.Media.Core.MediaSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := this.m_IMediaBinder.all.get_Source (m_ComRetVal'Access);
         Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
         Retval.m_IMediaSource2.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBindingEventArgs

   procedure Initialize (this : in out MediaBindingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBindingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBindingEventArgs, IMediaBindingEventArgs_Ptr);
   begin
      if this.m_IMediaBindingEventArgs /= null then
         if this.m_IMediaBindingEventArgs.all /= null then
            RefCount := this.m_IMediaBindingEventArgs.all.Release;
            Free (this.m_IMediaBindingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBindingEventArgs

   function add_Canceled
   (
      this : in out MediaBindingEventArgs;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaBindingEventArgs.all.add_Canceled (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Canceled
   (
      this : in out MediaBindingEventArgs;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBindingEventArgs.all.remove_Canceled (token);
   end;

   function get_MediaBinder
   (
      this : in out MediaBindingEventArgs
   )
   return WinRt.Windows.Media.Core.MediaBinder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaBinder;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaBinder do
         Hr := this.m_IMediaBindingEventArgs.all.get_MediaBinder (m_ComRetVal'Access);
         Retval.m_IMediaBinder := new Windows.Media.Core.IMediaBinder;
         Retval.m_IMediaBinder.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out MediaBindingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaBindingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure SetUri
   (
      this : in out MediaBindingEventArgs;
      uri : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBindingEventArgs.all.SetUri (uri.m_IUriRuntimeClass.all);
   end;

   procedure SetStream
   (
      this : in out MediaBindingEventArgs;
      stream : Windows.Storage.Streams.IRandomAccessStream;
      contentType : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contentType : WinRt.HString := To_HString (contentType);
   begin
      Hr := this.m_IMediaBindingEventArgs.all.SetStream (stream, HStr_contentType);
      Hr := WindowsDeleteString (HStr_contentType);
   end;

   procedure SetStreamReference
   (
      this : in out MediaBindingEventArgs;
      stream : Windows.Storage.Streams.IRandomAccessStreamReference;
      contentType : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contentType : WinRt.HString := To_HString (contentType);
   begin
      Hr := this.m_IMediaBindingEventArgs.all.SetStreamReference (stream, HStr_contentType);
      Hr := WindowsDeleteString (HStr_contentType);
   end;

   procedure SetAdaptiveMediaSource
   (
      this : in out MediaBindingEventArgs;
      mediaSource_p : Windows.Media.Streaming.Adaptive.AdaptiveMediaSource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaBindingEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaBindingEventArgs_Interface, WinRt.Windows.Media.Core.IMediaBindingEventArgs2, WinRt.Windows.Media.Core.IID_IMediaBindingEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaBindingEventArgs.all);
      Hr := m_Interface.SetAdaptiveMediaSource (mediaSource_p.m_IAdaptiveMediaSource.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetStorageFile
   (
      this : in out MediaBindingEventArgs;
      file : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaBindingEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaBindingEventArgs_Interface, WinRt.Windows.Media.Core.IMediaBindingEventArgs2, WinRt.Windows.Media.Core.IID_IMediaBindingEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaBindingEventArgs.all);
      Hr := m_Interface.SetStorageFile (file);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetDownloadOperation
   (
      this : in out MediaBindingEventArgs;
      downloadOperation : Windows.Networking.BackgroundTransfer.DownloadOperation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaBindingEventArgs3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaBindingEventArgs_Interface, WinRt.Windows.Media.Core.IMediaBindingEventArgs3, WinRt.Windows.Media.Core.IID_IMediaBindingEventArgs3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaBindingEventArgs.all);
      Hr := m_Interface.SetDownloadOperation (downloadOperation.m_IDownloadOperation.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCueEventArgs

   procedure Initialize (this : in out MediaCueEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCueEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCueEventArgs, IMediaCueEventArgs_Ptr);
   begin
      if this.m_IMediaCueEventArgs /= null then
         if this.m_IMediaCueEventArgs.all /= null then
            RefCount := this.m_IMediaCueEventArgs.all.Release;
            Free (this.m_IMediaCueEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCueEventArgs

   function get_Cue
   (
      this : in out MediaCueEventArgs
   )
   return WinRt.Windows.Media.Core.IMediaCue is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaCue;
   begin
      Hr := this.m_IMediaCueEventArgs.all.get_Cue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaSource

   procedure Initialize (this : in out MediaSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaSource2, IMediaSource2_Ptr);
   begin
      if this.m_IMediaSource2 /= null then
         if this.m_IMediaSource2.all /= null then
            RefCount := this.m_IMediaSource2.all.Release;
            Free (this.m_IMediaSource2);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaSource

   function CreateFromDownloadOperation
   (
      downloadOperation : Windows.Networking.BackgroundTransfer.DownloadOperation'Class
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDownloadOperation (downloadOperation.m_IDownloadOperation.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromMediaBinder
   (
      binder : Windows.Media.Core.MediaBinder'Class
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromMediaBinder (binder.m_IMediaBinder.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromMediaFrameSource
   (
      frameSource : Windows.Media.Capture.Frames.MediaFrameSource'Class
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromMediaFrameSource (frameSource.m_IMediaFrameSource.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromAdaptiveMediaSource
   (
      mediaSource_p : Windows.Media.Streaming.Adaptive.AdaptiveMediaSource'Class
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromAdaptiveMediaSource (mediaSource_p.m_IAdaptiveMediaSource.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromMediaStreamSource
   (
      mediaSource_p : Windows.Media.Core.MediaStreamSource'Class
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromMediaStreamSource (mediaSource_p.m_IMediaStreamSource.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromMseStreamSource
   (
      mediaSource_p : Windows.Media.Core.MseStreamSource'Class
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromMseStreamSource (mediaSource_p.m_IMseStreamSource.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromIMediaSource
   (
      mediaSource_p : Windows.Media.Core.IMediaSource
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIMediaSource (mediaSource_p, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStorageFile
   (
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStorageFile (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStream
   (
      stream : Windows.Storage.Streams.IRandomAccessStream;
      contentType : WinRt.WString
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
      HStr_contentType : WinRt.HString := To_HString (contentType);
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStream (stream, HStr_contentType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentType);
      end return;
   end;

   function CreateFromStreamReference
   (
      stream : Windows.Storage.Streams.IRandomAccessStreamReference;
      contentType : WinRt.WString
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
      HStr_contentType : WinRt.HString := To_HString (contentType);
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStreamReference (stream, HStr_contentType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentType);
      end return;
   end;

   function CreateFromUri
   (
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Media.Core.MediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUri (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
            Retval.m_IMediaSource2.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaSource

   function add_OpenOperationCompleted
   (
      this : in out MediaSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaSource2.all.add_OpenOperationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_OpenOperationCompleted
   (
      this : in out MediaSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSource2.all.remove_OpenOperationCompleted (token);
   end;

   function get_CustomProperties
   (
      this : in out MediaSource
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IMediaSource2.all.get_CustomProperties (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_Duration
   (
      this : in out MediaSource
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMediaSource2.all.get_Duration (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsOpen
   (
      this : in out MediaSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaSource2.all.get_IsOpen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExternalTimedTextSources
   (
      this : in out MediaSource
   )
   return IObservableVector_ITimedTextSource.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IObservableVector_ITimedTextSource.Kind;
   begin
      Hr := this.m_IMediaSource2.all.get_ExternalTimedTextSources (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IObservableVector_ITimedTextSource (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExternalTimedMetadataTracks
   (
      this : in out MediaSource
   )
   return IObservableVector_ITimedMetadataTrack.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IObservableVector_ITimedMetadataTrack.Kind;
   begin
      Hr := this.m_IMediaSource2.all.get_ExternalTimedMetadataTracks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IObservableVector_ITimedMetadataTrack (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Close
   (
      this : in out MediaSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSource2.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function add_StateChanged
   (
      this : in out MediaSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource3, WinRt.Windows.Media.Core.IID_IMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSource2.all);
      Hr := m_Interface.add_StateChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out MediaSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource3, WinRt.Windows.Media.Core.IID_IMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSource2.all);
      Hr := m_Interface.remove_StateChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_State
   (
      this : in out MediaSource
   )
   return WinRt.Windows.Media.Core.MediaSourceState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaSourceState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource3, WinRt.Windows.Media.Core.IID_IMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSource2.all);
      Hr := m_Interface.get_State (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Reset
   (
      this : in out MediaSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource3, WinRt.Windows.Media.Core.IID_IMediaSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSource2.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   function get_AdaptiveMediaSource
   (
      this : in out MediaSource
   )
   return WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource4, WinRt.Windows.Media.Core.IID_IMediaSource4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Streaming.Adaptive.AdaptiveMediaSource do
         m_Interface := QInterface (this.m_IMediaSource2.all);
         Hr := m_Interface.get_AdaptiveMediaSource (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdaptiveMediaSource := new Windows.Media.Streaming.Adaptive.IAdaptiveMediaSource;
         Retval.m_IAdaptiveMediaSource.all := m_ComRetVal;
      end return;
   end;

   function get_MediaStreamSource
   (
      this : in out MediaSource
   )
   return WinRt.Windows.Media.Core.MediaStreamSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource4, WinRt.Windows.Media.Core.IID_IMediaSource4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSource do
         m_Interface := QInterface (this.m_IMediaSource2.all);
         Hr := m_Interface.get_MediaStreamSource (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaStreamSource := new Windows.Media.Core.IMediaStreamSource;
         Retval.m_IMediaStreamSource.all := m_ComRetVal;
      end return;
   end;

   function get_MseStreamSource
   (
      this : in out MediaSource
   )
   return WinRt.Windows.Media.Core.MseStreamSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMseStreamSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource4, WinRt.Windows.Media.Core.IID_IMediaSource4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.MseStreamSource do
         m_Interface := QInterface (this.m_IMediaSource2.all);
         Hr := m_Interface.get_MseStreamSource (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMseStreamSource := new Windows.Media.Core.IMseStreamSource;
         Retval.m_IMseStreamSource.all := m_ComRetVal;
      end return;
   end;

   function get_Uri
   (
      this : in out MediaSource
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource4, WinRt.Windows.Media.Core.IID_IMediaSource4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IMediaSource2.all);
         Hr := m_Interface.get_Uri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure OpenAsync
   (
      this : in out MediaSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource4, WinRt.Windows.Media.Core.IID_IMediaSource4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSource2.all);
      Hr := m_Interface.OpenAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_DownloadOperation
   (
      this : in out MediaSource
   )
   return WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaSource5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IDownloadOperation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaSource2_Interface, WinRt.Windows.Media.Core.IMediaSource5, WinRt.Windows.Media.Core.IID_IMediaSource5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation do
         m_Interface := QInterface (this.m_IMediaSource2.all);
         Hr := m_Interface.get_DownloadOperation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDownloadOperation := new Windows.Networking.BackgroundTransfer.IDownloadOperation;
         Retval.m_IDownloadOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaSourceAppServiceConnection

   procedure Initialize (this : in out MediaSourceAppServiceConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaSourceAppServiceConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaSourceAppServiceConnection, IMediaSourceAppServiceConnection_Ptr);
   begin
      if this.m_IMediaSourceAppServiceConnection /= null then
         if this.m_IMediaSourceAppServiceConnection.all /= null then
            RefCount := this.m_IMediaSourceAppServiceConnection.all.Release;
            Free (this.m_IMediaSourceAppServiceConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaSourceAppServiceConnection

   function Constructor
   (
      appServiceConnection : Windows.ApplicationModel.AppService.AppServiceConnection'Class
   )
   return MediaSourceAppServiceConnection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.MediaSourceAppServiceConnection");
      m_Factory    : access IMediaSourceAppServiceConnectionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Core.IMediaSourceAppServiceConnection;
   begin
      return RetVal : MediaSourceAppServiceConnection do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaSourceAppServiceConnectionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (appServiceConnection.m_IAppServiceConnection.all, m_ComRetVal'Access);
            Retval.m_IMediaSourceAppServiceConnection := new Windows.Media.Core.IMediaSourceAppServiceConnection;
            Retval.m_IMediaSourceAppServiceConnection.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaSourceAppServiceConnection

   function add_InitializeMediaStreamSourceRequested
   (
      this : in out MediaSourceAppServiceConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaSourceAppServiceConnection.all.add_InitializeMediaStreamSourceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_InitializeMediaStreamSourceRequested
   (
      this : in out MediaSourceAppServiceConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAppServiceConnection.all.remove_InitializeMediaStreamSourceRequested (token);
   end;

   procedure Start
   (
      this : in out MediaSourceAppServiceConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAppServiceConnection.all.Start;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaSourceError

   procedure Initialize (this : in out MediaSourceError) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaSourceError) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaSourceError, IMediaSourceError_Ptr);
   begin
      if this.m_IMediaSourceError /= null then
         if this.m_IMediaSourceError.all /= null then
            RefCount := this.m_IMediaSourceError.all.Release;
            Free (this.m_IMediaSourceError);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaSourceError

   function get_ExtendedError
   (
      this : in out MediaSourceError
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IMediaSourceError.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaSourceOpenOperationCompletedEventArgs

   procedure Initialize (this : in out MediaSourceOpenOperationCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaSourceOpenOperationCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaSourceOpenOperationCompletedEventArgs, IMediaSourceOpenOperationCompletedEventArgs_Ptr);
   begin
      if this.m_IMediaSourceOpenOperationCompletedEventArgs /= null then
         if this.m_IMediaSourceOpenOperationCompletedEventArgs.all /= null then
            RefCount := this.m_IMediaSourceOpenOperationCompletedEventArgs.all.Release;
            Free (this.m_IMediaSourceOpenOperationCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaSourceOpenOperationCompletedEventArgs

   function get_Error
   (
      this : in out MediaSourceOpenOperationCompletedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaSourceError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSourceError;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSourceError do
         Hr := this.m_IMediaSourceOpenOperationCompletedEventArgs.all.get_Error (m_ComRetVal'Access);
         Retval.m_IMediaSourceError := new Windows.Media.Core.IMediaSourceError;
         Retval.m_IMediaSourceError.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaSourceStateChangedEventArgs

   procedure Initialize (this : in out MediaSourceStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaSourceStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaSourceStateChangedEventArgs, IMediaSourceStateChangedEventArgs_Ptr);
   begin
      if this.m_IMediaSourceStateChangedEventArgs /= null then
         if this.m_IMediaSourceStateChangedEventArgs.all /= null then
            RefCount := this.m_IMediaSourceStateChangedEventArgs.all.Release;
            Free (this.m_IMediaSourceStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaSourceStateChangedEventArgs

   function get_OldState
   (
      this : in out MediaSourceStateChangedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaSourceState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaSourceState;
   begin
      Hr := this.m_IMediaSourceStateChangedEventArgs.all.get_OldState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewState
   (
      this : in out MediaSourceStateChangedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaSourceState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaSourceState;
   begin
      Hr := this.m_IMediaSourceStateChangedEventArgs.all.get_NewState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSample

   procedure Initialize (this : in out MediaStreamSample) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSample) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSample, IMediaStreamSample_Ptr);
   begin
      if this.m_IMediaStreamSample /= null then
         if this.m_IMediaStreamSample.all /= null then
            RefCount := this.m_IMediaStreamSample.all.Release;
            Free (this.m_IMediaStreamSample);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaStreamSample

   function CreateFromBuffer
   (
      buffer : Windows.Storage.Streams.IBuffer;
      timestamp : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.Media.Core.MediaStreamSample is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaStreamSample");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaStreamSampleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSample;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSample do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaStreamSampleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromBuffer (buffer, timestamp, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaStreamSample := new Windows.Media.Core.IMediaStreamSample;
            Retval.m_IMediaStreamSample.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStreamAsync
   (
      stream : Windows.Storage.Streams.IInputStream;
      count : WinRt.UInt32;
      timestamp : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.Media.Core.MediaStreamSample is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaStreamSample");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaStreamSampleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaStreamSample.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaStreamSample.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Core.IMediaStreamSample;
      m_IID            : aliased WinRt.IID := (1021075078, 19162, 24311, (150, 122, 225, 55, 164, 98, 25, 7 )); -- Windows.Media.Core.MediaStreamSample;
      m_HandlerIID     : aliased WinRt.IID := (3749358793, 43116, 23677, (191, 152, 204, 55, 28, 151, 198, 123 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaStreamSample.Kind := new AsyncOperationCompletedHandler_MediaStreamSample.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaStreamSample.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaStreamSample.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaStreamSample.Kind_Delegate, AsyncOperationCompletedHandler_MediaStreamSample.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSample do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaStreamSampleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStreamAsync (stream, count, timestamp, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMediaStreamSample := new Windows.Media.Core.IMediaStreamSample;
                     Retval.m_IMediaStreamSample.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromDirect3D11Surface
   (
      surface : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      timestamp : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.Media.Core.MediaStreamSample is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MediaStreamSample");
      m_Factory        : access WinRt.Windows.Media.Core.IMediaStreamSampleStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSample;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSample do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaStreamSampleStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDirect3D11Surface (surface, timestamp, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaStreamSample := new Windows.Media.Core.IMediaStreamSample;
            Retval.m_IMediaStreamSample.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSample

   function add_Processed
   (
      this : in out MediaStreamSample;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaStreamSample.all.add_Processed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Processed
   (
      this : in out MediaStreamSample;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSample.all.remove_Processed (token);
   end;

   function get_Buffer
   (
      this : in out MediaStreamSample
   )
   return WinRt.Windows.Storage.Streams.Buffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.Buffer do
         Hr := this.m_IMediaStreamSample.all.get_Buffer (m_ComRetVal'Access);
         Retval.m_IBuffer := new Windows.Storage.Streams.IBuffer;
         Retval.m_IBuffer.all := m_ComRetVal;
      end return;
   end;

   function get_Timestamp
   (
      this : in out MediaStreamSample
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaStreamSample.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedProperties
   (
      this : in out MediaStreamSample
   )
   return WinRt.Windows.Media.Core.MediaStreamSamplePropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSamplePropertySet do
         Hr := this.m_IMediaStreamSample.all.get_ExtendedProperties (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_Protection
   (
      this : in out MediaStreamSample
   )
   return WinRt.Windows.Media.Core.MediaStreamSampleProtectionProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSampleProtectionProperties;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSampleProtectionProperties do
         Hr := this.m_IMediaStreamSample.all.get_Protection (m_ComRetVal'Access);
         Retval.m_IMediaStreamSampleProtectionProperties := new Windows.Media.Core.IMediaStreamSampleProtectionProperties;
         Retval.m_IMediaStreamSampleProtectionProperties.all := m_ComRetVal;
      end return;
   end;

   procedure put_DecodeTimestamp
   (
      this : in out MediaStreamSample;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSample.all.put_DecodeTimestamp (value);
   end;

   function get_DecodeTimestamp
   (
      this : in out MediaStreamSample
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaStreamSample.all.get_DecodeTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out MediaStreamSample;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSample.all.put_Duration (value);
   end;

   function get_Duration
   (
      this : in out MediaStreamSample
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaStreamSample.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_KeyFrame
   (
      this : in out MediaStreamSample;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSample.all.put_KeyFrame (value);
   end;

   function get_KeyFrame
   (
      this : in out MediaStreamSample
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaStreamSample.all.get_KeyFrame (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Discontinuous
   (
      this : in out MediaStreamSample;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSample.all.put_Discontinuous (value);
   end;

   function get_Discontinuous
   (
      this : in out MediaStreamSample
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaStreamSample.all.get_Discontinuous (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Direct3D11Surface
   (
      this : in out MediaStreamSample
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamSample2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamSample_Interface, WinRt.Windows.Media.Core.IMediaStreamSample2, WinRt.Windows.Media.Core.IID_IMediaStreamSample2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamSample.all);
      Hr := m_Interface.get_Direct3D11Surface (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSamplePropertySet

   procedure Initialize (this : in out MediaStreamSamplePropertySet) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSamplePropertySet) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSamplePropertySet

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.Guid,System.Object>
   function Lookup
   (
      this : in out MediaStreamSamplePropertySet;
      key : WinRt.Guid
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased IInspectable;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Lookup (key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out MediaStreamSamplePropertySet
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out MediaStreamSamplePropertySet;
      key : WinRt.Guid
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.HasKey (key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out MediaStreamSamplePropertySet
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out MediaStreamSamplePropertySet;
      key : WinRt.Guid;
      value : WinRt.IInspectable
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Insert (key, value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out MediaStreamSamplePropertySet;
      key : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Remove (key);
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out MediaStreamSamplePropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSampleProtectionProperties

   procedure Initialize (this : in out MediaStreamSampleProtectionProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSampleProtectionProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSampleProtectionProperties, IMediaStreamSampleProtectionProperties_Ptr);
   begin
      if this.m_IMediaStreamSampleProtectionProperties /= null then
         if this.m_IMediaStreamSampleProtectionProperties.all /= null then
            RefCount := this.m_IMediaStreamSampleProtectionProperties.all.Release;
            Free (this.m_IMediaStreamSampleProtectionProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSampleProtectionProperties

   procedure SetKeyIdentifier
   (
      this : in out MediaStreamSampleProtectionProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IMediaStreamSampleProtectionProperties.all.SetKeyIdentifier (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   procedure GetKeyIdentifier
   (
      this : in out MediaStreamSampleProtectionProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IMediaStreamSampleProtectionProperties.all.GetKeyIdentifier (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   procedure SetInitializationVector
   (
      this : in out MediaStreamSampleProtectionProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IMediaStreamSampleProtectionProperties.all.SetInitializationVector (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   procedure GetInitializationVector
   (
      this : in out MediaStreamSampleProtectionProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IMediaStreamSampleProtectionProperties.all.GetInitializationVector (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   procedure SetSubSampleMapping
   (
      this : in out MediaStreamSampleProtectionProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IMediaStreamSampleProtectionProperties.all.SetSubSampleMapping (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   procedure GetSubSampleMapping
   (
      this : in out MediaStreamSampleProtectionProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IMediaStreamSampleProtectionProperties.all.GetSubSampleMapping (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSource

   procedure Initialize (this : in out MediaStreamSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSource, IMediaStreamSource_Ptr);
   begin
      if this.m_IMediaStreamSource /= null then
         if this.m_IMediaStreamSource.all /= null then
            RefCount := this.m_IMediaStreamSource.all.Release;
            Free (this.m_IMediaStreamSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaStreamSource

   function Constructor
   (
      descriptor : Windows.Media.Core.IMediaStreamDescriptor
   )
   return MediaStreamSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.MediaStreamSource");
      m_Factory    : access IMediaStreamSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Core.IMediaStreamSource;
   begin
      return RetVal : MediaStreamSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaStreamSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDescriptor (descriptor, m_ComRetVal'Access);
            Retval.m_IMediaStreamSource := new Windows.Media.Core.IMediaStreamSource;
            Retval.m_IMediaStreamSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      descriptor : Windows.Media.Core.IMediaStreamDescriptor;
      descriptor2 : Windows.Media.Core.IMediaStreamDescriptor
   )
   return MediaStreamSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.MediaStreamSource");
      m_Factory    : access IMediaStreamSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Core.IMediaStreamSource;
   begin
      return RetVal : MediaStreamSource do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaStreamSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDescriptors (descriptor, descriptor2, m_ComRetVal'Access);
            Retval.m_IMediaStreamSource := new Windows.Media.Core.IMediaStreamSource;
            Retval.m_IMediaStreamSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSource

   function add_Closed
   (
      this : in out MediaStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaStreamSource.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out MediaStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.remove_Closed (token);
   end;

   function add_Starting
   (
      this : in out MediaStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaStreamSource.all.add_Starting (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Starting
   (
      this : in out MediaStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.remove_Starting (token);
   end;

   function add_Paused
   (
      this : in out MediaStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaStreamSource.all.add_Paused (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Paused
   (
      this : in out MediaStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.remove_Paused (token);
   end;

   function add_SampleRequested
   (
      this : in out MediaStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaStreamSource.all.add_SampleRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SampleRequested
   (
      this : in out MediaStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.remove_SampleRequested (token);
   end;

   function add_SwitchStreamsRequested
   (
      this : in out MediaStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaStreamSource.all.add_SwitchStreamsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SwitchStreamsRequested
   (
      this : in out MediaStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.remove_SwitchStreamsRequested (token);
   end;

   procedure NotifyError
   (
      this : in out MediaStreamSource;
      errorStatus : Windows.Media.Core.MediaStreamSourceErrorStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.NotifyError (errorStatus);
   end;

   procedure AddStreamDescriptor
   (
      this : in out MediaStreamSource;
      descriptor : Windows.Media.Core.IMediaStreamDescriptor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.AddStreamDescriptor (descriptor);
   end;

   procedure put_MediaProtectionManager
   (
      this : in out MediaStreamSource;
      value : Windows.Media.Protection.MediaProtectionManager'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.put_MediaProtectionManager (value.m_IMediaProtectionManager.all);
   end;

   function get_MediaProtectionManager
   (
      this : in out MediaStreamSource
   )
   return WinRt.Windows.Media.Protection.MediaProtectionManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.IMediaProtectionManager;
   begin
      return RetVal : WinRt.Windows.Media.Protection.MediaProtectionManager do
         Hr := this.m_IMediaStreamSource.all.get_MediaProtectionManager (m_ComRetVal'Access);
         Retval.m_IMediaProtectionManager := new Windows.Media.Protection.IMediaProtectionManager;
         Retval.m_IMediaProtectionManager.all := m_ComRetVal;
      end return;
   end;

   procedure put_Duration
   (
      this : in out MediaStreamSource;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.put_Duration (value);
   end;

   function get_Duration
   (
      this : in out MediaStreamSource
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaStreamSource.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CanSeek
   (
      this : in out MediaStreamSource;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.put_CanSeek (value);
   end;

   function get_CanSeek
   (
      this : in out MediaStreamSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaStreamSource.all.get_CanSeek (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BufferTime
   (
      this : in out MediaStreamSource;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.put_BufferTime (value);
   end;

   function get_BufferTime
   (
      this : in out MediaStreamSource
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaStreamSource.all.get_BufferTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetBufferedRange
   (
      this : in out MediaStreamSource;
      startOffset : Windows.Foundation.TimeSpan;
      endOffset : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.SetBufferedRange (startOffset, endOffset);
   end;

   function get_MusicProperties
   (
      this : in out MediaStreamSource
   )
   return WinRt.Windows.Storage.FileProperties.MusicProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IMusicProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.MusicProperties do
         Hr := this.m_IMediaStreamSource.all.get_MusicProperties (m_ComRetVal'Access);
         Retval.m_IMusicProperties := new Windows.Storage.FileProperties.IMusicProperties;
         Retval.m_IMusicProperties.all := m_ComRetVal;
      end return;
   end;

   function get_VideoProperties
   (
      this : in out MediaStreamSource
   )
   return WinRt.Windows.Storage.FileProperties.VideoProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IVideoProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.VideoProperties do
         Hr := this.m_IMediaStreamSource.all.get_VideoProperties (m_ComRetVal'Access);
         Retval.m_IVideoProperties := new Windows.Storage.FileProperties.IVideoProperties;
         Retval.m_IVideoProperties.all := m_ComRetVal;
      end return;
   end;

   procedure put_Thumbnail
   (
      this : in out MediaStreamSource;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSource.all.put_Thumbnail (value);
   end;

   function get_Thumbnail
   (
      this : in out MediaStreamSource
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IMediaStreamSource.all.get_Thumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AddProtectionKey
   (
      this : in out MediaStreamSource;
      streamDescriptor : Windows.Media.Core.IMediaStreamDescriptor;
      keyIdentifier : WinRt.Byte_Array;
      licenseData : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_keyIdentifier is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_licenseData is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IMediaStreamSource.all.AddProtectionKey (streamDescriptor, WinRt.UInt32(keyIdentifier'Length), Convert_keyIdentifier (keyIdentifier (keyIdentifier'First)'Address), WinRt.UInt32(licenseData'Length), Convert_licenseData (licenseData (licenseData'First)'Address));
   end;

   function add_SampleRendered
   (
      this : in out MediaStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamSource_Interface, WinRt.Windows.Media.Core.IMediaStreamSource2, WinRt.Windows.Media.Core.IID_IMediaStreamSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamSource.all);
      Hr := m_Interface.add_SampleRendered (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SampleRendered
   (
      this : in out MediaStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamSource_Interface, WinRt.Windows.Media.Core.IMediaStreamSource2, WinRt.Windows.Media.Core.IID_IMediaStreamSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamSource.all);
      Hr := m_Interface.remove_SampleRendered (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_MaxSupportedPlaybackRate
   (
      this : in out MediaStreamSource;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamSource_Interface, WinRt.Windows.Media.Core.IMediaStreamSource3, WinRt.Windows.Media.Core.IID_IMediaStreamSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamSource.all);
      Hr := m_Interface.put_MaxSupportedPlaybackRate (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MaxSupportedPlaybackRate
   (
      this : in out MediaStreamSource
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamSource3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamSource_Interface, WinRt.Windows.Media.Core.IMediaStreamSource3, WinRt.Windows.Media.Core.IID_IMediaStreamSource3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamSource.all);
      Hr := m_Interface.get_MaxSupportedPlaybackRate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsLive
   (
      this : in out MediaStreamSource;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamSource_Interface, WinRt.Windows.Media.Core.IMediaStreamSource4, WinRt.Windows.Media.Core.IID_IMediaStreamSource4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamSource.all);
      Hr := m_Interface.put_IsLive (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsLive
   (
      this : in out MediaStreamSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamSource4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamSource_Interface, WinRt.Windows.Media.Core.IMediaStreamSource4, WinRt.Windows.Media.Core.IID_IMediaStreamSource4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamSource.all);
      Hr := m_Interface.get_IsLive (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceClosedEventArgs

   procedure Initialize (this : in out MediaStreamSourceClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceClosedEventArgs, IMediaStreamSourceClosedEventArgs_Ptr);
   begin
      if this.m_IMediaStreamSourceClosedEventArgs /= null then
         if this.m_IMediaStreamSourceClosedEventArgs.all /= null then
            RefCount := this.m_IMediaStreamSourceClosedEventArgs.all.Release;
            Free (this.m_IMediaStreamSourceClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceClosedEventArgs

   function get_Request
   (
      this : in out MediaStreamSourceClosedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceClosedRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSourceClosedRequest;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSourceClosedRequest do
         Hr := this.m_IMediaStreamSourceClosedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IMediaStreamSourceClosedRequest := new Windows.Media.Core.IMediaStreamSourceClosedRequest;
         Retval.m_IMediaStreamSourceClosedRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceClosedRequest

   procedure Initialize (this : in out MediaStreamSourceClosedRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceClosedRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceClosedRequest, IMediaStreamSourceClosedRequest_Ptr);
   begin
      if this.m_IMediaStreamSourceClosedRequest /= null then
         if this.m_IMediaStreamSourceClosedRequest.all /= null then
            RefCount := this.m_IMediaStreamSourceClosedRequest.all.Release;
            Free (this.m_IMediaStreamSourceClosedRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceClosedRequest

   function get_Reason
   (
      this : in out MediaStreamSourceClosedRequest
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceClosedReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaStreamSourceClosedReason;
   begin
      Hr := this.m_IMediaStreamSourceClosedRequest.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceSampleRenderedEventArgs

   procedure Initialize (this : in out MediaStreamSourceSampleRenderedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceSampleRenderedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceSampleRenderedEventArgs, IMediaStreamSourceSampleRenderedEventArgs_Ptr);
   begin
      if this.m_IMediaStreamSourceSampleRenderedEventArgs /= null then
         if this.m_IMediaStreamSourceSampleRenderedEventArgs.all /= null then
            RefCount := this.m_IMediaStreamSourceSampleRenderedEventArgs.all.Release;
            Free (this.m_IMediaStreamSourceSampleRenderedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceSampleRenderedEventArgs

   function get_SampleLag
   (
      this : in out MediaStreamSourceSampleRenderedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaStreamSourceSampleRenderedEventArgs.all.get_SampleLag (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceSampleRequest

   procedure Initialize (this : in out MediaStreamSourceSampleRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceSampleRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceSampleRequest, IMediaStreamSourceSampleRequest_Ptr);
   begin
      if this.m_IMediaStreamSourceSampleRequest /= null then
         if this.m_IMediaStreamSourceSampleRequest.all /= null then
            RefCount := this.m_IMediaStreamSourceSampleRequest.all.Release;
            Free (this.m_IMediaStreamSourceSampleRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceSampleRequest

   function get_StreamDescriptor
   (
      this : in out MediaStreamSourceSampleRequest
   )
   return WinRt.Windows.Media.Core.IMediaStreamDescriptor is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamDescriptor;
   begin
      Hr := this.m_IMediaStreamSourceSampleRequest.all.get_StreamDescriptor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out MediaStreamSourceSampleRequest
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceSampleRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSourceSampleRequestDeferral do
         Hr := this.m_IMediaStreamSourceSampleRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IMediaStreamSourceSampleRequestDeferral := new Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral;
         Retval.m_IMediaStreamSourceSampleRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure put_Sample
   (
      this : in out MediaStreamSourceSampleRequest;
      value : Windows.Media.Core.MediaStreamSample'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSourceSampleRequest.all.put_Sample (value.m_IMediaStreamSample.all);
   end;

   function get_Sample
   (
      this : in out MediaStreamSourceSampleRequest
   )
   return WinRt.Windows.Media.Core.MediaStreamSample'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSample;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSample do
         Hr := this.m_IMediaStreamSourceSampleRequest.all.get_Sample (m_ComRetVal'Access);
         Retval.m_IMediaStreamSample := new Windows.Media.Core.IMediaStreamSample;
         Retval.m_IMediaStreamSample.all := m_ComRetVal;
      end return;
   end;

   procedure ReportSampleProgress
   (
      this : in out MediaStreamSourceSampleRequest;
      progress : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSourceSampleRequest.all.ReportSampleProgress (progress);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceSampleRequestDeferral

   procedure Initialize (this : in out MediaStreamSourceSampleRequestDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceSampleRequestDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceSampleRequestDeferral, IMediaStreamSourceSampleRequestDeferral_Ptr);
   begin
      if this.m_IMediaStreamSourceSampleRequestDeferral /= null then
         if this.m_IMediaStreamSourceSampleRequestDeferral.all /= null then
            RefCount := this.m_IMediaStreamSourceSampleRequestDeferral.all.Release;
            Free (this.m_IMediaStreamSourceSampleRequestDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceSampleRequestDeferral

   procedure Complete
   (
      this : in out MediaStreamSourceSampleRequestDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSourceSampleRequestDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceSampleRequestedEventArgs

   procedure Initialize (this : in out MediaStreamSourceSampleRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceSampleRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceSampleRequestedEventArgs, IMediaStreamSourceSampleRequestedEventArgs_Ptr);
   begin
      if this.m_IMediaStreamSourceSampleRequestedEventArgs /= null then
         if this.m_IMediaStreamSourceSampleRequestedEventArgs.all /= null then
            RefCount := this.m_IMediaStreamSourceSampleRequestedEventArgs.all.Release;
            Free (this.m_IMediaStreamSourceSampleRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceSampleRequestedEventArgs

   function get_Request
   (
      this : in out MediaStreamSourceSampleRequestedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceSampleRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSourceSampleRequest;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSourceSampleRequest do
         Hr := this.m_IMediaStreamSourceSampleRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IMediaStreamSourceSampleRequest := new Windows.Media.Core.IMediaStreamSourceSampleRequest;
         Retval.m_IMediaStreamSourceSampleRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceStartingEventArgs

   procedure Initialize (this : in out MediaStreamSourceStartingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceStartingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceStartingEventArgs, IMediaStreamSourceStartingEventArgs_Ptr);
   begin
      if this.m_IMediaStreamSourceStartingEventArgs /= null then
         if this.m_IMediaStreamSourceStartingEventArgs.all /= null then
            RefCount := this.m_IMediaStreamSourceStartingEventArgs.all.Release;
            Free (this.m_IMediaStreamSourceStartingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceStartingEventArgs

   function get_Request
   (
      this : in out MediaStreamSourceStartingEventArgs
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceStartingRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSourceStartingRequest;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSourceStartingRequest do
         Hr := this.m_IMediaStreamSourceStartingEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IMediaStreamSourceStartingRequest := new Windows.Media.Core.IMediaStreamSourceStartingRequest;
         Retval.m_IMediaStreamSourceStartingRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceStartingRequest

   procedure Initialize (this : in out MediaStreamSourceStartingRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceStartingRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceStartingRequest, IMediaStreamSourceStartingRequest_Ptr);
   begin
      if this.m_IMediaStreamSourceStartingRequest /= null then
         if this.m_IMediaStreamSourceStartingRequest.all /= null then
            RefCount := this.m_IMediaStreamSourceStartingRequest.all.Release;
            Free (this.m_IMediaStreamSourceStartingRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceStartingRequest

   function get_StartPosition
   (
      this : in out MediaStreamSourceStartingRequest
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMediaStreamSourceStartingRequest.all.get_StartPosition (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDeferral
   (
      this : in out MediaStreamSourceStartingRequest
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceStartingRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSourceStartingRequestDeferral do
         Hr := this.m_IMediaStreamSourceStartingRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IMediaStreamSourceStartingRequestDeferral := new Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral;
         Retval.m_IMediaStreamSourceStartingRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure SetActualStartPosition
   (
      this : in out MediaStreamSourceStartingRequest;
      position : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSourceStartingRequest.all.SetActualStartPosition (position);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceStartingRequestDeferral

   procedure Initialize (this : in out MediaStreamSourceStartingRequestDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceStartingRequestDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceStartingRequestDeferral, IMediaStreamSourceStartingRequestDeferral_Ptr);
   begin
      if this.m_IMediaStreamSourceStartingRequestDeferral /= null then
         if this.m_IMediaStreamSourceStartingRequestDeferral.all /= null then
            RefCount := this.m_IMediaStreamSourceStartingRequestDeferral.all.Release;
            Free (this.m_IMediaStreamSourceStartingRequestDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceStartingRequestDeferral

   procedure Complete
   (
      this : in out MediaStreamSourceStartingRequestDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSourceStartingRequestDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceSwitchStreamsRequest

   procedure Initialize (this : in out MediaStreamSourceSwitchStreamsRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceSwitchStreamsRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceSwitchStreamsRequest, IMediaStreamSourceSwitchStreamsRequest_Ptr);
   begin
      if this.m_IMediaStreamSourceSwitchStreamsRequest /= null then
         if this.m_IMediaStreamSourceSwitchStreamsRequest.all /= null then
            RefCount := this.m_IMediaStreamSourceSwitchStreamsRequest.all.Release;
            Free (this.m_IMediaStreamSourceSwitchStreamsRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceSwitchStreamsRequest

   function get_OldStreamDescriptor
   (
      this : in out MediaStreamSourceSwitchStreamsRequest
   )
   return WinRt.Windows.Media.Core.IMediaStreamDescriptor is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamDescriptor;
   begin
      Hr := this.m_IMediaStreamSourceSwitchStreamsRequest.all.get_OldStreamDescriptor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewStreamDescriptor
   (
      this : in out MediaStreamSourceSwitchStreamsRequest
   )
   return WinRt.Windows.Media.Core.IMediaStreamDescriptor is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamDescriptor;
   begin
      Hr := this.m_IMediaStreamSourceSwitchStreamsRequest.all.get_NewStreamDescriptor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out MediaStreamSourceSwitchStreamsRequest
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral do
         Hr := this.m_IMediaStreamSourceSwitchStreamsRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IMediaStreamSourceSwitchStreamsRequestDeferral := new Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral;
         Retval.m_IMediaStreamSourceSwitchStreamsRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceSwitchStreamsRequestDeferral

   procedure Initialize (this : in out MediaStreamSourceSwitchStreamsRequestDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceSwitchStreamsRequestDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceSwitchStreamsRequestDeferral, IMediaStreamSourceSwitchStreamsRequestDeferral_Ptr);
   begin
      if this.m_IMediaStreamSourceSwitchStreamsRequestDeferral /= null then
         if this.m_IMediaStreamSourceSwitchStreamsRequestDeferral.all /= null then
            RefCount := this.m_IMediaStreamSourceSwitchStreamsRequestDeferral.all.Release;
            Free (this.m_IMediaStreamSourceSwitchStreamsRequestDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceSwitchStreamsRequestDeferral

   procedure Complete
   (
      this : in out MediaStreamSourceSwitchStreamsRequestDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaStreamSourceSwitchStreamsRequestDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaStreamSourceSwitchStreamsRequestedEventArgs

   procedure Initialize (this : in out MediaStreamSourceSwitchStreamsRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaStreamSourceSwitchStreamsRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamSourceSwitchStreamsRequestedEventArgs, IMediaStreamSourceSwitchStreamsRequestedEventArgs_Ptr);
   begin
      if this.m_IMediaStreamSourceSwitchStreamsRequestedEventArgs /= null then
         if this.m_IMediaStreamSourceSwitchStreamsRequestedEventArgs.all /= null then
            RefCount := this.m_IMediaStreamSourceSwitchStreamsRequestedEventArgs.all.Release;
            Free (this.m_IMediaStreamSourceSwitchStreamsRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaStreamSourceSwitchStreamsRequestedEventArgs

   function get_Request
   (
      this : in out MediaStreamSourceSwitchStreamsRequestedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest do
         Hr := this.m_IMediaStreamSourceSwitchStreamsRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IMediaStreamSourceSwitchStreamsRequest := new Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest;
         Retval.m_IMediaStreamSourceSwitchStreamsRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MseSourceBuffer

   procedure Initialize (this : in out MseSourceBuffer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MseSourceBuffer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMseSourceBuffer, IMseSourceBuffer_Ptr);
   begin
      if this.m_IMseSourceBuffer /= null then
         if this.m_IMseSourceBuffer.all /= null then
            RefCount := this.m_IMseSourceBuffer.all.Release;
            Free (this.m_IMseSourceBuffer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MseSourceBuffer

   function add_UpdateStarting
   (
      this : in out MseSourceBuffer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseSourceBuffer.all.add_UpdateStarting (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UpdateStarting
   (
      this : in out MseSourceBuffer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.remove_UpdateStarting (token);
   end;

   function add_Updated
   (
      this : in out MseSourceBuffer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseSourceBuffer.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out MseSourceBuffer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.remove_Updated (token);
   end;

   function add_UpdateEnded
   (
      this : in out MseSourceBuffer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseSourceBuffer.all.add_UpdateEnded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UpdateEnded
   (
      this : in out MseSourceBuffer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.remove_UpdateEnded (token);
   end;

   function add_ErrorOccurred
   (
      this : in out MseSourceBuffer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseSourceBuffer.all.add_ErrorOccurred (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ErrorOccurred
   (
      this : in out MseSourceBuffer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.remove_ErrorOccurred (token);
   end;

   function add_Aborted
   (
      this : in out MseSourceBuffer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseSourceBuffer.all.add_Aborted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Aborted
   (
      this : in out MseSourceBuffer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.remove_Aborted (token);
   end;

   function get_Mode
   (
      this : in out MseSourceBuffer
   )
   return WinRt.Windows.Media.Core.MseAppendMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MseAppendMode;
   begin
      Hr := this.m_IMseSourceBuffer.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out MseSourceBuffer;
      value : Windows.Media.Core.MseAppendMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.put_Mode (value);
   end;

   function get_IsUpdating
   (
      this : in out MseSourceBuffer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMseSourceBuffer.all.get_IsUpdating (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Buffered
   (
      this : in out MseSourceBuffer
   )
   return IVectorView_MseTimeRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_MseTimeRange.Kind;
   begin
      Hr := this.m_IMseSourceBuffer.all.get_Buffered (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_MseTimeRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TimestampOffset
   (
      this : in out MseSourceBuffer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMseSourceBuffer.all.get_TimestampOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TimestampOffset
   (
      this : in out MseSourceBuffer;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.put_TimestampOffset (value);
   end;

   function get_AppendWindowStart
   (
      this : in out MseSourceBuffer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMseSourceBuffer.all.get_AppendWindowStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AppendWindowStart
   (
      this : in out MseSourceBuffer;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.put_AppendWindowStart (value);
   end;

   function get_AppendWindowEnd
   (
      this : in out MseSourceBuffer
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMseSourceBuffer.all.get_AppendWindowEnd (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_AppendWindowEnd
   (
      this : in out MseSourceBuffer;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.put_AppendWindowEnd (value);
   end;

   procedure AppendBuffer
   (
      this : in out MseSourceBuffer;
      buffer : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.AppendBuffer (buffer);
   end;

   procedure AppendStream
   (
      this : in out MseSourceBuffer;
      stream : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.AppendStream (stream);
   end;

   procedure AppendStream
   (
      this : in out MseSourceBuffer;
      stream : Windows.Storage.Streams.IInputStream;
      maxSize : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.AppendStream (stream, maxSize);
   end;

   procedure Abort_x
   (
      this : in out MseSourceBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.Abort_x;
   end;

   procedure Remove
   (
      this : in out MseSourceBuffer;
      start : Windows.Foundation.TimeSpan;
      end_x : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBuffer.all.Remove (start, end_x);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MseSourceBufferList

   procedure Initialize (this : in out MseSourceBufferList) is
   begin
      null;
   end;

   procedure Finalize (this : in out MseSourceBufferList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMseSourceBufferList, IMseSourceBufferList_Ptr);
   begin
      if this.m_IMseSourceBufferList /= null then
         if this.m_IMseSourceBufferList.all /= null then
            RefCount := this.m_IMseSourceBufferList.all.Release;
            Free (this.m_IMseSourceBufferList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MseSourceBufferList

   function add_SourceBufferAdded
   (
      this : in out MseSourceBufferList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseSourceBufferList.all.add_SourceBufferAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceBufferAdded
   (
      this : in out MseSourceBufferList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBufferList.all.remove_SourceBufferAdded (token);
   end;

   function add_SourceBufferRemoved
   (
      this : in out MseSourceBufferList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseSourceBufferList.all.add_SourceBufferRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceBufferRemoved
   (
      this : in out MseSourceBufferList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseSourceBufferList.all.remove_SourceBufferRemoved (token);
   end;

   function get_Buffers
   (
      this : in out MseSourceBufferList
   )
   return IVectorView_IMseSourceBuffer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMseSourceBuffer.Kind;
   begin
      Hr := this.m_IMseSourceBufferList.all.get_Buffers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMseSourceBuffer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MseStreamSource

   procedure Initialize (this : in out MseStreamSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out MseStreamSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMseStreamSource, IMseStreamSource_Ptr);
   begin
      if this.m_IMseStreamSource /= null then
         if this.m_IMseStreamSource.all /= null then
            RefCount := this.m_IMseStreamSource.all.Release;
            Free (this.m_IMseStreamSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MseStreamSource

   function Constructor return MseStreamSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.MseStreamSource");
      m_ComRetVal  : aliased Windows.Media.Core.IMseStreamSource;
   begin
      return RetVal : MseStreamSource do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMseStreamSource := new Windows.Media.Core.IMseStreamSource;
            Retval.m_IMseStreamSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MseStreamSource

   function IsContentTypeSupported
   (
      contentType : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.MseStreamSource");
      m_Factory        : access WinRt.Windows.Media.Core.IMseStreamSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_contentType : WinRt.HString := To_HString (contentType);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMseStreamSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsContentTypeSupported (HStr_contentType, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_contentType);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MseStreamSource

   function add_Opened
   (
      this : in out MseStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseStreamSource.all.add_Opened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Opened
   (
      this : in out MseStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseStreamSource.all.remove_Opened (token);
   end;

   function add_Ended
   (
      this : in out MseStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseStreamSource.all.add_Ended (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Ended
   (
      this : in out MseStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseStreamSource.all.remove_Ended (token);
   end;

   function add_Closed
   (
      this : in out MseStreamSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMseStreamSource.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out MseStreamSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseStreamSource.all.remove_Closed (token);
   end;

   function get_SourceBuffers
   (
      this : in out MseStreamSource
   )
   return WinRt.Windows.Media.Core.MseSourceBufferList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMseSourceBufferList;
   begin
      return RetVal : WinRt.Windows.Media.Core.MseSourceBufferList do
         Hr := this.m_IMseStreamSource.all.get_SourceBuffers (m_ComRetVal'Access);
         Retval.m_IMseSourceBufferList := new Windows.Media.Core.IMseSourceBufferList;
         Retval.m_IMseSourceBufferList.all := m_ComRetVal;
      end return;
   end;

   function get_ActiveSourceBuffers
   (
      this : in out MseStreamSource
   )
   return WinRt.Windows.Media.Core.MseSourceBufferList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMseSourceBufferList;
   begin
      return RetVal : WinRt.Windows.Media.Core.MseSourceBufferList do
         Hr := this.m_IMseStreamSource.all.get_ActiveSourceBuffers (m_ComRetVal'Access);
         Retval.m_IMseSourceBufferList := new Windows.Media.Core.IMseSourceBufferList;
         Retval.m_IMseSourceBufferList.all := m_ComRetVal;
      end return;
   end;

   function get_ReadyState
   (
      this : in out MseStreamSource
   )
   return WinRt.Windows.Media.Core.MseReadyState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MseReadyState;
   begin
      Hr := this.m_IMseStreamSource.all.get_ReadyState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out MseStreamSource
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMseStreamSource.all.get_Duration (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Duration
   (
      this : in out MseStreamSource;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseStreamSource.all.put_Duration (value);
   end;

   function AddSourceBuffer
   (
      this : in out MseStreamSource;
      mimeType : WinRt.WString
   )
   return WinRt.Windows.Media.Core.MseSourceBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMseSourceBuffer;
      HStr_mimeType : WinRt.HString := To_HString (mimeType);
   begin
      return RetVal : WinRt.Windows.Media.Core.MseSourceBuffer do
         Hr := this.m_IMseStreamSource.all.AddSourceBuffer (HStr_mimeType, m_ComRetVal'Access);
         Retval.m_IMseSourceBuffer := new Windows.Media.Core.IMseSourceBuffer;
         Retval.m_IMseSourceBuffer.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_mimeType);
      end return;
   end;

   procedure RemoveSourceBuffer
   (
      this : in out MseStreamSource;
      buffer : Windows.Media.Core.MseSourceBuffer'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseStreamSource.all.RemoveSourceBuffer (buffer.m_IMseSourceBuffer.all);
   end;

   procedure EndOfStream
   (
      this : in out MseStreamSource;
      status : Windows.Media.Core.MseEndOfStreamStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMseStreamSource.all.EndOfStream (status);
   end;

   function get_LiveSeekableRange
   (
      this : in out MseStreamSource
   )
   return IReference_MseTimeRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMseStreamSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_MseTimeRange.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMseStreamSource_Interface, WinRt.Windows.Media.Core.IMseStreamSource2, WinRt.Windows.Media.Core.IID_IMseStreamSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMseStreamSource.all);
      Hr := m_Interface.get_LiveSeekableRange (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_MseTimeRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_LiveSeekableRange
   (
      this : in out MseStreamSource;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMseStreamSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMseStreamSource_Interface, WinRt.Windows.Media.Core.IMseStreamSource2, WinRt.Windows.Media.Core.IID_IMseStreamSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMseStreamSource.all);
      Hr := m_Interface.put_LiveSeekableRange (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SceneAnalysisEffect

   procedure Initialize (this : in out SceneAnalysisEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out SceneAnalysisEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISceneAnalysisEffect, ISceneAnalysisEffect_Ptr);
   begin
      if this.m_ISceneAnalysisEffect /= null then
         if this.m_ISceneAnalysisEffect.all /= null then
            RefCount := this.m_ISceneAnalysisEffect.all.Release;
            Free (this.m_ISceneAnalysisEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SceneAnalysisEffect

   function get_HighDynamicRangeAnalyzer
   (
      this : in out SceneAnalysisEffect
   )
   return WinRt.Windows.Media.Core.HighDynamicRangeControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IHighDynamicRangeControl;
   begin
      return RetVal : WinRt.Windows.Media.Core.HighDynamicRangeControl do
         Hr := this.m_ISceneAnalysisEffect.all.get_HighDynamicRangeAnalyzer (m_ComRetVal'Access);
         Retval.m_IHighDynamicRangeControl := new Windows.Media.Core.IHighDynamicRangeControl;
         Retval.m_IHighDynamicRangeControl.all := m_ComRetVal;
      end return;
   end;

   procedure put_DesiredAnalysisInterval
   (
      this : in out SceneAnalysisEffect;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISceneAnalysisEffect.all.put_DesiredAnalysisInterval (value);
   end;

   function get_DesiredAnalysisInterval
   (
      this : in out SceneAnalysisEffect
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISceneAnalysisEffect.all.get_DesiredAnalysisInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SceneAnalyzed
   (
      this : in out SceneAnalysisEffect;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISceneAnalysisEffect.all.add_SceneAnalyzed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SceneAnalyzed
   (
      this : in out SceneAnalysisEffect;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISceneAnalysisEffect.all.remove_SceneAnalyzed (cookie);
   end;

   procedure SetProperties
   (
      this : in out SceneAnalysisEffect;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaExtension := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffect_Interface, WinRt.Windows.Media.IMediaExtension, WinRt.Windows.Media.IID_IMediaExtension'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffect.all);
      Hr := m_Interface.SetProperties (configuration);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SceneAnalysisEffectDefinition

   procedure Initialize (this : in out SceneAnalysisEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out SceneAnalysisEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Media.Effects.IVideoEffectDefinition;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Media.Effects.IVideoEffectDefinition, WinRt.Windows.Media.Effects.IVideoEffectDefinition_Ptr);
   begin
      if this.m_IVideoEffectDefinition /= null then
         if this.m_IVideoEffectDefinition.all /= null then
            RefCount := this.m_IVideoEffectDefinition.all.Release;
            Free (this.m_IVideoEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SceneAnalysisEffectDefinition

   function Constructor return SceneAnalysisEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.SceneAnalysisEffectDefinition");
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoEffectDefinition;
   begin
      return RetVal : SceneAnalysisEffectDefinition do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVideoEffectDefinition := new Windows.Media.Effects.IVideoEffectDefinition;
            Retval.m_IVideoEffectDefinition.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SceneAnalysisEffectDefinition

   function get_ActivatableClassId
   (
      this : in out SceneAnalysisEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_ActivatableClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out SceneAnalysisEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SceneAnalysisEffectFrame

   procedure Initialize (this : in out SceneAnalysisEffectFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out SceneAnalysisEffectFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISceneAnalysisEffectFrame, ISceneAnalysisEffectFrame_Ptr);
   begin
      if this.m_ISceneAnalysisEffectFrame /= null then
         if this.m_ISceneAnalysisEffectFrame.all /= null then
            RefCount := this.m_ISceneAnalysisEffectFrame.all.Release;
            Free (this.m_ISceneAnalysisEffectFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SceneAnalysisEffectFrame

   function get_FrameControlValues
   (
      this : in out SceneAnalysisEffectFrame
   )
   return WinRt.Windows.Media.Capture.CapturedFrameControlValues'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrameControlValues;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrameControlValues do
         Hr := this.m_ISceneAnalysisEffectFrame.all.get_FrameControlValues (m_ComRetVal'Access);
         Retval.m_ICapturedFrameControlValues := new Windows.Media.Capture.ICapturedFrameControlValues;
         Retval.m_ICapturedFrameControlValues.all := m_ComRetVal;
      end return;
   end;

   function get_HighDynamicRange
   (
      this : in out SceneAnalysisEffectFrame
   )
   return WinRt.Windows.Media.Core.HighDynamicRangeOutput'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IHighDynamicRangeOutput;
   begin
      return RetVal : WinRt.Windows.Media.Core.HighDynamicRangeOutput do
         Hr := this.m_ISceneAnalysisEffectFrame.all.get_HighDynamicRange (m_ComRetVal'Access);
         Retval.m_IHighDynamicRangeOutput := new Windows.Media.Core.IHighDynamicRangeOutput;
         Retval.m_IHighDynamicRangeOutput.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out SceneAnalysisEffectFrame
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsReadOnly
   (
      this : in out SceneAnalysisEffectFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_IsReadOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RelativeTime
   (
      this : in out SceneAnalysisEffectFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.put_RelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RelativeTime
   (
      this : in out SceneAnalysisEffectFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_RelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SystemRelativeTime
   (
      this : in out SceneAnalysisEffectFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.put_SystemRelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SystemRelativeTime
   (
      this : in out SceneAnalysisEffectFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_SystemRelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Duration
   (
      this : in out SceneAnalysisEffectFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out SceneAnalysisEffectFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsDiscontinuous
   (
      this : in out SceneAnalysisEffectFrame;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.put_IsDiscontinuous (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDiscontinuous
   (
      this : in out SceneAnalysisEffectFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_IsDiscontinuous (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ExtendedProperties
   (
      this : in out SceneAnalysisEffectFrame
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_ExtendedProperties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out SceneAnalysisEffectFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_AnalysisRecommendation
   (
      this : in out SceneAnalysisEffectFrame
   )
   return WinRt.Windows.Media.Core.SceneAnalysisRecommendation is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.SceneAnalysisRecommendation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame_Interface, WinRt.Windows.Media.Core.ISceneAnalysisEffectFrame2, WinRt.Windows.Media.Core.IID_ISceneAnalysisEffectFrame2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISceneAnalysisEffectFrame.all);
      Hr := m_Interface.get_AnalysisRecommendation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SceneAnalyzedEventArgs

   procedure Initialize (this : in out SceneAnalyzedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SceneAnalyzedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISceneAnalyzedEventArgs, ISceneAnalyzedEventArgs_Ptr);
   begin
      if this.m_ISceneAnalyzedEventArgs /= null then
         if this.m_ISceneAnalyzedEventArgs.all /= null then
            RefCount := this.m_ISceneAnalyzedEventArgs.all.Release;
            Free (this.m_ISceneAnalyzedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SceneAnalyzedEventArgs

   function get_ResultFrame
   (
      this : in out SceneAnalyzedEventArgs
   )
   return WinRt.Windows.Media.Core.SceneAnalysisEffectFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ISceneAnalysisEffectFrame;
   begin
      return RetVal : WinRt.Windows.Media.Core.SceneAnalysisEffectFrame do
         Hr := this.m_ISceneAnalyzedEventArgs.all.get_ResultFrame (m_ComRetVal'Access);
         Retval.m_ISceneAnalysisEffectFrame := new Windows.Media.Core.ISceneAnalysisEffectFrame;
         Retval.m_ISceneAnalysisEffectFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechCue

   procedure Initialize (this : in out SpeechCue) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechCue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechCue, ISpeechCue_Ptr);
   begin
      if this.m_ISpeechCue /= null then
         if this.m_ISpeechCue.all /= null then
            RefCount := this.m_ISpeechCue.all.Release;
            Free (this.m_ISpeechCue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpeechCue

   function Constructor return SpeechCue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.SpeechCue");
      m_ComRetVal  : aliased Windows.Media.Core.ISpeechCue;
   begin
      return RetVal : SpeechCue do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISpeechCue := new Windows.Media.Core.ISpeechCue;
            Retval.m_ISpeechCue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechCue

   function get_Text
   (
      this : in out SpeechCue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeechCue.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out SpeechCue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISpeechCue.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_StartPositionInInput
   (
      this : in out SpeechCue
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_ISpeechCue.all.get_StartPositionInInput (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_StartPositionInInput
   (
      this : in out SpeechCue;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechCue.all.put_StartPositionInInput (value);
   end;

   function get_EndPositionInInput
   (
      this : in out SpeechCue
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_ISpeechCue.all.get_EndPositionInInput (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_EndPositionInInput
   (
      this : in out SpeechCue;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechCue.all.put_EndPositionInInput (value);
   end;

   procedure put_StartTime
   (
      this : in out SpeechCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISpeechCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechCue.all);
      Hr := m_Interface.put_StartTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StartTime
   (
      this : in out SpeechCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISpeechCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechCue.all);
      Hr := m_Interface.get_StartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out SpeechCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISpeechCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechCue.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out SpeechCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISpeechCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechCue.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out SpeechCue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISpeechCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechCue.all);
      Hr := m_Interface.put_Id (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out SpeechCue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ISpeechCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechCue.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedMetadataStreamDescriptor

   procedure Initialize (this : in out TimedMetadataStreamDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedMetadataStreamDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaStreamDescriptor, IMediaStreamDescriptor_Ptr);
   begin
      if this.m_IMediaStreamDescriptor /= null then
         if this.m_IMediaStreamDescriptor.all /= null then
            RefCount := this.m_IMediaStreamDescriptor.all.Release;
            Free (this.m_IMediaStreamDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedMetadataStreamDescriptor

   function Constructor
   (
      encodingProperties : Windows.Media.MediaProperties.TimedMetadataEncodingProperties'Class
   )
   return TimedMetadataStreamDescriptor is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.TimedMetadataStreamDescriptor");
      m_Factory    : access ITimedMetadataStreamDescriptorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Core.IMediaStreamDescriptor;
   begin
      return RetVal : TimedMetadataStreamDescriptor do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedMetadataStreamDescriptorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (encodingProperties.m_IMediaEncodingProperties.all, m_ComRetVal'Access);
            Retval.m_IMediaStreamDescriptor := new Windows.Media.Core.IMediaStreamDescriptor;
            Retval.m_IMediaStreamDescriptor.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedMetadataStreamDescriptor

   function get_EncodingProperties
   (
      this : in out TimedMetadataStreamDescriptor
   )
   return WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedMetadataStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamDescriptor_Interface, WinRt.Windows.Media.Core.ITimedMetadataStreamDescriptor, WinRt.Windows.Media.Core.IID_ITimedMetadataStreamDescriptor'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties do
         m_Interface := QInterface (this.m_IMediaStreamDescriptor.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaEncodingProperties := new Windows.Media.MediaProperties.IMediaEncodingProperties;
         Retval.m_IMediaEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function Copy
   (
      this : in out TimedMetadataStreamDescriptor
   )
   return WinRt.Windows.Media.Core.TimedMetadataStreamDescriptor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedMetadataStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamDescriptor;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamDescriptor_Interface, WinRt.Windows.Media.Core.ITimedMetadataStreamDescriptor, WinRt.Windows.Media.Core.IID_ITimedMetadataStreamDescriptor'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedMetadataStreamDescriptor do
         m_Interface := QInterface (this.m_IMediaStreamDescriptor.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaStreamDescriptor := new Windows.Media.Core.IMediaStreamDescriptor;
         Retval.m_IMediaStreamDescriptor.all := m_ComRetVal;
      end return;
   end;

   procedure put_Label
   (
      this : in out TimedMetadataStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor2, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamDescriptor.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out TimedMetadataStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor2, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaStreamDescriptor.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsSelected
   (
      this : in out TimedMetadataStreamDescriptor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaStreamDescriptor.all.get_IsSelected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Name
   (
      this : in out TimedMetadataStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaStreamDescriptor.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Name
   (
      this : in out TimedMetadataStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaStreamDescriptor.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out TimedMetadataStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaStreamDescriptor.all.put_Language (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out TimedMetadataStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaStreamDescriptor.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedMetadataTrack

   procedure Initialize (this : in out TimedMetadataTrack) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedMetadataTrack) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedMetadataTrack, ITimedMetadataTrack_Ptr);
   begin
      if this.m_ITimedMetadataTrack /= null then
         if this.m_ITimedMetadataTrack.all /= null then
            RefCount := this.m_ITimedMetadataTrack.all.Release;
            Free (this.m_ITimedMetadataTrack);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedMetadataTrack

   function Constructor
   (
      id : WinRt.WString;
      language : WinRt.WString;
      kind : Windows.Media.Core.TimedMetadataKind
   )
   return TimedMetadataTrack is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.TimedMetadataTrack");
      m_Factory    : access ITimedMetadataTrackFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Core.ITimedMetadataTrack;
      HStr_id : WinRt.HString := To_HString (id);
      HStr_language : WinRt.HString := To_HString (language);
   begin
      return RetVal : TimedMetadataTrack do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedMetadataTrackFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_id, HStr_language, kind, m_ComRetVal'Access);
            Retval.m_ITimedMetadataTrack := new Windows.Media.Core.ITimedMetadataTrack;
            Retval.m_ITimedMetadataTrack.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
         Hr := WindowsDeleteString (HStr_language);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedMetadataTrack

   function add_CueEntered
   (
      this : in out TimedMetadataTrack;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ITimedMetadataTrack.all.add_CueEntered (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CueEntered
   (
      this : in out TimedMetadataTrack;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedMetadataTrack.all.remove_CueEntered (token);
   end;

   function add_CueExited
   (
      this : in out TimedMetadataTrack;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ITimedMetadataTrack.all.add_CueExited (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CueExited
   (
      this : in out TimedMetadataTrack;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedMetadataTrack.all.remove_CueExited (token);
   end;

   function add_TrackFailed
   (
      this : in out TimedMetadataTrack;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ITimedMetadataTrack.all.add_TrackFailed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TrackFailed
   (
      this : in out TimedMetadataTrack;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedMetadataTrack.all.remove_TrackFailed (token);
   end;

   function get_Cues
   (
      this : in out TimedMetadataTrack
   )
   return IVectorView_IMediaCue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCue.Kind;
   begin
      Hr := this.m_ITimedMetadataTrack.all.get_Cues (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaCue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ActiveCues
   (
      this : in out TimedMetadataTrack
   )
   return IVectorView_IMediaCue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCue.Kind;
   begin
      Hr := this.m_ITimedMetadataTrack.all.get_ActiveCues (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaCue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TimedMetadataKind
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.Windows.Media.Core.TimedMetadataKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedMetadataKind;
   begin
      Hr := this.m_ITimedMetadataTrack.all.get_TimedMetadataKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DispatchType
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITimedMetadataTrack.all.get_DispatchType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AddCue
   (
      this : in out TimedMetadataTrack;
      cue : Windows.Media.Core.IMediaCue
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedMetadataTrack.all.AddCue (cue);
   end;

   procedure RemoveCue
   (
      this : in out TimedMetadataTrack;
      cue : Windows.Media.Core.IMediaCue
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedMetadataTrack.all.RemoveCue (cue);
   end;

   function get_Id
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedMetadataTrack_Interface, WinRt.Windows.Media.Core.IMediaTrack, WinRt.Windows.Media.Core.IID_IMediaTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedMetadataTrack.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedMetadataTrack_Interface, WinRt.Windows.Media.Core.IMediaTrack, WinRt.Windows.Media.Core.IID_IMediaTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedMetadataTrack.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TrackKind
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.Windows.Media.Core.MediaTrackKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaTrackKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedMetadataTrack_Interface, WinRt.Windows.Media.Core.IMediaTrack, WinRt.Windows.Media.Core.IID_IMediaTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedMetadataTrack.all);
      Hr := m_Interface.get_TrackKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Label
   (
      this : in out TimedMetadataTrack;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedMetadataTrack_Interface, WinRt.Windows.Media.Core.IMediaTrack, WinRt.Windows.Media.Core.IID_IMediaTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedMetadataTrack.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedMetadataTrack_Interface, WinRt.Windows.Media.Core.IMediaTrack, WinRt.Windows.Media.Core.IID_IMediaTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedMetadataTrack.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PlaybackItem
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedMetadataTrack2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedMetadataTrack_Interface, WinRt.Windows.Media.Core.ITimedMetadataTrack2, WinRt.Windows.Media.Core.IID_ITimedMetadataTrack2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         m_Interface := QInterface (this.m_ITimedMetadataTrack.all);
         Hr := m_Interface.get_PlaybackItem (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_Name
   (
      this : in out TimedMetadataTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedMetadataTrack2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedMetadataTrack_Interface, WinRt.Windows.Media.Core.ITimedMetadataTrack2, WinRt.Windows.Media.Core.IID_ITimedMetadataTrack2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedMetadataTrack.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedMetadataTrackError

   procedure Initialize (this : in out TimedMetadataTrackError) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedMetadataTrackError) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedMetadataTrackError, ITimedMetadataTrackError_Ptr);
   begin
      if this.m_ITimedMetadataTrackError /= null then
         if this.m_ITimedMetadataTrackError.all /= null then
            RefCount := this.m_ITimedMetadataTrackError.all.Release;
            Free (this.m_ITimedMetadataTrackError);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedMetadataTrackError

   function get_ErrorCode
   (
      this : in out TimedMetadataTrackError
   )
   return WinRt.Windows.Media.Core.TimedMetadataTrackErrorCode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedMetadataTrackErrorCode;
   begin
      Hr := this.m_ITimedMetadataTrackError.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out TimedMetadataTrackError
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_ITimedMetadataTrackError.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedMetadataTrackFailedEventArgs

   procedure Initialize (this : in out TimedMetadataTrackFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedMetadataTrackFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedMetadataTrackFailedEventArgs, ITimedMetadataTrackFailedEventArgs_Ptr);
   begin
      if this.m_ITimedMetadataTrackFailedEventArgs /= null then
         if this.m_ITimedMetadataTrackFailedEventArgs.all /= null then
            RefCount := this.m_ITimedMetadataTrackFailedEventArgs.all.Release;
            Free (this.m_ITimedMetadataTrackFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedMetadataTrackFailedEventArgs

   function get_Error
   (
      this : in out TimedMetadataTrackFailedEventArgs
   )
   return WinRt.Windows.Media.Core.TimedMetadataTrackError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedMetadataTrackError;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedMetadataTrackError do
         Hr := this.m_ITimedMetadataTrackFailedEventArgs.all.get_Error (m_ComRetVal'Access);
         Retval.m_ITimedMetadataTrackError := new Windows.Media.Core.ITimedMetadataTrackError;
         Retval.m_ITimedMetadataTrackError.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedTextCue

   procedure Initialize (this : in out TimedTextCue) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedTextCue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedTextCue, ITimedTextCue_Ptr);
   begin
      if this.m_ITimedTextCue /= null then
         if this.m_ITimedTextCue.all /= null then
            RefCount := this.m_ITimedTextCue.all.Release;
            Free (this.m_ITimedTextCue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedTextCue

   function Constructor return TimedTextCue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextCue");
      m_ComRetVal  : aliased Windows.Media.Core.ITimedTextCue;
   begin
      return RetVal : TimedTextCue do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITimedTextCue := new Windows.Media.Core.ITimedTextCue;
            Retval.m_ITimedTextCue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedTextCue

   function get_CueRegion
   (
      this : in out TimedTextCue
   )
   return WinRt.Windows.Media.Core.TimedTextRegion'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextRegion;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextRegion do
         Hr := this.m_ITimedTextCue.all.get_CueRegion (m_ComRetVal'Access);
         Retval.m_ITimedTextRegion := new Windows.Media.Core.ITimedTextRegion;
         Retval.m_ITimedTextRegion.all := m_ComRetVal;
      end return;
   end;

   procedure put_CueRegion
   (
      this : in out TimedTextCue;
      value : Windows.Media.Core.TimedTextRegion'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextCue.all.put_CueRegion (value.m_ITimedTextRegion.all);
   end;

   function get_CueStyle
   (
      this : in out TimedTextCue
   )
   return WinRt.Windows.Media.Core.TimedTextStyle'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextStyle;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextStyle do
         Hr := this.m_ITimedTextCue.all.get_CueStyle (m_ComRetVal'Access);
         Retval.m_ITimedTextStyle := new Windows.Media.Core.ITimedTextStyle;
         Retval.m_ITimedTextStyle.all := m_ComRetVal;
      end return;
   end;

   procedure put_CueStyle
   (
      this : in out TimedTextCue;
      value : Windows.Media.Core.TimedTextStyle'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextCue.all.put_CueStyle (value.m_ITimedTextStyle.all);
   end;

   function get_Lines
   (
      this : in out TimedTextCue
   )
   return IVector_ITimedTextLine.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ITimedTextLine.Kind;
   begin
      Hr := this.m_ITimedTextCue.all.get_Lines (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ITimedTextLine (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_StartTime
   (
      this : in out TimedTextCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextCue.all);
      Hr := m_Interface.put_StartTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StartTime
   (
      this : in out TimedTextCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextCue.all);
      Hr := m_Interface.get_StartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out TimedTextCue;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextCue.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out TimedTextCue
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextCue.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out TimedTextCue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextCue.all);
      Hr := m_Interface.put_Id (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out TimedTextCue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaCue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextCue_Interface, WinRt.Windows.Media.Core.IMediaCue, WinRt.Windows.Media.Core.IID_IMediaCue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextCue.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedTextLine

   procedure Initialize (this : in out TimedTextLine) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedTextLine) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedTextLine, ITimedTextLine_Ptr);
   begin
      if this.m_ITimedTextLine /= null then
         if this.m_ITimedTextLine.all /= null then
            RefCount := this.m_ITimedTextLine.all.Release;
            Free (this.m_ITimedTextLine);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedTextLine

   function Constructor return TimedTextLine is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextLine");
      m_ComRetVal  : aliased Windows.Media.Core.ITimedTextLine;
   begin
      return RetVal : TimedTextLine do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITimedTextLine := new Windows.Media.Core.ITimedTextLine;
            Retval.m_ITimedTextLine.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedTextLine

   function get_Text
   (
      this : in out TimedTextLine
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITimedTextLine.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out TimedTextLine;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITimedTextLine.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subformats
   (
      this : in out TimedTextLine
   )
   return IVector_ITimedTextSubformat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ITimedTextSubformat.Kind;
   begin
      Hr := this.m_ITimedTextLine.all.get_Subformats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ITimedTextSubformat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedTextRegion

   procedure Initialize (this : in out TimedTextRegion) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedTextRegion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedTextRegion, ITimedTextRegion_Ptr);
   begin
      if this.m_ITimedTextRegion /= null then
         if this.m_ITimedTextRegion.all /= null then
            RefCount := this.m_ITimedTextRegion.all.Release;
            Free (this.m_ITimedTextRegion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedTextRegion

   function Constructor return TimedTextRegion is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextRegion");
      m_ComRetVal  : aliased Windows.Media.Core.ITimedTextRegion;
   begin
      return RetVal : TimedTextRegion do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITimedTextRegion := new Windows.Media.Core.ITimedTextRegion;
            Retval.m_ITimedTextRegion.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedTextRegion

   function get_Name
   (
      this : in out TimedTextRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITimedTextRegion.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out TimedTextRegion;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITimedTextRegion.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Position
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextPoint is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextPoint;
   begin
      Hr := this.m_ITimedTextRegion.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextPoint
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_Position (value);
   end;

   function get_Extent
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextSize;
   begin
      Hr := this.m_ITimedTextRegion.all.get_Extent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Extent
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_Extent (value);
   end;

   function get_Background
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ITimedTextRegion.all.get_Background (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Background
   (
      this : in out TimedTextRegion;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_Background (value);
   end;

   function get_WritingMode
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextWritingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextWritingMode;
   begin
      Hr := this.m_ITimedTextRegion.all.get_WritingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_WritingMode
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextWritingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_WritingMode (value);
   end;

   function get_DisplayAlignment
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextDisplayAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextDisplayAlignment;
   begin
      Hr := this.m_ITimedTextRegion.all.get_DisplayAlignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisplayAlignment
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextDisplayAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_DisplayAlignment (value);
   end;

   function get_LineHeight
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextDouble is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextDouble;
   begin
      Hr := this.m_ITimedTextRegion.all.get_LineHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LineHeight
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextDouble
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_LineHeight (value);
   end;

   function get_IsOverflowClipped
   (
      this : in out TimedTextRegion
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITimedTextRegion.all.get_IsOverflowClipped (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsOverflowClipped
   (
      this : in out TimedTextRegion;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_IsOverflowClipped (value);
   end;

   function get_Padding
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextPadding is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextPadding;
   begin
      Hr := this.m_ITimedTextRegion.all.get_Padding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Padding
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextPadding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_Padding (value);
   end;

   function get_TextWrapping
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextWrapping is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextWrapping;
   begin
      Hr := this.m_ITimedTextRegion.all.get_TextWrapping (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TextWrapping
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextWrapping
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_TextWrapping (value);
   end;

   function get_ZIndex
   (
      this : in out TimedTextRegion
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITimedTextRegion.all.get_ZIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ZIndex
   (
      this : in out TimedTextRegion;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_ZIndex (value);
   end;

   function get_ScrollMode
   (
      this : in out TimedTextRegion
   )
   return WinRt.Windows.Media.Core.TimedTextScrollMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextScrollMode;
   begin
      Hr := this.m_ITimedTextRegion.all.get_ScrollMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScrollMode
   (
      this : in out TimedTextRegion;
      value : Windows.Media.Core.TimedTextScrollMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextRegion.all.put_ScrollMode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedTextSource

   procedure Initialize (this : in out TimedTextSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedTextSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedTextSource, ITimedTextSource_Ptr);
   begin
      if this.m_ITimedTextSource /= null then
         if this.m_ITimedTextSource.all /= null then
            RefCount := this.m_ITimedTextSource.all.Release;
            Free (this.m_ITimedTextSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TimedTextSource

   function CreateFromStreamWithIndex
   (
      stream : Windows.Storage.Streams.IRandomAccessStream;
      indexStream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStreamWithIndex (stream, indexStream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromUriWithIndex
   (
      uri : Windows.Foundation.Uri'Class;
      indexUri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUriWithIndex (uri.m_IUriRuntimeClass.all, indexUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStreamWithIndex
   (
      stream : Windows.Storage.Streams.IRandomAccessStream;
      indexStream : Windows.Storage.Streams.IRandomAccessStream;
      defaultLanguage : WinRt.WString
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
      HStr_defaultLanguage : WinRt.HString := To_HString (defaultLanguage);
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStreamWithIndex (stream, indexStream, HStr_defaultLanguage, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_defaultLanguage);
      end return;
   end;

   function CreateFromUriWithIndex
   (
      uri : Windows.Foundation.Uri'Class;
      indexUri : Windows.Foundation.Uri'Class;
      defaultLanguage : WinRt.WString
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
      HStr_defaultLanguage : WinRt.HString := To_HString (defaultLanguage);
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUriWithIndex (uri.m_IUriRuntimeClass.all, indexUri.m_IUriRuntimeClass.all, HStr_defaultLanguage, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_defaultLanguage);
      end return;
   end;

   function CreateFromStream
   (
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStream (stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromUri
   (
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUri (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStream
   (
      stream : Windows.Storage.Streams.IRandomAccessStream;
      defaultLanguage : WinRt.WString
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
      HStr_defaultLanguage : WinRt.HString := To_HString (defaultLanguage);
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStream (stream, HStr_defaultLanguage, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_defaultLanguage);
      end return;
   end;

   function CreateFromUri
   (
      uri : Windows.Foundation.Uri'Class;
      defaultLanguage : WinRt.WString
   )
   return WinRt.Windows.Media.Core.TimedTextSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSource");
      m_Factory        : access WinRt.Windows.Media.Core.ITimedTextSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextSource;
      HStr_defaultLanguage : WinRt.HString := To_HString (defaultLanguage);
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextSource do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedTextSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUri (uri.m_IUriRuntimeClass.all, HStr_defaultLanguage, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITimedTextSource := new Windows.Media.Core.ITimedTextSource;
            Retval.m_ITimedTextSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_defaultLanguage);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedTextSource

   function add_Resolved
   (
      this : in out TimedTextSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ITimedTextSource.all.add_Resolved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Resolved
   (
      this : in out TimedTextSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextSource.all.remove_Resolved (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedTextSourceResolveResultEventArgs

   procedure Initialize (this : in out TimedTextSourceResolveResultEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedTextSourceResolveResultEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedTextSourceResolveResultEventArgs, ITimedTextSourceResolveResultEventArgs_Ptr);
   begin
      if this.m_ITimedTextSourceResolveResultEventArgs /= null then
         if this.m_ITimedTextSourceResolveResultEventArgs.all /= null then
            RefCount := this.m_ITimedTextSourceResolveResultEventArgs.all.Release;
            Free (this.m_ITimedTextSourceResolveResultEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedTextSourceResolveResultEventArgs

   function get_Error
   (
      this : in out TimedTextSourceResolveResultEventArgs
   )
   return WinRt.Windows.Media.Core.TimedMetadataTrackError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedMetadataTrackError;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedMetadataTrackError do
         Hr := this.m_ITimedTextSourceResolveResultEventArgs.all.get_Error (m_ComRetVal'Access);
         Retval.m_ITimedMetadataTrackError := new Windows.Media.Core.ITimedMetadataTrackError;
         Retval.m_ITimedMetadataTrackError.all := m_ComRetVal;
      end return;
   end;

   function get_Tracks
   (
      this : in out TimedTextSourceResolveResultEventArgs
   )
   return IVectorView_ITimedMetadataTrack.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ITimedMetadataTrack.Kind;
   begin
      Hr := this.m_ITimedTextSourceResolveResultEventArgs.all.get_Tracks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ITimedMetadataTrack (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedTextStyle

   procedure Initialize (this : in out TimedTextStyle) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedTextStyle) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedTextStyle, ITimedTextStyle_Ptr);
   begin
      if this.m_ITimedTextStyle /= null then
         if this.m_ITimedTextStyle.all /= null then
            RefCount := this.m_ITimedTextStyle.all.Release;
            Free (this.m_ITimedTextStyle);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedTextStyle

   function Constructor return TimedTextStyle is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextStyle");
      m_ComRetVal  : aliased Windows.Media.Core.ITimedTextStyle;
   begin
      return RetVal : TimedTextStyle do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITimedTextStyle := new Windows.Media.Core.ITimedTextStyle;
            Retval.m_ITimedTextStyle.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedTextStyle

   function get_Name
   (
      this : in out TimedTextStyle
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITimedTextStyle.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out TimedTextStyle;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITimedTextStyle.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FontFamily
   (
      this : in out TimedTextStyle
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITimedTextStyle.all.get_FontFamily (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_FontFamily
   (
      this : in out TimedTextStyle;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITimedTextStyle.all.put_FontFamily (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FontSize
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.Media.Core.TimedTextDouble is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextDouble;
   begin
      Hr := this.m_ITimedTextStyle.all.get_FontSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FontSize
   (
      this : in out TimedTextStyle;
      value : Windows.Media.Core.TimedTextDouble
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_FontSize (value);
   end;

   function get_FontWeight
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.Media.Core.TimedTextWeight is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextWeight;
   begin
      Hr := this.m_ITimedTextStyle.all.get_FontWeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FontWeight
   (
      this : in out TimedTextStyle;
      value : Windows.Media.Core.TimedTextWeight
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_FontWeight (value);
   end;

   function get_Foreground
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ITimedTextStyle.all.get_Foreground (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Foreground
   (
      this : in out TimedTextStyle;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_Foreground (value);
   end;

   function get_Background
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ITimedTextStyle.all.get_Background (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Background
   (
      this : in out TimedTextStyle;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_Background (value);
   end;

   function get_IsBackgroundAlwaysShown
   (
      this : in out TimedTextStyle
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITimedTextStyle.all.get_IsBackgroundAlwaysShown (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsBackgroundAlwaysShown
   (
      this : in out TimedTextStyle;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_IsBackgroundAlwaysShown (value);
   end;

   function get_FlowDirection
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.Media.Core.TimedTextFlowDirection is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextFlowDirection;
   begin
      Hr := this.m_ITimedTextStyle.all.get_FlowDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FlowDirection
   (
      this : in out TimedTextStyle;
      value : Windows.Media.Core.TimedTextFlowDirection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_FlowDirection (value);
   end;

   function get_LineAlignment
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.Media.Core.TimedTextLineAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextLineAlignment;
   begin
      Hr := this.m_ITimedTextStyle.all.get_LineAlignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LineAlignment
   (
      this : in out TimedTextStyle;
      value : Windows.Media.Core.TimedTextLineAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_LineAlignment (value);
   end;

   function get_OutlineColor
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ITimedTextStyle.all.get_OutlineColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutlineColor
   (
      this : in out TimedTextStyle;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_OutlineColor (value);
   end;

   function get_OutlineThickness
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.Media.Core.TimedTextDouble is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextDouble;
   begin
      Hr := this.m_ITimedTextStyle.all.get_OutlineThickness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutlineThickness
   (
      this : in out TimedTextStyle;
      value : Windows.Media.Core.TimedTextDouble
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_OutlineThickness (value);
   end;

   function get_OutlineRadius
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.Media.Core.TimedTextDouble is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextDouble;
   begin
      Hr := this.m_ITimedTextStyle.all.get_OutlineRadius (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutlineRadius
   (
      this : in out TimedTextStyle;
      value : Windows.Media.Core.TimedTextDouble
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextStyle.all.put_OutlineRadius (value);
   end;

   function get_FontStyle
   (
      this : in out TimedTextStyle
   )
   return WinRt.Windows.Media.Core.TimedTextFontStyle is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.TimedTextFontStyle;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.get_FontStyle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_FontStyle
   (
      this : in out TimedTextStyle;
      value : Windows.Media.Core.TimedTextFontStyle
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.put_FontStyle (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsUnderlineEnabled
   (
      this : in out TimedTextStyle
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.get_IsUnderlineEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsUnderlineEnabled
   (
      this : in out TimedTextStyle;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.put_IsUnderlineEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsLineThroughEnabled
   (
      this : in out TimedTextStyle
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.get_IsLineThroughEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsLineThroughEnabled
   (
      this : in out TimedTextStyle;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.put_IsLineThroughEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsOverlineEnabled
   (
      this : in out TimedTextStyle
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.get_IsOverlineEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsOverlineEnabled
   (
      this : in out TimedTextStyle;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedTextStyle2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.ITimedTextStyle_Interface, WinRt.Windows.Media.Core.ITimedTextStyle2, WinRt.Windows.Media.Core.IID_ITimedTextStyle2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITimedTextStyle.all);
      Hr := m_Interface.put_IsOverlineEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedTextSubformat

   procedure Initialize (this : in out TimedTextSubformat) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedTextSubformat) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedTextSubformat, ITimedTextSubformat_Ptr);
   begin
      if this.m_ITimedTextSubformat /= null then
         if this.m_ITimedTextSubformat.all /= null then
            RefCount := this.m_ITimedTextSubformat.all.Release;
            Free (this.m_ITimedTextSubformat);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedTextSubformat

   function Constructor return TimedTextSubformat is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.TimedTextSubformat");
      m_ComRetVal  : aliased Windows.Media.Core.ITimedTextSubformat;
   begin
      return RetVal : TimedTextSubformat do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITimedTextSubformat := new Windows.Media.Core.ITimedTextSubformat;
            Retval.m_ITimedTextSubformat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedTextSubformat

   function get_StartIndex
   (
      this : in out TimedTextSubformat
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITimedTextSubformat.all.get_StartIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartIndex
   (
      this : in out TimedTextSubformat;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextSubformat.all.put_StartIndex (value);
   end;

   function get_Length
   (
      this : in out TimedTextSubformat
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITimedTextSubformat.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Length
   (
      this : in out TimedTextSubformat;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextSubformat.all.put_Length (value);
   end;

   function get_SubformatStyle
   (
      this : in out TimedTextSubformat
   )
   return WinRt.Windows.Media.Core.TimedTextStyle'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedTextStyle;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedTextStyle do
         Hr := this.m_ITimedTextSubformat.all.get_SubformatStyle (m_ComRetVal'Access);
         Retval.m_ITimedTextStyle := new Windows.Media.Core.ITimedTextStyle;
         Retval.m_ITimedTextStyle.all := m_ComRetVal;
      end return;
   end;

   procedure put_SubformatStyle
   (
      this : in out TimedTextSubformat;
      value : Windows.Media.Core.TimedTextStyle'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITimedTextSubformat.all.put_SubformatStyle (value.m_ITimedTextStyle.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoStabilizationEffect

   procedure Initialize (this : in out VideoStabilizationEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoStabilizationEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoStabilizationEffect, IVideoStabilizationEffect_Ptr);
   begin
      if this.m_IVideoStabilizationEffect /= null then
         if this.m_IVideoStabilizationEffect.all /= null then
            RefCount := this.m_IVideoStabilizationEffect.all.Release;
            Free (this.m_IVideoStabilizationEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoStabilizationEffect

   procedure put_Enabled
   (
      this : in out VideoStabilizationEffect;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoStabilizationEffect.all.put_Enabled (value);
   end;

   function get_Enabled
   (
      this : in out VideoStabilizationEffect
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVideoStabilizationEffect.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_EnabledChanged
   (
      this : in out VideoStabilizationEffect;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVideoStabilizationEffect.all.add_EnabledChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnabledChanged
   (
      this : in out VideoStabilizationEffect;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoStabilizationEffect.all.remove_EnabledChanged (cookie);
   end;

   function GetRecommendedStreamConfiguration
   (
      this : in out VideoStabilizationEffect;
      controller : Windows.Media.Devices.VideoDeviceController'Class;
      desiredProperties : Windows.Media.MediaProperties.VideoEncodingProperties'Class
   )
   return WinRt.Windows.Media.Capture.VideoStreamConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IVideoStreamConfiguration;
   begin
      return RetVal : WinRt.Windows.Media.Capture.VideoStreamConfiguration do
         Hr := this.m_IVideoStabilizationEffect.all.GetRecommendedStreamConfiguration (controller.m_IVideoDeviceController.all, desiredProperties.m_IVideoEncodingProperties.all, m_ComRetVal'Access);
         Retval.m_IVideoStreamConfiguration := new Windows.Media.Capture.IVideoStreamConfiguration;
         Retval.m_IVideoStreamConfiguration.all := m_ComRetVal;
      end return;
   end;

   procedure SetProperties
   (
      this : in out VideoStabilizationEffect;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaExtension := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStabilizationEffect_Interface, WinRt.Windows.Media.IMediaExtension, WinRt.Windows.Media.IID_IMediaExtension'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStabilizationEffect.all);
      Hr := m_Interface.SetProperties (configuration);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoStabilizationEffectDefinition

   procedure Initialize (this : in out VideoStabilizationEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoStabilizationEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Media.Effects.IVideoEffectDefinition;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Media.Effects.IVideoEffectDefinition, WinRt.Windows.Media.Effects.IVideoEffectDefinition_Ptr);
   begin
      if this.m_IVideoEffectDefinition /= null then
         if this.m_IVideoEffectDefinition.all /= null then
            RefCount := this.m_IVideoEffectDefinition.all.Release;
            Free (this.m_IVideoEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VideoStabilizationEffectDefinition

   function Constructor return VideoStabilizationEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.VideoStabilizationEffectDefinition");
      m_ComRetVal  : aliased Windows.Media.Effects.IVideoEffectDefinition;
   begin
      return RetVal : VideoStabilizationEffectDefinition do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVideoEffectDefinition := new Windows.Media.Effects.IVideoEffectDefinition;
            Retval.m_IVideoEffectDefinition.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoStabilizationEffectDefinition

   function get_ActivatableClassId
   (
      this : in out VideoStabilizationEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_ActivatableClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out VideoStabilizationEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IVideoEffectDefinition.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoStabilizationEffectEnabledChangedEventArgs

   procedure Initialize (this : in out VideoStabilizationEffectEnabledChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoStabilizationEffectEnabledChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoStabilizationEffectEnabledChangedEventArgs, IVideoStabilizationEffectEnabledChangedEventArgs_Ptr);
   begin
      if this.m_IVideoStabilizationEffectEnabledChangedEventArgs /= null then
         if this.m_IVideoStabilizationEffectEnabledChangedEventArgs.all /= null then
            RefCount := this.m_IVideoStabilizationEffectEnabledChangedEventArgs.all.Release;
            Free (this.m_IVideoStabilizationEffectEnabledChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoStabilizationEffectEnabledChangedEventArgs

   function get_Reason
   (
      this : in out VideoStabilizationEffectEnabledChangedEventArgs
   )
   return WinRt.Windows.Media.Core.VideoStabilizationEffectEnabledChangedReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.VideoStabilizationEffectEnabledChangedReason;
   begin
      Hr := this.m_IVideoStabilizationEffectEnabledChangedEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoStreamDescriptor

   procedure Initialize (this : in out VideoStreamDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoStreamDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoStreamDescriptor, IVideoStreamDescriptor_Ptr);
   begin
      if this.m_IVideoStreamDescriptor /= null then
         if this.m_IVideoStreamDescriptor.all /= null then
            RefCount := this.m_IVideoStreamDescriptor.all.Release;
            Free (this.m_IVideoStreamDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VideoStreamDescriptor

   function Constructor
   (
      encodingProperties : Windows.Media.MediaProperties.VideoEncodingProperties'Class
   )
   return VideoStreamDescriptor is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Core.VideoStreamDescriptor");
      m_Factory    : access IVideoStreamDescriptorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Core.IVideoStreamDescriptor;
   begin
      return RetVal : VideoStreamDescriptor do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoStreamDescriptorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (encodingProperties.m_IVideoEncodingProperties.all, m_ComRetVal'Access);
            Retval.m_IVideoStreamDescriptor := new Windows.Media.Core.IVideoStreamDescriptor;
            Retval.m_IVideoStreamDescriptor.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoStreamDescriptor

   function get_EncodingProperties
   (
      this : in out VideoStreamDescriptor
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := this.m_IVideoStreamDescriptor.all.get_EncodingProperties (m_ComRetVal'Access);
         Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
         Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_IsSelected
   (
      this : in out VideoStreamDescriptor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
      Hr := m_Interface.get_IsSelected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Name
   (
      this : in out VideoStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
      Hr := m_Interface.put_Name (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Name
   (
      this : in out VideoStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out VideoStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out VideoStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out VideoStreamDescriptor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor2, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
      Hr := m_Interface.put_Label (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out VideoStreamDescriptor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IMediaStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IMediaStreamDescriptor2, WinRt.Windows.Media.Core.IID_IMediaStreamDescriptor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
      Hr := m_Interface.get_Label (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Copy
   (
      this : in out VideoStreamDescriptor
   )
   return WinRt.Windows.Media.Core.VideoStreamDescriptor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IVideoStreamDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IVideoStreamDescriptor;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IVideoStreamDescriptor_Interface, WinRt.Windows.Media.Core.IVideoStreamDescriptor2, WinRt.Windows.Media.Core.IID_IVideoStreamDescriptor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.VideoStreamDescriptor do
         m_Interface := QInterface (this.m_IVideoStreamDescriptor.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoStreamDescriptor := new Windows.Media.Core.IVideoStreamDescriptor;
         Retval.m_IVideoStreamDescriptor.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoTrack

   procedure Initialize (this : in out VideoTrack) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoTrack) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaTrack, IMediaTrack_Ptr);
   begin
      if this.m_IMediaTrack /= null then
         if this.m_IMediaTrack.all /= null then
            RefCount := this.m_IMediaTrack.all.Release;
            Free (this.m_IMediaTrack);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoTrack

   function get_Id
   (
      this : in out VideoTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaTrack.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out VideoTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaTrack.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TrackKind
   (
      this : in out VideoTrack
   )
   return WinRt.Windows.Media.Core.MediaTrackKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaTrackKind;
   begin
      Hr := this.m_IMediaTrack.all.get_TrackKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Label
   (
      this : in out VideoTrack;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaTrack.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Label
   (
      this : in out VideoTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaTrack.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_OpenFailed
   (
      this : in out VideoTrack;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IVideoTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IVideoTrack, WinRt.Windows.Media.Core.IID_IVideoTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTrack.all);
      Hr := m_Interface.add_OpenFailed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_OpenFailed
   (
      this : in out VideoTrack;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IVideoTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IVideoTrack, WinRt.Windows.Media.Core.IID_IVideoTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTrack.all);
      Hr := m_Interface.remove_OpenFailed (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetEncodingProperties
   (
      this : in out VideoTrack
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IVideoTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IVideoTrack, WinRt.Windows.Media.Core.IID_IVideoTrack'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         m_Interface := QInterface (this.m_IMediaTrack.all);
         Hr := m_Interface.GetEncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
         Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_PlaybackItem
   (
      this : in out VideoTrack
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IVideoTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IVideoTrack, WinRt.Windows.Media.Core.IID_IVideoTrack'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         m_Interface := QInterface (this.m_IMediaTrack.all);
         Hr := m_Interface.get_PlaybackItem (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_Name
   (
      this : in out VideoTrack
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IVideoTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IVideoTrack, WinRt.Windows.Media.Core.IID_IVideoTrack'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTrack.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportInfo
   (
      this : in out VideoTrack
   )
   return WinRt.Windows.Media.Core.VideoTrackSupportInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.IVideoTrack := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IVideoTrackSupportInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Core.IMediaTrack_Interface, WinRt.Windows.Media.Core.IVideoTrack, WinRt.Windows.Media.Core.IID_IVideoTrack'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.VideoTrackSupportInfo do
         m_Interface := QInterface (this.m_IMediaTrack.all);
         Hr := m_Interface.get_SupportInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoTrackSupportInfo := new Windows.Media.Core.IVideoTrackSupportInfo;
         Retval.m_IVideoTrackSupportInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoTrackOpenFailedEventArgs

   procedure Initialize (this : in out VideoTrackOpenFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoTrackOpenFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoTrackOpenFailedEventArgs, IVideoTrackOpenFailedEventArgs_Ptr);
   begin
      if this.m_IVideoTrackOpenFailedEventArgs /= null then
         if this.m_IVideoTrackOpenFailedEventArgs.all /= null then
            RefCount := this.m_IVideoTrackOpenFailedEventArgs.all.Release;
            Free (this.m_IVideoTrackOpenFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoTrackOpenFailedEventArgs

   function get_ExtendedError
   (
      this : in out VideoTrackOpenFailedEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IVideoTrackOpenFailedEventArgs.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoTrackSupportInfo

   procedure Initialize (this : in out VideoTrackSupportInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoTrackSupportInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoTrackSupportInfo, IVideoTrackSupportInfo_Ptr);
   begin
      if this.m_IVideoTrackSupportInfo /= null then
         if this.m_IVideoTrackSupportInfo.all /= null then
            RefCount := this.m_IVideoTrackSupportInfo.all.Release;
            Free (this.m_IVideoTrackSupportInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoTrackSupportInfo

   function get_DecoderStatus
   (
      this : in out VideoTrackSupportInfo
   )
   return WinRt.Windows.Media.Core.MediaDecoderStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaDecoderStatus;
   begin
      Hr := this.m_IVideoTrackSupportInfo.all.get_DecoderStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MediaSourceStatus
   (
      this : in out VideoTrackSupportInfo
   )
   return WinRt.Windows.Media.Core.MediaSourceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.MediaSourceStatus;
   begin
      Hr := this.m_IVideoTrackSupportInfo.all.get_MediaSourceStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Input.Inking.Analysis is

   package IAsyncOperation_InkAnalysisResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisResult);
   package AsyncOperationCompletedHandler_InkAnalysisResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisInkBullet

   procedure Initialize (this : in out InkAnalysisInkBullet) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisInkBullet) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisInkBullet, IInkAnalysisInkBullet_Ptr);
   begin
      if this.m_IInkAnalysisInkBullet /= null then
         if this.m_IInkAnalysisInkBullet.all /= null then
            RefCount := this.m_IInkAnalysisInkBullet.all.Release;
            Free (this.m_IInkAnalysisInkBullet);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisInkBullet

   function get_RecognizedText
   (
      this : in out InkAnalysisInkBullet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IInkAnalysisInkBullet.all.get_RecognizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisInkBullet
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkBullet_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkBullet.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisInkBullet
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkBullet_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkBullet.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisInkBullet
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkBullet_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkBullet.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisInkBullet
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkBullet_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkBullet.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisInkBullet
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkBullet_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkBullet.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisInkBullet
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkBullet_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkBullet.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisInkBullet
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkBullet_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkBullet.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisInkDrawing

   procedure Initialize (this : in out InkAnalysisInkDrawing) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisInkDrawing) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisInkDrawing, IInkAnalysisInkDrawing_Ptr);
   begin
      if this.m_IInkAnalysisInkDrawing /= null then
         if this.m_IInkAnalysisInkDrawing.all /= null then
            RefCount := this.m_IInkAnalysisInkDrawing.all.Release;
            Free (this.m_IInkAnalysisInkDrawing);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisInkDrawing

   function get_DrawingKind
   (
      this : in out InkAnalysisInkDrawing
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisDrawingKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisDrawingKind;
   begin
      Hr := this.m_IInkAnalysisInkDrawing.all.get_DrawingKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Center
   (
      this : in out InkAnalysisInkDrawing
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IInkAnalysisInkDrawing.all.get_Center (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Points
   (
      this : in out InkAnalysisInkDrawing
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
   begin
      Hr := this.m_IInkAnalysisInkDrawing.all.get_Points (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisInkDrawing
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkDrawing_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkDrawing.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisInkDrawing
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkDrawing_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkDrawing.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisInkDrawing
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkDrawing_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkDrawing.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisInkDrawing
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkDrawing_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkDrawing.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisInkDrawing
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkDrawing_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkDrawing.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisInkDrawing
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkDrawing_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkDrawing.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisInkDrawing
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkDrawing_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkDrawing.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisInkWord

   procedure Initialize (this : in out InkAnalysisInkWord) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisInkWord) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisInkWord, IInkAnalysisInkWord_Ptr);
   begin
      if this.m_IInkAnalysisInkWord /= null then
         if this.m_IInkAnalysisInkWord.all /= null then
            RefCount := this.m_IInkAnalysisInkWord.all.Release;
            Free (this.m_IInkAnalysisInkWord);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisInkWord

   function get_RecognizedText
   (
      this : in out InkAnalysisInkWord
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IInkAnalysisInkWord.all.get_RecognizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TextAlternates
   (
      this : in out InkAnalysisInkWord
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IInkAnalysisInkWord.all.get_TextAlternates (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisInkWord
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkWord_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkWord.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisInkWord
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkWord_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkWord.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisInkWord
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkWord_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkWord.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisInkWord
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkWord_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkWord.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisInkWord
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkWord_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkWord.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisInkWord
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkWord_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkWord.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisInkWord
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisInkWord_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisInkWord.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisLine

   procedure Initialize (this : in out InkAnalysisLine) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisLine) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisLine, IInkAnalysisLine_Ptr);
   begin
      if this.m_IInkAnalysisLine /= null then
         if this.m_IInkAnalysisLine.all /= null then
            RefCount := this.m_IInkAnalysisLine.all.Release;
            Free (this.m_IInkAnalysisLine);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisLine

   function get_RecognizedText
   (
      this : in out InkAnalysisLine
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IInkAnalysisLine.all.get_RecognizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IndentLevel
   (
      this : in out InkAnalysisLine
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInkAnalysisLine.all.get_IndentLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisLine
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisLine_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisLine.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisLine
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisLine_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisLine.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisLine
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisLine_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisLine.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisLine
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisLine_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisLine.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisLine
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisLine_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisLine.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisLine
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisLine_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisLine.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisLine
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisLine_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisLine.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisListItem

   procedure Initialize (this : in out InkAnalysisListItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisListItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisListItem, IInkAnalysisListItem_Ptr);
   begin
      if this.m_IInkAnalysisListItem /= null then
         if this.m_IInkAnalysisListItem.all /= null then
            RefCount := this.m_IInkAnalysisListItem.all.Release;
            Free (this.m_IInkAnalysisListItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisListItem

   function get_RecognizedText
   (
      this : in out InkAnalysisListItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IInkAnalysisListItem.all.get_RecognizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisListItem
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisListItem_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisListItem.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisListItem
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisListItem_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisListItem.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisListItem
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisListItem_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisListItem.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisListItem
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisListItem_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisListItem.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisListItem
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisListItem_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisListItem.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisListItem
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisListItem_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisListItem.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisListItem
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisListItem_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisListItem.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisNode

   procedure Initialize (this : in out InkAnalysisNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisNode, IInkAnalysisNode_Ptr);
   begin
      if this.m_IInkAnalysisNode /= null then
         if this.m_IInkAnalysisNode.all /= null then
            RefCount := this.m_IInkAnalysisNode.all.Release;
            Free (this.m_IInkAnalysisNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisNode

   function get_Id
   (
      this : in out InkAnalysisNode
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IInkAnalysisNode.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisNode
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
   begin
      Hr := this.m_IInkAnalysisNode.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisNode
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IInkAnalysisNode.all.get_BoundingRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisNode
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
   begin
      Hr := this.m_IInkAnalysisNode.all.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisNode
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
   begin
      Hr := this.m_IInkAnalysisNode.all.get_Children (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisNode
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
   begin
      Hr := this.m_IInkAnalysisNode.all.get_Parent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisNode
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IInkAnalysisNode.all.GetStrokeIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisParagraph

   procedure Initialize (this : in out InkAnalysisParagraph) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisParagraph) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisParagraph, IInkAnalysisParagraph_Ptr);
   begin
      if this.m_IInkAnalysisParagraph /= null then
         if this.m_IInkAnalysisParagraph.all /= null then
            RefCount := this.m_IInkAnalysisParagraph.all.Release;
            Free (this.m_IInkAnalysisParagraph);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisParagraph

   function get_RecognizedText
   (
      this : in out InkAnalysisParagraph
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IInkAnalysisParagraph.all.get_RecognizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisParagraph
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisParagraph_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisParagraph.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisParagraph
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisParagraph_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisParagraph.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisParagraph
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisParagraph_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisParagraph.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisParagraph
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisParagraph_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisParagraph.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisParagraph
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisParagraph_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisParagraph.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisParagraph
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisParagraph_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisParagraph.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisParagraph
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisParagraph_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisParagraph.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisResult

   procedure Initialize (this : in out InkAnalysisResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisResult, IInkAnalysisResult_Ptr);
   begin
      if this.m_IInkAnalysisResult /= null then
         if this.m_IInkAnalysisResult.all /= null then
            RefCount := this.m_IInkAnalysisResult.all.Release;
            Free (this.m_IInkAnalysisResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisResult

   function get_Status
   (
      this : in out InkAnalysisResult
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisStatus;
   begin
      Hr := this.m_IInkAnalysisResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisRoot

   procedure Initialize (this : in out InkAnalysisRoot) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisRoot) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisRoot, IInkAnalysisRoot_Ptr);
   begin
      if this.m_IInkAnalysisRoot /= null then
         if this.m_IInkAnalysisRoot.all /= null then
            RefCount := this.m_IInkAnalysisRoot.all.Release;
            Free (this.m_IInkAnalysisRoot);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisRoot

   function get_RecognizedText
   (
      this : in out InkAnalysisRoot
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IInkAnalysisRoot.all.get_RecognizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FindNodes
   (
      this : in out InkAnalysisRoot;
      nodeKind : Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
   begin
      Hr := this.m_IInkAnalysisRoot.all.FindNodes (nodeKind, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisRoot
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisRoot.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisRoot
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisRoot.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisRoot
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisRoot.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisRoot
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisRoot.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisRoot
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisRoot.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisRoot
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisRoot.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisRoot
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisRoot.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalysisWritingRegion

   procedure Initialize (this : in out InkAnalysisWritingRegion) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalysisWritingRegion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalysisWritingRegion, IInkAnalysisWritingRegion_Ptr);
   begin
      if this.m_IInkAnalysisWritingRegion /= null then
         if this.m_IInkAnalysisWritingRegion.all /= null then
            RefCount := this.m_IInkAnalysisWritingRegion.all.Release;
            Free (this.m_IInkAnalysisWritingRegion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalysisWritingRegion

   function get_RecognizedText
   (
      this : in out InkAnalysisWritingRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IInkAnalysisWritingRegion.all.get_RecognizedText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out InkAnalysisWritingRegion
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisWritingRegion_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisWritingRegion.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out InkAnalysisWritingRegion
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.InkAnalysisNodeKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisWritingRegion_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisWritingRegion.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BoundingRect
   (
      this : in out InkAnalysisWritingRegion
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisWritingRegion_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisWritingRegion.all);
      Hr := m_Interface.get_BoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RotatedBoundingRect
   (
      this : in out InkAnalysisWritingRegion
   )
   return IVectorView_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Point.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisWritingRegion_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisWritingRegion.all);
      Hr := m_Interface.get_RotatedBoundingRect (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Children
   (
      this : in out InkAnalysisWritingRegion
   )
   return IVectorView_IInkAnalysisNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IInkAnalysisNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisWritingRegion_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisWritingRegion.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IInkAnalysisNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Parent
   (
      this : in out InkAnalysisWritingRegion
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisWritingRegion_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisWritingRegion.all);
      Hr := m_Interface.get_Parent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetStrokeIds
   (
      this : in out InkAnalysisWritingRegion
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisWritingRegion_Interface, WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisNode, WinRt.Windows.UI.Input.Inking.Analysis.IID_IInkAnalysisNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInkAnalysisWritingRegion.all);
      Hr := m_Interface.GetStrokeIds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InkAnalyzer

   procedure Initialize (this : in out InkAnalyzer) is
   begin
      null;
   end;

   procedure Finalize (this : in out InkAnalyzer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInkAnalyzer, IInkAnalyzer_Ptr);
   begin
      if this.m_IInkAnalyzer /= null then
         if this.m_IInkAnalyzer.all /= null then
            RefCount := this.m_IInkAnalyzer.all.Release;
            Free (this.m_IInkAnalyzer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InkAnalyzer

   function Constructor return InkAnalyzer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Input.Inking.Analysis.InkAnalyzer");
      m_ComRetVal  : aliased Windows.UI.Input.Inking.Analysis.IInkAnalyzer;
   begin
      return RetVal : InkAnalyzer do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IInkAnalyzer := new Windows.UI.Input.Inking.Analysis.IInkAnalyzer;
            Retval.m_IInkAnalyzer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InkAnalyzer

   function get_AnalysisRoot
   (
      this : in out InkAnalyzer
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisRoot'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot;
   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisRoot do
         Hr := this.m_IInkAnalyzer.all.get_AnalysisRoot (m_ComRetVal'Access);
         Retval.m_IInkAnalysisRoot := new Windows.UI.Input.Inking.Analysis.IInkAnalysisRoot;
         Retval.m_IInkAnalysisRoot.all := m_ComRetVal;
      end return;
   end;

   function get_IsAnalyzing
   (
      this : in out InkAnalyzer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInkAnalyzer.all.get_IsAnalyzing (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AddDataForStroke
   (
      this : in out InkAnalyzer;
      stroke : Windows.UI.Input.Inking.InkStroke'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInkAnalyzer.all.AddDataForStroke (stroke.m_IInkStroke.all);
   end;

   procedure AddDataForStrokes
   (
      this : in out InkAnalyzer;
      strokes : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInkAnalyzer.all.AddDataForStrokes (strokes);
   end;

   procedure ClearDataForAllStrokes
   (
      this : in out InkAnalyzer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInkAnalyzer.all.ClearDataForAllStrokes;
   end;

   procedure RemoveDataForStroke
   (
      this : in out InkAnalyzer;
      strokeId : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInkAnalyzer.all.RemoveDataForStroke (strokeId);
   end;

   procedure RemoveDataForStrokes
   (
      this : in out InkAnalyzer;
      strokeIds : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInkAnalyzer.all.RemoveDataForStrokes (strokeIds);
   end;

   procedure ReplaceDataForStroke
   (
      this : in out InkAnalyzer;
      stroke : Windows.UI.Input.Inking.InkStroke'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInkAnalyzer.all.ReplaceDataForStroke (stroke.m_IInkStroke.all);
   end;

   procedure SetStrokeDataKind
   (
      this : in out InkAnalyzer;
      strokeId : WinRt.UInt32;
      strokeKind : Windows.UI.Input.Inking.Analysis.InkAnalysisStrokeKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInkAnalyzer.all.SetStrokeDataKind (strokeId, strokeKind);
   end;

   function AnalyzeAsync
   (
      this : in out InkAnalyzer
   )
   return WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_InkAnalysisResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_InkAnalysisResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Input.Inking.Analysis.IInkAnalysisResult;
      m_IID            : aliased WinRt.IID := (742838717, 28091, 20487, (186, 133, 61, 1, 6, 189, 223, 80 )); -- Windows.UI.Input.Inking.Analysis.InkAnalysisResult;
      m_HandlerIID     : aliased WinRt.IID := (2817468006, 28612, 22159, (187, 243, 25, 193, 3, 106, 38, 191 ));
      m_Handler        : AsyncOperationCompletedHandler_InkAnalysisResult.Kind := new AsyncOperationCompletedHandler_InkAnalysisResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_InkAnalysisResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_InkAnalysisResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_InkAnalysisResult.Kind_Delegate, AsyncOperationCompletedHandler_InkAnalysisResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.UI.Input.Inking.Analysis.InkAnalysisResult do
         Hr := this.m_IInkAnalyzer.all.AnalyzeAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IInkAnalysisResult := new Windows.UI.Input.Inking.Analysis.IInkAnalysisResult;
                  Retval.m_IInkAnalysisResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

end;

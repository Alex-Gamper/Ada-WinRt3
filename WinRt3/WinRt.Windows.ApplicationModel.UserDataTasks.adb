--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.UserDataTasks is

   package IAsyncOperation_UserDataTask is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTask);
   package AsyncOperationCompletedHandler_UserDataTask is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTask);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_UserDataTaskStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskStore);
   package AsyncOperationCompletedHandler_UserDataTaskStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskStore);

   package IAsyncOperation_UserDataTaskBatch is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskBatch);
   package AsyncOperationCompletedHandler_UserDataTaskBatch is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskBatch);

   package IAsyncOperation_UserDataTaskList is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskList);
   package AsyncOperationCompletedHandler_UserDataTaskList is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskList);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTask

   procedure Initialize (this : in out UserDataTask) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTask) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTask, IUserDataTask_Ptr);
   begin
      if this.m_IUserDataTask /= null then
         if this.m_IUserDataTask.all /= null then
            RefCount := this.m_IUserDataTask.all.Release;
            Free (this.m_IUserDataTask);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserDataTask

   function Constructor return UserDataTask is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataTasks.UserDataTask");
      m_ComRetVal  : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTask;
   begin
      return RetVal : UserDataTask do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUserDataTask := new Windows.ApplicationModel.UserDataTasks.IUserDataTask;
            Retval.m_IUserDataTask.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTask

   function get_Id
   (
      this : in out UserDataTask
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTask.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ListId
   (
      this : in out UserDataTask
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTask.all.get_ListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RemoteId
   (
      this : in out UserDataTask
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTask.all.get_RemoteId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out UserDataTask;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserDataTask.all.put_RemoteId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CompletedDate
   (
      this : in out UserDataTask
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IUserDataTask.all.get_CompletedDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_CompletedDate
   (
      this : in out UserDataTask;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_CompletedDate (value);
   end;

   function get_Details
   (
      this : in out UserDataTask
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTask.all.get_Details (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Details
   (
      this : in out UserDataTask;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserDataTask.all.put_Details (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DetailsKind
   (
      this : in out UserDataTask
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskDetailsKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskDetailsKind;
   begin
      Hr := this.m_IUserDataTask.all.get_DetailsKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DetailsKind
   (
      this : in out UserDataTask;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskDetailsKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_DetailsKind (value);
   end;

   function get_DueDate
   (
      this : in out UserDataTask
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IUserDataTask.all.get_DueDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DueDate
   (
      this : in out UserDataTask;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_DueDate (value);
   end;

   function get_Kind
   (
      this : in out UserDataTask
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskKind;
   begin
      Hr := this.m_IUserDataTask.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Priority
   (
      this : in out UserDataTask
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskPriority is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskPriority;
   begin
      Hr := this.m_IUserDataTask.all.get_Priority (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Priority
   (
      this : in out UserDataTask;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_Priority (value);
   end;

   function get_RecurrenceProperties
   (
      this : in out UserDataTask
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskRecurrenceProperties;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties do
         Hr := this.m_IUserDataTask.all.get_RecurrenceProperties (m_ComRetVal'Access);
         Retval.m_IUserDataTaskRecurrenceProperties := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskRecurrenceProperties;
         Retval.m_IUserDataTaskRecurrenceProperties.all := m_ComRetVal;
      end return;
   end;

   procedure put_RecurrenceProperties
   (
      this : in out UserDataTask;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_RecurrenceProperties (value.m_IUserDataTaskRecurrenceProperties.all);
   end;

   function get_RegenerationProperties
   (
      this : in out UserDataTask
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskRegenerationProperties;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties do
         Hr := this.m_IUserDataTask.all.get_RegenerationProperties (m_ComRetVal'Access);
         Retval.m_IUserDataTaskRegenerationProperties := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskRegenerationProperties;
         Retval.m_IUserDataTaskRegenerationProperties.all := m_ComRetVal;
      end return;
   end;

   procedure put_RegenerationProperties
   (
      this : in out UserDataTask;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_RegenerationProperties (value.m_IUserDataTaskRegenerationProperties.all);
   end;

   function get_Reminder
   (
      this : in out UserDataTask
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IUserDataTask.all.get_Reminder (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Reminder
   (
      this : in out UserDataTask;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_Reminder (value);
   end;

   function get_Sensitivity
   (
      this : in out UserDataTask
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskSensitivity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskSensitivity;
   begin
      Hr := this.m_IUserDataTask.all.get_Sensitivity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Sensitivity
   (
      this : in out UserDataTask;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskSensitivity
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_Sensitivity (value);
   end;

   function get_Subject
   (
      this : in out UserDataTask
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTask.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subject
   (
      this : in out UserDataTask;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserDataTask.all.put_Subject (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_StartDate
   (
      this : in out UserDataTask
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IUserDataTask.all.get_StartDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_StartDate
   (
      this : in out UserDataTask;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTask.all.put_StartDate (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskBatch

   procedure Initialize (this : in out UserDataTaskBatch) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskBatch) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskBatch, IUserDataTaskBatch_Ptr);
   begin
      if this.m_IUserDataTaskBatch /= null then
         if this.m_IUserDataTaskBatch.all /= null then
            RefCount := this.m_IUserDataTaskBatch.all.Release;
            Free (this.m_IUserDataTaskBatch);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskBatch

   function get_Tasks
   (
      this : in out UserDataTaskBatch
   )
   return IVectorView_IUserDataTask.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IUserDataTask.Kind;
   begin
      Hr := this.m_IUserDataTaskBatch.all.get_Tasks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IUserDataTask (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskList

   procedure Initialize (this : in out UserDataTaskList) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskList, IUserDataTaskList_Ptr);
   begin
      if this.m_IUserDataTaskList /= null then
         if this.m_IUserDataTaskList.all /= null then
            RefCount := this.m_IUserDataTaskList.all.Release;
            Free (this.m_IUserDataTaskList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskList

   function get_Id
   (
      this : in out UserDataTaskList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskList.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserDataAccountId
   (
      this : in out UserDataTaskList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskList.all.get_UserDataAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out UserDataTaskList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskList.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out UserDataTaskList;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserDataTaskList.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SourceDisplayName
   (
      this : in out UserDataTaskList
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataTaskList.all.get_SourceDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_OtherAppReadAccess
   (
      this : in out UserDataTaskList
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskListOtherAppReadAccess is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskListOtherAppReadAccess;
   begin
      Hr := this.m_IUserDataTaskList.all.get_OtherAppReadAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OtherAppReadAccess
   (
      this : in out UserDataTaskList;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskListOtherAppReadAccess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskList.all.put_OtherAppReadAccess (value);
   end;

   function get_OtherAppWriteAccess
   (
      this : in out UserDataTaskList
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskListOtherAppWriteAccess is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskListOtherAppWriteAccess;
   begin
      Hr := this.m_IUserDataTaskList.all.get_OtherAppWriteAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OtherAppWriteAccess
   (
      this : in out UserDataTaskList;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskListOtherAppWriteAccess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskList.all.put_OtherAppWriteAccess (value);
   end;

   function get_LimitedWriteOperations
   (
      this : in out UserDataTaskList
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskListLimitedWriteOperations'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskListLimitedWriteOperations;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskListLimitedWriteOperations do
         Hr := this.m_IUserDataTaskList.all.get_LimitedWriteOperations (m_ComRetVal'Access);
         Retval.m_IUserDataTaskListLimitedWriteOperations := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskListLimitedWriteOperations;
         Retval.m_IUserDataTaskListLimitedWriteOperations.all := m_ComRetVal;
      end return;
   end;

   function get_SyncManager
   (
      this : in out UserDataTaskList
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskListSyncManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncManager do
         Hr := this.m_IUserDataTaskList.all.get_SyncManager (m_ComRetVal'Access);
         Retval.m_IUserDataTaskListSyncManager := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskListSyncManager;
         Retval.m_IUserDataTaskListSyncManager.all := m_ComRetVal;
      end return;
   end;

   procedure RegisterSyncManagerAsync
   (
      this : in out UserDataTaskList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskList.all.RegisterSyncManagerAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetTaskReader
   (
      this : in out UserDataTaskList
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskReader do
         Hr := this.m_IUserDataTaskList.all.GetTaskReader (m_ComRetVal'Access);
         Retval.m_IUserDataTaskReader := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskReader;
         Retval.m_IUserDataTaskReader.all := m_ComRetVal;
      end return;
   end;

   function GetTaskReader
   (
      this : in out UserDataTaskList;
      options : Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryOptions'Class
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskReader do
         Hr := this.m_IUserDataTaskList.all.GetTaskReader (options.m_IUserDataTaskQueryOptions.all, m_ComRetVal'Access);
         Retval.m_IUserDataTaskReader := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskReader;
         Retval.m_IUserDataTaskReader.all := m_ComRetVal;
      end return;
   end;

   function GetTaskAsync
   (
      this : in out UserDataTaskList;
      userDataTask_p : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTask'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userDataTask_p : WinRt.HString := To_HString (userDataTask_p);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UserDataTask.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UserDataTask.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTask;
      m_IID            : aliased WinRt.IID := (3099019697, 43079, 23604, (134, 108, 234, 86, 12, 222, 31, 73 )); -- Windows.ApplicationModel.UserDataTasks.UserDataTask;
      m_HandlerIID     : aliased WinRt.IID := (2805055693, 8301, 23288, (173, 100, 133, 183, 32, 15, 76, 226 ));
      m_Handler        : AsyncOperationCompletedHandler_UserDataTask.Kind := new AsyncOperationCompletedHandler_UserDataTask.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserDataTask.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserDataTask.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserDataTask.Kind_Delegate, AsyncOperationCompletedHandler_UserDataTask.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTask do
         Hr := this.m_IUserDataTaskList.all.GetTaskAsync (HStr_userDataTask_p, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUserDataTask := new Windows.ApplicationModel.UserDataTasks.IUserDataTask;
                  Retval.m_IUserDataTask.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_userDataTask_p);
      end return;
   end;

   procedure SaveTaskAsync
   (
      this : in out UserDataTaskList;
      userDataTask_p : Windows.ApplicationModel.UserDataTasks.UserDataTask'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskList.all.SaveTaskAsync (userDataTask_p.m_IUserDataTask.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteTaskAsync
   (
      this : in out UserDataTaskList;
      userDataTaskId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userDataTaskId : WinRt.HString := To_HString (userDataTaskId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskList.all.DeleteTaskAsync (HStr_userDataTaskId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userDataTaskId);
   end;

   procedure DeleteAsync
   (
      this : in out UserDataTaskList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskList.all.DeleteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SaveAsync
   (
      this : in out UserDataTaskList
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserDataTaskList.all.SaveAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListLimitedWriteOperations

   procedure Initialize (this : in out UserDataTaskListLimitedWriteOperations) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListLimitedWriteOperations) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListLimitedWriteOperations, IUserDataTaskListLimitedWriteOperations_Ptr);
   begin
      if this.m_IUserDataTaskListLimitedWriteOperations /= null then
         if this.m_IUserDataTaskListLimitedWriteOperations.all /= null then
            RefCount := this.m_IUserDataTaskListLimitedWriteOperations.all.Release;
            Free (this.m_IUserDataTaskListLimitedWriteOperations);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListLimitedWriteOperations

   function TryCompleteTaskAsync
   (
      this : in out UserDataTaskListLimitedWriteOperations;
      userDataTaskId : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userDataTaskId : WinRt.HString := To_HString (userDataTaskId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUserDataTaskListLimitedWriteOperations.all.TryCompleteTaskAsync (HStr_userDataTaskId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userDataTaskId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function TryCreateOrUpdateTaskAsync
   (
      this : in out UserDataTaskListLimitedWriteOperations;
      userDataTask_p : Windows.ApplicationModel.UserDataTasks.UserDataTask'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUserDataTaskListLimitedWriteOperations.all.TryCreateOrUpdateTaskAsync (userDataTask_p.m_IUserDataTask.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryDeleteTaskAsync
   (
      this : in out UserDataTaskListLimitedWriteOperations;
      userDataTaskId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userDataTaskId : WinRt.HString := To_HString (userDataTaskId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUserDataTaskListLimitedWriteOperations.all.TryDeleteTaskAsync (HStr_userDataTaskId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userDataTaskId);
      return m_RetVal;
   end;

   function TrySkipOccurrenceAsync
   (
      this : in out UserDataTaskListLimitedWriteOperations;
      userDataTaskId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userDataTaskId : WinRt.HString := To_HString (userDataTaskId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUserDataTaskListLimitedWriteOperations.all.TrySkipOccurrenceAsync (HStr_userDataTaskId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_userDataTaskId);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskListSyncManager

   procedure Initialize (this : in out UserDataTaskListSyncManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskListSyncManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskListSyncManager, IUserDataTaskListSyncManager_Ptr);
   begin
      if this.m_IUserDataTaskListSyncManager /= null then
         if this.m_IUserDataTaskListSyncManager.all /= null then
            RefCount := this.m_IUserDataTaskListSyncManager.all.Release;
            Free (this.m_IUserDataTaskListSyncManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskListSyncManager

   function get_LastAttemptedSyncTime
   (
      this : in out UserDataTaskListSyncManager
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.get_LastAttemptedSyncTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LastAttemptedSyncTime
   (
      this : in out UserDataTaskListSyncManager;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.put_LastAttemptedSyncTime (value);
   end;

   function get_LastSuccessfulSyncTime
   (
      this : in out UserDataTaskListSyncManager
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.get_LastSuccessfulSyncTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LastSuccessfulSyncTime
   (
      this : in out UserDataTaskListSyncManager;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.put_LastSuccessfulSyncTime (value);
   end;

   function get_Status
   (
      this : in out UserDataTaskListSyncManager
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncStatus;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Status
   (
      this : in out UserDataTaskListSyncManager;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskListSyncStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.put_Status (value);
   end;

   function SyncAsync
   (
      this : in out UserDataTaskListSyncManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.SyncAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_SyncStatusChanged
   (
      this : in out UserDataTaskListSyncManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.add_SyncStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SyncStatusChanged
   (
      this : in out UserDataTaskListSyncManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskListSyncManager.all.remove_SyncStatusChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskManager

   procedure Initialize (this : in out UserDataTaskManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskManager, IUserDataTaskManager_Ptr);
   begin
      if this.m_IUserDataTaskManager /= null then
         if this.m_IUserDataTaskManager.all /= null then
            RefCount := this.m_IUserDataTaskManager.all.Release;
            Free (this.m_IUserDataTaskManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UserDataTaskManager

   function GetDefault
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataTasks.UserDataTaskManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskManager do
         Hr := RoGetActivationFactory (m_hString, IID_IUserDataTaskManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserDataTaskManager := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskManager;
            Retval.m_IUserDataTaskManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataTasks.UserDataTaskManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskManager do
         Hr := RoGetActivationFactory (m_hString, IID_IUserDataTaskManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserDataTaskManager := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskManager;
            Retval.m_IUserDataTaskManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskManager

   function RequestStoreAsync
   (
      this : in out UserDataTaskManager;
      accessType : Windows.ApplicationModel.UserDataTasks.UserDataTaskStoreAccessType
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskStore'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UserDataTaskStore.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UserDataTaskStore.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskStore;
      m_IID            : aliased WinRt.IID := (3761000032, 30890, 24248, (186, 219, 234, 210, 45, 202, 150, 121 )); -- Windows.ApplicationModel.UserDataTasks.UserDataTaskStore;
      m_HandlerIID     : aliased WinRt.IID := (868861461, 12160, 22653, (159, 81, 2, 126, 196, 87, 183, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_UserDataTaskStore.Kind := new AsyncOperationCompletedHandler_UserDataTaskStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserDataTaskStore.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserDataTaskStore.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserDataTaskStore.Kind_Delegate, AsyncOperationCompletedHandler_UserDataTaskStore.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskStore do
         Hr := this.m_IUserDataTaskManager.all.RequestStoreAsync (accessType, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUserDataTaskStore := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskStore;
                  Retval.m_IUserDataTaskStore.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_User
   (
      this : in out UserDataTaskManager
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IUserDataTaskManager.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskQueryOptions

   procedure Initialize (this : in out UserDataTaskQueryOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskQueryOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskQueryOptions, IUserDataTaskQueryOptions_Ptr);
   begin
      if this.m_IUserDataTaskQueryOptions /= null then
         if this.m_IUserDataTaskQueryOptions.all /= null then
            RefCount := this.m_IUserDataTaskQueryOptions.all.Release;
            Free (this.m_IUserDataTaskQueryOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserDataTaskQueryOptions

   function Constructor return UserDataTaskQueryOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskQueryOptions;
   begin
      return RetVal : UserDataTaskQueryOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUserDataTaskQueryOptions := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskQueryOptions;
            Retval.m_IUserDataTaskQueryOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskQueryOptions

   function get_SortProperty
   (
      this : in out UserDataTaskQueryOptions
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskQuerySortProperty is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskQuerySortProperty;
   begin
      Hr := this.m_IUserDataTaskQueryOptions.all.get_SortProperty (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SortProperty
   (
      this : in out UserDataTaskQueryOptions;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskQuerySortProperty
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskQueryOptions.all.put_SortProperty (value);
   end;

   function get_Kind
   (
      this : in out UserDataTaskQueryOptions
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryKind;
   begin
      Hr := this.m_IUserDataTaskQueryOptions.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Kind
   (
      this : in out UserDataTaskQueryOptions;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskQueryKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskQueryOptions.all.put_Kind (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskReader

   procedure Initialize (this : in out UserDataTaskReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskReader, IUserDataTaskReader_Ptr);
   begin
      if this.m_IUserDataTaskReader /= null then
         if this.m_IUserDataTaskReader.all /= null then
            RefCount := this.m_IUserDataTaskReader.all.Release;
            Free (this.m_IUserDataTaskReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskReader

   function ReadBatchAsync
   (
      this : in out UserDataTaskReader
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskBatch'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UserDataTaskBatch.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UserDataTaskBatch.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskBatch;
      m_IID            : aliased WinRt.IID := (3547009247, 7339, 21580, (140, 46, 60, 123, 196, 210, 75, 36 )); -- Windows.ApplicationModel.UserDataTasks.UserDataTaskBatch;
      m_HandlerIID     : aliased WinRt.IID := (3862689976, 37360, 24339, (161, 201, 222, 225, 135, 157, 10, 82 ));
      m_Handler        : AsyncOperationCompletedHandler_UserDataTaskBatch.Kind := new AsyncOperationCompletedHandler_UserDataTaskBatch.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserDataTaskBatch.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserDataTaskBatch.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserDataTaskBatch.Kind_Delegate, AsyncOperationCompletedHandler_UserDataTaskBatch.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskBatch do
         Hr := this.m_IUserDataTaskReader.all.ReadBatchAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUserDataTaskBatch := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskBatch;
                  Retval.m_IUserDataTaskBatch.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskRecurrenceProperties

   procedure Initialize (this : in out UserDataTaskRecurrenceProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskRecurrenceProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskRecurrenceProperties, IUserDataTaskRecurrenceProperties_Ptr);
   begin
      if this.m_IUserDataTaskRecurrenceProperties /= null then
         if this.m_IUserDataTaskRecurrenceProperties.all /= null then
            RefCount := this.m_IUserDataTaskRecurrenceProperties.all.Release;
            Free (this.m_IUserDataTaskRecurrenceProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserDataTaskRecurrenceProperties

   function Constructor return UserDataTaskRecurrenceProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceProperties");
      m_ComRetVal  : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskRecurrenceProperties;
   begin
      return RetVal : UserDataTaskRecurrenceProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUserDataTaskRecurrenceProperties := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskRecurrenceProperties;
            Retval.m_IUserDataTaskRecurrenceProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskRecurrenceProperties

   function get_Unit
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceUnit is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceUnit;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_Unit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Unit
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskRecurrenceUnit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_Unit (value);
   end;

   function get_Occurrences
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_Occurrences (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Occurrences
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_Occurrences (value);
   end;

   function get_Until
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_Until (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Until
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_Until (value);
   end;

   function get_Interval
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_Interval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Interval
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_Interval (value);
   end;

   function get_DaysOfWeek
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return IReference_UserDataTaskDaysOfWeek.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UserDataTaskDaysOfWeek.Kind;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_DaysOfWeek (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UserDataTaskDaysOfWeek (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DaysOfWeek
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_DaysOfWeek (value);
   end;

   function get_WeekOfMonth
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return IReference_UserDataTaskWeekOfMonth.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UserDataTaskWeekOfMonth.Kind;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_WeekOfMonth (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UserDataTaskWeekOfMonth (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_WeekOfMonth
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_WeekOfMonth (value);
   end;

   function get_Month
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_Month (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Month
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_Month (value);
   end;

   function get_Day
   (
      this : in out UserDataTaskRecurrenceProperties
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.get_Day (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Day
   (
      this : in out UserDataTaskRecurrenceProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRecurrenceProperties.all.put_Day (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskRegenerationProperties

   procedure Initialize (this : in out UserDataTaskRegenerationProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskRegenerationProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskRegenerationProperties, IUserDataTaskRegenerationProperties_Ptr);
   begin
      if this.m_IUserDataTaskRegenerationProperties /= null then
         if this.m_IUserDataTaskRegenerationProperties.all /= null then
            RefCount := this.m_IUserDataTaskRegenerationProperties.all.Release;
            Free (this.m_IUserDataTaskRegenerationProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserDataTaskRegenerationProperties

   function Constructor return UserDataTaskRegenerationProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties");
      m_ComRetVal  : aliased Windows.ApplicationModel.UserDataTasks.IUserDataTaskRegenerationProperties;
   begin
      return RetVal : UserDataTaskRegenerationProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUserDataTaskRegenerationProperties := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskRegenerationProperties;
            Retval.m_IUserDataTaskRegenerationProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskRegenerationProperties

   function get_Unit
   (
      this : in out UserDataTaskRegenerationProperties
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationUnit is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationUnit;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.get_Unit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Unit
   (
      this : in out UserDataTaskRegenerationProperties;
      value : Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationUnit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.put_Unit (value);
   end;

   function get_Occurrences
   (
      this : in out UserDataTaskRegenerationProperties
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.get_Occurrences (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Occurrences
   (
      this : in out UserDataTaskRegenerationProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.put_Occurrences (value);
   end;

   function get_Until
   (
      this : in out UserDataTaskRegenerationProperties
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.get_Until (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Until
   (
      this : in out UserDataTaskRegenerationProperties;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.put_Until (value);
   end;

   function get_Interval
   (
      this : in out UserDataTaskRegenerationProperties
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.get_Interval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Interval
   (
      this : in out UserDataTaskRegenerationProperties;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataTaskRegenerationProperties.all.put_Interval (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataTaskStore

   procedure Initialize (this : in out UserDataTaskStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataTaskStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataTaskStore, IUserDataTaskStore_Ptr);
   begin
      if this.m_IUserDataTaskStore /= null then
         if this.m_IUserDataTaskStore.all /= null then
            RefCount := this.m_IUserDataTaskStore.all.Release;
            Free (this.m_IUserDataTaskStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataTaskStore

   function CreateListAsync
   (
      this : in out UserDataTaskStore;
      name : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UserDataTaskList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UserDataTaskList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskList;
      m_IID            : aliased WinRt.IID := (3643231986, 25568, 21580, (141, 178, 254, 45, 91, 130, 93, 158 )); -- Windows.ApplicationModel.UserDataTasks.UserDataTaskList;
      m_HandlerIID     : aliased WinRt.IID := (4009460042, 27383, 23897, (191, 63, 182, 199, 59, 140, 116, 162 ));
      m_Handler        : AsyncOperationCompletedHandler_UserDataTaskList.Kind := new AsyncOperationCompletedHandler_UserDataTaskList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserDataTaskList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserDataTaskList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserDataTaskList.Kind_Delegate, AsyncOperationCompletedHandler_UserDataTaskList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskList do
         Hr := this.m_IUserDataTaskStore.all.CreateListAsync (HStr_name, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUserDataTaskList := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskList;
                  Retval.m_IUserDataTaskList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function CreateListAsync
   (
      this : in out UserDataTaskStore;
      name : WinRt.WString;
      userDataAccountId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_userDataAccountId : WinRt.HString := To_HString (userDataAccountId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UserDataTaskList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UserDataTaskList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskList;
      m_IID            : aliased WinRt.IID := (3643231986, 25568, 21580, (141, 178, 254, 45, 91, 130, 93, 158 )); -- Windows.ApplicationModel.UserDataTasks.UserDataTaskList;
      m_HandlerIID     : aliased WinRt.IID := (4009460042, 27383, 23897, (191, 63, 182, 199, 59, 140, 116, 162 ));
      m_Handler        : AsyncOperationCompletedHandler_UserDataTaskList.Kind := new AsyncOperationCompletedHandler_UserDataTaskList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserDataTaskList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserDataTaskList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserDataTaskList.Kind_Delegate, AsyncOperationCompletedHandler_UserDataTaskList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskList do
         Hr := this.m_IUserDataTaskStore.all.CreateListAsync (HStr_name, HStr_userDataAccountId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUserDataTaskList := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskList;
                  Retval.m_IUserDataTaskList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_userDataAccountId);
      end return;
   end;

   function FindListsAsync
   (
      this : in out UserDataTaskStore
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (709756654, 36912, 23782, (173, 127, 207, 85, 23, 149, 118, 93 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1253737832, 21041, 21100, (178, 228, 128, 80, 6, 184, 239, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IUserDataTaskStore.all.FindListsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetListAsync
   (
      this : in out UserDataTaskStore;
      taskListId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_taskListId : WinRt.HString := To_HString (taskListId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UserDataTaskList.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UserDataTaskList.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserDataTasks.IUserDataTaskList;
      m_IID            : aliased WinRt.IID := (3643231986, 25568, 21580, (141, 178, 254, 45, 91, 130, 93, 158 )); -- Windows.ApplicationModel.UserDataTasks.UserDataTaskList;
      m_HandlerIID     : aliased WinRt.IID := (4009460042, 27383, 23897, (191, 63, 182, 199, 59, 140, 116, 162 ));
      m_Handler        : AsyncOperationCompletedHandler_UserDataTaskList.Kind := new AsyncOperationCompletedHandler_UserDataTaskList.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserDataTaskList.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserDataTaskList.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserDataTaskList.Kind_Delegate, AsyncOperationCompletedHandler_UserDataTaskList.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserDataTasks.UserDataTaskList do
         Hr := this.m_IUserDataTaskStore.all.GetListAsync (HStr_taskListId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUserDataTaskList := new Windows.ApplicationModel.UserDataTasks.IUserDataTaskList;
                  Retval.m_IUserDataTaskList.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_taskListId);
      end return;
   end;

end;

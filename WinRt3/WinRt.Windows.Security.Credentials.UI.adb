--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Credentials.UI is

   package IAsyncOperation_CredentialPickerResults is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.UI.ICredentialPickerResults);
   package AsyncOperationCompletedHandler_CredentialPickerResults is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.UI.ICredentialPickerResults);

   package IAsyncOperation_UserConsentVerifierAvailability is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.UI.UserConsentVerifierAvailability);
   package AsyncOperationCompletedHandler_UserConsentVerifierAvailability is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.UI.UserConsentVerifierAvailability);

   package IAsyncOperation_UserConsentVerificationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.UI.UserConsentVerificationResult);
   package AsyncOperationCompletedHandler_UserConsentVerificationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.UI.UserConsentVerificationResult);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CredentialPicker is

      function PickAsync
      (
         options : Windows.Security.Credentials.UI.CredentialPickerOptions'Class
      )
      return WinRt.Windows.Security.Credentials.UI.CredentialPickerResults is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.UI.CredentialPicker");
         m_Factory        : access WinRt.Windows.Security.Credentials.UI.ICredentialPickerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_CredentialPickerResults.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_CredentialPickerResults.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.UI.ICredentialPickerResults;
         m_IID            : aliased WinRt.IID := (2214398372, 8701, 23553, (156, 246, 130, 147, 178, 146, 154, 159 )); -- Windows.Security.Credentials.UI.CredentialPickerResults;
         m_HandlerIID     : aliased WinRt.IID := (152737464, 21158, 21050, (140, 148, 127, 156, 17, 198, 218, 229 ));
         m_Handler        : AsyncOperationCompletedHandler_CredentialPickerResults.Kind := new AsyncOperationCompletedHandler_CredentialPickerResults.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CredentialPickerResults.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CredentialPickerResults.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CredentialPickerResults.Kind_Delegate, AsyncOperationCompletedHandler_CredentialPickerResults.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.UI.CredentialPickerResults do
            Hr := RoGetActivationFactory (m_hString, IID_ICredentialPickerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.PickAsync (options.m_ICredentialPickerOptions.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ICredentialPickerResults := new Windows.Security.Credentials.UI.ICredentialPickerResults;
                        Retval.m_ICredentialPickerResults.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function PickAsync
      (
         targetName : WinRt.WString;
         message : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.UI.CredentialPickerResults is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.UI.CredentialPicker");
         m_Factory        : access WinRt.Windows.Security.Credentials.UI.ICredentialPickerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_targetName : WinRt.HString := To_HString (targetName);
         HStr_message : WinRt.HString := To_HString (message);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_CredentialPickerResults.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_CredentialPickerResults.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.UI.ICredentialPickerResults;
         m_IID            : aliased WinRt.IID := (2214398372, 8701, 23553, (156, 246, 130, 147, 178, 146, 154, 159 )); -- Windows.Security.Credentials.UI.CredentialPickerResults;
         m_HandlerIID     : aliased WinRt.IID := (152737464, 21158, 21050, (140, 148, 127, 156, 17, 198, 218, 229 ));
         m_Handler        : AsyncOperationCompletedHandler_CredentialPickerResults.Kind := new AsyncOperationCompletedHandler_CredentialPickerResults.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CredentialPickerResults.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CredentialPickerResults.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CredentialPickerResults.Kind_Delegate, AsyncOperationCompletedHandler_CredentialPickerResults.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.UI.CredentialPickerResults do
            Hr := RoGetActivationFactory (m_hString, IID_ICredentialPickerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.PickAsync (HStr_targetName, HStr_message, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ICredentialPickerResults := new Windows.Security.Credentials.UI.ICredentialPickerResults;
                        Retval.m_ICredentialPickerResults.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_targetName);
            Hr := WindowsDeleteString (HStr_message);
         end return;
      end;

      function PickAsync
      (
         targetName : WinRt.WString;
         message : WinRt.WString;
         caption : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.UI.CredentialPickerResults is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.UI.CredentialPicker");
         m_Factory        : access WinRt.Windows.Security.Credentials.UI.ICredentialPickerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_targetName : WinRt.HString := To_HString (targetName);
         HStr_message : WinRt.HString := To_HString (message);
         HStr_caption : WinRt.HString := To_HString (caption);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_CredentialPickerResults.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_CredentialPickerResults.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.UI.ICredentialPickerResults;
         m_IID            : aliased WinRt.IID := (2214398372, 8701, 23553, (156, 246, 130, 147, 178, 146, 154, 159 )); -- Windows.Security.Credentials.UI.CredentialPickerResults;
         m_HandlerIID     : aliased WinRt.IID := (152737464, 21158, 21050, (140, 148, 127, 156, 17, 198, 218, 229 ));
         m_Handler        : AsyncOperationCompletedHandler_CredentialPickerResults.Kind := new AsyncOperationCompletedHandler_CredentialPickerResults.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CredentialPickerResults.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CredentialPickerResults.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CredentialPickerResults.Kind_Delegate, AsyncOperationCompletedHandler_CredentialPickerResults.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.UI.CredentialPickerResults do
            Hr := RoGetActivationFactory (m_hString, IID_ICredentialPickerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.PickAsync (HStr_targetName, HStr_message, HStr_caption, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ICredentialPickerResults := new Windows.Security.Credentials.UI.ICredentialPickerResults;
                        Retval.m_ICredentialPickerResults.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_targetName);
            Hr := WindowsDeleteString (HStr_message);
            Hr := WindowsDeleteString (HStr_caption);
         end return;
      end;

   end CredentialPicker;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CredentialPickerOptions

   procedure Initialize (this : in out CredentialPickerOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out CredentialPickerOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICredentialPickerOptions, ICredentialPickerOptions_Ptr);
   begin
      if this.m_ICredentialPickerOptions /= null then
         if this.m_ICredentialPickerOptions.all /= null then
            RefCount := this.m_ICredentialPickerOptions.all.Release;
            Free (this.m_ICredentialPickerOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CredentialPickerOptions

   function Constructor return CredentialPickerOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Credentials.UI.CredentialPickerOptions");
      m_ComRetVal  : aliased Windows.Security.Credentials.UI.ICredentialPickerOptions;
   begin
      return RetVal : CredentialPickerOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICredentialPickerOptions := new Windows.Security.Credentials.UI.ICredentialPickerOptions;
            Retval.m_ICredentialPickerOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CredentialPickerOptions

   procedure put_Caption
   (
      this : in out CredentialPickerOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_Caption (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Caption
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_Caption (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Message
   (
      this : in out CredentialPickerOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_Message (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Message
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ErrorCode
   (
      this : in out CredentialPickerOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_ErrorCode (value);
   end;

   function get_ErrorCode
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TargetName
   (
      this : in out CredentialPickerOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_TargetName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TargetName
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_TargetName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AuthenticationProtocol
   (
      this : in out CredentialPickerOptions;
      value : Windows.Security.Credentials.UI.AuthenticationProtocol
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_AuthenticationProtocol (value);
   end;

   function get_AuthenticationProtocol
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.Windows.Security.Credentials.UI.AuthenticationProtocol is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.UI.AuthenticationProtocol;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_AuthenticationProtocol (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomAuthenticationProtocol
   (
      this : in out CredentialPickerOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_CustomAuthenticationProtocol (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CustomAuthenticationProtocol
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_CustomAuthenticationProtocol (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PreviousCredential
   (
      this : in out CredentialPickerOptions;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_PreviousCredential (value);
   end;

   function get_PreviousCredential
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_PreviousCredential (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AlwaysDisplayDialog
   (
      this : in out CredentialPickerOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_AlwaysDisplayDialog (value);
   end;

   function get_AlwaysDisplayDialog
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_AlwaysDisplayDialog (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CallerSavesCredential
   (
      this : in out CredentialPickerOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_CallerSavesCredential (value);
   end;

   function get_CallerSavesCredential
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_CallerSavesCredential (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CredentialSaveOption
   (
      this : in out CredentialPickerOptions;
      value : Windows.Security.Credentials.UI.CredentialSaveOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICredentialPickerOptions.all.put_CredentialSaveOption (value);
   end;

   function get_CredentialSaveOption
   (
      this : in out CredentialPickerOptions
   )
   return WinRt.Windows.Security.Credentials.UI.CredentialSaveOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.UI.CredentialSaveOption;
   begin
      Hr := this.m_ICredentialPickerOptions.all.get_CredentialSaveOption (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CredentialPickerResults

   procedure Initialize (this : in out CredentialPickerResults) is
   begin
      null;
   end;

   procedure Finalize (this : in out CredentialPickerResults) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICredentialPickerResults, ICredentialPickerResults_Ptr);
   begin
      if this.m_ICredentialPickerResults /= null then
         if this.m_ICredentialPickerResults.all /= null then
            RefCount := this.m_ICredentialPickerResults.all.Release;
            Free (this.m_ICredentialPickerResults);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CredentialPickerResults

   function get_ErrorCode
   (
      this : in out CredentialPickerResults
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICredentialPickerResults.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CredentialSaveOption
   (
      this : in out CredentialPickerResults
   )
   return WinRt.Windows.Security.Credentials.UI.CredentialSaveOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.UI.CredentialSaveOption;
   begin
      Hr := this.m_ICredentialPickerResults.all.get_CredentialSaveOption (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CredentialSaved
   (
      this : in out CredentialPickerResults
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICredentialPickerResults.all.get_CredentialSaved (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Credential
   (
      this : in out CredentialPickerResults
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ICredentialPickerResults.all.get_Credential (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CredentialDomainName
   (
      this : in out CredentialPickerResults
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICredentialPickerResults.all.get_CredentialDomainName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CredentialUserName
   (
      this : in out CredentialPickerResults
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICredentialPickerResults.all.get_CredentialUserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CredentialPassword
   (
      this : in out CredentialPickerResults
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICredentialPickerResults.all.get_CredentialPassword (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body UserConsentVerifier is

      function CheckAvailabilityAsync
      return WinRt.Windows.Security.Credentials.UI.UserConsentVerifierAvailability is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.UI.UserConsentVerifier");
         m_Factory        : access WinRt.Windows.Security.Credentials.UI.IUserConsentVerifierStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_UserConsentVerifierAvailability.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_UserConsentVerifierAvailability.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.UI.UserConsentVerifierAvailability;
         m_IID            : aliased WinRt.IID := (3721626867, 55320, 23939, (171, 75, 50, 17, 156, 40, 88, 124 )); -- Windows.Security.Credentials.UI.UserConsentVerifierAvailability;
         m_HandlerIID     : aliased WinRt.IID := (681083252, 44258, 23573, (160, 223, 88, 10, 38, 217, 66, 148 ));
         m_Handler        : AsyncOperationCompletedHandler_UserConsentVerifierAvailability.Kind := new AsyncOperationCompletedHandler_UserConsentVerifierAvailability.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserConsentVerifierAvailability.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserConsentVerifierAvailability.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserConsentVerifierAvailability.Kind_Delegate, AsyncOperationCompletedHandler_UserConsentVerifierAvailability.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserConsentVerifierStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CheckAvailabilityAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function RequestVerificationAsync
      (
         message : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.UI.UserConsentVerificationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Credentials.UI.UserConsentVerifier");
         m_Factory        : access WinRt.Windows.Security.Credentials.UI.IUserConsentVerifierStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_message : WinRt.HString := To_HString (message);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_UserConsentVerificationResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_UserConsentVerificationResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.UI.UserConsentVerificationResult;
         m_IID            : aliased WinRt.IID := (4250497021, 8984, 21903, (157, 190, 210, 29, 244, 55, 100, 165 )); -- Windows.Security.Credentials.UI.UserConsentVerificationResult;
         m_HandlerIID     : aliased WinRt.IID := (218089161, 19499, 23764, (179, 140, 123, 141, 243, 255, 90, 251 ));
         m_Handler        : AsyncOperationCompletedHandler_UserConsentVerificationResult.Kind := new AsyncOperationCompletedHandler_UserConsentVerificationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserConsentVerificationResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserConsentVerificationResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserConsentVerificationResult.Kind_Delegate, AsyncOperationCompletedHandler_UserConsentVerificationResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IUserConsentVerifierStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestVerificationAsync (HStr_message, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_message);
         return m_RetVal;
      end;

   end UserConsentVerifier;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation.Numerics;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Perception.Spatial.Preview is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialGraphInteropFrameOfReferencePreview

   procedure Initialize (this : in out SpatialGraphInteropFrameOfReferencePreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialGraphInteropFrameOfReferencePreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialGraphInteropFrameOfReferencePreview, ISpatialGraphInteropFrameOfReferencePreview_Ptr);
   begin
      if this.m_ISpatialGraphInteropFrameOfReferencePreview /= null then
         if this.m_ISpatialGraphInteropFrameOfReferencePreview.all /= null then
            RefCount := this.m_ISpatialGraphInteropFrameOfReferencePreview.all.Release;
            Free (this.m_ISpatialGraphInteropFrameOfReferencePreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialGraphInteropFrameOfReferencePreview

   function get_CoordinateSystem
   (
      this : in out SpatialGraphInteropFrameOfReferencePreview
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_ISpatialGraphInteropFrameOfReferencePreview.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   function get_NodeId
   (
      this : in out SpatialGraphInteropFrameOfReferencePreview
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ISpatialGraphInteropFrameOfReferencePreview.all.get_NodeId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CoordinateSystemToNodeTransform
   (
      this : in out SpatialGraphInteropFrameOfReferencePreview
   )
   return WinRt.Windows.Foundation.Numerics.Matrix4x4 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix4x4;
   begin
      Hr := this.m_ISpatialGraphInteropFrameOfReferencePreview.all.get_CoordinateSystemToNodeTransform (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SpatialGraphInteropPreview is

      function CreateCoordinateSystemForNode
      (
         nodeId : WinRt.Guid
      )
      return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview");
         m_Factory        : access WinRt.Windows.Perception.Spatial.Preview.ISpatialGraphInteropPreviewStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
      begin
         return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialGraphInteropPreviewStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateCoordinateSystemForNode (nodeId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
               Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateCoordinateSystemForNode
      (
         nodeId : WinRt.Guid;
         relativePosition : Windows.Foundation.Numerics.Vector3
      )
      return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview");
         m_Factory        : access WinRt.Windows.Perception.Spatial.Preview.ISpatialGraphInteropPreviewStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
      begin
         return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialGraphInteropPreviewStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateCoordinateSystemForNode (nodeId, relativePosition, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
               Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateCoordinateSystemForNode
      (
         nodeId : WinRt.Guid;
         relativePosition : Windows.Foundation.Numerics.Vector3;
         relativeOrientation : Windows.Foundation.Numerics.Quaternion
      )
      return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview");
         m_Factory        : access WinRt.Windows.Perception.Spatial.Preview.ISpatialGraphInteropPreviewStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
      begin
         return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialGraphInteropPreviewStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateCoordinateSystemForNode (nodeId, relativePosition, relativeOrientation, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
               Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateLocatorForNode
      (
         nodeId : WinRt.Guid
      )
      return WinRt.Windows.Perception.Spatial.SpatialLocator is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview");
         m_Factory        : access WinRt.Windows.Perception.Spatial.Preview.ISpatialGraphInteropPreviewStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialLocator;
      begin
         return RetVal : WinRt.Windows.Perception.Spatial.SpatialLocator do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialGraphInteropPreviewStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateLocatorForNode (nodeId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISpatialLocator := new Windows.Perception.Spatial.ISpatialLocator;
               Retval.m_ISpatialLocator.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function TryCreateFrameOfReference
      (
         coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
      )
      return WinRt.Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview");
         m_Factory        : access WinRt.Windows.Perception.Spatial.Preview.ISpatialGraphInteropPreviewStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Perception.Spatial.Preview.ISpatialGraphInteropFrameOfReferencePreview;
      begin
         return RetVal : WinRt.Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialGraphInteropPreviewStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.TryCreateFrameOfReference (coordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISpatialGraphInteropFrameOfReferencePreview := new Windows.Perception.Spatial.Preview.ISpatialGraphInteropFrameOfReferencePreview;
               Retval.m_ISpatialGraphInteropFrameOfReferencePreview.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function TryCreateFrameOfReference
      (
         coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
         relativePosition : Windows.Foundation.Numerics.Vector3
      )
      return WinRt.Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview");
         m_Factory        : access WinRt.Windows.Perception.Spatial.Preview.ISpatialGraphInteropPreviewStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Perception.Spatial.Preview.ISpatialGraphInteropFrameOfReferencePreview;
      begin
         return RetVal : WinRt.Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialGraphInteropPreviewStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.TryCreateFrameOfReference (coordinateSystem.m_ISpatialCoordinateSystem.all, relativePosition, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISpatialGraphInteropFrameOfReferencePreview := new Windows.Perception.Spatial.Preview.ISpatialGraphInteropFrameOfReferencePreview;
               Retval.m_ISpatialGraphInteropFrameOfReferencePreview.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function TryCreateFrameOfReference
      (
         coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
         relativePosition : Windows.Foundation.Numerics.Vector3;
         relativeOrientation : Windows.Foundation.Numerics.Quaternion
      )
      return WinRt.Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Perception.Spatial.Preview.SpatialGraphInteropPreview");
         m_Factory        : access WinRt.Windows.Perception.Spatial.Preview.ISpatialGraphInteropPreviewStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Perception.Spatial.Preview.ISpatialGraphInteropFrameOfReferencePreview;
      begin
         return RetVal : WinRt.Windows.Perception.Spatial.Preview.SpatialGraphInteropFrameOfReferencePreview do
            Hr := RoGetActivationFactory (m_hString, IID_ISpatialGraphInteropPreviewStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.TryCreateFrameOfReference (coordinateSystem.m_ISpatialCoordinateSystem.all, relativePosition, relativeOrientation, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISpatialGraphInteropFrameOfReferencePreview := new Windows.Perception.Spatial.Preview.ISpatialGraphInteropFrameOfReferencePreview;
               Retval.m_ISpatialGraphInteropFrameOfReferencePreview.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end SpatialGraphInteropPreview;

end;

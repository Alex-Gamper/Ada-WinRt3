--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Geolocation;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Wallet is

   package IAsyncOperation_IRandomAccessStreamReference is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);
   package AsyncOperationCompletedHandler_IRandomAccessStreamReference is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference);

   package IAsyncOperation_WalletItem is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Wallet.IWalletItem);
   package AsyncOperationCompletedHandler_WalletItem is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Wallet.IWalletItem);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_WalletItemStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Wallet.IWalletItemStore);
   package AsyncOperationCompletedHandler_WalletItemStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Wallet.IWalletItemStore);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletBarcode

   procedure Initialize (this : in out WalletBarcode) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletBarcode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletBarcode, IWalletBarcode_Ptr);
   begin
      if this.m_IWalletBarcode /= null then
         if this.m_IWalletBarcode.all /= null then
            RefCount := this.m_IWalletBarcode.all.Release;
            Free (this.m_IWalletBarcode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WalletBarcode

   function Constructor
   (
      symbology : Windows.ApplicationModel.Wallet.WalletBarcodeSymbology;
      value : WinRt.WString
   )
   return WalletBarcode is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletBarcode");
      m_Factory    : access IWalletBarcodeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Wallet.IWalletBarcode;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : WalletBarcode do
         Hr := RoGetActivationFactory (m_hString, IID_IWalletBarcodeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWalletBarcode (symbology, HStr_value, m_ComRetVal'Access);
            Retval.m_IWalletBarcode := new Windows.ApplicationModel.Wallet.IWalletBarcode;
            Retval.m_IWalletBarcode.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function Constructor
   (
      streamToBarcodeImage : Windows.Storage.Streams.IRandomAccessStreamReference
   )
   return WalletBarcode is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletBarcode");
      m_Factory    : access IWalletBarcodeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Wallet.IWalletBarcode;
   begin
      return RetVal : WalletBarcode do
         Hr := RoGetActivationFactory (m_hString, IID_IWalletBarcodeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCustomWalletBarcode (streamToBarcodeImage, m_ComRetVal'Access);
            Retval.m_IWalletBarcode := new Windows.ApplicationModel.Wallet.IWalletBarcode;
            Retval.m_IWalletBarcode.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletBarcode

   function get_Symbology
   (
      this : in out WalletBarcode
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletBarcodeSymbology is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Wallet.WalletBarcodeSymbology;
   begin
      Hr := this.m_IWalletBarcode.all.get_Symbology (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out WalletBarcode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletBarcode.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetImageAsync
   (
      this : in out WalletBarcode
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamReference.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamReference.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
      m_IID            : aliased WinRt.IID := (1696042320, 59042, 23830, (178, 68, 101, 233, 114, 94, 90, 12 )); -- Windows.Storage.Streams.IRandomAccessStreamReference;
      m_HandlerIID     : aliased WinRt.IID := (1619292809, 59915, 24054, (137, 223, 242, 198, 44, 186, 150, 147 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamReference.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamReference.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IWalletBarcode.all.GetImageAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletItem

   procedure Initialize (this : in out WalletItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletItem, IWalletItem_Ptr);
   begin
      if this.m_IWalletItem /= null then
         if this.m_IWalletItem.all /= null then
            RefCount := this.m_IWalletItem.all.Release;
            Free (this.m_IWalletItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WalletItem

   function Constructor
   (
      kind : Windows.ApplicationModel.Wallet.WalletItemKind;
      displayName : WinRt.WString
   )
   return WalletItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletItem");
      m_Factory    : access IWalletItemFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Wallet.IWalletItem;
      HStr_displayName : WinRt.HString := To_HString (displayName);
   begin
      return RetVal : WalletItem do
         Hr := RoGetActivationFactory (m_hString, IID_IWalletItemFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWalletItem (kind, HStr_displayName, m_ComRetVal'Access);
            Retval.m_IWalletItem := new Windows.ApplicationModel.Wallet.IWalletItem;
            Retval.m_IWalletItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletItem

   function get_DisplayName
   (
      this : in out WalletItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItem.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out WalletItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletItem.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Id
   (
      this : in out WalletItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItem.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsAcknowledged
   (
      this : in out WalletItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWalletItem.all.get_IsAcknowledged (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsAcknowledged
   (
      this : in out WalletItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_IsAcknowledged (value);
   end;

   function get_IssuerDisplayName
   (
      this : in out WalletItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItem.all.get_IssuerDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_IssuerDisplayName
   (
      this : in out WalletItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletItem.all.put_IssuerDisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_LastUpdated
   (
      this : in out WalletItem
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IWalletItem.all.get_LastUpdated (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_LastUpdated
   (
      this : in out WalletItem;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_LastUpdated (value);
   end;

   function get_Kind
   (
      this : in out WalletItem
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletItemKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Wallet.WalletItemKind;
   begin
      Hr := this.m_IWalletItem.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Barcode
   (
      this : in out WalletItem
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletBarcode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Wallet.IWalletBarcode;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Wallet.WalletBarcode do
         Hr := this.m_IWalletItem.all.get_Barcode (m_ComRetVal'Access);
         Retval.m_IWalletBarcode := new Windows.ApplicationModel.Wallet.IWalletBarcode;
         Retval.m_IWalletBarcode.all := m_ComRetVal;
      end return;
   end;

   procedure put_Barcode
   (
      this : in out WalletItem;
      value : Windows.ApplicationModel.Wallet.WalletBarcode'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_Barcode (value.m_IWalletBarcode.all);
   end;

   function get_ExpirationDate
   (
      this : in out WalletItem
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IWalletItem.all.get_ExpirationDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ExpirationDate
   (
      this : in out WalletItem;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_ExpirationDate (value);
   end;

   function get_Logo159x159
   (
      this : in out WalletItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IWalletItem.all.get_Logo159x159 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Logo159x159
   (
      this : in out WalletItem;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_Logo159x159 (value);
   end;

   function get_Logo336x336
   (
      this : in out WalletItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IWalletItem.all.get_Logo336x336 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Logo336x336
   (
      this : in out WalletItem;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_Logo336x336 (value);
   end;

   function get_Logo99x99
   (
      this : in out WalletItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IWalletItem.all.get_Logo99x99 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Logo99x99
   (
      this : in out WalletItem;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_Logo99x99 (value);
   end;

   function get_DisplayMessage
   (
      this : in out WalletItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItem.all.get_DisplayMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayMessage
   (
      this : in out WalletItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletItem.all.put_DisplayMessage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsDisplayMessageLaunchable
   (
      this : in out WalletItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWalletItem.all.get_IsDisplayMessageLaunchable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDisplayMessageLaunchable
   (
      this : in out WalletItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_IsDisplayMessageLaunchable (value);
   end;

   function get_LogoText
   (
      this : in out WalletItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItem.all.get_LogoText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LogoText
   (
      this : in out WalletItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletItem.all.put_LogoText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_HeaderColor
   (
      this : in out WalletItem
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IWalletItem.all.get_HeaderColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HeaderColor
   (
      this : in out WalletItem;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_HeaderColor (value);
   end;

   function get_BodyColor
   (
      this : in out WalletItem
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IWalletItem.all.get_BodyColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BodyColor
   (
      this : in out WalletItem;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_BodyColor (value);
   end;

   function get_HeaderFontColor
   (
      this : in out WalletItem
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IWalletItem.all.get_HeaderFontColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HeaderFontColor
   (
      this : in out WalletItem;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_HeaderFontColor (value);
   end;

   function get_BodyFontColor
   (
      this : in out WalletItem
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IWalletItem.all.get_BodyFontColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BodyFontColor
   (
      this : in out WalletItem;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_BodyFontColor (value);
   end;

   function get_HeaderBackgroundImage
   (
      this : in out WalletItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IWalletItem.all.get_HeaderBackgroundImage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HeaderBackgroundImage
   (
      this : in out WalletItem;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_HeaderBackgroundImage (value);
   end;

   function get_BodyBackgroundImage
   (
      this : in out WalletItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IWalletItem.all.get_BodyBackgroundImage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BodyBackgroundImage
   (
      this : in out WalletItem;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_BodyBackgroundImage (value);
   end;

   function get_LogoImage
   (
      this : in out WalletItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IWalletItem.all.get_LogoImage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LogoImage
   (
      this : in out WalletItem;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_LogoImage (value);
   end;

   function get_PromotionalImage
   (
      this : in out WalletItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IWalletItem.all.get_PromotionalImage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PromotionalImage
   (
      this : in out WalletItem;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_PromotionalImage (value);
   end;

   function get_RelevantDate
   (
      this : in out WalletItem
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IWalletItem.all.get_RelevantDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_RelevantDate
   (
      this : in out WalletItem;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_RelevantDate (value);
   end;

   function get_RelevantDateDisplayMessage
   (
      this : in out WalletItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItem.all.get_RelevantDateDisplayMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RelevantDateDisplayMessage
   (
      this : in out WalletItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletItem.all.put_RelevantDateDisplayMessage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TransactionHistory
   (
      this : in out WalletItem
   )
   return IMap_HString_IWalletTransaction.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_IWalletTransaction.Kind;
   begin
      Hr := this.m_IWalletItem.all.get_TransactionHistory (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_IWalletTransaction (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RelevantLocations
   (
      this : in out WalletItem
   )
   return IMap_HString_IWalletRelevantLocation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_IWalletRelevantLocation.Kind;
   begin
      Hr := this.m_IWalletItem.all.get_RelevantLocations (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_IWalletRelevantLocation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsMoreTransactionHistoryLaunchable
   (
      this : in out WalletItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWalletItem.all.get_IsMoreTransactionHistoryLaunchable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsMoreTransactionHistoryLaunchable
   (
      this : in out WalletItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItem.all.put_IsMoreTransactionHistoryLaunchable (value);
   end;

   function get_DisplayProperties
   (
      this : in out WalletItem
   )
   return IMap_HString_IWalletItemCustomProperty.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_IWalletItemCustomProperty.Kind;
   begin
      Hr := this.m_IWalletItem.all.get_DisplayProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_IWalletItemCustomProperty (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Verbs
   (
      this : in out WalletItem
   )
   return IMap_HString_IWalletVerb.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_IWalletVerb.Kind;
   begin
      Hr := this.m_IWalletItem.all.get_Verbs (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_IWalletVerb (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletItemCustomProperty

   procedure Initialize (this : in out WalletItemCustomProperty) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletItemCustomProperty) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletItemCustomProperty, IWalletItemCustomProperty_Ptr);
   begin
      if this.m_IWalletItemCustomProperty /= null then
         if this.m_IWalletItemCustomProperty.all /= null then
            RefCount := this.m_IWalletItemCustomProperty.all.Release;
            Free (this.m_IWalletItemCustomProperty);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WalletItemCustomProperty

   function Constructor
   (
      name : WinRt.WString;
      value : WinRt.WString
   )
   return WalletItemCustomProperty is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletItemCustomProperty");
      m_Factory    : access IWalletItemCustomPropertyFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Wallet.IWalletItemCustomProperty;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : WalletItemCustomProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IWalletItemCustomPropertyFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWalletItemCustomProperty (HStr_name, HStr_value, m_ComRetVal'Access);
            Retval.m_IWalletItemCustomProperty := new Windows.ApplicationModel.Wallet.IWalletItemCustomProperty;
            Retval.m_IWalletItemCustomProperty.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletItemCustomProperty

   function get_Name
   (
      this : in out WalletItemCustomProperty
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out WalletItemCustomProperty;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletItemCustomProperty.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Value
   (
      this : in out WalletItemCustomProperty
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out WalletItemCustomProperty;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletItemCustomProperty.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AutoDetectLinks
   (
      this : in out WalletItemCustomProperty
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.get_AutoDetectLinks (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoDetectLinks
   (
      this : in out WalletItemCustomProperty;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.put_AutoDetectLinks (value);
   end;

   function get_DetailViewPosition
   (
      this : in out WalletItemCustomProperty
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletDetailViewPosition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Wallet.WalletDetailViewPosition;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.get_DetailViewPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DetailViewPosition
   (
      this : in out WalletItemCustomProperty;
      value : Windows.ApplicationModel.Wallet.WalletDetailViewPosition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.put_DetailViewPosition (value);
   end;

   function get_SummaryViewPosition
   (
      this : in out WalletItemCustomProperty
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletSummaryViewPosition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Wallet.WalletSummaryViewPosition;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.get_SummaryViewPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SummaryViewPosition
   (
      this : in out WalletItemCustomProperty;
      value : Windows.ApplicationModel.Wallet.WalletSummaryViewPosition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletItemCustomProperty.all.put_SummaryViewPosition (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletItemStore

   procedure Initialize (this : in out WalletItemStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletItemStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletItemStore, IWalletItemStore_Ptr);
   begin
      if this.m_IWalletItemStore /= null then
         if this.m_IWalletItemStore.all /= null then
            RefCount := this.m_IWalletItemStore.all.Release;
            Free (this.m_IWalletItemStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletItemStore

   procedure AddAsync
   (
      this : in out WalletItemStore;
      id : WinRt.WString;
      item : Windows.ApplicationModel.Wallet.WalletItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWalletItemStore.all.AddAsync (HStr_id, item.m_IWalletItem.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_id);
   end;

   procedure ClearAsync
   (
      this : in out WalletItemStore
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWalletItemStore.all.ClearAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetWalletItemAsync
   (
      this : in out WalletItemStore;
      id : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WalletItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WalletItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Wallet.IWalletItem;
      m_IID            : aliased WinRt.IID := (2388975024, 59996, 21907, (161, 243, 11, 130, 9, 223, 57, 5 )); -- Windows.ApplicationModel.Wallet.WalletItem;
      m_HandlerIID     : aliased WinRt.IID := (2293249183, 20541, 22406, (162, 103, 85, 187, 55, 168, 161, 177 ));
      m_Handler        : AsyncOperationCompletedHandler_WalletItem.Kind := new AsyncOperationCompletedHandler_WalletItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WalletItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WalletItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WalletItem.Kind_Delegate, AsyncOperationCompletedHandler_WalletItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Wallet.WalletItem do
         Hr := this.m_IWalletItemStore.all.GetWalletItemAsync (HStr_id, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWalletItem := new Windows.ApplicationModel.Wallet.IWalletItem;
                  Retval.m_IWalletItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function GetItemsAsync
   (
      this : in out WalletItemStore
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (592711133, 5743, 23443, (134, 105, 227, 64, 181, 225, 130, 13 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2466436254, 56739, 22897, (180, 138, 223, 223, 2, 197, 114, 175 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IWalletItemStore.all.GetItemsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetItemsAsync
   (
      this : in out WalletItemStore;
      kind : Windows.ApplicationModel.Wallet.WalletItemKind
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (592711133, 5743, 23443, (134, 105, 227, 64, 181, 225, 130, 13 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2466436254, 56739, 22897, (180, 138, 223, 223, 2, 197, 114, 175 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IWalletItemStore.all.GetItemsAsync (kind, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ImportItemAsync
   (
      this : in out WalletItemStore;
      stream : Windows.Storage.Streams.IRandomAccessStreamReference
   )
   return WinRt.Windows.ApplicationModel.Wallet.WalletItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WalletItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WalletItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Wallet.IWalletItem;
      m_IID            : aliased WinRt.IID := (2388975024, 59996, 21907, (161, 243, 11, 130, 9, 223, 57, 5 )); -- Windows.ApplicationModel.Wallet.WalletItem;
      m_HandlerIID     : aliased WinRt.IID := (2293249183, 20541, 22406, (162, 103, 85, 187, 55, 168, 161, 177 ));
      m_Handler        : AsyncOperationCompletedHandler_WalletItem.Kind := new AsyncOperationCompletedHandler_WalletItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WalletItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WalletItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WalletItem.Kind_Delegate, AsyncOperationCompletedHandler_WalletItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Wallet.WalletItem do
         Hr := this.m_IWalletItemStore.all.ImportItemAsync (stream, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWalletItem := new Windows.ApplicationModel.Wallet.IWalletItem;
                  Retval.m_IWalletItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure DeleteAsync
   (
      this : in out WalletItemStore;
      id : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWalletItemStore.all.DeleteAsync (HStr_id, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_id);
   end;

   procedure ShowAsync
   (
      this : in out WalletItemStore
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWalletItemStore.all.ShowAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ShowAsync
   (
      this : in out WalletItemStore;
      id : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWalletItemStore.all.ShowAsync (HStr_id, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_id);
   end;

   procedure UpdateAsync
   (
      this : in out WalletItemStore;
      item : Windows.ApplicationModel.Wallet.WalletItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWalletItemStore.all.UpdateAsync (item.m_IWalletItem.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WalletManager is

      function RequestStoreAsync
      return WinRt.Windows.ApplicationModel.Wallet.WalletItemStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Wallet.IWalletManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WalletItemStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WalletItemStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Wallet.IWalletItemStore;
         m_IID            : aliased WinRt.IID := (2523198394, 73, 23743, (132, 95, 143, 11, 202, 210, 177, 76 )); -- Windows.ApplicationModel.Wallet.WalletItemStore;
         m_HandlerIID     : aliased WinRt.IID := (1395955550, 8282, 23404, (150, 253, 137, 111, 185, 57, 73, 189 ));
         m_Handler        : AsyncOperationCompletedHandler_WalletItemStore.Kind := new AsyncOperationCompletedHandler_WalletItemStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WalletItemStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WalletItemStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WalletItemStore.Kind_Delegate, AsyncOperationCompletedHandler_WalletItemStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Wallet.WalletItemStore do
            Hr := RoGetActivationFactory (m_hString, IID_IWalletManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWalletItemStore := new Windows.ApplicationModel.Wallet.IWalletItemStore;
                        Retval.m_IWalletItemStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end WalletManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletRelevantLocation

   procedure Initialize (this : in out WalletRelevantLocation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletRelevantLocation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletRelevantLocation, IWalletRelevantLocation_Ptr);
   begin
      if this.m_IWalletRelevantLocation /= null then
         if this.m_IWalletRelevantLocation.all /= null then
            RefCount := this.m_IWalletRelevantLocation.all.Release;
            Free (this.m_IWalletRelevantLocation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WalletRelevantLocation

   function Constructor return WalletRelevantLocation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletRelevantLocation");
      m_ComRetVal  : aliased Windows.ApplicationModel.Wallet.IWalletRelevantLocation;
   begin
      return RetVal : WalletRelevantLocation do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWalletRelevantLocation := new Windows.ApplicationModel.Wallet.IWalletRelevantLocation;
            Retval.m_IWalletRelevantLocation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletRelevantLocation

   function get_Position
   (
      this : in out WalletRelevantLocation
   )
   return WinRt.Windows.Devices.Geolocation.BasicGeoposition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.BasicGeoposition;
   begin
      Hr := this.m_IWalletRelevantLocation.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out WalletRelevantLocation;
      value : Windows.Devices.Geolocation.BasicGeoposition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletRelevantLocation.all.put_Position (value);
   end;

   function get_DisplayMessage
   (
      this : in out WalletRelevantLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletRelevantLocation.all.get_DisplayMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayMessage
   (
      this : in out WalletRelevantLocation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletRelevantLocation.all.put_DisplayMessage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletTransaction

   procedure Initialize (this : in out WalletTransaction) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletTransaction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletTransaction, IWalletTransaction_Ptr);
   begin
      if this.m_IWalletTransaction /= null then
         if this.m_IWalletTransaction.all /= null then
            RefCount := this.m_IWalletTransaction.all.Release;
            Free (this.m_IWalletTransaction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WalletTransaction

   function Constructor return WalletTransaction is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletTransaction");
      m_ComRetVal  : aliased Windows.ApplicationModel.Wallet.IWalletTransaction;
   begin
      return RetVal : WalletTransaction do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWalletTransaction := new Windows.ApplicationModel.Wallet.IWalletTransaction;
            Retval.m_IWalletTransaction.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletTransaction

   function get_Description
   (
      this : in out WalletTransaction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletTransaction.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out WalletTransaction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletTransaction.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayAmount
   (
      this : in out WalletTransaction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletTransaction.all.get_DisplayAmount (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayAmount
   (
      this : in out WalletTransaction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletTransaction.all.put_DisplayAmount (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IgnoreTimeOfDay
   (
      this : in out WalletTransaction
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWalletTransaction.all.get_IgnoreTimeOfDay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IgnoreTimeOfDay
   (
      this : in out WalletTransaction;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletTransaction.all.put_IgnoreTimeOfDay (value);
   end;

   function get_DisplayLocation
   (
      this : in out WalletTransaction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletTransaction.all.get_DisplayLocation (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayLocation
   (
      this : in out WalletTransaction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletTransaction.all.put_DisplayLocation (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TransactionDate
   (
      this : in out WalletTransaction
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IWalletTransaction.all.get_TransactionDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_TransactionDate
   (
      this : in out WalletTransaction;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletTransaction.all.put_TransactionDate (value);
   end;

   function get_IsLaunchable
   (
      this : in out WalletTransaction
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWalletTransaction.all.get_IsLaunchable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsLaunchable
   (
      this : in out WalletTransaction;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWalletTransaction.all.put_IsLaunchable (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WalletVerb

   procedure Initialize (this : in out WalletVerb) is
   begin
      null;
   end;

   procedure Finalize (this : in out WalletVerb) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWalletVerb, IWalletVerb_Ptr);
   begin
      if this.m_IWalletVerb /= null then
         if this.m_IWalletVerb.all /= null then
            RefCount := this.m_IWalletVerb.all.Release;
            Free (this.m_IWalletVerb);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WalletVerb

   function Constructor
   (
      name : WinRt.WString
   )
   return WalletVerb is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Wallet.WalletVerb");
      m_Factory    : access IWalletVerbFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Wallet.IWalletVerb;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WalletVerb do
         Hr := RoGetActivationFactory (m_hString, IID_IWalletVerbFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWalletVerb (HStr_name, m_ComRetVal'Access);
            Retval.m_IWalletVerb := new Windows.ApplicationModel.Wallet.IWalletVerb;
            Retval.m_IWalletVerb.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WalletVerb

   function get_Name
   (
      this : in out WalletVerb
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWalletVerb.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out WalletVerb;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWalletVerb.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

end;

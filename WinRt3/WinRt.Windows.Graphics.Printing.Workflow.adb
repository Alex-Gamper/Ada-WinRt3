--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Activation;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Graphics.Printing.PrintTicket;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Graphics.Printing.Workflow is

   package IAsyncOperation_WorkflowPrintTicket is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket);
   package AsyncOperationCompletedHandler_WorkflowPrintTicket is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowBackgroundSession

   procedure Initialize (this : in out PrintWorkflowBackgroundSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowBackgroundSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowBackgroundSession, IPrintWorkflowBackgroundSession_Ptr);
   begin
      if this.m_IPrintWorkflowBackgroundSession /= null then
         if this.m_IPrintWorkflowBackgroundSession.all /= null then
            RefCount := this.m_IPrintWorkflowBackgroundSession.all.Release;
            Free (this.m_IPrintWorkflowBackgroundSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowBackgroundSession

   function add_SetupRequested
   (
      this : in out PrintWorkflowBackgroundSession;
      setupEventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintWorkflowBackgroundSession.all.add_SetupRequested (setupEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SetupRequested
   (
      this : in out PrintWorkflowBackgroundSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowBackgroundSession.all.remove_SetupRequested (token);
   end;

   function add_Submitted
   (
      this : in out PrintWorkflowBackgroundSession;
      submittedEventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintWorkflowBackgroundSession.all.add_Submitted (submittedEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Submitted
   (
      this : in out PrintWorkflowBackgroundSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowBackgroundSession.all.remove_Submitted (token);
   end;

   function get_Status
   (
      this : in out PrintWorkflowBackgroundSession
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSessionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.PrintWorkflowSessionStatus;
   begin
      Hr := this.m_IPrintWorkflowBackgroundSession.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out PrintWorkflowBackgroundSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowBackgroundSession.all.Start;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowBackgroundSetupRequestedEventArgs

   procedure Initialize (this : in out PrintWorkflowBackgroundSetupRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowBackgroundSetupRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowBackgroundSetupRequestedEventArgs, IPrintWorkflowBackgroundSetupRequestedEventArgs_Ptr);
   begin
      if this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs /= null then
         if this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs.all /= null then
            RefCount := this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs.all.Release;
            Free (this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowBackgroundSetupRequestedEventArgs

   function GetUserPrintTicketAsync
   (
      this : in out PrintWorkflowBackgroundSetupRequestedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WorkflowPrintTicket.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WorkflowPrintTicket.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket;
      m_IID            : aliased WinRt.IID := (648994681, 1625, 23133, (154, 207, 180, 66, 62, 239, 222, 187 )); -- Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket;
      m_HandlerIID     : aliased WinRt.IID := (3565600909, 36476, 24461, (135, 171, 13, 247, 186, 6, 197, 227 ));
      m_Handler        : AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind := new AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WorkflowPrintTicket.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind_Delegate, AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket do
         Hr := this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs.all.GetUserPrintTicketAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWorkflowPrintTicket := new Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket;
                  Retval.m_IWorkflowPrintTicket.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Configuration
   (
      this : in out PrintWorkflowBackgroundSetupRequestedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowConfiguration;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowConfiguration do
         Hr := this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowConfiguration := new Windows.Graphics.Printing.Workflow.IPrintWorkflowConfiguration;
         Retval.m_IPrintWorkflowConfiguration.all := m_ComRetVal;
      end return;
   end;

   procedure SetRequiresUI
   (
      this : in out PrintWorkflowBackgroundSetupRequestedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs.all.SetRequiresUI;
   end;

   function GetDeferral
   (
      this : in out PrintWorkflowBackgroundSetupRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IPrintWorkflowBackgroundSetupRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowConfiguration

   procedure Initialize (this : in out PrintWorkflowConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowConfiguration, IPrintWorkflowConfiguration_Ptr);
   begin
      if this.m_IPrintWorkflowConfiguration /= null then
         if this.m_IPrintWorkflowConfiguration.all /= null then
            RefCount := this.m_IPrintWorkflowConfiguration.all.Release;
            Free (this.m_IPrintWorkflowConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowConfiguration

   function get_SourceAppDisplayName
   (
      this : in out PrintWorkflowConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrintWorkflowConfiguration.all.get_SourceAppDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_JobTitle
   (
      this : in out PrintWorkflowConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrintWorkflowConfiguration.all.get_JobTitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SessionId
   (
      this : in out PrintWorkflowConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrintWorkflowConfiguration.all.get_SessionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowForegroundSession

   procedure Initialize (this : in out PrintWorkflowForegroundSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowForegroundSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowForegroundSession, IPrintWorkflowForegroundSession_Ptr);
   begin
      if this.m_IPrintWorkflowForegroundSession /= null then
         if this.m_IPrintWorkflowForegroundSession.all /= null then
            RefCount := this.m_IPrintWorkflowForegroundSession.all.Release;
            Free (this.m_IPrintWorkflowForegroundSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowForegroundSession

   function add_SetupRequested
   (
      this : in out PrintWorkflowForegroundSession;
      setupEventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintWorkflowForegroundSession.all.add_SetupRequested (setupEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SetupRequested
   (
      this : in out PrintWorkflowForegroundSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowForegroundSession.all.remove_SetupRequested (token);
   end;

   function add_XpsDataAvailable
   (
      this : in out PrintWorkflowForegroundSession;
      xpsDataAvailableEventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintWorkflowForegroundSession.all.add_XpsDataAvailable (xpsDataAvailableEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_XpsDataAvailable
   (
      this : in out PrintWorkflowForegroundSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowForegroundSession.all.remove_XpsDataAvailable (token);
   end;

   function get_Status
   (
      this : in out PrintWorkflowForegroundSession
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSessionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.PrintWorkflowSessionStatus;
   begin
      Hr := this.m_IPrintWorkflowForegroundSession.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out PrintWorkflowForegroundSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowForegroundSession.all.Start;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowForegroundSetupRequestedEventArgs

   procedure Initialize (this : in out PrintWorkflowForegroundSetupRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowForegroundSetupRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowForegroundSetupRequestedEventArgs, IPrintWorkflowForegroundSetupRequestedEventArgs_Ptr);
   begin
      if this.m_IPrintWorkflowForegroundSetupRequestedEventArgs /= null then
         if this.m_IPrintWorkflowForegroundSetupRequestedEventArgs.all /= null then
            RefCount := this.m_IPrintWorkflowForegroundSetupRequestedEventArgs.all.Release;
            Free (this.m_IPrintWorkflowForegroundSetupRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowForegroundSetupRequestedEventArgs

   function GetUserPrintTicketAsync
   (
      this : in out PrintWorkflowForegroundSetupRequestedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WorkflowPrintTicket.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WorkflowPrintTicket.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket;
      m_IID            : aliased WinRt.IID := (648994681, 1625, 23133, (154, 207, 180, 66, 62, 239, 222, 187 )); -- Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket;
      m_HandlerIID     : aliased WinRt.IID := (3565600909, 36476, 24461, (135, 171, 13, 247, 186, 6, 197, 227 ));
      m_Handler        : AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind := new AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WorkflowPrintTicket.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind_Delegate, AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket do
         Hr := this.m_IPrintWorkflowForegroundSetupRequestedEventArgs.all.GetUserPrintTicketAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWorkflowPrintTicket := new Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket;
                  Retval.m_IWorkflowPrintTicket.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Configuration
   (
      this : in out PrintWorkflowForegroundSetupRequestedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowConfiguration;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowConfiguration do
         Hr := this.m_IPrintWorkflowForegroundSetupRequestedEventArgs.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowConfiguration := new Windows.Graphics.Printing.Workflow.IPrintWorkflowConfiguration;
         Retval.m_IPrintWorkflowConfiguration.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out PrintWorkflowForegroundSetupRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IPrintWorkflowForegroundSetupRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowObjectModelSourceFileContent

   procedure Initialize (this : in out PrintWorkflowObjectModelSourceFileContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowObjectModelSourceFileContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowObjectModelSourceFileContent, IPrintWorkflowObjectModelSourceFileContent_Ptr);
   begin
      if this.m_IPrintWorkflowObjectModelSourceFileContent /= null then
         if this.m_IPrintWorkflowObjectModelSourceFileContent.all /= null then
            RefCount := this.m_IPrintWorkflowObjectModelSourceFileContent.all.Release;
            Free (this.m_IPrintWorkflowObjectModelSourceFileContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowObjectModelSourceFileContent

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowObjectModelTargetPackage

   procedure Initialize (this : in out PrintWorkflowObjectModelTargetPackage) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowObjectModelTargetPackage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowObjectModelTargetPackage, IPrintWorkflowObjectModelTargetPackage_Ptr);
   begin
      if this.m_IPrintWorkflowObjectModelTargetPackage /= null then
         if this.m_IPrintWorkflowObjectModelTargetPackage.all /= null then
            RefCount := this.m_IPrintWorkflowObjectModelTargetPackage.all.Release;
            Free (this.m_IPrintWorkflowObjectModelTargetPackage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowObjectModelTargetPackage

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowSourceContent

   procedure Initialize (this : in out PrintWorkflowSourceContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowSourceContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowSourceContent, IPrintWorkflowSourceContent_Ptr);
   begin
      if this.m_IPrintWorkflowSourceContent /= null then
         if this.m_IPrintWorkflowSourceContent.all /= null then
            RefCount := this.m_IPrintWorkflowSourceContent.all.Release;
            Free (this.m_IPrintWorkflowSourceContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowSourceContent

   function GetJobPrintTicketAsync
   (
      this : in out PrintWorkflowSourceContent
   )
   return WinRt.Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WorkflowPrintTicket.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WorkflowPrintTicket.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket;
      m_IID            : aliased WinRt.IID := (648994681, 1625, 23133, (154, 207, 180, 66, 62, 239, 222, 187 )); -- Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket;
      m_HandlerIID     : aliased WinRt.IID := (3565600909, 36476, 24461, (135, 171, 13, 247, 186, 6, 197, 227 ));
      m_Handler        : AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind := new AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WorkflowPrintTicket.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind_Delegate, AsyncOperationCompletedHandler_WorkflowPrintTicket.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket do
         Hr := this.m_IPrintWorkflowSourceContent.all.GetJobPrintTicketAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWorkflowPrintTicket := new Windows.Graphics.Printing.PrintTicket.IWorkflowPrintTicket;
                  Retval.m_IWorkflowPrintTicket.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSourceSpoolDataAsStreamContent
   (
      this : in out PrintWorkflowSourceContent
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSpoolStreamContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowSpoolStreamContent;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSpoolStreamContent do
         Hr := this.m_IPrintWorkflowSourceContent.all.GetSourceSpoolDataAsStreamContent (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowSpoolStreamContent := new Windows.Graphics.Printing.Workflow.IPrintWorkflowSpoolStreamContent;
         Retval.m_IPrintWorkflowSpoolStreamContent.all := m_ComRetVal;
      end return;
   end;

   function GetSourceSpoolDataAsXpsObjectModel
   (
      this : in out PrintWorkflowSourceContent
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowObjectModelSourceFileContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowObjectModelSourceFileContent;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowObjectModelSourceFileContent do
         Hr := this.m_IPrintWorkflowSourceContent.all.GetSourceSpoolDataAsXpsObjectModel (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowObjectModelSourceFileContent := new Windows.Graphics.Printing.Workflow.IPrintWorkflowObjectModelSourceFileContent;
         Retval.m_IPrintWorkflowObjectModelSourceFileContent.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowSpoolStreamContent

   procedure Initialize (this : in out PrintWorkflowSpoolStreamContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowSpoolStreamContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowSpoolStreamContent, IPrintWorkflowSpoolStreamContent_Ptr);
   begin
      if this.m_IPrintWorkflowSpoolStreamContent /= null then
         if this.m_IPrintWorkflowSpoolStreamContent.all /= null then
            RefCount := this.m_IPrintWorkflowSpoolStreamContent.all.Release;
            Free (this.m_IPrintWorkflowSpoolStreamContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowSpoolStreamContent

   function GetInputStream
   (
      this : in out PrintWorkflowSpoolStreamContent
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IPrintWorkflowSpoolStreamContent.all.GetInputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowStreamTarget

   procedure Initialize (this : in out PrintWorkflowStreamTarget) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowStreamTarget) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowStreamTarget, IPrintWorkflowStreamTarget_Ptr);
   begin
      if this.m_IPrintWorkflowStreamTarget /= null then
         if this.m_IPrintWorkflowStreamTarget.all /= null then
            RefCount := this.m_IPrintWorkflowStreamTarget.all.Release;
            Free (this.m_IPrintWorkflowStreamTarget);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowStreamTarget

   function GetOutputStream
   (
      this : in out PrintWorkflowStreamTarget
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IPrintWorkflowStreamTarget.all.GetOutputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowSubmittedEventArgs

   procedure Initialize (this : in out PrintWorkflowSubmittedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowSubmittedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowSubmittedEventArgs, IPrintWorkflowSubmittedEventArgs_Ptr);
   begin
      if this.m_IPrintWorkflowSubmittedEventArgs /= null then
         if this.m_IPrintWorkflowSubmittedEventArgs.all /= null then
            RefCount := this.m_IPrintWorkflowSubmittedEventArgs.all.Release;
            Free (this.m_IPrintWorkflowSubmittedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowSubmittedEventArgs

   function get_Operation
   (
      this : in out PrintWorkflowSubmittedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowSubmittedOperation;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedOperation do
         Hr := this.m_IPrintWorkflowSubmittedEventArgs.all.get_Operation (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowSubmittedOperation := new Windows.Graphics.Printing.Workflow.IPrintWorkflowSubmittedOperation;
         Retval.m_IPrintWorkflowSubmittedOperation.all := m_ComRetVal;
      end return;
   end;

   function GetTarget
   (
      this : in out PrintWorkflowSubmittedEventArgs;
      jobPrintTicket : Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket'Class
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowTarget'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowTarget;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowTarget do
         Hr := this.m_IPrintWorkflowSubmittedEventArgs.all.GetTarget (jobPrintTicket.m_IWorkflowPrintTicket.all, m_ComRetVal'Access);
         Retval.m_IPrintWorkflowTarget := new Windows.Graphics.Printing.Workflow.IPrintWorkflowTarget;
         Retval.m_IPrintWorkflowTarget.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out PrintWorkflowSubmittedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IPrintWorkflowSubmittedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowSubmittedOperation

   procedure Initialize (this : in out PrintWorkflowSubmittedOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowSubmittedOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowSubmittedOperation, IPrintWorkflowSubmittedOperation_Ptr);
   begin
      if this.m_IPrintWorkflowSubmittedOperation /= null then
         if this.m_IPrintWorkflowSubmittedOperation.all /= null then
            RefCount := this.m_IPrintWorkflowSubmittedOperation.all.Release;
            Free (this.m_IPrintWorkflowSubmittedOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowSubmittedOperation

   procedure Complete
   (
      this : in out PrintWorkflowSubmittedOperation;
      status : Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintWorkflowSubmittedOperation.all.Complete (status);
   end;

   function get_Configuration
   (
      this : in out PrintWorkflowSubmittedOperation
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowConfiguration;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowConfiguration do
         Hr := this.m_IPrintWorkflowSubmittedOperation.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowConfiguration := new Windows.Graphics.Printing.Workflow.IPrintWorkflowConfiguration;
         Retval.m_IPrintWorkflowConfiguration.all := m_ComRetVal;
      end return;
   end;

   function get_XpsContent
   (
      this : in out PrintWorkflowSubmittedOperation
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSourceContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowSourceContent;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSourceContent do
         Hr := this.m_IPrintWorkflowSubmittedOperation.all.get_XpsContent (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowSourceContent := new Windows.Graphics.Printing.Workflow.IPrintWorkflowSourceContent;
         Retval.m_IPrintWorkflowSourceContent.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowTarget

   procedure Initialize (this : in out PrintWorkflowTarget) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowTarget) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowTarget, IPrintWorkflowTarget_Ptr);
   begin
      if this.m_IPrintWorkflowTarget /= null then
         if this.m_IPrintWorkflowTarget.all /= null then
            RefCount := this.m_IPrintWorkflowTarget.all.Release;
            Free (this.m_IPrintWorkflowTarget);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowTarget

   function get_TargetAsStream
   (
      this : in out PrintWorkflowTarget
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowStreamTarget'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowStreamTarget;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowStreamTarget do
         Hr := this.m_IPrintWorkflowTarget.all.get_TargetAsStream (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowStreamTarget := new Windows.Graphics.Printing.Workflow.IPrintWorkflowStreamTarget;
         Retval.m_IPrintWorkflowStreamTarget.all := m_ComRetVal;
      end return;
   end;

   function get_TargetAsXpsObjectModelPackage
   (
      this : in out PrintWorkflowTarget
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowObjectModelTargetPackage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowObjectModelTargetPackage;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowObjectModelTargetPackage do
         Hr := this.m_IPrintWorkflowTarget.all.get_TargetAsXpsObjectModelPackage (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowObjectModelTargetPackage := new Windows.Graphics.Printing.Workflow.IPrintWorkflowObjectModelTargetPackage;
         Retval.m_IPrintWorkflowObjectModelTargetPackage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowTriggerDetails

   procedure Initialize (this : in out PrintWorkflowTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowTriggerDetails, IPrintWorkflowTriggerDetails_Ptr);
   begin
      if this.m_IPrintWorkflowTriggerDetails /= null then
         if this.m_IPrintWorkflowTriggerDetails.all /= null then
            RefCount := this.m_IPrintWorkflowTriggerDetails.all.Release;
            Free (this.m_IPrintWorkflowTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowTriggerDetails

   function get_PrintWorkflowSession
   (
      this : in out PrintWorkflowTriggerDetails
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowBackgroundSession;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowBackgroundSession do
         Hr := this.m_IPrintWorkflowTriggerDetails.all.get_PrintWorkflowSession (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowBackgroundSession := new Windows.Graphics.Printing.Workflow.IPrintWorkflowBackgroundSession;
         Retval.m_IPrintWorkflowBackgroundSession.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowUIActivatedEventArgs

   procedure Initialize (this : in out PrintWorkflowUIActivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowUIActivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowUIActivatedEventArgs, IPrintWorkflowUIActivatedEventArgs_Ptr);
   begin
      if this.m_IPrintWorkflowUIActivatedEventArgs /= null then
         if this.m_IPrintWorkflowUIActivatedEventArgs.all /= null then
            RefCount := this.m_IPrintWorkflowUIActivatedEventArgs.all.Release;
            Free (this.m_IPrintWorkflowUIActivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowUIActivatedEventArgs

   function get_PrintWorkflowSession
   (
      this : in out PrintWorkflowUIActivatedEventArgs
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowForegroundSession;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowForegroundSession do
         Hr := this.m_IPrintWorkflowUIActivatedEventArgs.all.get_PrintWorkflowSession (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowForegroundSession := new Windows.Graphics.Printing.Workflow.IPrintWorkflowForegroundSession;
         Retval.m_IPrintWorkflowForegroundSession.all := m_ComRetVal;
      end return;
   end;

   function get_User
   (
      this : in out PrintWorkflowUIActivatedEventArgs
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.Workflow.IPrintWorkflowUIActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgsWithUser'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IPrintWorkflowUIActivatedEventArgs.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out PrintWorkflowUIActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ActivationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ActivationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.Workflow.IPrintWorkflowUIActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintWorkflowUIActivatedEventArgs.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousExecutionState
   (
      this : in out PrintWorkflowUIActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.ApplicationExecutionState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ApplicationExecutionState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.Workflow.IPrintWorkflowUIActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrintWorkflowUIActivatedEventArgs.all);
      Hr := m_Interface.get_PreviousExecutionState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SplashScreen
   (
      this : in out PrintWorkflowUIActivatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Activation.SplashScreen'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.ISplashScreen;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing.Workflow.IPrintWorkflowUIActivatedEventArgs_Interface, WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs, WinRt.Windows.ApplicationModel.Activation.IID_IActivatedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Activation.SplashScreen do
         m_Interface := QInterface (this.m_IPrintWorkflowUIActivatedEventArgs.all);
         Hr := m_Interface.get_SplashScreen (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISplashScreen := new Windows.ApplicationModel.Activation.ISplashScreen;
         Retval.m_ISplashScreen.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintWorkflowXpsDataAvailableEventArgs

   procedure Initialize (this : in out PrintWorkflowXpsDataAvailableEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintWorkflowXpsDataAvailableEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintWorkflowXpsDataAvailableEventArgs, IPrintWorkflowXpsDataAvailableEventArgs_Ptr);
   begin
      if this.m_IPrintWorkflowXpsDataAvailableEventArgs /= null then
         if this.m_IPrintWorkflowXpsDataAvailableEventArgs.all /= null then
            RefCount := this.m_IPrintWorkflowXpsDataAvailableEventArgs.all.Release;
            Free (this.m_IPrintWorkflowXpsDataAvailableEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintWorkflowXpsDataAvailableEventArgs

   function get_Operation
   (
      this : in out PrintWorkflowXpsDataAvailableEventArgs
   )
   return WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.Workflow.IPrintWorkflowSubmittedOperation;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.Workflow.PrintWorkflowSubmittedOperation do
         Hr := this.m_IPrintWorkflowXpsDataAvailableEventArgs.all.get_Operation (m_ComRetVal'Access);
         Retval.m_IPrintWorkflowSubmittedOperation := new Windows.Graphics.Printing.Workflow.IPrintWorkflowSubmittedOperation;
         Retval.m_IPrintWorkflowSubmittedOperation.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out PrintWorkflowXpsDataAvailableEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IPrintWorkflowXpsDataAvailableEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

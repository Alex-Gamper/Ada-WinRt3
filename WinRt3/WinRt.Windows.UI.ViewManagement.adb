--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.UI.Core;
with WinRt.Windows.UI.Popups;
with WinRt.Windows.UI.WindowManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.ViewManagement is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AccessibilitySettings

   procedure Initialize (this : in out AccessibilitySettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AccessibilitySettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAccessibilitySettings, IAccessibilitySettings_Ptr);
   begin
      if this.m_IAccessibilitySettings /= null then
         if this.m_IAccessibilitySettings.all /= null then
            RefCount := this.m_IAccessibilitySettings.all.Release;
            Free (this.m_IAccessibilitySettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AccessibilitySettings

   function Constructor return AccessibilitySettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ViewManagement.AccessibilitySettings");
      m_ComRetVal  : aliased Windows.UI.ViewManagement.IAccessibilitySettings;
   begin
      return RetVal : AccessibilitySettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAccessibilitySettings := new Windows.UI.ViewManagement.IAccessibilitySettings;
            Retval.m_IAccessibilitySettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AccessibilitySettings

   function get_HighContrast
   (
      this : in out AccessibilitySettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAccessibilitySettings.all.get_HighContrast (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HighContrastScheme
   (
      this : in out AccessibilitySettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAccessibilitySettings.all.get_HighContrastScheme (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_HighContrastChanged
   (
      this : in out AccessibilitySettings;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAccessibilitySettings.all.add_HighContrastChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HighContrastChanged
   (
      this : in out AccessibilitySettings;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAccessibilitySettings.all.remove_HighContrastChanged (cookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ActivationViewSwitcher

   procedure Initialize (this : in out ActivationViewSwitcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out ActivationViewSwitcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IActivationViewSwitcher, IActivationViewSwitcher_Ptr);
   begin
      if this.m_IActivationViewSwitcher /= null then
         if this.m_IActivationViewSwitcher.all /= null then
            RefCount := this.m_IActivationViewSwitcher.all.Release;
            Free (this.m_IActivationViewSwitcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ActivationViewSwitcher

   procedure ShowAsStandaloneAsync
   (
      this : in out ActivationViewSwitcher;
      viewId : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationViewSwitcher.all.ShowAsStandaloneAsync (viewId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ShowAsStandaloneAsync
   (
      this : in out ActivationViewSwitcher;
      viewId : WinRt.Int32;
      sizePreference : Windows.UI.ViewManagement.ViewSizePreference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationViewSwitcher.all.ShowAsStandaloneAsync (viewId, sizePreference, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function IsViewPresentedOnActivationVirtualDesktop
   (
      this : in out ActivationViewSwitcher;
      viewId : WinRt.Int32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IActivationViewSwitcher.all.IsViewPresentedOnActivationVirtualDesktop (viewId, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ApplicationView

   procedure Initialize (this : in out ApplicationView) is
   begin
      null;
   end;

   procedure Finalize (this : in out ApplicationView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IApplicationView, IApplicationView_Ptr);
   begin
      if this.m_IApplicationView /= null then
         if this.m_IApplicationView.all /= null then
            RefCount := this.m_IApplicationView.all.Release;
            Free (this.m_IApplicationView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ApplicationView

   function get_Value
   return WinRt.Windows.UI.ViewManagement.ApplicationViewState is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ApplicationViewState;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Value (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function TryUnsnap
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryUnsnap (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure ClearAllPersistedState is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ClearAllPersistedState;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ClearPersistedState
   (
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ClearPersistedState (HStr_key);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_key);
   end;

   function TryUnsnapToFullscreen
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewFullscreenStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewFullscreenStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryUnsnapToFullscreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetApplicationViewIdForWindow
   (
      window : Windows.UI.Core.ICoreWindow
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewInteropStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewInteropStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetApplicationViewIdForWindow (window, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetForCurrentView
   return WinRt.Windows.UI.ViewManagement.ApplicationView is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IApplicationView;
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ApplicationView do
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IApplicationView := new Windows.UI.ViewManagement.IApplicationView;
            Retval.m_IApplicationView.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TerminateAppOnFinalViewClose
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_TerminateAppOnFinalViewClose (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_TerminateAppOnFinalViewClose
   (
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_TerminateAppOnFinalViewClose (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_PreferredLaunchWindowingMode
   return WinRt.Windows.UI.ViewManagement.ApplicationViewWindowingMode is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ApplicationViewWindowingMode;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PreferredLaunchWindowingMode (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_PreferredLaunchWindowingMode
   (
      value : Windows.UI.ViewManagement.ApplicationViewWindowingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_PreferredLaunchWindowingMode (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_PreferredLaunchViewSize
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PreferredLaunchViewSize (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure put_PreferredLaunchViewSize
   (
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationView");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_PreferredLaunchViewSize (value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ApplicationView

   function get_Orientation
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.UI.ViewManagement.ApplicationViewOrientation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ApplicationViewOrientation;
   begin
      Hr := this.m_IApplicationView.all.get_Orientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AdjacentToLeftDisplayEdge
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IApplicationView.all.get_AdjacentToLeftDisplayEdge (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AdjacentToRightDisplayEdge
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IApplicationView.all.get_AdjacentToRightDisplayEdge (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsFullScreen
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IApplicationView.all.get_IsFullScreen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsOnLockScreen
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IApplicationView.all.get_IsOnLockScreen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsScreenCaptureEnabled
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IApplicationView.all.get_IsScreenCaptureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsScreenCaptureEnabled
   (
      this : in out ApplicationView;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationView.all.put_IsScreenCaptureEnabled (value);
   end;

   procedure put_Title
   (
      this : in out ApplicationView;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IApplicationView.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Title
   (
      this : in out ApplicationView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IApplicationView.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out ApplicationView
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IApplicationView.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Consolidated
   (
      this : in out ApplicationView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IApplicationView.all.add_Consolidated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Consolidated
   (
      this : in out ApplicationView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationView.all.remove_Consolidated (token);
   end;

   function get_SuppressSystemOverlays
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView2, WinRt.Windows.UI.ViewManagement.IID_IApplicationView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.get_SuppressSystemOverlays (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SuppressSystemOverlays
   (
      this : in out ApplicationView;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView2, WinRt.Windows.UI.ViewManagement.IID_IApplicationView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.put_SuppressSystemOverlays (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_VisibleBounds
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView2, WinRt.Windows.UI.ViewManagement.IID_IApplicationView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.get_VisibleBounds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_VisibleBoundsChanged
   (
      this : in out ApplicationView;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView2, WinRt.Windows.UI.ViewManagement.IID_IApplicationView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.add_VisibleBoundsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_VisibleBoundsChanged
   (
      this : in out ApplicationView;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView2, WinRt.Windows.UI.ViewManagement.IID_IApplicationView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.remove_VisibleBoundsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function SetDesiredBoundsMode
   (
      this : in out ApplicationView;
      boundsMode : Windows.UI.ViewManagement.ApplicationViewBoundsMode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView2, WinRt.Windows.UI.ViewManagement.IID_IApplicationView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.SetDesiredBoundsMode (boundsMode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DesiredBoundsMode
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.UI.ViewManagement.ApplicationViewBoundsMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ApplicationViewBoundsMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView2, WinRt.Windows.UI.ViewManagement.IID_IApplicationView2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.get_DesiredBoundsMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_TitleBar
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.UI.ViewManagement.ApplicationViewTitleBar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IApplicationViewTitleBar;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ApplicationViewTitleBar do
         m_Interface := QInterface (this.m_IApplicationView.all);
         Hr := m_Interface.get_TitleBar (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IApplicationViewTitleBar := new Windows.UI.ViewManagement.IApplicationViewTitleBar;
         Retval.m_IApplicationViewTitleBar.all := m_ComRetVal;
      end return;
   end;

   function get_FullScreenSystemOverlayMode
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.UI.ViewManagement.FullScreenSystemOverlayMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.FullScreenSystemOverlayMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.get_FullScreenSystemOverlayMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_FullScreenSystemOverlayMode
   (
      this : in out ApplicationView;
      value : Windows.UI.ViewManagement.FullScreenSystemOverlayMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.put_FullScreenSystemOverlayMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsFullScreenMode
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.get_IsFullScreenMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryEnterFullScreenMode
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.TryEnterFullScreenMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ExitFullScreenMode
   (
      this : in out ApplicationView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.ExitFullScreenMode;
      m_RefCount := m_Interface.Release;
   end;

   procedure ShowStandardSystemOverlays
   (
      this : in out ApplicationView
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.ShowStandardSystemOverlays;
      m_RefCount := m_Interface.Release;
   end;

   function TryResizeView
   (
      this : in out ApplicationView;
      value : Windows.Foundation.Size
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.TryResizeView (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetPreferredMinSize
   (
      this : in out ApplicationView;
      minSize : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView3, WinRt.Windows.UI.ViewManagement.IID_IApplicationView3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.SetPreferredMinSize (minSize);
      m_RefCount := m_Interface.Release;
   end;

   function get_ViewMode
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.UI.ViewManagement.ApplicationViewMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ApplicationViewMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView4, WinRt.Windows.UI.ViewManagement.IID_IApplicationView4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.get_ViewMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsViewModeSupported
   (
      this : in out ApplicationView;
      viewMode : Windows.UI.ViewManagement.ApplicationViewMode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView4, WinRt.Windows.UI.ViewManagement.IID_IApplicationView4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.IsViewModeSupported (viewMode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryEnterViewModeAsync
   (
      this : in out ApplicationView;
      viewMode : Windows.UI.ViewManagement.ApplicationViewMode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView4, WinRt.Windows.UI.ViewManagement.IID_IApplicationView4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.TryEnterViewModeAsync (viewMode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryEnterViewModeAsync
   (
      this : in out ApplicationView;
      viewMode : Windows.UI.ViewManagement.ApplicationViewMode;
      viewModePreferences_p : Windows.UI.ViewManagement.ViewModePreferences'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView4, WinRt.Windows.UI.ViewManagement.IID_IApplicationView4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.TryEnterViewModeAsync (viewMode, viewModePreferences_p.m_IViewModePreferences.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryConsolidateAsync
   (
      this : in out ApplicationView
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView4, WinRt.Windows.UI.ViewManagement.IID_IApplicationView4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.TryConsolidateAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_PersistedStateId
   (
      this : in out ApplicationView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView7, WinRt.Windows.UI.ViewManagement.IID_IApplicationView7'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.get_PersistedStateId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PersistedStateId
   (
      this : in out ApplicationView;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView7, WinRt.Windows.UI.ViewManagement.IID_IApplicationView7'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.put_PersistedStateId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_WindowingEnvironment
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.UI.WindowManagement.WindowingEnvironment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.WindowManagement.IWindowingEnvironment;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView9, WinRt.Windows.UI.ViewManagement.IID_IApplicationView9'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.WindowManagement.WindowingEnvironment do
         m_Interface := QInterface (this.m_IApplicationView.all);
         Hr := m_Interface.get_WindowingEnvironment (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IWindowingEnvironment := new Windows.UI.WindowManagement.IWindowingEnvironment;
         Retval.m_IWindowingEnvironment.all := m_ComRetVal;
      end return;
   end;

   function GetDisplayRegions
   (
      this : in out ApplicationView
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationView9 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationView9, WinRt.Windows.UI.ViewManagement.IID_IApplicationView9'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationView.all);
      Hr := m_Interface.GetDisplayRegions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_UIContext
   (
      this : in out ApplicationView
   )
   return WinRt.Windows.UI.UIContext'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationViewWithContext := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.IUIContext;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationView_Interface, WinRt.Windows.UI.ViewManagement.IApplicationViewWithContext, WinRt.Windows.UI.ViewManagement.IID_IApplicationViewWithContext'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.UIContext do
         m_Interface := QInterface (this.m_IApplicationView.all);
         Hr := m_Interface.get_UIContext (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUIContext := new Windows.UI.IUIContext;
         Retval.m_IUIContext.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ApplicationViewConsolidatedEventArgs

   procedure Initialize (this : in out ApplicationViewConsolidatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ApplicationViewConsolidatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IApplicationViewConsolidatedEventArgs, IApplicationViewConsolidatedEventArgs_Ptr);
   begin
      if this.m_IApplicationViewConsolidatedEventArgs /= null then
         if this.m_IApplicationViewConsolidatedEventArgs.all /= null then
            RefCount := this.m_IApplicationViewConsolidatedEventArgs.all.Release;
            Free (this.m_IApplicationViewConsolidatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ApplicationViewConsolidatedEventArgs

   function get_IsUserInitiated
   (
      this : in out ApplicationViewConsolidatedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IApplicationViewConsolidatedEventArgs.all.get_IsUserInitiated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAppInitiated
   (
      this : in out ApplicationViewConsolidatedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IApplicationViewConsolidatedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IApplicationViewConsolidatedEventArgs_Interface, WinRt.Windows.UI.ViewManagement.IApplicationViewConsolidatedEventArgs2, WinRt.Windows.UI.ViewManagement.IID_IApplicationViewConsolidatedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IApplicationViewConsolidatedEventArgs.all);
      Hr := m_Interface.get_IsAppInitiated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ApplicationViewScaling

   procedure Initialize (this : in out ApplicationViewScaling) is
   begin
      null;
   end;

   procedure Finalize (this : in out ApplicationViewScaling) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IApplicationViewScaling, IApplicationViewScaling_Ptr);
   begin
      if this.m_IApplicationViewScaling /= null then
         if this.m_IApplicationViewScaling.all /= null then
            RefCount := this.m_IApplicationViewScaling.all.Release;
            Free (this.m_IApplicationViewScaling);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ApplicationViewScaling

   function get_DisableLayoutScaling
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewScaling");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewScalingStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewScalingStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DisableLayoutScaling (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function TrySetDisableLayoutScaling
   (
      disableLayoutScaling : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewScaling");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewScalingStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewScalingStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TrySetDisableLayoutScaling (disableLayoutScaling, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ApplicationViewScaling

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ApplicationViewSwitcher is

      procedure DisableSystemViewActivationPolicy is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DisableSystemViewActivationPolicy;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function TryShowAsViewModeAsync
      (
         viewId : WinRt.Int32;
         viewMode : Windows.UI.ViewManagement.ApplicationViewMode
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryShowAsViewModeAsync (viewId, viewMode, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function TryShowAsViewModeAsync
      (
         viewId : WinRt.Int32;
         viewMode : Windows.UI.ViewManagement.ApplicationViewMode;
         viewModePreferences_p : Windows.UI.ViewManagement.ViewModePreferences'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryShowAsViewModeAsync (viewId, viewMode, viewModePreferences_p.m_IViewModePreferences.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure DisableShowingMainViewOnActivation is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DisableShowingMainViewOnActivation;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function TryShowAsStandaloneAsync
      (
         viewId : WinRt.Int32
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryShowAsStandaloneAsync (viewId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function TryShowAsStandaloneAsync
      (
         viewId : WinRt.Int32;
         sizePreference : Windows.UI.ViewManagement.ViewSizePreference
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryShowAsStandaloneAsync (viewId, sizePreference, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function TryShowAsStandaloneAsync
      (
         viewId : WinRt.Int32;
         sizePreference : Windows.UI.ViewManagement.ViewSizePreference;
         anchorViewId : WinRt.Int32;
         anchorSizePreference : Windows.UI.ViewManagement.ViewSizePreference
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryShowAsStandaloneAsync (viewId, sizePreference, anchorViewId, anchorSizePreference, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure SwitchAsync
      (
         viewId : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SwitchAsync (viewId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SwitchAsync
      (
         toViewId : WinRt.Int32;
         fromViewId : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SwitchAsync (toViewId, fromViewId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SwitchAsync
      (
         toViewId : WinRt.Int32;
         fromViewId : WinRt.Int32;
         options : Windows.UI.ViewManagement.ApplicationViewSwitchingOptions
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SwitchAsync (toViewId, fromViewId, options, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function PrepareForCustomAnimatedSwitchAsync
      (
         toViewId : WinRt.Int32;
         fromViewId : WinRt.Int32;
         options : Windows.UI.ViewManagement.ApplicationViewSwitchingOptions
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewSwitcher");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewSwitcherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewSwitcherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PrepareForCustomAnimatedSwitchAsync (toViewId, fromViewId, options, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end ApplicationViewSwitcher;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ApplicationViewTitleBar

   procedure Initialize (this : in out ApplicationViewTitleBar) is
   begin
      null;
   end;

   procedure Finalize (this : in out ApplicationViewTitleBar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IApplicationViewTitleBar, IApplicationViewTitleBar_Ptr);
   begin
      if this.m_IApplicationViewTitleBar /= null then
         if this.m_IApplicationViewTitleBar.all /= null then
            RefCount := this.m_IApplicationViewTitleBar.all.Release;
            Free (this.m_IApplicationViewTitleBar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ApplicationViewTitleBar

   procedure put_ForegroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ForegroundColor (value);
   end;

   function get_ForegroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ForegroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_BackgroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_BackgroundColor (value);
   end;

   function get_BackgroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_BackgroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonForegroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonForegroundColor (value);
   end;

   function get_ButtonForegroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonForegroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonBackgroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonBackgroundColor (value);
   end;

   function get_ButtonBackgroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonBackgroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonHoverForegroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonHoverForegroundColor (value);
   end;

   function get_ButtonHoverForegroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonHoverForegroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonHoverBackgroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonHoverBackgroundColor (value);
   end;

   function get_ButtonHoverBackgroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonHoverBackgroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonPressedForegroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonPressedForegroundColor (value);
   end;

   function get_ButtonPressedForegroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonPressedForegroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonPressedBackgroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonPressedBackgroundColor (value);
   end;

   function get_ButtonPressedBackgroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonPressedBackgroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InactiveForegroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_InactiveForegroundColor (value);
   end;

   function get_InactiveForegroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_InactiveForegroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InactiveBackgroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_InactiveBackgroundColor (value);
   end;

   function get_InactiveBackgroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_InactiveBackgroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonInactiveForegroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonInactiveForegroundColor (value);
   end;

   function get_ButtonInactiveForegroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonInactiveForegroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ButtonInactiveBackgroundColor
   (
      this : in out ApplicationViewTitleBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.put_ButtonInactiveBackgroundColor (value);
   end;

   function get_ButtonInactiveBackgroundColor
   (
      this : in out ApplicationViewTitleBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IApplicationViewTitleBar.all.get_ButtonInactiveBackgroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ApplicationViewTransferContext

   procedure Initialize (this : in out ApplicationViewTransferContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out ApplicationViewTransferContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IApplicationViewTransferContext, IApplicationViewTransferContext_Ptr);
   begin
      if this.m_IApplicationViewTransferContext /= null then
         if this.m_IApplicationViewTransferContext.all /= null then
            RefCount := this.m_IApplicationViewTransferContext.all.Release;
            Free (this.m_IApplicationViewTransferContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ApplicationViewTransferContext

   function Constructor return ApplicationViewTransferContext is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewTransferContext");
      m_ComRetVal  : aliased Windows.UI.ViewManagement.IApplicationViewTransferContext;
   begin
      return RetVal : ApplicationViewTransferContext do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IApplicationViewTransferContext := new Windows.UI.ViewManagement.IApplicationViewTransferContext;
            Retval.m_IApplicationViewTransferContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ApplicationViewTransferContext

   function get_DataPackageFormatId
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ApplicationViewTransferContext");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IApplicationViewTransferContextStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IApplicationViewTransferContextStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DataPackageFormatId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ApplicationViewTransferContext

   function get_ViewId
   (
      this : in out ApplicationViewTransferContext
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IApplicationViewTransferContext.all.get_ViewId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewId
   (
      this : in out ApplicationViewTransferContext;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IApplicationViewTransferContext.all.put_ViewId (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InputPane

   procedure Initialize (this : in out InputPane) is
   begin
      null;
   end;

   procedure Finalize (this : in out InputPane) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInputPane, IInputPane_Ptr);
   begin
      if this.m_IInputPane /= null then
         if this.m_IInputPane.all /= null then
            RefCount := this.m_IInputPane.all.Release;
            Free (this.m_IInputPane);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for InputPane

   function GetForCurrentView
   return WinRt.Windows.UI.ViewManagement.InputPane is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.InputPane");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IInputPaneStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IInputPane;
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.InputPane do
         Hr := RoGetActivationFactory (m_hString, IID_IInputPaneStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInputPane := new Windows.UI.ViewManagement.IInputPane;
            Retval.m_IInputPane.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUIContext
   (
      context : Windows.UI.UIContext'Class
   )
   return WinRt.Windows.UI.ViewManagement.InputPane is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.InputPane");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IInputPaneStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IInputPane;
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.InputPane do
         Hr := RoGetActivationFactory (m_hString, IID_IInputPaneStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUIContext (context.m_IUIContext.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IInputPane := new Windows.UI.ViewManagement.IInputPane;
            Retval.m_IInputPane.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InputPane

   function add_Showing
   (
      this : in out InputPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IInputPane.all.add_Showing (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Showing
   (
      this : in out InputPane;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInputPane.all.remove_Showing (token);
   end;

   function add_Hiding
   (
      this : in out InputPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IInputPane.all.add_Hiding (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Hiding
   (
      this : in out InputPane;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInputPane.all.remove_Hiding (token);
   end;

   function get_OccludedRect
   (
      this : in out InputPane
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IInputPane.all.get_OccludedRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryShow
   (
      this : in out InputPane
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IInputPane2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IInputPane_Interface, WinRt.Windows.UI.ViewManagement.IInputPane2, WinRt.Windows.UI.ViewManagement.IID_IInputPane2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInputPane.all);
      Hr := m_Interface.TryShow (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryHide
   (
      this : in out InputPane
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IInputPane2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IInputPane_Interface, WinRt.Windows.UI.ViewManagement.IInputPane2, WinRt.Windows.UI.ViewManagement.IID_IInputPane2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInputPane.all);
      Hr := m_Interface.TryHide (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Visible
   (
      this : in out InputPane
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IInputPaneControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IInputPane_Interface, WinRt.Windows.UI.ViewManagement.IInputPaneControl, WinRt.Windows.UI.ViewManagement.IID_IInputPaneControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInputPane.all);
      Hr := m_Interface.get_Visible (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Visible
   (
      this : in out InputPane;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IInputPaneControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IInputPane_Interface, WinRt.Windows.UI.ViewManagement.IInputPaneControl, WinRt.Windows.UI.ViewManagement.IID_IInputPaneControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInputPane.all);
      Hr := m_Interface.put_Visible (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InputPaneVisibilityEventArgs

   procedure Initialize (this : in out InputPaneVisibilityEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out InputPaneVisibilityEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInputPaneVisibilityEventArgs, IInputPaneVisibilityEventArgs_Ptr);
   begin
      if this.m_IInputPaneVisibilityEventArgs /= null then
         if this.m_IInputPaneVisibilityEventArgs.all /= null then
            RefCount := this.m_IInputPaneVisibilityEventArgs.all.Release;
            Free (this.m_IInputPaneVisibilityEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InputPaneVisibilityEventArgs

   function get_OccludedRect
   (
      this : in out InputPaneVisibilityEventArgs
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IInputPaneVisibilityEventArgs.all.get_OccludedRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EnsuredFocusedElementInView
   (
      this : in out InputPaneVisibilityEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInputPaneVisibilityEventArgs.all.put_EnsuredFocusedElementInView (value);
   end;

   function get_EnsuredFocusedElementInView
   (
      this : in out InputPaneVisibilityEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInputPaneVisibilityEventArgs.all.get_EnsuredFocusedElementInView (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ProjectionManager is

      procedure StartProjectingAsync
      (
         projectionViewId : WinRt.Int32;
         anchorViewId : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StartProjectingAsync (projectionViewId, anchorViewId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SwapDisplaysForViewsAsync
      (
         projectionViewId : WinRt.Int32;
         anchorViewId : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SwapDisplaysForViewsAsync (projectionViewId, anchorViewId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure StopProjectingAsync
      (
         projectionViewId : WinRt.Int32;
         anchorViewId : WinRt.Int32
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StopProjectingAsync (projectionViewId, anchorViewId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_ProjectionDisplayAvailable
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProjectionDisplayAvailable (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_ProjectionDisplayAvailableChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ProjectionDisplayAvailableChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ProjectionDisplayAvailableChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ProjectionDisplayAvailableChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure StartProjectingAsync
      (
         projectionViewId : WinRt.Int32;
         anchorViewId : WinRt.Int32;
         displayDeviceInfo : Windows.Devices.Enumeration.DeviceInformation'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.StartProjectingAsync (projectionViewId, anchorViewId, displayDeviceInfo.m_IDeviceInformation.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RequestStartProjectingAsync
      (
         projectionViewId : WinRt.Int32;
         anchorViewId : WinRt.Int32;
         selection : Windows.Foundation.Rect
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestStartProjectingAsync (projectionViewId, anchorViewId, selection, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function RequestStartProjectingAsync
      (
         projectionViewId : WinRt.Int32;
         anchorViewId : WinRt.Int32;
         selection : Windows.Foundation.Rect;
         prefferedPlacement : Windows.UI.Popups.Placement
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestStartProjectingAsync (projectionViewId, anchorViewId, selection, prefferedPlacement, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function GetDeviceSelector
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ProjectionManager");
         m_Factory        : access WinRt.Windows.UI.ViewManagement.IProjectionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IProjectionManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end ProjectionManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StatusBar

   procedure Initialize (this : in out StatusBar) is
   begin
      null;
   end;

   procedure Finalize (this : in out StatusBar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStatusBar, IStatusBar_Ptr);
   begin
      if this.m_IStatusBar /= null then
         if this.m_IStatusBar.all /= null then
            RefCount := this.m_IStatusBar.all.Release;
            Free (this.m_IStatusBar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for StatusBar

   function GetForCurrentView
   return WinRt.Windows.UI.ViewManagement.StatusBar is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.StatusBar");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IStatusBarStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IStatusBar;
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.StatusBar do
         Hr := RoGetActivationFactory (m_hString, IID_IStatusBarStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IStatusBar := new Windows.UI.ViewManagement.IStatusBar;
            Retval.m_IStatusBar.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StatusBar

   procedure ShowAsync
   (
      this : in out StatusBar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStatusBar.all.ShowAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure HideAsync
   (
      this : in out StatusBar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStatusBar.all.HideAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_BackgroundOpacity
   (
      this : in out StatusBar
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IStatusBar.all.get_BackgroundOpacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BackgroundOpacity
   (
      this : in out StatusBar;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStatusBar.all.put_BackgroundOpacity (value);
   end;

   function get_ForegroundColor
   (
      this : in out StatusBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IStatusBar.all.get_ForegroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ForegroundColor
   (
      this : in out StatusBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStatusBar.all.put_ForegroundColor (value);
   end;

   function get_BackgroundColor
   (
      this : in out StatusBar
   )
   return IReference_Color.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Color.Kind;
   begin
      Hr := this.m_IStatusBar.all.get_BackgroundColor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Color (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_BackgroundColor
   (
      this : in out StatusBar;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStatusBar.all.put_BackgroundColor (value);
   end;

   function get_ProgressIndicator
   (
      this : in out StatusBar
   )
   return WinRt.Windows.UI.ViewManagement.StatusBarProgressIndicator'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IStatusBarProgressIndicator;
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.StatusBarProgressIndicator do
         Hr := this.m_IStatusBar.all.get_ProgressIndicator (m_ComRetVal'Access);
         Retval.m_IStatusBarProgressIndicator := new Windows.UI.ViewManagement.IStatusBarProgressIndicator;
         Retval.m_IStatusBarProgressIndicator.all := m_ComRetVal;
      end return;
   end;

   function get_OccludedRect
   (
      this : in out StatusBar
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IStatusBar.all.get_OccludedRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Showing
   (
      this : in out StatusBar;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStatusBar.all.add_Showing (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Showing
   (
      this : in out StatusBar;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStatusBar.all.remove_Showing (token);
   end;

   function add_Hiding
   (
      this : in out StatusBar;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStatusBar.all.add_Hiding (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Hiding
   (
      this : in out StatusBar;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStatusBar.all.remove_Hiding (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StatusBarProgressIndicator

   procedure Initialize (this : in out StatusBarProgressIndicator) is
   begin
      null;
   end;

   procedure Finalize (this : in out StatusBarProgressIndicator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStatusBarProgressIndicator, IStatusBarProgressIndicator_Ptr);
   begin
      if this.m_IStatusBarProgressIndicator /= null then
         if this.m_IStatusBarProgressIndicator.all /= null then
            RefCount := this.m_IStatusBarProgressIndicator.all.Release;
            Free (this.m_IStatusBarProgressIndicator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StatusBarProgressIndicator

   procedure ShowAsync
   (
      this : in out StatusBarProgressIndicator
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStatusBarProgressIndicator.all.ShowAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure HideAsync
   (
      this : in out StatusBarProgressIndicator
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStatusBarProgressIndicator.all.HideAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Text
   (
      this : in out StatusBarProgressIndicator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStatusBarProgressIndicator.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out StatusBarProgressIndicator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStatusBarProgressIndicator.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ProgressValue
   (
      this : in out StatusBarProgressIndicator
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IStatusBarProgressIndicator.all.get_ProgressValue (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ProgressValue
   (
      this : in out StatusBarProgressIndicator;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStatusBarProgressIndicator.all.put_ProgressValue (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UISettings

   procedure Initialize (this : in out UISettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out UISettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUISettings, IUISettings_Ptr);
   begin
      if this.m_IUISettings /= null then
         if this.m_IUISettings.all /= null then
            RefCount := this.m_IUISettings.all.Release;
            Free (this.m_IUISettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UISettings

   function Constructor return UISettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.ViewManagement.UISettings");
      m_ComRetVal  : aliased Windows.UI.ViewManagement.IUISettings;
   begin
      return RetVal : UISettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUISettings := new Windows.UI.ViewManagement.IUISettings;
            Retval.m_IUISettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UISettings

   function get_HandPreference
   (
      this : in out UISettings
   )
   return WinRt.Windows.UI.ViewManagement.HandPreference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.HandPreference;
   begin
      Hr := this.m_IUISettings.all.get_HandPreference (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CursorSize
   (
      this : in out UISettings
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IUISettings.all.get_CursorSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScrollBarSize
   (
      this : in out UISettings
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IUISettings.all.get_ScrollBarSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScrollBarArrowSize
   (
      this : in out UISettings
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IUISettings.all.get_ScrollBarArrowSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScrollBarThumbBoxSize
   (
      this : in out UISettings
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IUISettings.all.get_ScrollBarThumbBoxSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MessageDuration
   (
      this : in out UISettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUISettings.all.get_MessageDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AnimationsEnabled
   (
      this : in out UISettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUISettings.all.get_AnimationsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CaretBrowsingEnabled
   (
      this : in out UISettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUISettings.all.get_CaretBrowsingEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CaretBlinkRate
   (
      this : in out UISettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUISettings.all.get_CaretBlinkRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CaretWidth
   (
      this : in out UISettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUISettings.all.get_CaretWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DoubleClickTime
   (
      this : in out UISettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUISettings.all.get_DoubleClickTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MouseHoverTime
   (
      this : in out UISettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUISettings.all.get_MouseHoverTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function UIElementColor
   (
      this : in out UISettings;
      desiredElement : Windows.UI.ViewManagement.UIElementType
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IUISettings.all.UIElementColor (desiredElement, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TextScaleFactor
   (
      this : in out UISettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings2, WinRt.Windows.UI.ViewManagement.IID_IUISettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.get_TextScaleFactor (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_TextScaleFactorChanged
   (
      this : in out UISettings;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings2, WinRt.Windows.UI.ViewManagement.IID_IUISettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.add_TextScaleFactorChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_TextScaleFactorChanged
   (
      this : in out UISettings;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings2, WinRt.Windows.UI.ViewManagement.IID_IUISettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.remove_TextScaleFactorChanged (cookie);
      m_RefCount := m_Interface.Release;
   end;

   function GetColorValue
   (
      this : in out UISettings;
      desiredColor : Windows.UI.ViewManagement.UIColorType
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings3, WinRt.Windows.UI.ViewManagement.IID_IUISettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.GetColorValue (desiredColor, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_ColorValuesChanged
   (
      this : in out UISettings;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings3, WinRt.Windows.UI.ViewManagement.IID_IUISettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.add_ColorValuesChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ColorValuesChanged
   (
      this : in out UISettings;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings3, WinRt.Windows.UI.ViewManagement.IID_IUISettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.remove_ColorValuesChanged (cookie);
      m_RefCount := m_Interface.Release;
   end;

   function get_AdvancedEffectsEnabled
   (
      this : in out UISettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings4, WinRt.Windows.UI.ViewManagement.IID_IUISettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.get_AdvancedEffectsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_AdvancedEffectsEnabledChanged
   (
      this : in out UISettings;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings4, WinRt.Windows.UI.ViewManagement.IID_IUISettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.add_AdvancedEffectsEnabledChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AdvancedEffectsEnabledChanged
   (
      this : in out UISettings;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings4, WinRt.Windows.UI.ViewManagement.IID_IUISettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.remove_AdvancedEffectsEnabledChanged (cookie);
      m_RefCount := m_Interface.Release;
   end;

   function get_AutoHideScrollBars
   (
      this : in out UISettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings5, WinRt.Windows.UI.ViewManagement.IID_IUISettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.get_AutoHideScrollBars (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_AutoHideScrollBarsChanged
   (
      this : in out UISettings;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings5, WinRt.Windows.UI.ViewManagement.IID_IUISettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.add_AutoHideScrollBarsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AutoHideScrollBarsChanged
   (
      this : in out UISettings;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings5, WinRt.Windows.UI.ViewManagement.IID_IUISettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.remove_AutoHideScrollBarsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_AnimationsEnabledChanged
   (
      this : in out UISettings;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings6, WinRt.Windows.UI.ViewManagement.IID_IUISettings6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.add_AnimationsEnabledChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AnimationsEnabledChanged
   (
      this : in out UISettings;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings6, WinRt.Windows.UI.ViewManagement.IID_IUISettings6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.remove_AnimationsEnabledChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_MessageDurationChanged
   (
      this : in out UISettings;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings6, WinRt.Windows.UI.ViewManagement.IID_IUISettings6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.add_MessageDurationChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_MessageDurationChanged
   (
      this : in out UISettings;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.ViewManagement.IUISettings6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.ViewManagement.IUISettings_Interface, WinRt.Windows.UI.ViewManagement.IUISettings6, WinRt.Windows.UI.ViewManagement.IID_IUISettings6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUISettings.all);
      Hr := m_Interface.remove_MessageDurationChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UISettingsAnimationsEnabledChangedEventArgs

   procedure Initialize (this : in out UISettingsAnimationsEnabledChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UISettingsAnimationsEnabledChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUISettingsAnimationsEnabledChangedEventArgs, IUISettingsAnimationsEnabledChangedEventArgs_Ptr);
   begin
      if this.m_IUISettingsAnimationsEnabledChangedEventArgs /= null then
         if this.m_IUISettingsAnimationsEnabledChangedEventArgs.all /= null then
            RefCount := this.m_IUISettingsAnimationsEnabledChangedEventArgs.all.Release;
            Free (this.m_IUISettingsAnimationsEnabledChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UISettingsAnimationsEnabledChangedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UISettingsAutoHideScrollBarsChangedEventArgs

   procedure Initialize (this : in out UISettingsAutoHideScrollBarsChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UISettingsAutoHideScrollBarsChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUISettingsAutoHideScrollBarsChangedEventArgs, IUISettingsAutoHideScrollBarsChangedEventArgs_Ptr);
   begin
      if this.m_IUISettingsAutoHideScrollBarsChangedEventArgs /= null then
         if this.m_IUISettingsAutoHideScrollBarsChangedEventArgs.all /= null then
            RefCount := this.m_IUISettingsAutoHideScrollBarsChangedEventArgs.all.Release;
            Free (this.m_IUISettingsAutoHideScrollBarsChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UISettingsAutoHideScrollBarsChangedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UISettingsMessageDurationChangedEventArgs

   procedure Initialize (this : in out UISettingsMessageDurationChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UISettingsMessageDurationChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUISettingsMessageDurationChangedEventArgs, IUISettingsMessageDurationChangedEventArgs_Ptr);
   begin
      if this.m_IUISettingsMessageDurationChangedEventArgs /= null then
         if this.m_IUISettingsMessageDurationChangedEventArgs.all /= null then
            RefCount := this.m_IUISettingsMessageDurationChangedEventArgs.all.Release;
            Free (this.m_IUISettingsMessageDurationChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UISettingsMessageDurationChangedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UIViewSettings

   procedure Initialize (this : in out UIViewSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out UIViewSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUIViewSettings, IUIViewSettings_Ptr);
   begin
      if this.m_IUIViewSettings /= null then
         if this.m_IUIViewSettings.all /= null then
            RefCount := this.m_IUIViewSettings.all.Release;
            Free (this.m_IUIViewSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UIViewSettings

   function GetForCurrentView
   return WinRt.Windows.UI.ViewManagement.UIViewSettings is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.UIViewSettings");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IUIViewSettingsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IUIViewSettings;
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.UIViewSettings do
         Hr := RoGetActivationFactory (m_hString, IID_IUIViewSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUIViewSettings := new Windows.UI.ViewManagement.IUIViewSettings;
            Retval.m_IUIViewSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UIViewSettings

   function get_UserInteractionMode
   (
      this : in out UIViewSettings
   )
   return WinRt.Windows.UI.ViewManagement.UserInteractionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.UserInteractionMode;
   begin
      Hr := this.m_IUIViewSettings.all.get_UserInteractionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ViewModePreferences

   procedure Initialize (this : in out ViewModePreferences) is
   begin
      null;
   end;

   procedure Finalize (this : in out ViewModePreferences) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IViewModePreferences, IViewModePreferences_Ptr);
   begin
      if this.m_IViewModePreferences /= null then
         if this.m_IViewModePreferences.all /= null then
            RefCount := this.m_IViewModePreferences.all.Release;
            Free (this.m_IViewModePreferences);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ViewModePreferences

   function CreateDefault
   (
      mode : Windows.UI.ViewManagement.ApplicationViewMode
   )
   return WinRt.Windows.UI.ViewManagement.ViewModePreferences is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ViewManagement.ViewModePreferences");
      m_Factory        : access WinRt.Windows.UI.ViewManagement.IViewModePreferencesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.IViewModePreferences;
   begin
      return RetVal : WinRt.Windows.UI.ViewManagement.ViewModePreferences do
         Hr := RoGetActivationFactory (m_hString, IID_IViewModePreferencesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDefault (mode, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IViewModePreferences := new Windows.UI.ViewManagement.IViewModePreferences;
            Retval.m_IViewModePreferences.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ViewModePreferences

   function get_ViewSizePreference
   (
      this : in out ViewModePreferences
   )
   return WinRt.Windows.UI.ViewManagement.ViewSizePreference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.ViewManagement.ViewSizePreference;
   begin
      Hr := this.m_IViewModePreferences.all.get_ViewSizePreference (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewSizePreference
   (
      this : in out ViewModePreferences;
      value : Windows.UI.ViewManagement.ViewSizePreference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IViewModePreferences.all.put_ViewSizePreference (value);
   end;

   function get_CustomSize
   (
      this : in out ViewModePreferences
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IViewModePreferences.all.get_CustomSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomSize
   (
      this : in out ViewModePreferences;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IViewModePreferences.all.put_CustomSize (value);
   end;

end;

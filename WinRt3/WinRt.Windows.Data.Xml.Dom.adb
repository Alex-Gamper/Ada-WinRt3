--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Data.Xml.Dom is

   package IAsyncOperation_XmlDocument is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Data.Xml.Dom.IXmlDocument);
   package AsyncOperationCompletedHandler_XmlDocument is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Data.Xml.Dom.IXmlDocument);

   package IVectorView_IXmlNode is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Data.Xml.Dom.IXmlNode);
   package IIterable_IXmlNode is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Data.Xml.Dom.IXmlNode);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DtdEntity

   procedure Initialize (this : in out DtdEntity) is
   begin
      null;
   end;

   procedure Finalize (this : in out DtdEntity) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDtdEntity, IDtdEntity_Ptr);
   begin
      if this.m_IDtdEntity /= null then
         if this.m_IDtdEntity.all /= null then
            RefCount := this.m_IDtdEntity.all.Release;
            Free (this.m_IDtdEntity);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DtdEntity

   function get_PublicId
   (
      this : in out DtdEntity
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IDtdEntity.all.get_PublicId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemId
   (
      this : in out DtdEntity
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IDtdEntity.all.get_SystemId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NotationName
   (
      this : in out DtdEntity
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IDtdEntity.all.get_NotationName (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NodeValue
   (
      this : in out DtdEntity
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out DtdEntity;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out DtdEntity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IDtdEntity.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IDtdEntity.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out DtdEntity
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out DtdEntity
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IDtdEntity.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out DtdEntity;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out DtdEntity;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out DtdEntity;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out DtdEntity;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out DtdEntity;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out DtdEntity
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out DtdEntity
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out DtdEntity
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out DtdEntity
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out DtdEntity;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out DtdEntity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out DtdEntity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out DtdEntity;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out DtdEntity;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out DtdEntity;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IDtdEntity.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out DtdEntity;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdEntity.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out DtdEntity;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdEntity_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IDtdEntity.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DtdNotation

   procedure Initialize (this : in out DtdNotation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DtdNotation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDtdNotation, IDtdNotation_Ptr);
   begin
      if this.m_IDtdNotation /= null then
         if this.m_IDtdNotation.all /= null then
            RefCount := this.m_IDtdNotation.all.Release;
            Free (this.m_IDtdNotation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DtdNotation

   function get_PublicId
   (
      this : in out DtdNotation
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IDtdNotation.all.get_PublicId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SystemId
   (
      this : in out DtdNotation
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IDtdNotation.all.get_SystemId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NodeValue
   (
      this : in out DtdNotation
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out DtdNotation;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out DtdNotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IDtdNotation.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IDtdNotation.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out DtdNotation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out DtdNotation
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IDtdNotation.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out DtdNotation;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out DtdNotation;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out DtdNotation;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out DtdNotation;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out DtdNotation;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out DtdNotation
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out DtdNotation
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out DtdNotation
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out DtdNotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out DtdNotation;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out DtdNotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out DtdNotation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out DtdNotation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out DtdNotation;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out DtdNotation;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IDtdNotation.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out DtdNotation;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDtdNotation.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out DtdNotation;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IDtdNotation_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IDtdNotation.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlAttribute

   procedure Initialize (this : in out XmlAttribute) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlAttribute) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlAttribute, IXmlAttribute_Ptr);
   begin
      if this.m_IXmlAttribute /= null then
         if this.m_IXmlAttribute.all /= null then
            RefCount := this.m_IXmlAttribute.all.Release;
            Free (this.m_IXmlAttribute);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlAttribute

   function get_Name
   (
      this : in out XmlAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXmlAttribute.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Specified
   (
      this : in out XmlAttribute
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXmlAttribute.all.get_Specified (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out XmlAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXmlAttribute.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out XmlAttribute;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IXmlAttribute.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out XmlAttribute
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlAttribute;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlAttribute.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlAttribute.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlAttribute
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlAttribute
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlAttribute.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlAttribute;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlAttribute;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlAttribute;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlAttribute;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlAttribute;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlAttribute
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlAttribute
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlAttribute
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlAttribute
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlAttribute;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlAttribute;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlAttribute;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlAttribute;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlAttribute.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlAttribute;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlAttribute.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlAttribute;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlAttribute_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlAttribute.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlCDataSection

   procedure Initialize (this : in out XmlCDataSection) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlCDataSection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlCDataSection, IXmlCDataSection_Ptr);
   begin
      if this.m_IXmlCDataSection /= null then
         if this.m_IXmlCDataSection.all /= null then
            RefCount := this.m_IXmlCDataSection.all.Release;
            Free (this.m_IXmlCDataSection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlCDataSection

   function SplitText
   (
      this : in out XmlCDataSection;
      offset : WinRt.UInt32
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlText is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlText := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlText;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlText, WinRt.Windows.Data.Xml.Dom.IID_IXmlText'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.SplitText (offset, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out XmlCDataSection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_Data (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Data
   (
      this : in out XmlCDataSection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.put_Data (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Length
   (
      this : in out XmlCDataSection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_Length (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function SubstringData
   (
      this : in out XmlCDataSection;
      offset : WinRt.UInt32;
      count : WinRt.UInt32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.SubstringData (offset, count, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AppendData
   (
      this : in out XmlCDataSection;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.AppendData (HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure InsertData
   (
      this : in out XmlCDataSection;
      offset : WinRt.UInt32;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.InsertData (offset, HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure DeleteData
   (
      this : in out XmlCDataSection;
      offset : WinRt.UInt32;
      count : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.DeleteData (offset, count);
      m_RefCount := m_Interface.Release;
   end;

   procedure ReplaceData
   (
      this : in out XmlCDataSection;
      offset : WinRt.UInt32;
      count : WinRt.UInt32;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.ReplaceData (offset, count, HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   function get_NodeValue
   (
      this : in out XmlCDataSection
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlCDataSection;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlCDataSection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlCDataSection.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlCDataSection.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlCDataSection
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlCDataSection
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlCDataSection.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlCDataSection;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlCDataSection;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlCDataSection;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlCDataSection;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlCDataSection;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlCDataSection
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlCDataSection
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlCDataSection
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlCDataSection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlCDataSection;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlCDataSection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlCDataSection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlCDataSection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlCDataSection;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlCDataSection;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlCDataSection.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlCDataSection;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlCDataSection.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlCDataSection;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlCDataSection_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlCDataSection.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlComment

   procedure Initialize (this : in out XmlComment) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlComment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlComment, IXmlComment_Ptr);
   begin
      if this.m_IXmlComment /= null then
         if this.m_IXmlComment.all /= null then
            RefCount := this.m_IXmlComment.all.Release;
            Free (this.m_IXmlComment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlComment

   function get_Data
   (
      this : in out XmlComment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_Data (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Data
   (
      this : in out XmlComment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.put_Data (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Length
   (
      this : in out XmlComment
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_Length (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function SubstringData
   (
      this : in out XmlComment;
      offset : WinRt.UInt32;
      count : WinRt.UInt32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.SubstringData (offset, count, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AppendData
   (
      this : in out XmlComment;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.AppendData (HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure InsertData
   (
      this : in out XmlComment;
      offset : WinRt.UInt32;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.InsertData (offset, HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure DeleteData
   (
      this : in out XmlComment;
      offset : WinRt.UInt32;
      count : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.DeleteData (offset, count);
      m_RefCount := m_Interface.Release;
   end;

   procedure ReplaceData
   (
      this : in out XmlComment;
      offset : WinRt.UInt32;
      count : WinRt.UInt32;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.ReplaceData (offset, count, HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   function get_NodeValue
   (
      this : in out XmlComment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlComment;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlComment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlComment.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlComment.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlComment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlComment
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlComment.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlComment;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlComment;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlComment;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlComment;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlComment;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlComment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlComment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlComment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlComment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlComment;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlComment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlComment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlComment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlComment;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlComment;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlComment.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlComment;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlComment.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlComment;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlComment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlComment.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlDocument

   procedure Initialize (this : in out XmlDocument) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlDocument) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlDocument, IXmlDocument_Ptr);
   begin
      if this.m_IXmlDocument /= null then
         if this.m_IXmlDocument.all /= null then
            RefCount := this.m_IXmlDocument.all.Release;
            Free (this.m_IXmlDocument);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XmlDocument

   function Constructor return XmlDocument is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Data.Xml.Dom.XmlDocument");
      m_ComRetVal  : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : XmlDocument do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
            Retval.m_IXmlDocument.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XmlDocument

   function LoadFromUriAsync
   (
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Xml.Dom.XmlDocument");
      m_Factory        : access WinRt.Windows.Data.Xml.Dom.IXmlDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XmlDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XmlDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Xml.Dom.IXmlDocument;
      m_IID            : aliased WinRt.IID := (4166574649, 6294, 22914, (132, 149, 20, 49, 104, 71, 142, 184 )); -- Windows.Data.Xml.Dom.XmlDocument;
      m_HandlerIID     : aliased WinRt.IID := (1592752151, 37853, 23563, (158, 90, 235, 73, 4, 8, 243, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_XmlDocument.Kind := new AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XmlDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XmlDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate, AsyncOperationCompletedHandler_XmlDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IXmlDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromUriAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
                     Retval.m_IXmlDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromUriAsync
   (
      uri : Windows.Foundation.Uri'Class;
      loadSettings : Windows.Data.Xml.Dom.XmlLoadSettings'Class
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Xml.Dom.XmlDocument");
      m_Factory        : access WinRt.Windows.Data.Xml.Dom.IXmlDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XmlDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XmlDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Xml.Dom.IXmlDocument;
      m_IID            : aliased WinRt.IID := (4166574649, 6294, 22914, (132, 149, 20, 49, 104, 71, 142, 184 )); -- Windows.Data.Xml.Dom.XmlDocument;
      m_HandlerIID     : aliased WinRt.IID := (1592752151, 37853, 23563, (158, 90, 235, 73, 4, 8, 243, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_XmlDocument.Kind := new AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XmlDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XmlDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate, AsyncOperationCompletedHandler_XmlDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IXmlDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromUriAsync (uri.m_IUriRuntimeClass.all, loadSettings.m_IXmlLoadSettings.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
                     Retval.m_IXmlDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromFileAsync
   (
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Xml.Dom.XmlDocument");
      m_Factory        : access WinRt.Windows.Data.Xml.Dom.IXmlDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XmlDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XmlDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Xml.Dom.IXmlDocument;
      m_IID            : aliased WinRt.IID := (4166574649, 6294, 22914, (132, 149, 20, 49, 104, 71, 142, 184 )); -- Windows.Data.Xml.Dom.XmlDocument;
      m_HandlerIID     : aliased WinRt.IID := (1592752151, 37853, 23563, (158, 90, 235, 73, 4, 8, 243, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_XmlDocument.Kind := new AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XmlDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XmlDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate, AsyncOperationCompletedHandler_XmlDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IXmlDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromFileAsync (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
                     Retval.m_IXmlDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadFromFileAsync
   (
      file : Windows.Storage.IStorageFile;
      loadSettings : Windows.Data.Xml.Dom.XmlLoadSettings'Class
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Xml.Dom.XmlDocument");
      m_Factory        : access WinRt.Windows.Data.Xml.Dom.IXmlDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_XmlDocument.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_XmlDocument.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Data.Xml.Dom.IXmlDocument;
      m_IID            : aliased WinRt.IID := (4166574649, 6294, 22914, (132, 149, 20, 49, 104, 71, 142, 184 )); -- Windows.Data.Xml.Dom.XmlDocument;
      m_HandlerIID     : aliased WinRt.IID := (1592752151, 37853, 23563, (158, 90, 235, 73, 4, 8, 243, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_XmlDocument.Kind := new AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_XmlDocument.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_XmlDocument.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_XmlDocument.Kind_Delegate, AsyncOperationCompletedHandler_XmlDocument.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IXmlDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadFromFileAsync (file, loadSettings.m_IXmlLoadSettings.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
                     Retval.m_IXmlDocument.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlDocument

   function get_Doctype
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocumentType'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocumentType;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocumentType do
         Hr := this.m_IXmlDocument.all.get_Doctype (m_ComRetVal'Access);
         Retval.m_IXmlDocumentType := new Windows.Data.Xml.Dom.IXmlDocumentType;
         Retval.m_IXmlDocumentType.all := m_ComRetVal;
      end return;
   end;

   function get_Implementation
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDomImplementation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDomImplementation;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDomImplementation do
         Hr := this.m_IXmlDocument.all.get_Implementation (m_ComRetVal'Access);
         Retval.m_IXmlDomImplementation := new Windows.Data.Xml.Dom.IXmlDomImplementation;
         Retval.m_IXmlDomImplementation.all := m_ComRetVal;
      end return;
   end;

   function get_DocumentElement
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.XmlElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlElement;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlElement do
         Hr := this.m_IXmlDocument.all.get_DocumentElement (m_ComRetVal'Access);
         Retval.m_IXmlElement := new Windows.Data.Xml.Dom.IXmlElement;
         Retval.m_IXmlElement.all := m_ComRetVal;
      end return;
   end;

   function CreateElement
   (
      this : in out XmlDocument;
      tagName : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlElement;
      HStr_tagName : WinRt.HString := To_HString (tagName);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlElement do
         Hr := this.m_IXmlDocument.all.CreateElement (HStr_tagName, m_ComRetVal'Access);
         Retval.m_IXmlElement := new Windows.Data.Xml.Dom.IXmlElement;
         Retval.m_IXmlElement.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_tagName);
      end return;
   end;

   function CreateDocumentFragment
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocumentFragment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocumentFragment;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocumentFragment do
         Hr := this.m_IXmlDocument.all.CreateDocumentFragment (m_ComRetVal'Access);
         Retval.m_IXmlDocumentFragment := new Windows.Data.Xml.Dom.IXmlDocumentFragment;
         Retval.m_IXmlDocumentFragment.all := m_ComRetVal;
      end return;
   end;

   function CreateTextNode
   (
      this : in out XmlDocument;
      data : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlText'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlText;
      HStr_data : WinRt.HString := To_HString (data);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlText do
         Hr := this.m_IXmlDocument.all.CreateTextNode (HStr_data, m_ComRetVal'Access);
         Retval.m_IXmlText := new Windows.Data.Xml.Dom.IXmlText;
         Retval.m_IXmlText.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_data);
      end return;
   end;

   function CreateComment
   (
      this : in out XmlDocument;
      data : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlComment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlComment;
      HStr_data : WinRt.HString := To_HString (data);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlComment do
         Hr := this.m_IXmlDocument.all.CreateComment (HStr_data, m_ComRetVal'Access);
         Retval.m_IXmlComment := new Windows.Data.Xml.Dom.IXmlComment;
         Retval.m_IXmlComment.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_data);
      end return;
   end;

   function CreateProcessingInstruction
   (
      this : in out XmlDocument;
      target : WinRt.WString;
      data : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlProcessingInstruction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlProcessingInstruction;
      HStr_target : WinRt.HString := To_HString (target);
      HStr_data : WinRt.HString := To_HString (data);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlProcessingInstruction do
         Hr := this.m_IXmlDocument.all.CreateProcessingInstruction (HStr_target, HStr_data, m_ComRetVal'Access);
         Retval.m_IXmlProcessingInstruction := new Windows.Data.Xml.Dom.IXmlProcessingInstruction;
         Retval.m_IXmlProcessingInstruction.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_target);
         Hr := WindowsDeleteString (HStr_data);
      end return;
   end;

   function CreateAttribute
   (
      this : in out XmlDocument;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlAttribute'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlAttribute;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlAttribute do
         Hr := this.m_IXmlDocument.all.CreateAttribute (HStr_name, m_ComRetVal'Access);
         Retval.m_IXmlAttribute := new Windows.Data.Xml.Dom.IXmlAttribute;
         Retval.m_IXmlAttribute.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function CreateEntityReference
   (
      this : in out XmlDocument;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlEntityReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlEntityReference;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlEntityReference do
         Hr := this.m_IXmlDocument.all.CreateEntityReference (HStr_name, m_ComRetVal'Access);
         Retval.m_IXmlEntityReference := new Windows.Data.Xml.Dom.IXmlEntityReference;
         Retval.m_IXmlEntityReference.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetElementsByTagName
   (
      this : in out XmlDocument;
      tagName : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_tagName : WinRt.HString := To_HString (tagName);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         Hr := this.m_IXmlDocument.all.GetElementsByTagName (HStr_tagName, m_ComRetVal'Access);
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_tagName);
      end return;
   end;

   function CreateCDataSection
   (
      this : in out XmlDocument;
      data : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlCDataSection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlCDataSection;
      HStr_data : WinRt.HString := To_HString (data);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlCDataSection do
         Hr := this.m_IXmlDocument.all.CreateCDataSection (HStr_data, m_ComRetVal'Access);
         Retval.m_IXmlCDataSection := new Windows.Data.Xml.Dom.IXmlCDataSection;
         Retval.m_IXmlCDataSection.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_data);
      end return;
   end;

   function get_DocumentUri
   (
      this : in out XmlDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXmlDocument.all.get_DocumentUri (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function CreateAttributeNS
   (
      this : in out XmlDocument;
      namespaceUri : WinRt.IInspectable;
      qualifiedName : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlAttribute'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlAttribute;
      HStr_qualifiedName : WinRt.HString := To_HString (qualifiedName);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlAttribute do
         Hr := this.m_IXmlDocument.all.CreateAttributeNS (namespaceUri, HStr_qualifiedName, m_ComRetVal'Access);
         Retval.m_IXmlAttribute := new Windows.Data.Xml.Dom.IXmlAttribute;
         Retval.m_IXmlAttribute.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_qualifiedName);
      end return;
   end;

   function CreateElementNS
   (
      this : in out XmlDocument;
      namespaceUri : WinRt.IInspectable;
      qualifiedName : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlElement;
      HStr_qualifiedName : WinRt.HString := To_HString (qualifiedName);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlElement do
         Hr := this.m_IXmlDocument.all.CreateElementNS (namespaceUri, HStr_qualifiedName, m_ComRetVal'Access);
         Retval.m_IXmlElement := new Windows.Data.Xml.Dom.IXmlElement;
         Retval.m_IXmlElement.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_qualifiedName);
      end return;
   end;

   function GetElementById
   (
      this : in out XmlDocument;
      elementId : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlElement;
      HStr_elementId : WinRt.HString := To_HString (elementId);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlElement do
         Hr := this.m_IXmlDocument.all.GetElementById (HStr_elementId, m_ComRetVal'Access);
         Retval.m_IXmlElement := new Windows.Data.Xml.Dom.IXmlElement;
         Retval.m_IXmlElement.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_elementId);
      end return;
   end;

   function ImportNode
   (
      this : in out XmlDocument;
      node : Windows.Data.Xml.Dom.IXmlNode;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
   begin
      Hr := this.m_IXmlDocument.all.ImportNode (node, deep, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NodeValue
   (
      this : in out XmlDocument
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlDocument;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocument.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlDocument.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlDocument
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlDocument.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlDocument;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlDocument;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlDocument;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlDocument;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlDocument;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlDocument
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlDocument
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlDocument
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlDocument;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlDocument
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlDocument;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlDocument;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlDocument;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocument.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlDocument;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlDocument;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocument.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   procedure LoadXml
   (
      this : in out XmlDocument;
      xml : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_xml : WinRt.HString := To_HString (xml);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO, WinRt.Windows.Data.Xml.Dom.IID_IXmlDocumentIO'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.LoadXml (HStr_xml);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xml);
   end;

   procedure LoadXml
   (
      this : in out XmlDocument;
      xml : WinRt.WString;
      loadSettings : Windows.Data.Xml.Dom.XmlLoadSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_xml : WinRt.HString := To_HString (xml);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO, WinRt.Windows.Data.Xml.Dom.IID_IXmlDocumentIO'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.LoadXml (HStr_xml, loadSettings.m_IXmlLoadSettings.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xml);
   end;

   procedure SaveToFileAsync
   (
      this : in out XmlDocument;
      file : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO, WinRt.Windows.Data.Xml.Dom.IID_IXmlDocumentIO'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.SaveToFileAsync (file, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure LoadXmlFromBuffer
   (
      this : in out XmlDocument;
      buffer : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO2, WinRt.Windows.Data.Xml.Dom.IID_IXmlDocumentIO2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.LoadXmlFromBuffer (buffer);
      m_RefCount := m_Interface.Release;
   end;

   procedure LoadXmlFromBuffer
   (
      this : in out XmlDocument;
      buffer : Windows.Storage.Streams.IBuffer;
      loadSettings : Windows.Data.Xml.Dom.XmlLoadSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocument_Interface, WinRt.Windows.Data.Xml.Dom.IXmlDocumentIO2, WinRt.Windows.Data.Xml.Dom.IID_IXmlDocumentIO2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocument.all);
      Hr := m_Interface.LoadXmlFromBuffer (buffer, loadSettings.m_IXmlLoadSettings.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlDocumentFragment

   procedure Initialize (this : in out XmlDocumentFragment) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlDocumentFragment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlDocumentFragment, IXmlDocumentFragment_Ptr);
   begin
      if this.m_IXmlDocumentFragment /= null then
         if this.m_IXmlDocumentFragment.all /= null then
            RefCount := this.m_IXmlDocumentFragment.all.Release;
            Free (this.m_IXmlDocumentFragment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlDocumentFragment

   function get_NodeValue
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlDocumentFragment;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlDocumentFragment;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlDocumentFragment;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlDocumentFragment;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlDocumentFragment;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlDocumentFragment;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlDocumentFragment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlDocumentFragment;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlDocumentFragment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlDocumentFragment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlDocumentFragment;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlDocumentFragment;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlDocumentFragment;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlDocumentFragment;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentFragment_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocumentFragment.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlDocumentType

   procedure Initialize (this : in out XmlDocumentType) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlDocumentType) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlDocumentType, IXmlDocumentType_Ptr);
   begin
      if this.m_IXmlDocumentType /= null then
         if this.m_IXmlDocumentType.all /= null then
            RefCount := this.m_IXmlDocumentType.all.Release;
            Free (this.m_IXmlDocumentType);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlDocumentType

   function get_Name
   (
      this : in out XmlDocumentType
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXmlDocumentType.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Entities
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         Hr := this.m_IXmlDocumentType.all.get_Entities (m_ComRetVal'Access);
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function get_Notations
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         Hr := this.m_IXmlDocumentType.all.get_Notations (m_ComRetVal'Access);
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function get_NodeValue
   (
      this : in out XmlDocumentType
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlDocumentType;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlDocumentType
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocumentType.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlDocumentType.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlDocumentType
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlDocumentType
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlDocumentType.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlDocumentType;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlDocumentType;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlDocumentType;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlDocumentType;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlDocumentType;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlDocumentType
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlDocumentType
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlDocumentType
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlDocumentType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlDocumentType;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlDocumentType
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlDocumentType
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlDocumentType;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlDocumentType;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlDocumentType;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocumentType.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlDocumentType;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlDocumentType.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlDocumentType;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlDocumentType_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlDocumentType.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlDomImplementation

   procedure Initialize (this : in out XmlDomImplementation) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlDomImplementation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlDomImplementation, IXmlDomImplementation_Ptr);
   begin
      if this.m_IXmlDomImplementation /= null then
         if this.m_IXmlDomImplementation.all /= null then
            RefCount := this.m_IXmlDomImplementation.all.Release;
            Free (this.m_IXmlDomImplementation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlDomImplementation

   function HasFeature
   (
      this : in out XmlDomImplementation;
      feature : WinRt.WString;
      version : WinRt.IInspectable
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_feature : WinRt.HString := To_HString (feature);
   begin
      Hr := this.m_IXmlDomImplementation.all.HasFeature (HStr_feature, version, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_feature);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlElement

   procedure Initialize (this : in out XmlElement) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlElement) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlElement, IXmlElement_Ptr);
   begin
      if this.m_IXmlElement /= null then
         if this.m_IXmlElement.all /= null then
            RefCount := this.m_IXmlElement.all.Release;
            Free (this.m_IXmlElement);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlElement

   function get_TagName
   (
      this : in out XmlElement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXmlElement.all.get_TagName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetAttribute
   (
      this : in out XmlElement;
      attributeName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_attributeName : WinRt.HString := To_HString (attributeName);
   begin
      Hr := this.m_IXmlElement.all.GetAttribute (HStr_attributeName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_attributeName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetAttribute
   (
      this : in out XmlElement;
      attributeName : WinRt.WString;
      attributeValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_attributeName : WinRt.HString := To_HString (attributeName);
      HStr_attributeValue : WinRt.HString := To_HString (attributeValue);
   begin
      Hr := this.m_IXmlElement.all.SetAttribute (HStr_attributeName, HStr_attributeValue);
      Hr := WindowsDeleteString (HStr_attributeName);
      Hr := WindowsDeleteString (HStr_attributeValue);
   end;

   procedure RemoveAttribute
   (
      this : in out XmlElement;
      attributeName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_attributeName : WinRt.HString := To_HString (attributeName);
   begin
      Hr := this.m_IXmlElement.all.RemoveAttribute (HStr_attributeName);
      Hr := WindowsDeleteString (HStr_attributeName);
   end;

   function GetAttributeNode
   (
      this : in out XmlElement;
      attributeName : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlAttribute'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlAttribute;
      HStr_attributeName : WinRt.HString := To_HString (attributeName);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlAttribute do
         Hr := this.m_IXmlElement.all.GetAttributeNode (HStr_attributeName, m_ComRetVal'Access);
         Retval.m_IXmlAttribute := new Windows.Data.Xml.Dom.IXmlAttribute;
         Retval.m_IXmlAttribute.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_attributeName);
      end return;
   end;

   function SetAttributeNode
   (
      this : in out XmlElement;
      newAttribute : Windows.Data.Xml.Dom.XmlAttribute'Class
   )
   return WinRt.Windows.Data.Xml.Dom.XmlAttribute'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlAttribute;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlAttribute do
         Hr := this.m_IXmlElement.all.SetAttributeNode (newAttribute.m_IXmlAttribute.all, m_ComRetVal'Access);
         Retval.m_IXmlAttribute := new Windows.Data.Xml.Dom.IXmlAttribute;
         Retval.m_IXmlAttribute.all := m_ComRetVal;
      end return;
   end;

   function RemoveAttributeNode
   (
      this : in out XmlElement;
      attributeNode : Windows.Data.Xml.Dom.XmlAttribute'Class
   )
   return WinRt.Windows.Data.Xml.Dom.XmlAttribute'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlAttribute;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlAttribute do
         Hr := this.m_IXmlElement.all.RemoveAttributeNode (attributeNode.m_IXmlAttribute.all, m_ComRetVal'Access);
         Retval.m_IXmlAttribute := new Windows.Data.Xml.Dom.IXmlAttribute;
         Retval.m_IXmlAttribute.all := m_ComRetVal;
      end return;
   end;

   function GetElementsByTagName
   (
      this : in out XmlElement;
      tagName : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_tagName : WinRt.HString := To_HString (tagName);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         Hr := this.m_IXmlElement.all.GetElementsByTagName (HStr_tagName, m_ComRetVal'Access);
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_tagName);
      end return;
   end;

   procedure SetAttributeNS
   (
      this : in out XmlElement;
      namespaceUri : WinRt.IInspectable;
      qualifiedName : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_qualifiedName : WinRt.HString := To_HString (qualifiedName);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IXmlElement.all.SetAttributeNS (namespaceUri, HStr_qualifiedName, HStr_value);
      Hr := WindowsDeleteString (HStr_qualifiedName);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetAttributeNS
   (
      this : in out XmlElement;
      namespaceUri : WinRt.IInspectable;
      localName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_localName : WinRt.HString := To_HString (localName);
   begin
      Hr := this.m_IXmlElement.all.GetAttributeNS (namespaceUri, HStr_localName, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_localName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure RemoveAttributeNS
   (
      this : in out XmlElement;
      namespaceUri : WinRt.IInspectable;
      localName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localName : WinRt.HString := To_HString (localName);
   begin
      Hr := this.m_IXmlElement.all.RemoveAttributeNS (namespaceUri, HStr_localName);
      Hr := WindowsDeleteString (HStr_localName);
   end;

   function SetAttributeNodeNS
   (
      this : in out XmlElement;
      newAttribute : Windows.Data.Xml.Dom.XmlAttribute'Class
   )
   return WinRt.Windows.Data.Xml.Dom.XmlAttribute'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlAttribute;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlAttribute do
         Hr := this.m_IXmlElement.all.SetAttributeNodeNS (newAttribute.m_IXmlAttribute.all, m_ComRetVal'Access);
         Retval.m_IXmlAttribute := new Windows.Data.Xml.Dom.IXmlAttribute;
         Retval.m_IXmlAttribute.all := m_ComRetVal;
      end return;
   end;

   function GetAttributeNodeNS
   (
      this : in out XmlElement;
      namespaceUri : WinRt.IInspectable;
      localName : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlAttribute'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlAttribute;
      HStr_localName : WinRt.HString := To_HString (localName);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlAttribute do
         Hr := this.m_IXmlElement.all.GetAttributeNodeNS (namespaceUri, HStr_localName, m_ComRetVal'Access);
         Retval.m_IXmlAttribute := new Windows.Data.Xml.Dom.IXmlAttribute;
         Retval.m_IXmlAttribute.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_localName);
      end return;
   end;

   function get_NodeValue
   (
      this : in out XmlElement
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlElement;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlElement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlElement.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlElement.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlElement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlElement
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlElement.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlElement;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlElement;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlElement;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlElement;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlElement;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlElement
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlElement
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlElement
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlElement
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlElement;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlElement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlElement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlElement;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlElement;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlElement;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlElement.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlElement;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlElement.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlElement;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlElement_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlElement.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlEntityReference

   procedure Initialize (this : in out XmlEntityReference) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlEntityReference) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlEntityReference, IXmlEntityReference_Ptr);
   begin
      if this.m_IXmlEntityReference /= null then
         if this.m_IXmlEntityReference.all /= null then
            RefCount := this.m_IXmlEntityReference.all.Release;
            Free (this.m_IXmlEntityReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlEntityReference

   function get_NodeValue
   (
      this : in out XmlEntityReference
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlEntityReference;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlEntityReference
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlEntityReference.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlEntityReference.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlEntityReference
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlEntityReference
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlEntityReference.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlEntityReference;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlEntityReference;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlEntityReference;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlEntityReference;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlEntityReference;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlEntityReference
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlEntityReference
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlEntityReference
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlEntityReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlEntityReference;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlEntityReference
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlEntityReference
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlEntityReference;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlEntityReference;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlEntityReference;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlEntityReference.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlEntityReference;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlEntityReference.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlEntityReference;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlEntityReference_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlEntityReference.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlLoadSettings

   procedure Initialize (this : in out XmlLoadSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlLoadSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlLoadSettings, IXmlLoadSettings_Ptr);
   begin
      if this.m_IXmlLoadSettings /= null then
         if this.m_IXmlLoadSettings.all /= null then
            RefCount := this.m_IXmlLoadSettings.all.Release;
            Free (this.m_IXmlLoadSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XmlLoadSettings

   function Constructor return XmlLoadSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Data.Xml.Dom.XmlLoadSettings");
      m_ComRetVal  : aliased Windows.Data.Xml.Dom.IXmlLoadSettings;
   begin
      return RetVal : XmlLoadSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IXmlLoadSettings := new Windows.Data.Xml.Dom.IXmlLoadSettings;
            Retval.m_IXmlLoadSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlLoadSettings

   function get_MaxElementDepth
   (
      this : in out XmlLoadSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IXmlLoadSettings.all.get_MaxElementDepth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxElementDepth
   (
      this : in out XmlLoadSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXmlLoadSettings.all.put_MaxElementDepth (value);
   end;

   function get_ProhibitDtd
   (
      this : in out XmlLoadSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXmlLoadSettings.all.get_ProhibitDtd (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProhibitDtd
   (
      this : in out XmlLoadSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXmlLoadSettings.all.put_ProhibitDtd (value);
   end;

   function get_ResolveExternals
   (
      this : in out XmlLoadSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXmlLoadSettings.all.get_ResolveExternals (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ResolveExternals
   (
      this : in out XmlLoadSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXmlLoadSettings.all.put_ResolveExternals (value);
   end;

   function get_ValidateOnParse
   (
      this : in out XmlLoadSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXmlLoadSettings.all.get_ValidateOnParse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ValidateOnParse
   (
      this : in out XmlLoadSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXmlLoadSettings.all.put_ValidateOnParse (value);
   end;

   function get_ElementContentWhiteSpace
   (
      this : in out XmlLoadSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IXmlLoadSettings.all.get_ElementContentWhiteSpace (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ElementContentWhiteSpace
   (
      this : in out XmlLoadSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXmlLoadSettings.all.put_ElementContentWhiteSpace (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlNamedNodeMap

   procedure Initialize (this : in out XmlNamedNodeMap) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlNamedNodeMap) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlNamedNodeMap, IXmlNamedNodeMap_Ptr);
   begin
      if this.m_IXmlNamedNodeMap /= null then
         if this.m_IXmlNamedNodeMap.all /= null then
            RefCount := this.m_IXmlNamedNodeMap.all.Release;
            Free (this.m_IXmlNamedNodeMap);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlNamedNodeMap

   function get_Length
   (
      this : in out XmlNamedNodeMap
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IXmlNamedNodeMap.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Item
   (
      this : in out XmlNamedNodeMap;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
   begin
      Hr := this.m_IXmlNamedNodeMap.all.Item (index, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetNamedItem
   (
      this : in out XmlNamedNodeMap;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IXmlNamedNodeMap.all.GetNamedItem (HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function SetNamedItem
   (
      this : in out XmlNamedNodeMap;
      node : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
   begin
      Hr := this.m_IXmlNamedNodeMap.all.SetNamedItem (node, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RemoveNamedItem
   (
      this : in out XmlNamedNodeMap;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IXmlNamedNodeMap.all.RemoveNamedItem (HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function GetNamedItemNS
   (
      this : in out XmlNamedNodeMap;
      namespaceUri : WinRt.IInspectable;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IXmlNamedNodeMap.all.GetNamedItemNS (namespaceUri, HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function RemoveNamedItemNS
   (
      this : in out XmlNamedNodeMap;
      namespaceUri : WinRt.IInspectable;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IXmlNamedNodeMap.all.RemoveNamedItemNS (namespaceUri, HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function SetNamedItemNS
   (
      this : in out XmlNamedNodeMap;
      node : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
   begin
      Hr := this.m_IXmlNamedNodeMap.all.SetNamedItemNS (node, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Data.Xml.Dom.IXmlNode>
   function GetAt
   (
      this : in out XmlNamedNodeMap;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNamedNodeMap_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNamedNodeMap.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out XmlNamedNodeMap
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNamedNodeMap_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNamedNodeMap.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out XmlNamedNodeMap;
      value : Windows.Data.Xml.Dom.IXmlNode;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNamedNodeMap_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNamedNodeMap.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out XmlNamedNodeMap;
      startIndex : WinRt.UInt32;
      items : Windows.Data.Xml.Dom.IXmlNode_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNamedNodeMap_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IXmlNamedNodeMap.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Data.Xml.Dom.IXmlNode>
   function First
   (
      this : in out XmlNamedNodeMap
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4044648444, 35986, 22248, (147, 241, 113, 31, 134, 114, 38, 51 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNamedNodeMap_Interface, IIterable_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNamedNodeMap.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlNodeList

   procedure Initialize (this : in out XmlNodeList) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlNodeList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlNodeList, IXmlNodeList_Ptr);
   begin
      if this.m_IXmlNodeList /= null then
         if this.m_IXmlNodeList.all /= null then
            RefCount := this.m_IXmlNodeList.all.Release;
            Free (this.m_IXmlNodeList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlNodeList

   function get_Length
   (
      this : in out XmlNodeList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IXmlNodeList.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Item
   (
      this : in out XmlNodeList;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
   begin
      Hr := this.m_IXmlNodeList.all.Item (index, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Data.Xml.Dom.IXmlNode>
   function GetAt
   (
      this : in out XmlNodeList;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNodeList_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNodeList.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out XmlNodeList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNodeList_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNodeList.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out XmlNodeList;
      value : Windows.Data.Xml.Dom.IXmlNode;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNodeList_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNodeList.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out XmlNodeList;
      startIndex : WinRt.UInt32;
      items : Windows.Data.Xml.Dom.IXmlNode_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (329094558, 59317, 23734, (165, 150, 75, 84, 68, 120, 218, 155 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNodeList_Interface, IVectorView_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IXmlNodeList.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Data.Xml.Dom.IXmlNode>
   function First
   (
      this : in out XmlNodeList
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IXmlNode.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4044648444, 35986, 22248, (147, 241, 113, 31, 134, 114, 38, 51 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlNodeList_Interface, IIterable_IXmlNode.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlNodeList.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlProcessingInstruction

   procedure Initialize (this : in out XmlProcessingInstruction) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlProcessingInstruction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlProcessingInstruction, IXmlProcessingInstruction_Ptr);
   begin
      if this.m_IXmlProcessingInstruction /= null then
         if this.m_IXmlProcessingInstruction.all /= null then
            RefCount := this.m_IXmlProcessingInstruction.all.Release;
            Free (this.m_IXmlProcessingInstruction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlProcessingInstruction

   function get_Target
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXmlProcessingInstruction.all.get_Target (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Data
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IXmlProcessingInstruction.all.get_Data (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Data
   (
      this : in out XmlProcessingInstruction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IXmlProcessingInstruction.all.put_Data (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlProcessingInstruction;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlProcessingInstruction;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlProcessingInstruction;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlProcessingInstruction;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlProcessingInstruction;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlProcessingInstruction;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlProcessingInstruction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlProcessingInstruction;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlProcessingInstruction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlProcessingInstruction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlProcessingInstruction;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlProcessingInstruction;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlProcessingInstruction;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlProcessingInstruction;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlProcessingInstruction_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlProcessingInstruction.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XmlText

   procedure Initialize (this : in out XmlText) is
   begin
      null;
   end;

   procedure Finalize (this : in out XmlText) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXmlText, IXmlText_Ptr);
   begin
      if this.m_IXmlText /= null then
         if this.m_IXmlText.all /= null then
            RefCount := this.m_IXmlText.all.Release;
            Free (this.m_IXmlText);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XmlText

   function SplitText
   (
      this : in out XmlText;
      offset : WinRt.UInt32
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlText;
   begin
      Hr := this.m_IXmlText.all.SplitText (offset, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out XmlText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_Data (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Data
   (
      this : in out XmlText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.put_Data (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Length
   (
      this : in out XmlText
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_Length (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function SubstringData
   (
      this : in out XmlText;
      offset : WinRt.UInt32;
      count : WinRt.UInt32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.SubstringData (offset, count, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AppendData
   (
      this : in out XmlText;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.AppendData (HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure InsertData
   (
      this : in out XmlText;
      offset : WinRt.UInt32;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.InsertData (offset, HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   procedure DeleteData
   (
      this : in out XmlText;
      offset : WinRt.UInt32;
      count : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.DeleteData (offset, count);
      m_RefCount := m_Interface.Release;
   end;

   procedure ReplaceData
   (
      this : in out XmlText;
      offset : WinRt.UInt32;
      count : WinRt.UInt32;
      data : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlCharacterData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_data : WinRt.HString := To_HString (data);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlCharacterData, WinRt.Windows.Data.Xml.Dom.IID_IXmlCharacterData'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.ReplaceData (offset, count, HStr_data);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_data);
   end;

   function get_NodeValue
   (
      this : in out XmlText
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out XmlText;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.put_NodeValue (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeType
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.NodeType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.NodeType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_NodeType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NodeName
   (
      this : in out XmlText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentNode
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_ParentNode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ChildNodes
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlText.all);
         Hr := m_Interface.get_ChildNodes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
      end return;
   end;

   function get_FirstChild
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_FirstChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LastChild
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_LastChild (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PreviousSibling
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_PreviousSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NextSibling
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_NextSibling (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNamedNodeMap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNamedNodeMap do
         m_Interface := QInterface (this.m_IXmlText.all);
         Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNamedNodeMap := new Windows.Data.Xml.Dom.IXmlNamedNodeMap;
         Retval.m_IXmlNamedNodeMap.all := m_ComRetVal;
      end return;
   end;

   function HasChildNodes
   (
      this : in out XmlText
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.HasChildNodes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OwnerDocument
   (
      this : in out XmlText
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_IXmlText.all);
         Hr := m_Interface.get_OwnerDocument (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function InsertBefore
   (
      this : in out XmlText;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.InsertBefore (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ReplaceChild
   (
      this : in out XmlText;
      newChild : Windows.Data.Xml.Dom.IXmlNode;
      referenceChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.ReplaceChild (newChild, referenceChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RemoveChild
   (
      this : in out XmlText;
      childNode : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.RemoveChild (childNode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function AppendChild
   (
      this : in out XmlText;
      newChild : Windows.Data.Xml.Dom.IXmlNode
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.AppendChild (newChild, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CloneNode
   (
      this : in out XmlText;
      deep : WinRt.Boolean
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.CloneNode (deep, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NamespaceUri
   (
      this : in out XmlText
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_NamespaceUri (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LocalName
   (
      this : in out XmlText
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_LocalName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Prefix
   (
      this : in out XmlText
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_Prefix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Normalize
   (
      this : in out XmlText
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.Normalize;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Prefix
   (
      this : in out XmlText;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNode, WinRt.Windows.Data.Xml.Dom.IID_IXmlNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.put_Prefix (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetXml
   (
      this : in out XmlText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.GetXml (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InnerText
   (
      this : in out XmlText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.get_InnerText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_InnerText
   (
      this : in out XmlText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSerializer, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSerializer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.put_InnerText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function SelectSingleNode
   (
      this : in out XmlText;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.SelectSingleNode (HStr_xpath, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodes
   (
      this : in out XmlText;
      xpath : WinRt.WString
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlText.all);
         Hr := m_Interface.SelectNodes (HStr_xpath, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

   function SelectSingleNodeNS
   (
      this : in out XmlText;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.IXmlNode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNode;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXmlText.all);
      Hr := m_Interface.SelectSingleNodeNS (HStr_xpath, namespaces, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_xpath);
      return m_ComRetVal;
   end;

   function SelectNodesNS
   (
      this : in out XmlText;
      xpath : WinRt.WString;
      namespaces : WinRt.IInspectable
   )
   return WinRt.Windows.Data.Xml.Dom.XmlNodeList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlNodeList;
      HStr_xpath : WinRt.HString := To_HString (xpath);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Xml.Dom.IXmlText_Interface, WinRt.Windows.Data.Xml.Dom.IXmlNodeSelector, WinRt.Windows.Data.Xml.Dom.IID_IXmlNodeSelector'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlNodeList do
         m_Interface := QInterface (this.m_IXmlText.all);
         Hr := m_Interface.SelectNodesNS (HStr_xpath, namespaces, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlNodeList := new Windows.Data.Xml.Dom.IXmlNodeList;
         Retval.m_IXmlNodeList.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_xpath);
      end return;
   end;

end;

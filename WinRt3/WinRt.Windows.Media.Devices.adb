--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Capture;
with WinRt.Windows.Media.Devices.Core;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Devices is

   package IAsyncOperation_ModuleCommandResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Devices.IModuleCommandResult);
   package AsyncOperationCompletedHandler_ModuleCommandResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Devices.IModuleCommandResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdvancedPhotoCaptureSettings

   procedure Initialize (this : in out AdvancedPhotoCaptureSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdvancedPhotoCaptureSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdvancedPhotoCaptureSettings, IAdvancedPhotoCaptureSettings_Ptr);
   begin
      if this.m_IAdvancedPhotoCaptureSettings /= null then
         if this.m_IAdvancedPhotoCaptureSettings.all /= null then
            RefCount := this.m_IAdvancedPhotoCaptureSettings.all.Release;
            Free (this.m_IAdvancedPhotoCaptureSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AdvancedPhotoCaptureSettings

   function Constructor return AdvancedPhotoCaptureSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Devices.AdvancedPhotoCaptureSettings");
      m_ComRetVal  : aliased Windows.Media.Devices.IAdvancedPhotoCaptureSettings;
   begin
      return RetVal : AdvancedPhotoCaptureSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAdvancedPhotoCaptureSettings := new Windows.Media.Devices.IAdvancedPhotoCaptureSettings;
            Retval.m_IAdvancedPhotoCaptureSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdvancedPhotoCaptureSettings

   function get_Mode
   (
      this : in out AdvancedPhotoCaptureSettings
   )
   return WinRt.Windows.Media.Devices.AdvancedPhotoMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.AdvancedPhotoMode;
   begin
      Hr := this.m_IAdvancedPhotoCaptureSettings.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out AdvancedPhotoCaptureSettings;
      value : Windows.Media.Devices.AdvancedPhotoMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdvancedPhotoCaptureSettings.all.put_Mode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdvancedPhotoControl

   procedure Initialize (this : in out AdvancedPhotoControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdvancedPhotoControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdvancedPhotoControl, IAdvancedPhotoControl_Ptr);
   begin
      if this.m_IAdvancedPhotoControl /= null then
         if this.m_IAdvancedPhotoControl.all /= null then
            RefCount := this.m_IAdvancedPhotoControl.all.Release;
            Free (this.m_IAdvancedPhotoControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdvancedPhotoControl

   function get_Supported
   (
      this : in out AdvancedPhotoControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAdvancedPhotoControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedModes
   (
      this : in out AdvancedPhotoControl
   )
   return IVectorView_AdvancedPhotoMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_AdvancedPhotoMode.Kind;
   begin
      Hr := this.m_IAdvancedPhotoControl.all.get_SupportedModes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_AdvancedPhotoMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Mode
   (
      this : in out AdvancedPhotoControl
   )
   return WinRt.Windows.Media.Devices.AdvancedPhotoMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.AdvancedPhotoMode;
   begin
      Hr := this.m_IAdvancedPhotoControl.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Configure
   (
      this : in out AdvancedPhotoControl;
      settings : Windows.Media.Devices.AdvancedPhotoCaptureSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdvancedPhotoControl.all.Configure (settings.m_IAdvancedPhotoCaptureSettings.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioDeviceController

   procedure Initialize (this : in out AudioDeviceController) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioDeviceController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioDeviceController, IAudioDeviceController_Ptr);
   begin
      if this.m_IAudioDeviceController /= null then
         if this.m_IAudioDeviceController.all /= null then
            RefCount := this.m_IAudioDeviceController.all.Release;
            Free (this.m_IAudioDeviceController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioDeviceController

   procedure put_Muted
   (
      this : in out AudioDeviceController;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioDeviceController.all.put_Muted (value);
   end;

   function get_Muted
   (
      this : in out AudioDeviceController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAudioDeviceController.all.get_Muted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VolumePercent
   (
      this : in out AudioDeviceController;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioDeviceController.all.put_VolumePercent (value);
   end;

   function get_VolumePercent
   (
      this : in out AudioDeviceController
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAudioDeviceController.all.get_VolumePercent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetAvailableMediaStreamProperties
   (
      this : in out AudioDeviceController;
      mediaStreamType : Windows.Media.Capture.MediaStreamType
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IMediaDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IAudioDeviceController_Interface, WinRt.Windows.Media.Devices.IMediaDeviceController, WinRt.Windows.Media.Devices.IID_IMediaDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceController.all);
      Hr := m_Interface.GetAvailableMediaStreamProperties (mediaStreamType, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMediaStreamProperties
   (
      this : in out AudioDeviceController;
      mediaStreamType : Windows.Media.Capture.MediaStreamType
   )
   return WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IMediaDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IAudioDeviceController_Interface, WinRt.Windows.Media.Devices.IMediaDeviceController, WinRt.Windows.Media.Devices.IID_IMediaDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceController.all);
      Hr := m_Interface.GetMediaStreamProperties (mediaStreamType, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetMediaStreamPropertiesAsync
   (
      this : in out AudioDeviceController;
      mediaStreamType : Windows.Media.Capture.MediaStreamType;
      mediaEncodingProperties : Windows.Media.MediaProperties.IMediaEncodingProperties
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IMediaDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IAudioDeviceController_Interface, WinRt.Windows.Media.Devices.IMediaDeviceController, WinRt.Windows.Media.Devices.IID_IMediaDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceController.all);
      Hr := m_Interface.SetMediaStreamPropertiesAsync (mediaStreamType, mediaEncodingProperties, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioDeviceModule

   procedure Initialize (this : in out AudioDeviceModule) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioDeviceModule) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioDeviceModule, IAudioDeviceModule_Ptr);
   begin
      if this.m_IAudioDeviceModule /= null then
         if this.m_IAudioDeviceModule.all /= null then
            RefCount := this.m_IAudioDeviceModule.all.Release;
            Free (this.m_IAudioDeviceModule);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioDeviceModule

   function get_ClassId
   (
      this : in out AudioDeviceModule
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAudioDeviceModule.all.get_ClassId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out AudioDeviceModule
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAudioDeviceModule.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InstanceId
   (
      this : in out AudioDeviceModule
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioDeviceModule.all.get_InstanceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MajorVersion
   (
      this : in out AudioDeviceModule
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioDeviceModule.all.get_MajorVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinorVersion
   (
      this : in out AudioDeviceModule
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioDeviceModule.all.get_MinorVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function SendCommandAsync
   (
      this : in out AudioDeviceModule;
      Command : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Media.Devices.ModuleCommandResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ModuleCommandResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ModuleCommandResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Devices.IModuleCommandResult;
      m_IID            : aliased WinRt.IID := (773799282, 42381, 23306, (180, 45, 54, 96, 192, 76, 254, 235 )); -- Windows.Media.Devices.ModuleCommandResult;
      m_HandlerIID     : aliased WinRt.IID := (3413664772, 62184, 24075, (191, 18, 57, 227, 20, 131, 207, 174 ));
      m_Handler        : AsyncOperationCompletedHandler_ModuleCommandResult.Kind := new AsyncOperationCompletedHandler_ModuleCommandResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ModuleCommandResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ModuleCommandResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ModuleCommandResult.Kind_Delegate, AsyncOperationCompletedHandler_ModuleCommandResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Devices.ModuleCommandResult do
         Hr := this.m_IAudioDeviceModule.all.SendCommandAsync (Command, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IModuleCommandResult := new Windows.Media.Devices.IModuleCommandResult;
                  Retval.m_IModuleCommandResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioDeviceModuleNotificationEventArgs

   procedure Initialize (this : in out AudioDeviceModuleNotificationEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioDeviceModuleNotificationEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioDeviceModuleNotificationEventArgs, IAudioDeviceModuleNotificationEventArgs_Ptr);
   begin
      if this.m_IAudioDeviceModuleNotificationEventArgs /= null then
         if this.m_IAudioDeviceModuleNotificationEventArgs.all /= null then
            RefCount := this.m_IAudioDeviceModuleNotificationEventArgs.all.Release;
            Free (this.m_IAudioDeviceModuleNotificationEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioDeviceModuleNotificationEventArgs

   function get_Module
   (
      this : in out AudioDeviceModuleNotificationEventArgs
   )
   return WinRt.Windows.Media.Devices.AudioDeviceModule'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IAudioDeviceModule;
   begin
      return RetVal : WinRt.Windows.Media.Devices.AudioDeviceModule do
         Hr := this.m_IAudioDeviceModuleNotificationEventArgs.all.get_Module (m_ComRetVal'Access);
         Retval.m_IAudioDeviceModule := new Windows.Media.Devices.IAudioDeviceModule;
         Retval.m_IAudioDeviceModule.all := m_ComRetVal;
      end return;
   end;

   function get_NotificationData
   (
      this : in out AudioDeviceModuleNotificationEventArgs
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IAudioDeviceModuleNotificationEventArgs.all.get_NotificationData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioDeviceModulesManager

   procedure Initialize (this : in out AudioDeviceModulesManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioDeviceModulesManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioDeviceModulesManager, IAudioDeviceModulesManager_Ptr);
   begin
      if this.m_IAudioDeviceModulesManager /= null then
         if this.m_IAudioDeviceModulesManager.all /= null then
            RefCount := this.m_IAudioDeviceModulesManager.all.Release;
            Free (this.m_IAudioDeviceModulesManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioDeviceModulesManager

   function Constructor
   (
      deviceId : WinRt.WString
   )
   return AudioDeviceModulesManager is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Devices.AudioDeviceModulesManager");
      m_Factory    : access IAudioDeviceModulesManagerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Devices.IAudioDeviceModulesManager;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : AudioDeviceModulesManager do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioDeviceModulesManagerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_deviceId, m_ComRetVal'Access);
            Retval.m_IAudioDeviceModulesManager := new Windows.Media.Devices.IAudioDeviceModulesManager;
            Retval.m_IAudioDeviceModulesManager.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioDeviceModulesManager

   function add_ModuleNotificationReceived
   (
      this : in out AudioDeviceModulesManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioDeviceModulesManager.all.add_ModuleNotificationReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ModuleNotificationReceived
   (
      this : in out AudioDeviceModulesManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioDeviceModulesManager.all.remove_ModuleNotificationReceived (token);
   end;

   function FindAllById
   (
      this : in out AudioDeviceModulesManager;
      moduleId : WinRt.WString
   )
   return IVectorView_IAudioDeviceModule.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioDeviceModule.Kind;
      HStr_moduleId : WinRt.HString := To_HString (moduleId);
   begin
      Hr := this.m_IAudioDeviceModulesManager.all.FindAllById (HStr_moduleId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_moduleId);
      m_GenericRetVal := QInterface_IVectorView_IAudioDeviceModule (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function FindAll
   (
      this : in out AudioDeviceModulesManager
   )
   return IVectorView_IAudioDeviceModule.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioDeviceModule.Kind;
   begin
      Hr := this.m_IAudioDeviceModulesManager.all.FindAll (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAudioDeviceModule (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CallControl

   procedure Initialize (this : in out CallControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out CallControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICallControl, ICallControl_Ptr);
   begin
      if this.m_ICallControl /= null then
         if this.m_ICallControl.all /= null then
            RefCount := this.m_ICallControl.all.Release;
            Free (this.m_ICallControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CallControl

   function GetDefault
   return WinRt.Windows.Media.Devices.CallControl is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.CallControl");
      m_Factory        : access WinRt.Windows.Media.Devices.ICallControlStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ICallControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.CallControl do
         Hr := RoGetActivationFactory (m_hString, IID_ICallControlStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICallControl := new Windows.Media.Devices.ICallControl;
            Retval.m_ICallControl.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FromId
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Media.Devices.CallControl is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.CallControl");
      m_Factory        : access WinRt.Windows.Media.Devices.ICallControlStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ICallControl;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Media.Devices.CallControl do
         Hr := RoGetActivationFactory (m_hString, IID_ICallControlStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICallControl := new Windows.Media.Devices.ICallControl;
            Retval.m_ICallControl.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CallControl

   function IndicateNewIncomingCall
   (
      this : in out CallControl;
      enableRinger : WinRt.Boolean;
      callerId : WinRt.WString
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      HStr_callerId : WinRt.HString := To_HString (callerId);
   begin
      Hr := this.m_ICallControl.all.IndicateNewIncomingCall (enableRinger, HStr_callerId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_callerId);
      return m_ComRetVal;
   end;

   function IndicateNewOutgoingCall
   (
      this : in out CallControl
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_ICallControl.all.IndicateNewOutgoingCall (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure IndicateActiveCall
   (
      this : in out CallControl;
      callToken : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.IndicateActiveCall (callToken);
   end;

   procedure EndCall
   (
      this : in out CallControl;
      callToken : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.EndCall (callToken);
   end;

   function get_HasRinger
   (
      this : in out CallControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICallControl.all.get_HasRinger (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_AnswerRequested
   (
      this : in out CallControl;
      handler : Windows.Media.Devices.CallControlEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICallControl.all.add_AnswerRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AnswerRequested
   (
      this : in out CallControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.remove_AnswerRequested (token);
   end;

   function add_HangUpRequested
   (
      this : in out CallControl;
      handler : Windows.Media.Devices.CallControlEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICallControl.all.add_HangUpRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HangUpRequested
   (
      this : in out CallControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.remove_HangUpRequested (token);
   end;

   function add_DialRequested
   (
      this : in out CallControl;
      handler : Windows.Media.Devices.DialRequestedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICallControl.all.add_DialRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DialRequested
   (
      this : in out CallControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.remove_DialRequested (token);
   end;

   function add_RedialRequested
   (
      this : in out CallControl;
      handler : Windows.Media.Devices.RedialRequestedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICallControl.all.add_RedialRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RedialRequested
   (
      this : in out CallControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.remove_RedialRequested (token);
   end;

   function add_KeypadPressed
   (
      this : in out CallControl;
      handler : Windows.Media.Devices.KeypadPressedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICallControl.all.add_KeypadPressed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_KeypadPressed
   (
      this : in out CallControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.remove_KeypadPressed (token);
   end;

   function add_AudioTransferRequested
   (
      this : in out CallControl;
      handler : Windows.Media.Devices.CallControlEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICallControl.all.add_AudioTransferRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AudioTransferRequested
   (
      this : in out CallControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICallControl.all.remove_AudioTransferRequested (token);
   end;

   -----------------------------------------------------------------------------
   -- Delegate CallControlEventHandler

   function Invoke
   (
      this : access CallControlEventHandler_Delegate;
      sender : Windows.Media.Devices.ICallControl
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DefaultAudioCaptureDeviceChangedEventArgs

   procedure Initialize (this : in out DefaultAudioCaptureDeviceChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DefaultAudioCaptureDeviceChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDefaultAudioDeviceChangedEventArgs, IDefaultAudioDeviceChangedEventArgs_Ptr);
   begin
      if this.m_IDefaultAudioDeviceChangedEventArgs /= null then
         if this.m_IDefaultAudioDeviceChangedEventArgs.all /= null then
            RefCount := this.m_IDefaultAudioDeviceChangedEventArgs.all.Release;
            Free (this.m_IDefaultAudioDeviceChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DefaultAudioCaptureDeviceChangedEventArgs

   function get_Id
   (
      this : in out DefaultAudioCaptureDeviceChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDefaultAudioDeviceChangedEventArgs.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Role
   (
      this : in out DefaultAudioCaptureDeviceChangedEventArgs
   )
   return WinRt.Windows.Media.Devices.AudioDeviceRole is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.AudioDeviceRole;
   begin
      Hr := this.m_IDefaultAudioDeviceChangedEventArgs.all.get_Role (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DefaultAudioRenderDeviceChangedEventArgs

   procedure Initialize (this : in out DefaultAudioRenderDeviceChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DefaultAudioRenderDeviceChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDefaultAudioDeviceChangedEventArgs, IDefaultAudioDeviceChangedEventArgs_Ptr);
   begin
      if this.m_IDefaultAudioDeviceChangedEventArgs /= null then
         if this.m_IDefaultAudioDeviceChangedEventArgs.all /= null then
            RefCount := this.m_IDefaultAudioDeviceChangedEventArgs.all.Release;
            Free (this.m_IDefaultAudioDeviceChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DefaultAudioRenderDeviceChangedEventArgs

   function get_Id
   (
      this : in out DefaultAudioRenderDeviceChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDefaultAudioDeviceChangedEventArgs.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Role
   (
      this : in out DefaultAudioRenderDeviceChangedEventArgs
   )
   return WinRt.Windows.Media.Devices.AudioDeviceRole is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.AudioDeviceRole;
   begin
      Hr := this.m_IDefaultAudioDeviceChangedEventArgs.all.get_Role (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialRequestedEventArgs

   procedure Initialize (this : in out DialRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialRequestedEventArgs, IDialRequestedEventArgs_Ptr);
   begin
      if this.m_IDialRequestedEventArgs /= null then
         if this.m_IDialRequestedEventArgs.all /= null then
            RefCount := this.m_IDialRequestedEventArgs.all.Release;
            Free (this.m_IDialRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialRequestedEventArgs

   procedure Handled
   (
      this : in out DialRequestedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialRequestedEventArgs.all.Handled;
   end;

   function get_Contact
   (
      this : in out DialRequestedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IDialRequestedEventArgs.all.get_Contact (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DialRequestedEventHandler

   function Invoke
   (
      this : access DialRequestedEventHandler_Delegate;
      sender : Windows.Media.Devices.ICallControl;
      e : Windows.Media.Devices.IDialRequestedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ExposureCompensationControl

   procedure Initialize (this : in out ExposureCompensationControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out ExposureCompensationControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IExposureCompensationControl, IExposureCompensationControl_Ptr);
   begin
      if this.m_IExposureCompensationControl /= null then
         if this.m_IExposureCompensationControl.all /= null then
            RefCount := this.m_IExposureCompensationControl.all.Release;
            Free (this.m_IExposureCompensationControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ExposureCompensationControl

   function get_Supported
   (
      this : in out ExposureCompensationControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IExposureCompensationControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Min
   (
      this : in out ExposureCompensationControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IExposureCompensationControl.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out ExposureCompensationControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IExposureCompensationControl.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out ExposureCompensationControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IExposureCompensationControl.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out ExposureCompensationControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IExposureCompensationControl.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetValueAsync
   (
      this : in out ExposureCompensationControl;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IExposureCompensationControl.all.SetValueAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ExposureControl

   procedure Initialize (this : in out ExposureControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out ExposureControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IExposureControl, IExposureControl_Ptr);
   begin
      if this.m_IExposureControl /= null then
         if this.m_IExposureControl.all /= null then
            RefCount := this.m_IExposureControl.all.Release;
            Free (this.m_IExposureControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ExposureControl

   function get_Supported
   (
      this : in out ExposureControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IExposureControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Auto
   (
      this : in out ExposureControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IExposureControl.all.get_Auto (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetAutoAsync
   (
      this : in out ExposureControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IExposureControl.all.SetAutoAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Min
   (
      this : in out ExposureControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IExposureControl.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out ExposureControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IExposureControl.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out ExposureControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IExposureControl.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out ExposureControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IExposureControl.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetValueAsync
   (
      this : in out ExposureControl;
      shutterDuration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IExposureControl.all.SetValueAsync (shutterDuration, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ExposurePriorityVideoControl

   procedure Initialize (this : in out ExposurePriorityVideoControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out ExposurePriorityVideoControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IExposurePriorityVideoControl, IExposurePriorityVideoControl_Ptr);
   begin
      if this.m_IExposurePriorityVideoControl /= null then
         if this.m_IExposurePriorityVideoControl.all /= null then
            RefCount := this.m_IExposurePriorityVideoControl.all.Release;
            Free (this.m_IExposurePriorityVideoControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ExposurePriorityVideoControl

   function get_Supported
   (
      this : in out ExposurePriorityVideoControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IExposurePriorityVideoControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Enabled
   (
      this : in out ExposurePriorityVideoControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IExposurePriorityVideoControl.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Enabled
   (
      this : in out ExposurePriorityVideoControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IExposurePriorityVideoControl.all.put_Enabled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlashControl

   procedure Initialize (this : in out FlashControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlashControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlashControl, IFlashControl_Ptr);
   begin
      if this.m_IFlashControl /= null then
         if this.m_IFlashControl.all /= null then
            RefCount := this.m_IFlashControl.all.Release;
            Free (this.m_IFlashControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlashControl

   function get_Supported
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFlashControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PowerSupported
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFlashControl.all.get_PowerSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RedEyeReductionSupported
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFlashControl.all.get_RedEyeReductionSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Enabled
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFlashControl.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Enabled
   (
      this : in out FlashControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlashControl.all.put_Enabled (value);
   end;

   function get_Auto
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFlashControl.all.get_Auto (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Auto
   (
      this : in out FlashControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlashControl.all.put_Auto (value);
   end;

   function get_RedEyeReduction
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFlashControl.all.get_RedEyeReduction (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RedEyeReduction
   (
      this : in out FlashControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlashControl.all.put_RedEyeReduction (value);
   end;

   function get_PowerPercent
   (
      this : in out FlashControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IFlashControl.all.get_PowerPercent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PowerPercent
   (
      this : in out FlashControl;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlashControl.all.put_PowerPercent (value);
   end;

   function get_AssistantLightSupported
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFlashControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFlashControl_Interface, WinRt.Windows.Media.Devices.IFlashControl2, WinRt.Windows.Media.Devices.IID_IFlashControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlashControl.all);
      Hr := m_Interface.get_AssistantLightSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AssistantLightEnabled
   (
      this : in out FlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFlashControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFlashControl_Interface, WinRt.Windows.Media.Devices.IFlashControl2, WinRt.Windows.Media.Devices.IID_IFlashControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlashControl.all);
      Hr := m_Interface.get_AssistantLightEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AssistantLightEnabled
   (
      this : in out FlashControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFlashControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFlashControl_Interface, WinRt.Windows.Media.Devices.IFlashControl2, WinRt.Windows.Media.Devices.IID_IFlashControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlashControl.all);
      Hr := m_Interface.put_AssistantLightEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FocusControl

   procedure Initialize (this : in out FocusControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out FocusControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFocusControl, IFocusControl_Ptr);
   begin
      if this.m_IFocusControl /= null then
         if this.m_IFocusControl.all /= null then
            RefCount := this.m_IFocusControl.all.Release;
            Free (this.m_IFocusControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FocusControl

   function get_Supported
   (
      this : in out FocusControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFocusControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedPresets
   (
      this : in out FocusControl
   )
   return IVectorView_FocusPreset.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_FocusPreset.Kind;
   begin
      Hr := this.m_IFocusControl.all.get_SupportedPresets (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_FocusPreset (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Preset
   (
      this : in out FocusControl
   )
   return WinRt.Windows.Media.Devices.FocusPreset is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.FocusPreset;
   begin
      Hr := this.m_IFocusControl.all.get_Preset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetPresetAsync
   (
      this : in out FocusControl;
      preset : Windows.Media.Devices.FocusPreset
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IFocusControl.all.SetPresetAsync (preset, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetPresetAsync
   (
      this : in out FocusControl;
      preset : Windows.Media.Devices.FocusPreset;
      completeBeforeFocus : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IFocusControl.all.SetPresetAsync (preset, completeBeforeFocus, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Min
   (
      this : in out FocusControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFocusControl.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out FocusControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFocusControl.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out FocusControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFocusControl.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out FocusControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFocusControl.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetValueAsync
   (
      this : in out FocusControl;
      focus : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IFocusControl.all.SetValueAsync (focus, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure FocusAsync
   (
      this : in out FocusControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IFocusControl.all.FocusAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_FocusChangedSupported
   (
      this : in out FocusControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.get_FocusChangedSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_WaitForFocusSupported
   (
      this : in out FocusControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.get_WaitForFocusSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SupportedFocusModes
   (
      this : in out FocusControl
   )
   return IVectorView_FocusMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_FocusMode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.get_SupportedFocusModes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_FocusMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedFocusDistances
   (
      this : in out FocusControl
   )
   return IVectorView_ManualFocusDistance.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ManualFocusDistance.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.get_SupportedFocusDistances (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_ManualFocusDistance (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedFocusRanges
   (
      this : in out FocusControl
   )
   return IVectorView_AutoFocusRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_AutoFocusRange.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.get_SupportedFocusRanges (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_AutoFocusRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Mode
   (
      this : in out FocusControl
   )
   return WinRt.Windows.Media.Devices.FocusMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.FocusMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.get_Mode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_FocusState
   (
      this : in out FocusControl
   )
   return WinRt.Windows.Media.Devices.MediaCaptureFocusState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.MediaCaptureFocusState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.get_FocusState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure UnlockAsync
   (
      this : in out FocusControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.UnlockAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure LockAsync
   (
      this : in out FocusControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.LockAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Configure
   (
      this : in out FocusControl;
      settings : Windows.Media.Devices.FocusSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IFocusControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IFocusControl_Interface, WinRt.Windows.Media.Devices.IFocusControl2, WinRt.Windows.Media.Devices.IID_IFocusControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFocusControl.all);
      Hr := m_Interface.Configure (settings.m_IFocusSettings.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FocusSettings

   procedure Initialize (this : in out FocusSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out FocusSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFocusSettings, IFocusSettings_Ptr);
   begin
      if this.m_IFocusSettings /= null then
         if this.m_IFocusSettings.all /= null then
            RefCount := this.m_IFocusSettings.all.Release;
            Free (this.m_IFocusSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FocusSettings

   function Constructor return FocusSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Devices.FocusSettings");
      m_ComRetVal  : aliased Windows.Media.Devices.IFocusSettings;
   begin
      return RetVal : FocusSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFocusSettings := new Windows.Media.Devices.IFocusSettings;
            Retval.m_IFocusSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FocusSettings

   function get_Mode
   (
      this : in out FocusSettings
   )
   return WinRt.Windows.Media.Devices.FocusMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.FocusMode;
   begin
      Hr := this.m_IFocusSettings.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out FocusSettings;
      value : Windows.Media.Devices.FocusMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFocusSettings.all.put_Mode (value);
   end;

   function get_AutoFocusRange
   (
      this : in out FocusSettings
   )
   return WinRt.Windows.Media.Devices.AutoFocusRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.AutoFocusRange;
   begin
      Hr := this.m_IFocusSettings.all.get_AutoFocusRange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoFocusRange
   (
      this : in out FocusSettings;
      value : Windows.Media.Devices.AutoFocusRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFocusSettings.all.put_AutoFocusRange (value);
   end;

   function get_Value
   (
      this : in out FocusSettings
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IFocusSettings.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Value
   (
      this : in out FocusSettings;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFocusSettings.all.put_Value (value);
   end;

   function get_Distance
   (
      this : in out FocusSettings
   )
   return IReference_ManualFocusDistance.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_ManualFocusDistance.Kind;
   begin
      Hr := this.m_IFocusSettings.all.get_Distance (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_ManualFocusDistance (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Distance
   (
      this : in out FocusSettings;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFocusSettings.all.put_Distance (value);
   end;

   function get_WaitForFocus
   (
      this : in out FocusSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFocusSettings.all.get_WaitForFocus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_WaitForFocus
   (
      this : in out FocusSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFocusSettings.all.put_WaitForFocus (value);
   end;

   function get_DisableDriverFallback
   (
      this : in out FocusSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFocusSettings.all.get_DisableDriverFallback (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisableDriverFallback
   (
      this : in out FocusSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFocusSettings.all.put_DisableDriverFallback (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HdrVideoControl

   procedure Initialize (this : in out HdrVideoControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out HdrVideoControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHdrVideoControl, IHdrVideoControl_Ptr);
   begin
      if this.m_IHdrVideoControl /= null then
         if this.m_IHdrVideoControl.all /= null then
            RefCount := this.m_IHdrVideoControl.all.Release;
            Free (this.m_IHdrVideoControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HdrVideoControl

   function get_Supported
   (
      this : in out HdrVideoControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHdrVideoControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedModes
   (
      this : in out HdrVideoControl
   )
   return IVectorView_HdrVideoMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HdrVideoMode.Kind;
   begin
      Hr := this.m_IHdrVideoControl.all.get_SupportedModes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HdrVideoMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Mode
   (
      this : in out HdrVideoControl
   )
   return WinRt.Windows.Media.Devices.HdrVideoMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.HdrVideoMode;
   begin
      Hr := this.m_IHdrVideoControl.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out HdrVideoControl;
      value : Windows.Media.Devices.HdrVideoMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHdrVideoControl.all.put_Mode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InfraredTorchControl

   procedure Initialize (this : in out InfraredTorchControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out InfraredTorchControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInfraredTorchControl, IInfraredTorchControl_Ptr);
   begin
      if this.m_IInfraredTorchControl /= null then
         if this.m_IInfraredTorchControl.all /= null then
            RefCount := this.m_IInfraredTorchControl.all.Release;
            Free (this.m_IInfraredTorchControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InfraredTorchControl

   function get_IsSupported
   (
      this : in out InfraredTorchControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInfraredTorchControl.all.get_IsSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedModes
   (
      this : in out InfraredTorchControl
   )
   return IVectorView_InfraredTorchMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_InfraredTorchMode.Kind;
   begin
      Hr := this.m_IInfraredTorchControl.all.get_SupportedModes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_InfraredTorchMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CurrentMode
   (
      this : in out InfraredTorchControl
   )
   return WinRt.Windows.Media.Devices.InfraredTorchMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.InfraredTorchMode;
   begin
      Hr := this.m_IInfraredTorchControl.all.get_CurrentMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CurrentMode
   (
      this : in out InfraredTorchControl;
      value : Windows.Media.Devices.InfraredTorchMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInfraredTorchControl.all.put_CurrentMode (value);
   end;

   function get_MinPower
   (
      this : in out InfraredTorchControl
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInfraredTorchControl.all.get_MinPower (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxPower
   (
      this : in out InfraredTorchControl
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInfraredTorchControl.all.get_MaxPower (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PowerStep
   (
      this : in out InfraredTorchControl
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInfraredTorchControl.all.get_PowerStep (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Power
   (
      this : in out InfraredTorchControl
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInfraredTorchControl.all.get_Power (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Power
   (
      this : in out InfraredTorchControl;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInfraredTorchControl.all.put_Power (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IsoSpeedControl

   procedure Initialize (this : in out IsoSpeedControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out IsoSpeedControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IIsoSpeedControl, IIsoSpeedControl_Ptr);
   begin
      if this.m_IIsoSpeedControl /= null then
         if this.m_IIsoSpeedControl.all /= null then
            RefCount := this.m_IIsoSpeedControl.all.Release;
            Free (this.m_IIsoSpeedControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IsoSpeedControl

   function get_Supported
   (
      this : in out IsoSpeedControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IIsoSpeedControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedPresets
   (
      this : in out IsoSpeedControl
   )
   return IVectorView_IsoSpeedPreset.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IsoSpeedPreset.Kind;
   begin
      Hr := this.m_IIsoSpeedControl.all.get_SupportedPresets (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IsoSpeedPreset (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Preset
   (
      this : in out IsoSpeedControl
   )
   return WinRt.Windows.Media.Devices.IsoSpeedPreset is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IsoSpeedPreset;
   begin
      Hr := this.m_IIsoSpeedControl.all.get_Preset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetPresetAsync
   (
      this : in out IsoSpeedControl;
      preset : Windows.Media.Devices.IsoSpeedPreset
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IIsoSpeedControl.all.SetPresetAsync (preset, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Min
   (
      this : in out IsoSpeedControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IIsoSpeedControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IIsoSpeedControl_Interface, WinRt.Windows.Media.Devices.IIsoSpeedControl2, WinRt.Windows.Media.Devices.IID_IIsoSpeedControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IIsoSpeedControl.all);
      Hr := m_Interface.get_Min (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out IsoSpeedControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IIsoSpeedControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IIsoSpeedControl_Interface, WinRt.Windows.Media.Devices.IIsoSpeedControl2, WinRt.Windows.Media.Devices.IID_IIsoSpeedControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IIsoSpeedControl.all);
      Hr := m_Interface.get_Max (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out IsoSpeedControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IIsoSpeedControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IIsoSpeedControl_Interface, WinRt.Windows.Media.Devices.IIsoSpeedControl2, WinRt.Windows.Media.Devices.IID_IIsoSpeedControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IIsoSpeedControl.all);
      Hr := m_Interface.get_Step (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out IsoSpeedControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IIsoSpeedControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IIsoSpeedControl_Interface, WinRt.Windows.Media.Devices.IIsoSpeedControl2, WinRt.Windows.Media.Devices.IID_IIsoSpeedControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IIsoSpeedControl.all);
      Hr := m_Interface.get_Value (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetValueAsync
   (
      this : in out IsoSpeedControl;
      isoSpeed : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IIsoSpeedControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IIsoSpeedControl_Interface, WinRt.Windows.Media.Devices.IIsoSpeedControl2, WinRt.Windows.Media.Devices.IID_IIsoSpeedControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IIsoSpeedControl.all);
      Hr := m_Interface.SetValueAsync (isoSpeed, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Auto
   (
      this : in out IsoSpeedControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IIsoSpeedControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IIsoSpeedControl_Interface, WinRt.Windows.Media.Devices.IIsoSpeedControl2, WinRt.Windows.Media.Devices.IID_IIsoSpeedControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IIsoSpeedControl.all);
      Hr := m_Interface.get_Auto (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAutoAsync
   (
      this : in out IsoSpeedControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IIsoSpeedControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IIsoSpeedControl_Interface, WinRt.Windows.Media.Devices.IIsoSpeedControl2, WinRt.Windows.Media.Devices.IID_IIsoSpeedControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IIsoSpeedControl.all);
      Hr := m_Interface.SetAutoAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeypadPressedEventArgs

   procedure Initialize (this : in out KeypadPressedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out KeypadPressedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IKeypadPressedEventArgs, IKeypadPressedEventArgs_Ptr);
   begin
      if this.m_IKeypadPressedEventArgs /= null then
         if this.m_IKeypadPressedEventArgs.all /= null then
            RefCount := this.m_IKeypadPressedEventArgs.all.Release;
            Free (this.m_IKeypadPressedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeypadPressedEventArgs

   function get_TelephonyKey
   (
      this : in out KeypadPressedEventArgs
   )
   return WinRt.Windows.Media.Devices.TelephonyKey is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.TelephonyKey;
   begin
      Hr := this.m_IKeypadPressedEventArgs.all.get_TelephonyKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate KeypadPressedEventHandler

   function Invoke
   (
      this : access KeypadPressedEventHandler_Delegate;
      sender : Windows.Media.Devices.ICallControl;
      e : Windows.Media.Devices.IKeypadPressedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLagPhotoControl

   procedure Initialize (this : in out LowLagPhotoControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLagPhotoControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLagPhotoControl, ILowLagPhotoControl_Ptr);
   begin
      if this.m_ILowLagPhotoControl /= null then
         if this.m_ILowLagPhotoControl.all /= null then
            RefCount := this.m_ILowLagPhotoControl.all.Release;
            Free (this.m_ILowLagPhotoControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLagPhotoControl

   function GetHighestConcurrentFrameRate
   (
      this : in out LowLagPhotoControl;
      captureProperties : Windows.Media.MediaProperties.IMediaEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_ILowLagPhotoControl.all.GetHighestConcurrentFrameRate (captureProperties, m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function GetCurrentFrameRate
   (
      this : in out LowLagPhotoControl
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_ILowLagPhotoControl.all.GetCurrentFrameRate (m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function get_ThumbnailEnabled
   (
      this : in out LowLagPhotoControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILowLagPhotoControl.all.get_ThumbnailEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ThumbnailEnabled
   (
      this : in out LowLagPhotoControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoControl.all.put_ThumbnailEnabled (value);
   end;

   function get_ThumbnailFormat
   (
      this : in out LowLagPhotoControl
   )
   return WinRt.Windows.Media.MediaProperties.MediaThumbnailFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.MediaThumbnailFormat;
   begin
      Hr := this.m_ILowLagPhotoControl.all.get_ThumbnailFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ThumbnailFormat
   (
      this : in out LowLagPhotoControl;
      value : Windows.Media.MediaProperties.MediaThumbnailFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoControl.all.put_ThumbnailFormat (value);
   end;

   function get_DesiredThumbnailSize
   (
      this : in out LowLagPhotoControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILowLagPhotoControl.all.get_DesiredThumbnailSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredThumbnailSize
   (
      this : in out LowLagPhotoControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoControl.all.put_DesiredThumbnailSize (value);
   end;

   function get_HardwareAcceleratedThumbnailSupported
   (
      this : in out LowLagPhotoControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILowLagPhotoControl.all.get_HardwareAcceleratedThumbnailSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLagPhotoSequenceControl

   procedure Initialize (this : in out LowLagPhotoSequenceControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLagPhotoSequenceControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLagPhotoSequenceControl, ILowLagPhotoSequenceControl_Ptr);
   begin
      if this.m_ILowLagPhotoSequenceControl /= null then
         if this.m_ILowLagPhotoSequenceControl.all /= null then
            RefCount := this.m_ILowLagPhotoSequenceControl.all.Release;
            Free (this.m_ILowLagPhotoSequenceControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLagPhotoSequenceControl

   function get_Supported
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxPastPhotos
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_MaxPastPhotos (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxPhotosPerSecond
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_MaxPhotosPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PastPhotoLimit
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_PastPhotoLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PastPhotoLimit
   (
      this : in out LowLagPhotoSequenceControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.put_PastPhotoLimit (value);
   end;

   function get_PhotosPerSecondLimit
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_PhotosPerSecondLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PhotosPerSecondLimit
   (
      this : in out LowLagPhotoSequenceControl;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.put_PhotosPerSecondLimit (value);
   end;

   function GetHighestConcurrentFrameRate
   (
      this : in out LowLagPhotoSequenceControl;
      captureProperties : Windows.Media.MediaProperties.IMediaEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_ILowLagPhotoSequenceControl.all.GetHighestConcurrentFrameRate (captureProperties, m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function GetCurrentFrameRate
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_ILowLagPhotoSequenceControl.all.GetCurrentFrameRate (m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function get_ThumbnailEnabled
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_ThumbnailEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ThumbnailEnabled
   (
      this : in out LowLagPhotoSequenceControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.put_ThumbnailEnabled (value);
   end;

   function get_ThumbnailFormat
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.Windows.Media.MediaProperties.MediaThumbnailFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.MediaThumbnailFormat;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_ThumbnailFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ThumbnailFormat
   (
      this : in out LowLagPhotoSequenceControl;
      value : Windows.Media.MediaProperties.MediaThumbnailFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.put_ThumbnailFormat (value);
   end;

   function get_DesiredThumbnailSize
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_DesiredThumbnailSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredThumbnailSize
   (
      this : in out LowLagPhotoSequenceControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.put_DesiredThumbnailSize (value);
   end;

   function get_HardwareAcceleratedThumbnailSupported
   (
      this : in out LowLagPhotoSequenceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILowLagPhotoSequenceControl.all.get_HardwareAcceleratedThumbnailSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MediaDevice is

      function GetAudioCaptureSelector
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAudioCaptureSelector (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function GetAudioRenderSelector
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAudioRenderSelector (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function GetVideoCaptureSelector
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetVideoCaptureSelector (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function GetDefaultAudioCaptureId
      (
         role : Windows.Media.Devices.AudioDeviceRole
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAudioCaptureId (role, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function GetDefaultAudioRenderId
      (
         role : Windows.Media.Devices.AudioDeviceRole
      )
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAudioRenderId (role, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function add_DefaultAudioCaptureDeviceChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_DefaultAudioCaptureDeviceChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_DefaultAudioCaptureDeviceChanged
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_DefaultAudioCaptureDeviceChanged (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_DefaultAudioRenderDeviceChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_DefaultAudioRenderDeviceChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_DefaultAudioRenderDeviceChanged
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Devices.MediaDevice");
         m_Factory        : access WinRt.Windows.Media.Devices.IMediaDeviceStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_DefaultAudioRenderDeviceChanged (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end MediaDevice;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaDeviceControl

   procedure Initialize (this : in out MediaDeviceControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaDeviceControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaDeviceControl, IMediaDeviceControl_Ptr);
   begin
      if this.m_IMediaDeviceControl /= null then
         if this.m_IMediaDeviceControl.all /= null then
            RefCount := this.m_IMediaDeviceControl.all.Release;
            Free (this.m_IMediaDeviceControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaDeviceControl

   function get_Capabilities
   (
      this : in out MediaDeviceControl
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControlCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControlCapabilities;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControlCapabilities do
         Hr := this.m_IMediaDeviceControl.all.get_Capabilities (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControlCapabilities := new Windows.Media.Devices.IMediaDeviceControlCapabilities;
         Retval.m_IMediaDeviceControlCapabilities.all := m_ComRetVal;
      end return;
   end;

   function TryGetValue
   (
      this : in out MediaDeviceControl;
      value : WinRt.Double_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaDeviceControl.all.TryGetValue (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TrySetValue
   (
      this : in out MediaDeviceControl;
      value : WinRt.Double
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaDeviceControl.all.TrySetValue (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetAuto
   (
      this : in out MediaDeviceControl;
      value : WinRt.Boolean_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaDeviceControl.all.TryGetAuto (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TrySetAuto
   (
      this : in out MediaDeviceControl;
      value : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaDeviceControl.all.TrySetAuto (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaDeviceControlCapabilities

   procedure Initialize (this : in out MediaDeviceControlCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaDeviceControlCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaDeviceControlCapabilities, IMediaDeviceControlCapabilities_Ptr);
   begin
      if this.m_IMediaDeviceControlCapabilities /= null then
         if this.m_IMediaDeviceControlCapabilities.all /= null then
            RefCount := this.m_IMediaDeviceControlCapabilities.all.Release;
            Free (this.m_IMediaDeviceControlCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaDeviceControlCapabilities

   function get_Supported
   (
      this : in out MediaDeviceControlCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaDeviceControlCapabilities.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Min
   (
      this : in out MediaDeviceControlCapabilities
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaDeviceControlCapabilities.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out MediaDeviceControlCapabilities
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaDeviceControlCapabilities.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out MediaDeviceControlCapabilities
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaDeviceControlCapabilities.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Default
   (
      this : in out MediaDeviceControlCapabilities
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaDeviceControlCapabilities.all.get_Default (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AutoModeSupported
   (
      this : in out MediaDeviceControlCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaDeviceControlCapabilities.all.get_AutoModeSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ModuleCommandResult

   procedure Initialize (this : in out ModuleCommandResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ModuleCommandResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IModuleCommandResult, IModuleCommandResult_Ptr);
   begin
      if this.m_IModuleCommandResult /= null then
         if this.m_IModuleCommandResult.all /= null then
            RefCount := this.m_IModuleCommandResult.all.Release;
            Free (this.m_IModuleCommandResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ModuleCommandResult

   function get_Status
   (
      this : in out ModuleCommandResult
   )
   return WinRt.Windows.Media.Devices.SendCommandStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.SendCommandStatus;
   begin
      Hr := this.m_IModuleCommandResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Result
   (
      this : in out ModuleCommandResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IModuleCommandResult.all.get_Result (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OpticalImageStabilizationControl

   procedure Initialize (this : in out OpticalImageStabilizationControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out OpticalImageStabilizationControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOpticalImageStabilizationControl, IOpticalImageStabilizationControl_Ptr);
   begin
      if this.m_IOpticalImageStabilizationControl /= null then
         if this.m_IOpticalImageStabilizationControl.all /= null then
            RefCount := this.m_IOpticalImageStabilizationControl.all.Release;
            Free (this.m_IOpticalImageStabilizationControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OpticalImageStabilizationControl

   function get_Supported
   (
      this : in out OpticalImageStabilizationControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IOpticalImageStabilizationControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedModes
   (
      this : in out OpticalImageStabilizationControl
   )
   return IVectorView_OpticalImageStabilizationMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_OpticalImageStabilizationMode.Kind;
   begin
      Hr := this.m_IOpticalImageStabilizationControl.all.get_SupportedModes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_OpticalImageStabilizationMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Mode
   (
      this : in out OpticalImageStabilizationControl
   )
   return WinRt.Windows.Media.Devices.OpticalImageStabilizationMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.OpticalImageStabilizationMode;
   begin
      Hr := this.m_IOpticalImageStabilizationControl.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out OpticalImageStabilizationControl;
      value : Windows.Media.Devices.OpticalImageStabilizationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOpticalImageStabilizationControl.all.put_Mode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PanelBasedOptimizationControl

   procedure Initialize (this : in out PanelBasedOptimizationControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out PanelBasedOptimizationControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPanelBasedOptimizationControl, IPanelBasedOptimizationControl_Ptr);
   begin
      if this.m_IPanelBasedOptimizationControl /= null then
         if this.m_IPanelBasedOptimizationControl.all /= null then
            RefCount := this.m_IPanelBasedOptimizationControl.all.Release;
            Free (this.m_IPanelBasedOptimizationControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PanelBasedOptimizationControl

   function get_IsSupported
   (
      this : in out PanelBasedOptimizationControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPanelBasedOptimizationControl.all.get_IsSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Panel
   (
      this : in out PanelBasedOptimizationControl
   )
   return WinRt.Windows.Devices.Enumeration.Panel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.Panel;
   begin
      Hr := this.m_IPanelBasedOptimizationControl.all.get_Panel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Panel
   (
      this : in out PanelBasedOptimizationControl;
      value : Windows.Devices.Enumeration.Panel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPanelBasedOptimizationControl.all.put_Panel (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoConfirmationControl

   procedure Initialize (this : in out PhotoConfirmationControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoConfirmationControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoConfirmationControl, IPhotoConfirmationControl_Ptr);
   begin
      if this.m_IPhotoConfirmationControl /= null then
         if this.m_IPhotoConfirmationControl.all /= null then
            RefCount := this.m_IPhotoConfirmationControl.all.Release;
            Free (this.m_IPhotoConfirmationControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoConfirmationControl

   function get_Supported
   (
      this : in out PhotoConfirmationControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoConfirmationControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Enabled
   (
      this : in out PhotoConfirmationControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoConfirmationControl.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Enabled
   (
      this : in out PhotoConfirmationControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoConfirmationControl.all.put_Enabled (value);
   end;

   function get_PixelFormat
   (
      this : in out PhotoConfirmationControl
   )
   return WinRt.Windows.Media.MediaProperties.MediaPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.MediaPixelFormat;
   begin
      Hr := this.m_IPhotoConfirmationControl.all.get_PixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PixelFormat
   (
      this : in out PhotoConfirmationControl;
      format : Windows.Media.MediaProperties.MediaPixelFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoConfirmationControl.all.put_PixelFormat (format);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RedialRequestedEventArgs

   procedure Initialize (this : in out RedialRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RedialRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRedialRequestedEventArgs, IRedialRequestedEventArgs_Ptr);
   begin
      if this.m_IRedialRequestedEventArgs /= null then
         if this.m_IRedialRequestedEventArgs.all /= null then
            RefCount := this.m_IRedialRequestedEventArgs.all.Release;
            Free (this.m_IRedialRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RedialRequestedEventArgs

   procedure Handled
   (
      this : in out RedialRequestedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRedialRequestedEventArgs.all.Handled;
   end;

   -----------------------------------------------------------------------------
   -- Delegate RedialRequestedEventHandler

   function Invoke
   (
      this : access RedialRequestedEventHandler_Delegate;
      sender : Windows.Media.Devices.ICallControl;
      e : Windows.Media.Devices.IRedialRequestedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RegionOfInterest

   procedure Initialize (this : in out RegionOfInterest) is
   begin
      null;
   end;

   procedure Finalize (this : in out RegionOfInterest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRegionOfInterest, IRegionOfInterest_Ptr);
   begin
      if this.m_IRegionOfInterest /= null then
         if this.m_IRegionOfInterest.all /= null then
            RefCount := this.m_IRegionOfInterest.all.Release;
            Free (this.m_IRegionOfInterest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RegionOfInterest

   function Constructor return RegionOfInterest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Devices.RegionOfInterest");
      m_ComRetVal  : aliased Windows.Media.Devices.IRegionOfInterest;
   begin
      return RetVal : RegionOfInterest do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRegionOfInterest := new Windows.Media.Devices.IRegionOfInterest;
            Retval.m_IRegionOfInterest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RegionOfInterest

   function get_AutoFocusEnabled
   (
      this : in out RegionOfInterest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegionOfInterest.all.get_AutoFocusEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoFocusEnabled
   (
      this : in out RegionOfInterest;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegionOfInterest.all.put_AutoFocusEnabled (value);
   end;

   function get_AutoWhiteBalanceEnabled
   (
      this : in out RegionOfInterest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegionOfInterest.all.get_AutoWhiteBalanceEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoWhiteBalanceEnabled
   (
      this : in out RegionOfInterest;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegionOfInterest.all.put_AutoWhiteBalanceEnabled (value);
   end;

   function get_AutoExposureEnabled
   (
      this : in out RegionOfInterest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegionOfInterest.all.get_AutoExposureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoExposureEnabled
   (
      this : in out RegionOfInterest;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegionOfInterest.all.put_AutoExposureEnabled (value);
   end;

   function get_Bounds
   (
      this : in out RegionOfInterest
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IRegionOfInterest.all.get_Bounds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Bounds
   (
      this : in out RegionOfInterest;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRegionOfInterest.all.put_Bounds (value);
   end;

   function get_Type
   (
      this : in out RegionOfInterest
   )
   return WinRt.Windows.Media.Devices.RegionOfInterestType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IRegionOfInterest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.RegionOfInterestType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IRegionOfInterest_Interface, WinRt.Windows.Media.Devices.IRegionOfInterest2, WinRt.Windows.Media.Devices.IID_IRegionOfInterest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRegionOfInterest.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Type
   (
      this : in out RegionOfInterest;
      value : Windows.Media.Devices.RegionOfInterestType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IRegionOfInterest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IRegionOfInterest_Interface, WinRt.Windows.Media.Devices.IRegionOfInterest2, WinRt.Windows.Media.Devices.IID_IRegionOfInterest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRegionOfInterest.all);
      Hr := m_Interface.put_Type (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_BoundsNormalized
   (
      this : in out RegionOfInterest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IRegionOfInterest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IRegionOfInterest_Interface, WinRt.Windows.Media.Devices.IRegionOfInterest2, WinRt.Windows.Media.Devices.IID_IRegionOfInterest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRegionOfInterest.all);
      Hr := m_Interface.get_BoundsNormalized (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_BoundsNormalized
   (
      this : in out RegionOfInterest;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IRegionOfInterest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IRegionOfInterest_Interface, WinRt.Windows.Media.Devices.IRegionOfInterest2, WinRt.Windows.Media.Devices.IID_IRegionOfInterest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRegionOfInterest.all);
      Hr := m_Interface.put_BoundsNormalized (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Weight
   (
      this : in out RegionOfInterest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IRegionOfInterest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IRegionOfInterest_Interface, WinRt.Windows.Media.Devices.IRegionOfInterest2, WinRt.Windows.Media.Devices.IID_IRegionOfInterest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRegionOfInterest.all);
      Hr := m_Interface.get_Weight (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Weight
   (
      this : in out RegionOfInterest;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IRegionOfInterest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IRegionOfInterest_Interface, WinRt.Windows.Media.Devices.IRegionOfInterest2, WinRt.Windows.Media.Devices.IID_IRegionOfInterest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRegionOfInterest.all);
      Hr := m_Interface.put_Weight (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RegionsOfInterestControl

   procedure Initialize (this : in out RegionsOfInterestControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out RegionsOfInterestControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRegionsOfInterestControl, IRegionsOfInterestControl_Ptr);
   begin
      if this.m_IRegionsOfInterestControl /= null then
         if this.m_IRegionsOfInterestControl.all /= null then
            RefCount := this.m_IRegionsOfInterestControl.all.Release;
            Free (this.m_IRegionsOfInterestControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RegionsOfInterestControl

   function get_MaxRegions
   (
      this : in out RegionsOfInterestControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IRegionsOfInterestControl.all.get_MaxRegions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetRegionsAsync
   (
      this : in out RegionsOfInterestControl;
      regions : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IRegionsOfInterestControl.all.SetRegionsAsync (regions, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetRegionsAsync
   (
      this : in out RegionsOfInterestControl;
      regions : GenericObject;
      lockValues : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IRegionsOfInterestControl.all.SetRegionsAsync (regions, lockValues, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ClearRegionsAsync
   (
      this : in out RegionsOfInterestControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IRegionsOfInterestControl.all.ClearRegionsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_AutoFocusSupported
   (
      this : in out RegionsOfInterestControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegionsOfInterestControl.all.get_AutoFocusSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AutoWhiteBalanceSupported
   (
      this : in out RegionsOfInterestControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegionsOfInterestControl.all.get_AutoWhiteBalanceSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AutoExposureSupported
   (
      this : in out RegionsOfInterestControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRegionsOfInterestControl.all.get_AutoExposureSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SceneModeControl

   procedure Initialize (this : in out SceneModeControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out SceneModeControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISceneModeControl, ISceneModeControl_Ptr);
   begin
      if this.m_ISceneModeControl /= null then
         if this.m_ISceneModeControl.all /= null then
            RefCount := this.m_ISceneModeControl.all.Release;
            Free (this.m_ISceneModeControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SceneModeControl

   function get_SupportedModes
   (
      this : in out SceneModeControl
   )
   return IVectorView_CaptureSceneMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_CaptureSceneMode.Kind;
   begin
      Hr := this.m_ISceneModeControl.all.get_SupportedModes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_CaptureSceneMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Value
   (
      this : in out SceneModeControl
   )
   return WinRt.Windows.Media.Devices.CaptureSceneMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.CaptureSceneMode;
   begin
      Hr := this.m_ISceneModeControl.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetValueAsync
   (
      this : in out SceneModeControl;
      sceneMode : Windows.Media.Devices.CaptureSceneMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISceneModeControl.all.SetValueAsync (sceneMode, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TorchControl

   procedure Initialize (this : in out TorchControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out TorchControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITorchControl, ITorchControl_Ptr);
   begin
      if this.m_ITorchControl /= null then
         if this.m_ITorchControl.all /= null then
            RefCount := this.m_ITorchControl.all.Release;
            Free (this.m_ITorchControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TorchControl

   function get_Supported
   (
      this : in out TorchControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITorchControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PowerSupported
   (
      this : in out TorchControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITorchControl.all.get_PowerSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Enabled
   (
      this : in out TorchControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITorchControl.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Enabled
   (
      this : in out TorchControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITorchControl.all.put_Enabled (value);
   end;

   function get_PowerPercent
   (
      this : in out TorchControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ITorchControl.all.get_PowerPercent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PowerPercent
   (
      this : in out TorchControl;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITorchControl.all.put_PowerPercent (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoDeviceController

   procedure Initialize (this : in out VideoDeviceController) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoDeviceController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoDeviceController, IVideoDeviceController_Ptr);
   begin
      if this.m_IVideoDeviceController /= null then
         if this.m_IVideoDeviceController.all /= null then
            RefCount := this.m_IVideoDeviceController.all.Release;
            Free (this.m_IVideoDeviceController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoDeviceController

   function get_Brightness
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Brightness (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Contrast
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Contrast (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Hue
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Hue (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_WhiteBalance
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_WhiteBalance (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_BacklightCompensation
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_BacklightCompensation (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Pan
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Pan (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Tilt
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Tilt (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Zoom
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Zoom (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Roll
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Roll (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Exposure
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Exposure (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function get_Focus
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaDeviceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IMediaDeviceControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.MediaDeviceControl do
         Hr := this.m_IVideoDeviceController.all.get_Focus (m_ComRetVal'Access);
         Retval.m_IMediaDeviceControl := new Windows.Media.Devices.IMediaDeviceControl;
         Retval.m_IMediaDeviceControl.all := m_ComRetVal;
      end return;
   end;

   function TrySetPowerlineFrequency
   (
      this : in out VideoDeviceController;
      value : Windows.Media.Capture.PowerlineFrequency
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVideoDeviceController.all.TrySetPowerlineFrequency (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetPowerlineFrequency
   (
      this : in out VideoDeviceController;
      value : Windows.Media.Capture.PowerlineFrequency_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVideoDeviceController.all.TryGetPowerlineFrequency (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetAvailableMediaStreamProperties
   (
      this : in out VideoDeviceController;
      mediaStreamType : Windows.Media.Capture.MediaStreamType
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IMediaDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IMediaDeviceController, WinRt.Windows.Media.Devices.IID_IMediaDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.GetAvailableMediaStreamProperties (mediaStreamType, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMediaStreamProperties
   (
      this : in out VideoDeviceController;
      mediaStreamType : Windows.Media.Capture.MediaStreamType
   )
   return WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IMediaDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IMediaDeviceController, WinRt.Windows.Media.Devices.IID_IMediaDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.GetMediaStreamProperties (mediaStreamType, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetMediaStreamPropertiesAsync
   (
      this : in out VideoDeviceController;
      mediaStreamType : Windows.Media.Capture.MediaStreamType;
      mediaEncodingProperties : Windows.Media.MediaProperties.IMediaEncodingProperties
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IMediaDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IMediaDeviceController, WinRt.Windows.Media.Devices.IID_IMediaDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.SetMediaStreamPropertiesAsync (mediaStreamType, mediaEncodingProperties, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetDeviceProperty
   (
      this : in out VideoDeviceController;
      propertyId : WinRt.WString;
      propertyValue : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyId : WinRt.HString := To_HString (propertyId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.SetDeviceProperty (HStr_propertyId, propertyValue);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyId);
   end;

   function GetDeviceProperty
   (
      this : in out VideoDeviceController;
      propertyId : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_propertyId : WinRt.HString := To_HString (propertyId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.GetDeviceProperty (HStr_propertyId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyId);
      return m_ComRetVal;
   end;

   function get_LowLagPhotoSequence
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.LowLagPhotoSequenceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ILowLagPhotoSequenceControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.LowLagPhotoSequenceControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_LowLagPhotoSequence (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILowLagPhotoSequenceControl := new Windows.Media.Devices.ILowLagPhotoSequenceControl;
         Retval.m_ILowLagPhotoSequenceControl.all := m_ComRetVal;
      end return;
   end;

   function get_LowLagPhoto
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.LowLagPhotoControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ILowLagPhotoControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.LowLagPhotoControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_LowLagPhoto (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILowLagPhotoControl := new Windows.Media.Devices.ILowLagPhotoControl;
         Retval.m_ILowLagPhotoControl.all := m_ComRetVal;
      end return;
   end;

   function get_SceneModeControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.SceneModeControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ISceneModeControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.SceneModeControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_SceneModeControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISceneModeControl := new Windows.Media.Devices.ISceneModeControl;
         Retval.m_ISceneModeControl.all := m_ComRetVal;
      end return;
   end;

   function get_TorchControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.TorchControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ITorchControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.TorchControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_TorchControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITorchControl := new Windows.Media.Devices.ITorchControl;
         Retval.m_ITorchControl.all := m_ComRetVal;
      end return;
   end;

   function get_FlashControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.FlashControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IFlashControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.FlashControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_FlashControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IFlashControl := new Windows.Media.Devices.IFlashControl;
         Retval.m_IFlashControl.all := m_ComRetVal;
      end return;
   end;

   function get_WhiteBalanceControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.WhiteBalanceControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IWhiteBalanceControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.WhiteBalanceControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_WhiteBalanceControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IWhiteBalanceControl := new Windows.Media.Devices.IWhiteBalanceControl;
         Retval.m_IWhiteBalanceControl.all := m_ComRetVal;
      end return;
   end;

   function get_ExposureControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.ExposureControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IExposureControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.ExposureControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_ExposureControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IExposureControl := new Windows.Media.Devices.IExposureControl;
         Retval.m_IExposureControl.all := m_ComRetVal;
      end return;
   end;

   function get_FocusControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.FocusControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IFocusControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.FocusControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_FocusControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IFocusControl := new Windows.Media.Devices.IFocusControl;
         Retval.m_IFocusControl.all := m_ComRetVal;
      end return;
   end;

   function get_ExposureCompensationControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.ExposureCompensationControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IExposureCompensationControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.ExposureCompensationControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_ExposureCompensationControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IExposureCompensationControl := new Windows.Media.Devices.IExposureCompensationControl;
         Retval.m_IExposureCompensationControl.all := m_ComRetVal;
      end return;
   end;

   function get_IsoSpeedControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.IsoSpeedControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IIsoSpeedControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.IsoSpeedControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_IsoSpeedControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IIsoSpeedControl := new Windows.Media.Devices.IIsoSpeedControl;
         Retval.m_IIsoSpeedControl.all := m_ComRetVal;
      end return;
   end;

   function get_RegionsOfInterestControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.RegionsOfInterestControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IRegionsOfInterestControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.RegionsOfInterestControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_RegionsOfInterestControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IRegionsOfInterestControl := new Windows.Media.Devices.IRegionsOfInterestControl;
         Retval.m_IRegionsOfInterestControl.all := m_ComRetVal;
      end return;
   end;

   function get_PrimaryUse
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.CaptureUse is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.CaptureUse;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.get_PrimaryUse (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PrimaryUse
   (
      this : in out VideoDeviceController;
      value : Windows.Media.Devices.CaptureUse
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.put_PrimaryUse (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_VariablePhotoSequenceController
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.Core.VariablePhotoSequenceController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IVariablePhotoSequenceController;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController3, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.VariablePhotoSequenceController do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_VariablePhotoSequenceController (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVariablePhotoSequenceController := new Windows.Media.Devices.Core.IVariablePhotoSequenceController;
         Retval.m_IVariablePhotoSequenceController.all := m_ComRetVal;
      end return;
   end;

   function get_PhotoConfirmationControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.PhotoConfirmationControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IPhotoConfirmationControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController3, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.PhotoConfirmationControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_PhotoConfirmationControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPhotoConfirmationControl := new Windows.Media.Devices.IPhotoConfirmationControl;
         Retval.m_IPhotoConfirmationControl.all := m_ComRetVal;
      end return;
   end;

   function get_ZoomControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.ZoomControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IZoomControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController3, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.ZoomControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_ZoomControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IZoomControl := new Windows.Media.Devices.IZoomControl;
         Retval.m_IZoomControl.all := m_ComRetVal;
      end return;
   end;

   function get_ExposurePriorityVideoControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.ExposurePriorityVideoControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IExposurePriorityVideoControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.ExposurePriorityVideoControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_ExposurePriorityVideoControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IExposurePriorityVideoControl := new Windows.Media.Devices.IExposurePriorityVideoControl;
         Retval.m_IExposurePriorityVideoControl.all := m_ComRetVal;
      end return;
   end;

   function get_DesiredOptimization
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.MediaCaptureOptimization is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.MediaCaptureOptimization;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.get_DesiredOptimization (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DesiredOptimization
   (
      this : in out VideoDeviceController;
      value : Windows.Media.Devices.MediaCaptureOptimization
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.put_DesiredOptimization (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_HdrVideoControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.HdrVideoControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IHdrVideoControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.HdrVideoControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_HdrVideoControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHdrVideoControl := new Windows.Media.Devices.IHdrVideoControl;
         Retval.m_IHdrVideoControl.all := m_ComRetVal;
      end return;
   end;

   function get_OpticalImageStabilizationControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.OpticalImageStabilizationControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IOpticalImageStabilizationControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.OpticalImageStabilizationControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_OpticalImageStabilizationControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IOpticalImageStabilizationControl := new Windows.Media.Devices.IOpticalImageStabilizationControl;
         Retval.m_IOpticalImageStabilizationControl.all := m_ComRetVal;
      end return;
   end;

   function get_AdvancedPhotoControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.AdvancedPhotoControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IAdvancedPhotoControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.AdvancedPhotoControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_AdvancedPhotoControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAdvancedPhotoControl := new Windows.Media.Devices.IAdvancedPhotoControl;
         Retval.m_IAdvancedPhotoControl.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out VideoDeviceController
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDevicePropertyById
   (
      this : in out VideoDeviceController;
      propertyId : WinRt.WString;
      maxPropertyValueSize : GenericObject
   )
   return WinRt.Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IVideoDeviceControllerGetDevicePropertyResult;
      HStr_propertyId : WinRt.HString := To_HString (propertyId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyResult do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.GetDevicePropertyById (HStr_propertyId, maxPropertyValueSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoDeviceControllerGetDevicePropertyResult := new Windows.Media.Devices.IVideoDeviceControllerGetDevicePropertyResult;
         Retval.m_IVideoDeviceControllerGetDevicePropertyResult.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_propertyId);
      end return;
   end;

   function SetDevicePropertyById
   (
      this : in out VideoDeviceController;
      propertyId : WinRt.WString;
      propertyValue : WinRt.IInspectable
   )
   return WinRt.Windows.Media.Devices.VideoDeviceControllerSetDevicePropertyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.VideoDeviceControllerSetDevicePropertyStatus;
      HStr_propertyId : WinRt.HString := To_HString (propertyId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.SetDevicePropertyById (HStr_propertyId, propertyValue, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyId);
      return m_ComRetVal;
   end;

   function GetDevicePropertyByExtendedId
   (
      this : in out VideoDeviceController;
      extendedPropertyId : WinRt.Byte_Array;
      maxPropertyValueSize : GenericObject
   )
   return WinRt.Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IVideoDeviceControllerGetDevicePropertyResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController5'Unchecked_Access);
      function Convert_extendedPropertyId is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyResult do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.GetDevicePropertyByExtendedId (WinRt.UInt32(extendedPropertyId'Length), Convert_extendedPropertyId (extendedPropertyId (extendedPropertyId'First)'Address), maxPropertyValueSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoDeviceControllerGetDevicePropertyResult := new Windows.Media.Devices.IVideoDeviceControllerGetDevicePropertyResult;
         Retval.m_IVideoDeviceControllerGetDevicePropertyResult.all := m_ComRetVal;
      end return;
   end;

   function SetDevicePropertyByExtendedId
   (
      this : in out VideoDeviceController;
      extendedPropertyId : WinRt.Byte_Array;
      propertyValue : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.Devices.VideoDeviceControllerSetDevicePropertyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.VideoDeviceControllerSetDevicePropertyStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController5'Unchecked_Access);
      function Convert_extendedPropertyId is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_propertyValue is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IVideoDeviceController.all);
      Hr := m_Interface.SetDevicePropertyByExtendedId (WinRt.UInt32(extendedPropertyId'Length), Convert_extendedPropertyId (extendedPropertyId (extendedPropertyId'First)'Address), WinRt.UInt32(propertyValue'Length), Convert_propertyValue (propertyValue (propertyValue'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VideoTemporalDenoisingControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.VideoTemporalDenoisingControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IVideoTemporalDenoisingControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController6, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.VideoTemporalDenoisingControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_VideoTemporalDenoisingControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoTemporalDenoisingControl := new Windows.Media.Devices.IVideoTemporalDenoisingControl;
         Retval.m_IVideoTemporalDenoisingControl.all := m_ComRetVal;
      end return;
   end;

   function get_InfraredTorchControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.InfraredTorchControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IInfraredTorchControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController7, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.InfraredTorchControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_InfraredTorchControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IInfraredTorchControl := new Windows.Media.Devices.IInfraredTorchControl;
         Retval.m_IInfraredTorchControl.all := m_ComRetVal;
      end return;
   end;

   function get_PanelBasedOptimizationControl
   (
      this : in out VideoDeviceController
   )
   return WinRt.Windows.Media.Devices.PanelBasedOptimizationControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IPanelBasedOptimizationControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IVideoDeviceController_Interface, WinRt.Windows.Media.Devices.IAdvancedVideoCaptureDeviceController8, WinRt.Windows.Media.Devices.IID_IAdvancedVideoCaptureDeviceController8'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.PanelBasedOptimizationControl do
         m_Interface := QInterface (this.m_IVideoDeviceController.all);
         Hr := m_Interface.get_PanelBasedOptimizationControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPanelBasedOptimizationControl := new Windows.Media.Devices.IPanelBasedOptimizationControl;
         Retval.m_IPanelBasedOptimizationControl.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoDeviceControllerGetDevicePropertyResult

   procedure Initialize (this : in out VideoDeviceControllerGetDevicePropertyResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoDeviceControllerGetDevicePropertyResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoDeviceControllerGetDevicePropertyResult, IVideoDeviceControllerGetDevicePropertyResult_Ptr);
   begin
      if this.m_IVideoDeviceControllerGetDevicePropertyResult /= null then
         if this.m_IVideoDeviceControllerGetDevicePropertyResult.all /= null then
            RefCount := this.m_IVideoDeviceControllerGetDevicePropertyResult.all.Release;
            Free (this.m_IVideoDeviceControllerGetDevicePropertyResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoDeviceControllerGetDevicePropertyResult

   function get_Status
   (
      this : in out VideoDeviceControllerGetDevicePropertyResult
   )
   return WinRt.Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyStatus;
   begin
      Hr := this.m_IVideoDeviceControllerGetDevicePropertyResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out VideoDeviceControllerGetDevicePropertyResult
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IVideoDeviceControllerGetDevicePropertyResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoTemporalDenoisingControl

   procedure Initialize (this : in out VideoTemporalDenoisingControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoTemporalDenoisingControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoTemporalDenoisingControl, IVideoTemporalDenoisingControl_Ptr);
   begin
      if this.m_IVideoTemporalDenoisingControl /= null then
         if this.m_IVideoTemporalDenoisingControl.all /= null then
            RefCount := this.m_IVideoTemporalDenoisingControl.all.Release;
            Free (this.m_IVideoTemporalDenoisingControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoTemporalDenoisingControl

   function get_Supported
   (
      this : in out VideoTemporalDenoisingControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVideoTemporalDenoisingControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedModes
   (
      this : in out VideoTemporalDenoisingControl
   )
   return IVectorView_VideoTemporalDenoisingMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_VideoTemporalDenoisingMode.Kind;
   begin
      Hr := this.m_IVideoTemporalDenoisingControl.all.get_SupportedModes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_VideoTemporalDenoisingMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Mode
   (
      this : in out VideoTemporalDenoisingControl
   )
   return WinRt.Windows.Media.Devices.VideoTemporalDenoisingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.VideoTemporalDenoisingMode;
   begin
      Hr := this.m_IVideoTemporalDenoisingControl.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out VideoTemporalDenoisingControl;
      value : Windows.Media.Devices.VideoTemporalDenoisingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoTemporalDenoisingControl.all.put_Mode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WhiteBalanceControl

   procedure Initialize (this : in out WhiteBalanceControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out WhiteBalanceControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWhiteBalanceControl, IWhiteBalanceControl_Ptr);
   begin
      if this.m_IWhiteBalanceControl /= null then
         if this.m_IWhiteBalanceControl.all /= null then
            RefCount := this.m_IWhiteBalanceControl.all.Release;
            Free (this.m_IWhiteBalanceControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WhiteBalanceControl

   function get_Supported
   (
      this : in out WhiteBalanceControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWhiteBalanceControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Preset
   (
      this : in out WhiteBalanceControl
   )
   return WinRt.Windows.Media.Devices.ColorTemperaturePreset is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ColorTemperaturePreset;
   begin
      Hr := this.m_IWhiteBalanceControl.all.get_Preset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetPresetAsync
   (
      this : in out WhiteBalanceControl;
      preset : Windows.Media.Devices.ColorTemperaturePreset
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWhiteBalanceControl.all.SetPresetAsync (preset, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Min
   (
      this : in out WhiteBalanceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWhiteBalanceControl.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out WhiteBalanceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWhiteBalanceControl.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out WhiteBalanceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWhiteBalanceControl.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out WhiteBalanceControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWhiteBalanceControl.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetValueAsync
   (
      this : in out WhiteBalanceControl;
      temperature : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWhiteBalanceControl.all.SetValueAsync (temperature, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ZoomControl

   procedure Initialize (this : in out ZoomControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out ZoomControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IZoomControl, IZoomControl_Ptr);
   begin
      if this.m_IZoomControl /= null then
         if this.m_IZoomControl.all /= null then
            RefCount := this.m_IZoomControl.all.Release;
            Free (this.m_IZoomControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ZoomControl

   function get_Supported
   (
      this : in out ZoomControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IZoomControl.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Min
   (
      this : in out ZoomControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IZoomControl.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out ZoomControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IZoomControl.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out ZoomControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IZoomControl.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out ZoomControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IZoomControl.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Value
   (
      this : in out ZoomControl;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IZoomControl.all.put_Value (value);
   end;

   function get_SupportedModes
   (
      this : in out ZoomControl
   )
   return IVectorView_ZoomTransitionMode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IZoomControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ZoomTransitionMode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IZoomControl_Interface, WinRt.Windows.Media.Devices.IZoomControl2, WinRt.Windows.Media.Devices.IID_IZoomControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IZoomControl.all);
      Hr := m_Interface.get_SupportedModes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_ZoomTransitionMode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Mode
   (
      this : in out ZoomControl
   )
   return WinRt.Windows.Media.Devices.ZoomTransitionMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IZoomControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ZoomTransitionMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IZoomControl_Interface, WinRt.Windows.Media.Devices.IZoomControl2, WinRt.Windows.Media.Devices.IID_IZoomControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IZoomControl.all);
      Hr := m_Interface.get_Mode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Configure
   (
      this : in out ZoomControl;
      settings : Windows.Media.Devices.ZoomSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.IZoomControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.IZoomControl_Interface, WinRt.Windows.Media.Devices.IZoomControl2, WinRt.Windows.Media.Devices.IID_IZoomControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IZoomControl.all);
      Hr := m_Interface.Configure (settings.m_IZoomSettings.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ZoomSettings

   procedure Initialize (this : in out ZoomSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ZoomSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IZoomSettings, IZoomSettings_Ptr);
   begin
      if this.m_IZoomSettings /= null then
         if this.m_IZoomSettings.all /= null then
            RefCount := this.m_IZoomSettings.all.Release;
            Free (this.m_IZoomSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ZoomSettings

   function Constructor return ZoomSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Devices.ZoomSettings");
      m_ComRetVal  : aliased Windows.Media.Devices.IZoomSettings;
   begin
      return RetVal : ZoomSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IZoomSettings := new Windows.Media.Devices.IZoomSettings;
            Retval.m_IZoomSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ZoomSettings

   function get_Mode
   (
      this : in out ZoomSettings
   )
   return WinRt.Windows.Media.Devices.ZoomTransitionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.ZoomTransitionMode;
   begin
      Hr := this.m_IZoomSettings.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out ZoomSettings;
      value : Windows.Media.Devices.ZoomTransitionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IZoomSettings.all.put_Mode (value);
   end;

   function get_Value
   (
      this : in out ZoomSettings
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IZoomSettings.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Value
   (
      this : in out ZoomSettings;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IZoomSettings.all.put_Value (value);
   end;

end;

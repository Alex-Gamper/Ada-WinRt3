--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.AppService;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Web.Http;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System.Diagnostics.DevicePortal is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePortalConnection

   procedure Initialize (this : in out DevicePortalConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePortalConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePortalConnection, IDevicePortalConnection_Ptr);
   begin
      if this.m_IDevicePortalConnection /= null then
         if this.m_IDevicePortalConnection.all /= null then
            RefCount := this.m_IDevicePortalConnection.all.Release;
            Free (this.m_IDevicePortalConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DevicePortalConnection

   function GetForAppServiceConnection
   (
      appServiceConnection : Windows.ApplicationModel.AppService.AppServiceConnection'Class
   )
   return WinRt.Windows.System.Diagnostics.DevicePortal.DevicePortalConnection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.DevicePortal.DevicePortalConnection");
      m_Factory        : access WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.DevicePortal.DevicePortalConnection do
         Hr := RoGetActivationFactory (m_hString, IID_IDevicePortalConnectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForAppServiceConnection (appServiceConnection.m_IAppServiceConnection.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDevicePortalConnection := new Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection;
            Retval.m_IDevicePortalConnection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePortalConnection

   function add_Closed
   (
      this : in out DevicePortalConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDevicePortalConnection.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out DevicePortalConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePortalConnection.all.remove_Closed (token);
   end;

   function add_RequestReceived
   (
      this : in out DevicePortalConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDevicePortalConnection.all.add_RequestReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RequestReceived
   (
      this : in out DevicePortalConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePortalConnection.all.remove_RequestReceived (token);
   end;

   function GetServerMessageWebSocketForRequest
   (
      this : in out DevicePortalConnection;
      request : Windows.Web.Http.HttpRequestMessage'Class
   )
   return WinRt.Windows.Networking.Sockets.ServerMessageWebSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerMessageWebSocket;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnection'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerMessageWebSocket do
         m_Interface := QInterface (this.m_IDevicePortalConnection.all);
         Hr := m_Interface.GetServerMessageWebSocketForRequest (request.m_IHttpRequestMessage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IServerMessageWebSocket := new Windows.Networking.Sockets.IServerMessageWebSocket;
         Retval.m_IServerMessageWebSocket.all := m_ComRetVal;
      end return;
   end;

   function GetServerMessageWebSocketForRequest
   (
      this : in out DevicePortalConnection;
      request : Windows.Web.Http.HttpRequestMessage'Class;
      messageType : Windows.Networking.Sockets.SocketMessageType;
      protocol : WinRt.WString
   )
   return WinRt.Windows.Networking.Sockets.ServerMessageWebSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerMessageWebSocket;
      HStr_protocol : WinRt.HString := To_HString (protocol);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnection'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerMessageWebSocket do
         m_Interface := QInterface (this.m_IDevicePortalConnection.all);
         Hr := m_Interface.GetServerMessageWebSocketForRequest (request.m_IHttpRequestMessage.all, messageType, HStr_protocol, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IServerMessageWebSocket := new Windows.Networking.Sockets.IServerMessageWebSocket;
         Retval.m_IServerMessageWebSocket.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_protocol);
      end return;
   end;

   function GetServerMessageWebSocketForRequest
   (
      this : in out DevicePortalConnection;
      request : Windows.Web.Http.HttpRequestMessage'Class;
      messageType : Windows.Networking.Sockets.SocketMessageType;
      protocol : WinRt.WString;
      outboundBufferSizeInBytes : WinRt.UInt32;
      maxMessageSize : WinRt.UInt32;
      receiveMode : Windows.Networking.Sockets.MessageWebSocketReceiveMode
   )
   return WinRt.Windows.Networking.Sockets.ServerMessageWebSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerMessageWebSocket;
      HStr_protocol : WinRt.HString := To_HString (protocol);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnection'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerMessageWebSocket do
         m_Interface := QInterface (this.m_IDevicePortalConnection.all);
         Hr := m_Interface.GetServerMessageWebSocketForRequest (request.m_IHttpRequestMessage.all, messageType, HStr_protocol, outboundBufferSizeInBytes, maxMessageSize, receiveMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IServerMessageWebSocket := new Windows.Networking.Sockets.IServerMessageWebSocket;
         Retval.m_IServerMessageWebSocket.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_protocol);
      end return;
   end;

   function GetServerStreamWebSocketForRequest
   (
      this : in out DevicePortalConnection;
      request : Windows.Web.Http.HttpRequestMessage'Class
   )
   return WinRt.Windows.Networking.Sockets.ServerStreamWebSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerStreamWebSocket;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnection'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerStreamWebSocket do
         m_Interface := QInterface (this.m_IDevicePortalConnection.all);
         Hr := m_Interface.GetServerStreamWebSocketForRequest (request.m_IHttpRequestMessage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IServerStreamWebSocket := new Windows.Networking.Sockets.IServerStreamWebSocket;
         Retval.m_IServerStreamWebSocket.all := m_ComRetVal;
      end return;
   end;

   function GetServerStreamWebSocketForRequest
   (
      this : in out DevicePortalConnection;
      request : Windows.Web.Http.HttpRequestMessage'Class;
      protocol : WinRt.WString;
      outboundBufferSizeInBytes : WinRt.UInt32;
      noDelay : WinRt.Boolean
   )
   return WinRt.Windows.Networking.Sockets.ServerStreamWebSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerStreamWebSocket;
      HStr_protocol : WinRt.HString := To_HString (protocol);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnection'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerStreamWebSocket do
         m_Interface := QInterface (this.m_IDevicePortalConnection.all);
         Hr := m_Interface.GetServerStreamWebSocketForRequest (request.m_IHttpRequestMessage.all, HStr_protocol, outboundBufferSizeInBytes, noDelay, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IServerStreamWebSocket := new Windows.Networking.Sockets.IServerStreamWebSocket;
         Retval.m_IServerStreamWebSocket.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_protocol);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePortalConnectionClosedEventArgs

   procedure Initialize (this : in out DevicePortalConnectionClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePortalConnectionClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePortalConnectionClosedEventArgs, IDevicePortalConnectionClosedEventArgs_Ptr);
   begin
      if this.m_IDevicePortalConnectionClosedEventArgs /= null then
         if this.m_IDevicePortalConnectionClosedEventArgs.all /= null then
            RefCount := this.m_IDevicePortalConnectionClosedEventArgs.all.Release;
            Free (this.m_IDevicePortalConnectionClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePortalConnectionClosedEventArgs

   function get_Reason
   (
      this : in out DevicePortalConnectionClosedEventArgs
   )
   return WinRt.Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionClosedReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.DevicePortal.DevicePortalConnectionClosedReason;
   begin
      Hr := this.m_IDevicePortalConnectionClosedEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePortalConnectionRequestReceivedEventArgs

   procedure Initialize (this : in out DevicePortalConnectionRequestReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePortalConnectionRequestReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePortalConnectionRequestReceivedEventArgs, IDevicePortalConnectionRequestReceivedEventArgs_Ptr);
   begin
      if this.m_IDevicePortalConnectionRequestReceivedEventArgs /= null then
         if this.m_IDevicePortalConnectionRequestReceivedEventArgs.all /= null then
            RefCount := this.m_IDevicePortalConnectionRequestReceivedEventArgs.all.Release;
            Free (this.m_IDevicePortalConnectionRequestReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePortalConnectionRequestReceivedEventArgs

   function get_RequestMessage
   (
      this : in out DevicePortalConnectionRequestReceivedEventArgs
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IDevicePortalConnectionRequestReceivedEventArgs.all.get_RequestMessage (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ResponseMessage
   (
      this : in out DevicePortalConnectionRequestReceivedEventArgs
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IDevicePortalConnectionRequestReceivedEventArgs.all.get_ResponseMessage (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

   function get_IsWebSocketUpgradeRequest
   (
      this : in out DevicePortalConnectionRequestReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnectionRequestReceivedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnectionRequestReceivedEventArgs_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnectionRequestReceivedEventArgs, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnectionRequestReceivedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDevicePortalConnectionRequestReceivedEventArgs.all);
      Hr := m_Interface.get_IsWebSocketUpgradeRequest (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_WebSocketProtocolsRequested
   (
      this : in out DevicePortalConnectionRequestReceivedEventArgs
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnectionRequestReceivedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnectionRequestReceivedEventArgs_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnectionRequestReceivedEventArgs, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnectionRequestReceivedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDevicePortalConnectionRequestReceivedEventArgs.all);
      Hr := m_Interface.get_WebSocketProtocolsRequested (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDeferral
   (
      this : in out DevicePortalConnectionRequestReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnectionRequestReceivedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalConnectionRequestReceivedEventArgs_Interface, WinRt.Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnectionRequestReceivedEventArgs, WinRt.Windows.System.Diagnostics.DevicePortal.IID_IDevicePortalWebSocketConnectionRequestReceivedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         m_Interface := QInterface (this.m_IDevicePortalConnectionRequestReceivedEventArgs.all);
         Hr := m_Interface.GetDeferral (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

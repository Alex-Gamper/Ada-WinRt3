--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with WinRt.Windows.Web.Http;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Services.Store is

   package IAsyncOperation_StorePurchaseResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStorePurchaseResult);
   package AsyncOperationCompletedHandler_StorePurchaseResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStorePurchaseResult);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_StoreAppLicense is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreAppLicense);
   package AsyncOperationCompletedHandler_StoreAppLicense is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreAppLicense);

   package IAsyncOperation_StoreProductResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreProductResult);
   package AsyncOperationCompletedHandler_StoreProductResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreProductResult);

   package IAsyncOperation_StoreProductQueryResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreProductQueryResult);
   package AsyncOperationCompletedHandler_StoreProductQueryResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreProductQueryResult);

   package IAsyncOperation_StoreProductPagedQueryResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreProductPagedQueryResult);
   package AsyncOperationCompletedHandler_StoreProductPagedQueryResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreProductPagedQueryResult);

   package IAsyncOperation_StoreConsumableResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreConsumableResult);
   package AsyncOperationCompletedHandler_StoreConsumableResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreConsumableResult);

   package IAsyncOperation_StoreAcquireLicenseResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreAcquireLicenseResult);
   package AsyncOperationCompletedHandler_StoreAcquireLicenseResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreAcquireLicenseResult);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_StorePackageUpdateResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Services.Store.IStorePackageUpdateResult, GenericObject);
   package AsyncOperationCompletedHandler_StorePackageUpdateResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Services.Store.IStorePackageUpdateResult, GenericObject);

   package IAsyncOperation_StoreCanAcquireLicenseResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreCanAcquireLicenseResult);
   package AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreCanAcquireLicenseResult);

   package IAsyncOperation_StoreUninstallStorePackageResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreUninstallStorePackageResult);
   package AsyncOperationCompletedHandler_StoreUninstallStorePackageResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreUninstallStorePackageResult);

   package IAsyncOperation_StoreRateAndReviewResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreRateAndReviewResult);
   package AsyncOperationCompletedHandler_StoreRateAndReviewResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreRateAndReviewResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_StoreSendRequestResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Store.IStoreSendRequestResult);
   package AsyncOperationCompletedHandler_StoreSendRequestResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Store.IStoreSendRequestResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreAcquireLicenseResult

   procedure Initialize (this : in out StoreAcquireLicenseResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreAcquireLicenseResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreAcquireLicenseResult, IStoreAcquireLicenseResult_Ptr);
   begin
      if this.m_IStoreAcquireLicenseResult /= null then
         if this.m_IStoreAcquireLicenseResult.all /= null then
            RefCount := this.m_IStoreAcquireLicenseResult.all.Release;
            Free (this.m_IStoreAcquireLicenseResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreAcquireLicenseResult

   function get_StorePackageLicense
   (
      this : in out StoreAcquireLicenseResult
   )
   return WinRt.Windows.Services.Store.StorePackageLicense'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStorePackageLicense;
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageLicense do
         Hr := this.m_IStoreAcquireLicenseResult.all.get_StorePackageLicense (m_ComRetVal'Access);
         Retval.m_IStorePackageLicense := new Windows.Services.Store.IStorePackageLicense;
         Retval.m_IStorePackageLicense.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out StoreAcquireLicenseResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreAcquireLicenseResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreAppLicense

   procedure Initialize (this : in out StoreAppLicense) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreAppLicense) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreAppLicense, IStoreAppLicense_Ptr);
   begin
      if this.m_IStoreAppLicense /= null then
         if this.m_IStoreAppLicense.all /= null then
            RefCount := this.m_IStoreAppLicense.all.Release;
            Free (this.m_IStoreAppLicense);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreAppLicense

   function get_SkuStoreId
   (
      this : in out StoreAppLicense
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreAppLicense.all.get_SkuStoreId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsActive
   (
      this : in out StoreAppLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreAppLicense.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTrial
   (
      this : in out StoreAppLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreAppLicense.all.get_IsTrial (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpirationDate
   (
      this : in out StoreAppLicense
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IStoreAppLicense.all.get_ExpirationDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedJsonData
   (
      this : in out StoreAppLicense
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreAppLicense.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AddOnLicenses
   (
      this : in out StoreAppLicense
   )
   return IMapView_HString_IStoreLicense.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IStoreLicense.Kind;
   begin
      Hr := this.m_IStoreAppLicense.all.get_AddOnLicenses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IStoreLicense (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TrialTimeRemaining
   (
      this : in out StoreAppLicense
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IStoreAppLicense.all.get_TrialTimeRemaining (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTrialOwnedByThisUser
   (
      this : in out StoreAppLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreAppLicense.all.get_IsTrialOwnedByThisUser (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrialUniqueId
   (
      this : in out StoreAppLicense
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreAppLicense.all.get_TrialUniqueId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsDiscLicense
   (
      this : in out StoreAppLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreAppLicense2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreAppLicense_Interface, WinRt.Windows.Services.Store.IStoreAppLicense2, WinRt.Windows.Services.Store.IID_IStoreAppLicense2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreAppLicense.all);
      Hr := m_Interface.get_IsDiscLicense (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreAvailability

   procedure Initialize (this : in out StoreAvailability) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreAvailability) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreAvailability, IStoreAvailability_Ptr);
   begin
      if this.m_IStoreAvailability /= null then
         if this.m_IStoreAvailability.all /= null then
            RefCount := this.m_IStoreAvailability.all.Release;
            Free (this.m_IStoreAvailability);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreAvailability

   function get_StoreId
   (
      this : in out StoreAvailability
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreAvailability.all.get_StoreId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EndDate
   (
      this : in out StoreAvailability
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IStoreAvailability.all.get_EndDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Price
   (
      this : in out StoreAvailability
   )
   return WinRt.Windows.Services.Store.StorePrice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStorePrice;
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePrice do
         Hr := this.m_IStoreAvailability.all.get_Price (m_ComRetVal'Access);
         Retval.m_IStorePrice := new Windows.Services.Store.IStorePrice;
         Retval.m_IStorePrice.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedJsonData
   (
      this : in out StoreAvailability
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreAvailability.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreAvailability
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreAvailability.all.RequestPurchaseAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreAvailability;
      storePurchaseProperties_p : Windows.Services.Store.StorePurchaseProperties'Class
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreAvailability.all.RequestPurchaseAsync (storePurchaseProperties_p.m_IStorePurchaseProperties.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreCanAcquireLicenseResult

   procedure Initialize (this : in out StoreCanAcquireLicenseResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreCanAcquireLicenseResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreCanAcquireLicenseResult, IStoreCanAcquireLicenseResult_Ptr);
   begin
      if this.m_IStoreCanAcquireLicenseResult /= null then
         if this.m_IStoreCanAcquireLicenseResult.all /= null then
            RefCount := this.m_IStoreCanAcquireLicenseResult.all.Release;
            Free (this.m_IStoreCanAcquireLicenseResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreCanAcquireLicenseResult

   function get_ExtendedError
   (
      this : in out StoreCanAcquireLicenseResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreCanAcquireLicenseResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LicensableSku
   (
      this : in out StoreCanAcquireLicenseResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreCanAcquireLicenseResult.all.get_LicensableSku (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Status
   (
      this : in out StoreCanAcquireLicenseResult
   )
   return WinRt.Windows.Services.Store.StoreCanLicenseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreCanLicenseStatus;
   begin
      Hr := this.m_IStoreCanAcquireLicenseResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreCollectionData

   procedure Initialize (this : in out StoreCollectionData) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreCollectionData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreCollectionData, IStoreCollectionData_Ptr);
   begin
      if this.m_IStoreCollectionData /= null then
         if this.m_IStoreCollectionData.all /= null then
            RefCount := this.m_IStoreCollectionData.all.Release;
            Free (this.m_IStoreCollectionData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreCollectionData

   function get_IsTrial
   (
      this : in out StoreCollectionData
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreCollectionData.all.get_IsTrial (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CampaignId
   (
      this : in out StoreCollectionData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreCollectionData.all.get_CampaignId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeveloperOfferId
   (
      this : in out StoreCollectionData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreCollectionData.all.get_DeveloperOfferId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AcquiredDate
   (
      this : in out StoreCollectionData
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IStoreCollectionData.all.get_AcquiredDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StartDate
   (
      this : in out StoreCollectionData
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IStoreCollectionData.all.get_StartDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EndDate
   (
      this : in out StoreCollectionData
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IStoreCollectionData.all.get_EndDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrialTimeRemaining
   (
      this : in out StoreCollectionData
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IStoreCollectionData.all.get_TrialTimeRemaining (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedJsonData
   (
      this : in out StoreCollectionData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreCollectionData.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreConsumableResult

   procedure Initialize (this : in out StoreConsumableResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreConsumableResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreConsumableResult, IStoreConsumableResult_Ptr);
   begin
      if this.m_IStoreConsumableResult /= null then
         if this.m_IStoreConsumableResult.all /= null then
            RefCount := this.m_IStoreConsumableResult.all.Release;
            Free (this.m_IStoreConsumableResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreConsumableResult

   function get_Status
   (
      this : in out StoreConsumableResult
   )
   return WinRt.Windows.Services.Store.StoreConsumableStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreConsumableStatus;
   begin
      Hr := this.m_IStoreConsumableResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrackingId
   (
      this : in out StoreConsumableResult
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IStoreConsumableResult.all.get_TrackingId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BalanceRemaining
   (
      this : in out StoreConsumableResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStoreConsumableResult.all.get_BalanceRemaining (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out StoreConsumableResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreConsumableResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreContext

   procedure Initialize (this : in out StoreContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreContext, IStoreContext_Ptr);
   begin
      if this.m_IStoreContext /= null then
         if this.m_IStoreContext.all /= null then
            RefCount := this.m_IStoreContext.all.Release;
            Free (this.m_IStoreContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for StoreContext

   function GetDefault
   return WinRt.Windows.Services.Store.StoreContext is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.Store.StoreContext");
      m_Factory        : access WinRt.Windows.Services.Store.IStoreContextStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreContext;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreContext do
         Hr := RoGetActivationFactory (m_hString, IID_IStoreContextStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IStoreContext := new Windows.Services.Store.IStoreContext;
            Retval.m_IStoreContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.Services.Store.StoreContext is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.Store.StoreContext");
      m_Factory        : access WinRt.Windows.Services.Store.IStoreContextStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreContext;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreContext do
         Hr := RoGetActivationFactory (m_hString, IID_IStoreContextStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IStoreContext := new Windows.Services.Store.IStoreContext;
            Retval.m_IStoreContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreContext

   function get_User
   (
      this : in out StoreContext
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IStoreContext.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function add_OfflineLicensesChanged
   (
      this : in out StoreContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStoreContext.all.add_OfflineLicensesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_OfflineLicensesChanged
   (
      this : in out StoreContext;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStoreContext.all.remove_OfflineLicensesChanged (token);
   end;

   function GetCustomerPurchaseIdAsync
   (
      this : in out StoreContext;
      serviceTicket : WinRt.WString;
      publisherUserId : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_serviceTicket : WinRt.HString := To_HString (serviceTicket);
      HStr_publisherUserId : WinRt.HString := To_HString (publisherUserId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStoreContext.all.GetCustomerPurchaseIdAsync (HStr_serviceTicket, HStr_publisherUserId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_serviceTicket);
      Hr := WindowsDeleteString (HStr_publisherUserId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetCustomerCollectionsIdAsync
   (
      this : in out StoreContext;
      serviceTicket : WinRt.WString;
      publisherUserId : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_serviceTicket : WinRt.HString := To_HString (serviceTicket);
      HStr_publisherUserId : WinRt.HString := To_HString (publisherUserId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStoreContext.all.GetCustomerCollectionsIdAsync (HStr_serviceTicket, HStr_publisherUserId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_serviceTicket);
      Hr := WindowsDeleteString (HStr_publisherUserId);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetAppLicenseAsync
   (
      this : in out StoreContext
   )
   return WinRt.Windows.Services.Store.StoreAppLicense'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreAppLicense.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreAppLicense.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreAppLicense;
      m_IID            : aliased WinRt.IID := (946222859, 44998, 23809, (132, 194, 69, 116, 98, 141, 229, 57 )); -- Windows.Services.Store.StoreAppLicense;
      m_HandlerIID     : aliased WinRt.IID := (3472825865, 58630, 20653, (169, 8, 82, 3, 140, 37, 101, 82 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreAppLicense.Kind := new AsyncOperationCompletedHandler_StoreAppLicense.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreAppLicense.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreAppLicense.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreAppLicense.Kind_Delegate, AsyncOperationCompletedHandler_StoreAppLicense.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreAppLicense do
         Hr := this.m_IStoreContext.all.GetAppLicenseAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreAppLicense := new Windows.Services.Store.IStoreAppLicense;
                  Retval.m_IStoreAppLicense.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetStoreProductForCurrentAppAsync
   (
      this : in out StoreContext
   )
   return WinRt.Windows.Services.Store.StoreProductResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductResult;
      m_IID            : aliased WinRt.IID := (2657216619, 27387, 20654, (175, 193, 197, 159, 84, 81, 8, 221 )); -- Windows.Services.Store.StoreProductResult;
      m_HandlerIID     : aliased WinRt.IID := (3952339254, 54549, 21524, (157, 21, 240, 80, 192, 184, 245, 33 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductResult.Kind := new AsyncOperationCompletedHandler_StoreProductResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductResult do
         Hr := this.m_IStoreContext.all.GetStoreProductForCurrentAppAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductResult := new Windows.Services.Store.IStoreProductResult;
                  Retval.m_IStoreProductResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetStoreProductsAsync
   (
      this : in out StoreContext;
      productKinds : GenericObject;
      storeIds : GenericObject
   )
   return WinRt.Windows.Services.Store.StoreProductQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductQueryResult;
      m_IID            : aliased WinRt.IID := (2526668731, 59935, 24067, (148, 57, 200, 14, 105, 119, 183, 17 )); -- Windows.Services.Store.StoreProductQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (49587244, 1112, 22742, (146, 60, 180, 75, 168, 239, 34, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductQueryResult.Kind := new AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductQueryResult do
         Hr := this.m_IStoreContext.all.GetStoreProductsAsync (productKinds, storeIds, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductQueryResult := new Windows.Services.Store.IStoreProductQueryResult;
                  Retval.m_IStoreProductQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAssociatedStoreProductsAsync
   (
      this : in out StoreContext;
      productKinds : GenericObject
   )
   return WinRt.Windows.Services.Store.StoreProductQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductQueryResult;
      m_IID            : aliased WinRt.IID := (2526668731, 59935, 24067, (148, 57, 200, 14, 105, 119, 183, 17 )); -- Windows.Services.Store.StoreProductQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (49587244, 1112, 22742, (146, 60, 180, 75, 168, 239, 34, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductQueryResult.Kind := new AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductQueryResult do
         Hr := this.m_IStoreContext.all.GetAssociatedStoreProductsAsync (productKinds, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductQueryResult := new Windows.Services.Store.IStoreProductQueryResult;
                  Retval.m_IStoreProductQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAssociatedStoreProductsWithPagingAsync
   (
      this : in out StoreContext;
      productKinds : GenericObject;
      maxItemsToRetrievePerPage : WinRt.UInt32
   )
   return WinRt.Windows.Services.Store.StoreProductPagedQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductPagedQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductPagedQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductPagedQueryResult;
      m_IID            : aliased WinRt.IID := (813295579, 7076, 23454, (133, 106, 101, 118, 191, 127, 156, 138 )); -- Windows.Services.Store.StoreProductPagedQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (3884331551, 46993, 24120, (139, 196, 152, 203, 40, 125, 16, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind := new AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductPagedQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductPagedQueryResult do
         Hr := this.m_IStoreContext.all.GetAssociatedStoreProductsWithPagingAsync (productKinds, maxItemsToRetrievePerPage, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductPagedQueryResult := new Windows.Services.Store.IStoreProductPagedQueryResult;
                  Retval.m_IStoreProductPagedQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetUserCollectionAsync
   (
      this : in out StoreContext;
      productKinds : GenericObject
   )
   return WinRt.Windows.Services.Store.StoreProductQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductQueryResult;
      m_IID            : aliased WinRt.IID := (2526668731, 59935, 24067, (148, 57, 200, 14, 105, 119, 183, 17 )); -- Windows.Services.Store.StoreProductQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (49587244, 1112, 22742, (146, 60, 180, 75, 168, 239, 34, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductQueryResult.Kind := new AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductQueryResult do
         Hr := this.m_IStoreContext.all.GetUserCollectionAsync (productKinds, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductQueryResult := new Windows.Services.Store.IStoreProductQueryResult;
                  Retval.m_IStoreProductQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetUserCollectionWithPagingAsync
   (
      this : in out StoreContext;
      productKinds : GenericObject;
      maxItemsToRetrievePerPage : WinRt.UInt32
   )
   return WinRt.Windows.Services.Store.StoreProductPagedQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductPagedQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductPagedQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductPagedQueryResult;
      m_IID            : aliased WinRt.IID := (813295579, 7076, 23454, (133, 106, 101, 118, 191, 127, 156, 138 )); -- Windows.Services.Store.StoreProductPagedQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (3884331551, 46993, 24120, (139, 196, 152, 203, 40, 125, 16, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind := new AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductPagedQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductPagedQueryResult do
         Hr := this.m_IStoreContext.all.GetUserCollectionWithPagingAsync (productKinds, maxItemsToRetrievePerPage, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductPagedQueryResult := new Windows.Services.Store.IStoreProductPagedQueryResult;
                  Retval.m_IStoreProductPagedQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ReportConsumableFulfillmentAsync
   (
      this : in out StoreContext;
      productStoreId : WinRt.WString;
      quantity : WinRt.UInt32;
      trackingId : WinRt.Guid
   )
   return WinRt.Windows.Services.Store.StoreConsumableResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productStoreId : WinRt.HString := To_HString (productStoreId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreConsumableResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreConsumableResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreConsumableResult;
      m_IID            : aliased WinRt.IID := (2268875131, 50167, 22103, (185, 33, 62, 88, 206, 72, 238, 80 )); -- Windows.Services.Store.StoreConsumableResult;
      m_HandlerIID     : aliased WinRt.IID := (1059828088, 15438, 22253, (134, 165, 173, 19, 121, 124, 251, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreConsumableResult.Kind := new AsyncOperationCompletedHandler_StoreConsumableResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreConsumableResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreConsumableResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreConsumableResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreConsumableResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreConsumableResult do
         Hr := this.m_IStoreContext.all.ReportConsumableFulfillmentAsync (HStr_productStoreId, quantity, trackingId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreConsumableResult := new Windows.Services.Store.IStoreConsumableResult;
                  Retval.m_IStoreConsumableResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productStoreId);
      end return;
   end;

   function GetConsumableBalanceRemainingAsync
   (
      this : in out StoreContext;
      productStoreId : WinRt.WString
   )
   return WinRt.Windows.Services.Store.StoreConsumableResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productStoreId : WinRt.HString := To_HString (productStoreId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreConsumableResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreConsumableResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreConsumableResult;
      m_IID            : aliased WinRt.IID := (2268875131, 50167, 22103, (185, 33, 62, 88, 206, 72, 238, 80 )); -- Windows.Services.Store.StoreConsumableResult;
      m_HandlerIID     : aliased WinRt.IID := (1059828088, 15438, 22253, (134, 165, 173, 19, 121, 124, 251, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreConsumableResult.Kind := new AsyncOperationCompletedHandler_StoreConsumableResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreConsumableResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreConsumableResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreConsumableResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreConsumableResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreConsumableResult do
         Hr := this.m_IStoreContext.all.GetConsumableBalanceRemainingAsync (HStr_productStoreId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreConsumableResult := new Windows.Services.Store.IStoreConsumableResult;
                  Retval.m_IStoreConsumableResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productStoreId);
      end return;
   end;

   function AcquireStoreLicenseForOptionalPackageAsync
   (
      this : in out StoreContext;
      optionalPackage : Windows.ApplicationModel.Package_x'Class
   )
   return WinRt.Windows.Services.Store.StoreAcquireLicenseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreAcquireLicenseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreAcquireLicenseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreAcquireLicenseResult;
      m_IID            : aliased WinRt.IID := (3714860805, 42860, 21134, (153, 165, 205, 209, 49, 151, 212, 207 )); -- Windows.Services.Store.StoreAcquireLicenseResult;
      m_HandlerIID     : aliased WinRt.IID := (1770506620, 11289, 24388, (181, 172, 55, 57, 63, 60, 26, 74 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreAcquireLicenseResult.Kind := new AsyncOperationCompletedHandler_StoreAcquireLicenseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreAcquireLicenseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreAcquireLicenseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreAcquireLicenseResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreAcquireLicenseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreAcquireLicenseResult do
         Hr := this.m_IStoreContext.all.AcquireStoreLicenseForOptionalPackageAsync (optionalPackage.m_IPackage.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreAcquireLicenseResult := new Windows.Services.Store.IStoreAcquireLicenseResult;
                  Retval.m_IStoreAcquireLicenseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreContext;
      storeId : WinRt.WString
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeId : WinRt.HString := To_HString (storeId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreContext.all.RequestPurchaseAsync (HStr_storeId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storeId);
      end return;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreContext;
      storeId : WinRt.WString;
      storePurchaseProperties_p : Windows.Services.Store.StorePurchaseProperties'Class
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeId : WinRt.HString := To_HString (storeId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreContext.all.RequestPurchaseAsync (HStr_storeId, storePurchaseProperties_p.m_IStorePurchaseProperties.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storeId);
      end return;
   end;

   function GetAppAndOptionalStorePackageUpdatesAsync
   (
      this : in out StoreContext
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (180775987, 17848, 21611, (170, 175, 213, 141, 98, 164, 197, 197 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4165540813, 11701, 22752, (140, 71, 68, 230, 235, 16, 193, 45 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStoreContext.all.GetAppAndOptionalStorePackageUpdatesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestDownloadStorePackageUpdatesAsync
   (
      this : in out StoreContext;
      storePackageUpdates : GenericObject
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePackageUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePackageUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePackageUpdateResult;
      m_IID            : aliased WinRt.IID := (1120155338, 20983, 20658, (143, 228, 123, 117, 64, 98, 230, 235 )); -- Windows.Services.Store.StorePackageUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (3015576715, 61213, 22236, (133, 71, 77, 160, 110, 165, 99, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind := new AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePackageUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageUpdateResult do
         Hr := this.m_IStoreContext.all.RequestDownloadStorePackageUpdatesAsync (storePackageUpdates, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePackageUpdateResult := new Windows.Services.Store.IStorePackageUpdateResult;
                  Retval.m_IStorePackageUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestDownloadAndInstallStorePackageUpdatesAsync
   (
      this : in out StoreContext;
      storePackageUpdates : GenericObject
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePackageUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePackageUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePackageUpdateResult;
      m_IID            : aliased WinRt.IID := (1120155338, 20983, 20658, (143, 228, 123, 117, 64, 98, 230, 235 )); -- Windows.Services.Store.StorePackageUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (3015576715, 61213, 22236, (133, 71, 77, 160, 110, 165, 99, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind := new AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePackageUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageUpdateResult do
         Hr := this.m_IStoreContext.all.RequestDownloadAndInstallStorePackageUpdatesAsync (storePackageUpdates, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePackageUpdateResult := new Windows.Services.Store.IStorePackageUpdateResult;
                  Retval.m_IStorePackageUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestDownloadAndInstallStorePackagesAsync
   (
      this : in out StoreContext;
      storeIds : GenericObject
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePackageUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePackageUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePackageUpdateResult;
      m_IID            : aliased WinRt.IID := (1120155338, 20983, 20658, (143, 228, 123, 117, 64, 98, 230, 235 )); -- Windows.Services.Store.StorePackageUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (3015576715, 61213, 22236, (133, 71, 77, 160, 110, 165, 99, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind := new AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePackageUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageUpdateResult do
         Hr := this.m_IStoreContext.all.RequestDownloadAndInstallStorePackagesAsync (storeIds, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePackageUpdateResult := new Windows.Services.Store.IStorePackageUpdateResult;
                  Retval.m_IStorePackageUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function FindStoreProductForPackageAsync
   (
      this : in out StoreContext;
      productKinds : GenericObject;
      package_x : Windows.ApplicationModel.Package_x'Class
   )
   return WinRt.Windows.Services.Store.StoreProductResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductResult;
      m_IID            : aliased WinRt.IID := (2657216619, 27387, 20654, (175, 193, 197, 159, 84, 81, 8, 221 )); -- Windows.Services.Store.StoreProductResult;
      m_HandlerIID     : aliased WinRt.IID := (3952339254, 54549, 21524, (157, 21, 240, 80, 192, 184, 245, 33 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductResult.Kind := new AsyncOperationCompletedHandler_StoreProductResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext2, WinRt.Windows.Services.Store.IID_IStoreContext2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.FindStoreProductForPackageAsync (productKinds, package_x.m_IPackage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductResult := new Windows.Services.Store.IStoreProductResult;
                  Retval.m_IStoreProductResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_CanSilentlyDownloadStorePackageUpdates
   (
      this : in out StoreContext
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreContext.all);
      Hr := m_Interface.get_CanSilentlyDownloadStorePackageUpdates (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TrySilentDownloadStorePackageUpdatesAsync
   (
      this : in out StoreContext;
      storePackageUpdates : GenericObject
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePackageUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePackageUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePackageUpdateResult;
      m_IID            : aliased WinRt.IID := (1120155338, 20983, 20658, (143, 228, 123, 117, 64, 98, 230, 235 )); -- Windows.Services.Store.StorePackageUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (3015576715, 61213, 22236, (133, 71, 77, 160, 110, 165, 99, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind := new AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePackageUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageUpdateResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.TrySilentDownloadStorePackageUpdatesAsync (storePackageUpdates, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePackageUpdateResult := new Windows.Services.Store.IStorePackageUpdateResult;
                  Retval.m_IStorePackageUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TrySilentDownloadAndInstallStorePackageUpdatesAsync
   (
      this : in out StoreContext;
      storePackageUpdates : GenericObject
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePackageUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePackageUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePackageUpdateResult;
      m_IID            : aliased WinRt.IID := (1120155338, 20983, 20658, (143, 228, 123, 117, 64, 98, 230, 235 )); -- Windows.Services.Store.StorePackageUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (3015576715, 61213, 22236, (133, 71, 77, 160, 110, 165, 99, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind := new AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePackageUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageUpdateResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.TrySilentDownloadAndInstallStorePackageUpdatesAsync (storePackageUpdates, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePackageUpdateResult := new Windows.Services.Store.IStorePackageUpdateResult;
                  Retval.m_IStorePackageUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CanAcquireStoreLicenseForOptionalPackageAsync
   (
      this : in out StoreContext;
      optionalPackage : Windows.ApplicationModel.Package_x'Class
   )
   return WinRt.Windows.Services.Store.StoreCanAcquireLicenseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreCanAcquireLicenseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreCanAcquireLicenseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreCanAcquireLicenseResult;
      m_IID            : aliased WinRt.IID := (1907269486, 3344, 23515, (180, 65, 147, 18, 227, 210, 239, 194 )); -- Windows.Services.Store.StoreCanAcquireLicenseResult;
      m_HandlerIID     : aliased WinRt.IID := (1462378960, 29008, 20666, (165, 88, 217, 29, 255, 236, 26, 36 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind := new AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreCanAcquireLicenseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreCanAcquireLicenseResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.CanAcquireStoreLicenseForOptionalPackageAsync (optionalPackage.m_IPackage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreCanAcquireLicenseResult := new Windows.Services.Store.IStoreCanAcquireLicenseResult;
                  Retval.m_IStoreCanAcquireLicenseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CanAcquireStoreLicenseAsync
   (
      this : in out StoreContext;
      productStoreId : WinRt.WString
   )
   return WinRt.Windows.Services.Store.StoreCanAcquireLicenseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productStoreId : WinRt.HString := To_HString (productStoreId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreCanAcquireLicenseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreCanAcquireLicenseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreCanAcquireLicenseResult;
      m_IID            : aliased WinRt.IID := (1907269486, 3344, 23515, (180, 65, 147, 18, 227, 210, 239, 194 )); -- Windows.Services.Store.StoreCanAcquireLicenseResult;
      m_HandlerIID     : aliased WinRt.IID := (1462378960, 29008, 20666, (165, 88, 217, 29, 255, 236, 26, 36 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind := new AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreCanAcquireLicenseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreCanAcquireLicenseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreCanAcquireLicenseResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.CanAcquireStoreLicenseAsync (HStr_productStoreId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreCanAcquireLicenseResult := new Windows.Services.Store.IStoreCanAcquireLicenseResult;
                  Retval.m_IStoreCanAcquireLicenseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productStoreId);
      end return;
   end;

   function GetStoreProductsAsync
   (
      this : in out StoreContext;
      productKinds : GenericObject;
      storeIds : GenericObject;
      storeProductOptions_p : Windows.Services.Store.StoreProductOptions'Class
   )
   return WinRt.Windows.Services.Store.StoreProductQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductQueryResult;
      m_IID            : aliased WinRt.IID := (2526668731, 59935, 24067, (148, 57, 200, 14, 105, 119, 183, 17 )); -- Windows.Services.Store.StoreProductQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (49587244, 1112, 22742, (146, 60, 180, 75, 168, 239, 34, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductQueryResult.Kind := new AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductQueryResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.GetStoreProductsAsync (productKinds, storeIds, storeProductOptions_p.m_IStoreProductOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductQueryResult := new Windows.Services.Store.IStoreProductQueryResult;
                  Retval.m_IStoreProductQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAssociatedStoreQueueItemsAsync
   (
      this : in out StoreContext
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (323368829, 19823, 22937, (154, 110, 156, 143, 191, 111, 56, 162 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2003503204, 47421, 22121, (167, 93, 112, 162, 147, 37, 233, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreContext.all);
      Hr := m_Interface.GetAssociatedStoreQueueItemsAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetStoreQueueItemsAsync
   (
      this : in out StoreContext;
      storeIds : GenericObject
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (323368829, 19823, 22937, (154, 110, 156, 143, 191, 111, 56, 162 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2003503204, 47421, 22121, (167, 93, 112, 162, 147, 37, 233, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreContext.all);
      Hr := m_Interface.GetStoreQueueItemsAsync (storeIds, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestDownloadAndInstallStorePackagesAsync
   (
      this : in out StoreContext;
      storeIds : GenericObject;
      storePackageInstallOptions_p : Windows.Services.Store.StorePackageInstallOptions'Class
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePackageUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePackageUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePackageUpdateResult;
      m_IID            : aliased WinRt.IID := (1120155338, 20983, 20658, (143, 228, 123, 117, 64, 98, 230, 235 )); -- Windows.Services.Store.StorePackageUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (3015576715, 61213, 22236, (133, 71, 77, 160, 110, 165, 99, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind := new AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePackageUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageUpdateResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.RequestDownloadAndInstallStorePackagesAsync (storeIds, storePackageInstallOptions_p.m_IStorePackageInstallOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePackageUpdateResult := new Windows.Services.Store.IStorePackageUpdateResult;
                  Retval.m_IStorePackageUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function DownloadAndInstallStorePackagesAsync
   (
      this : in out StoreContext;
      storeIds : GenericObject
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePackageUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePackageUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePackageUpdateResult;
      m_IID            : aliased WinRt.IID := (1120155338, 20983, 20658, (143, 228, 123, 117, 64, 98, 230, 235 )); -- Windows.Services.Store.StorePackageUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (3015576715, 61213, 22236, (133, 71, 77, 160, 110, 165, 99, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind := new AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePackageUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePackageUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePackageUpdateResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.DownloadAndInstallStorePackagesAsync (storeIds, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePackageUpdateResult := new Windows.Services.Store.IStorePackageUpdateResult;
                  Retval.m_IStorePackageUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestUninstallStorePackageAsync
   (
      this : in out StoreContext;
      package_x : Windows.ApplicationModel.Package_x'Class
   )
   return WinRt.Windows.Services.Store.StoreUninstallStorePackageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreUninstallStorePackageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreUninstallStorePackageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreUninstallStorePackageResult;
      m_IID            : aliased WinRt.IID := (1437238013, 52821, 21770, (149, 236, 5, 84, 177, 145, 82, 8 )); -- Windows.Services.Store.StoreUninstallStorePackageResult;
      m_HandlerIID     : aliased WinRt.IID := (3302924214, 8153, 21033, (136, 24, 186, 101, 117, 29, 176, 70 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind := new AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreUninstallStorePackageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreUninstallStorePackageResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.RequestUninstallStorePackageAsync (package_x.m_IPackage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreUninstallStorePackageResult := new Windows.Services.Store.IStoreUninstallStorePackageResult;
                  Retval.m_IStoreUninstallStorePackageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestUninstallStorePackageByStoreIdAsync
   (
      this : in out StoreContext;
      storeId : WinRt.WString
   )
   return WinRt.Windows.Services.Store.StoreUninstallStorePackageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeId : WinRt.HString := To_HString (storeId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreUninstallStorePackageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreUninstallStorePackageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreUninstallStorePackageResult;
      m_IID            : aliased WinRt.IID := (1437238013, 52821, 21770, (149, 236, 5, 84, 177, 145, 82, 8 )); -- Windows.Services.Store.StoreUninstallStorePackageResult;
      m_HandlerIID     : aliased WinRt.IID := (3302924214, 8153, 21033, (136, 24, 186, 101, 117, 29, 176, 70 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind := new AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreUninstallStorePackageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreUninstallStorePackageResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.RequestUninstallStorePackageByStoreIdAsync (HStr_storeId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreUninstallStorePackageResult := new Windows.Services.Store.IStoreUninstallStorePackageResult;
                  Retval.m_IStoreUninstallStorePackageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storeId);
      end return;
   end;

   function UninstallStorePackageAsync
   (
      this : in out StoreContext;
      package_x : Windows.ApplicationModel.Package_x'Class
   )
   return WinRt.Windows.Services.Store.StoreUninstallStorePackageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreUninstallStorePackageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreUninstallStorePackageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreUninstallStorePackageResult;
      m_IID            : aliased WinRt.IID := (1437238013, 52821, 21770, (149, 236, 5, 84, 177, 145, 82, 8 )); -- Windows.Services.Store.StoreUninstallStorePackageResult;
      m_HandlerIID     : aliased WinRt.IID := (3302924214, 8153, 21033, (136, 24, 186, 101, 117, 29, 176, 70 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind := new AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreUninstallStorePackageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreUninstallStorePackageResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.UninstallStorePackageAsync (package_x.m_IPackage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreUninstallStorePackageResult := new Windows.Services.Store.IStoreUninstallStorePackageResult;
                  Retval.m_IStoreUninstallStorePackageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function UninstallStorePackageByStoreIdAsync
   (
      this : in out StoreContext;
      storeId : WinRt.WString
   )
   return WinRt.Windows.Services.Store.StoreUninstallStorePackageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeId : WinRt.HString := To_HString (storeId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreUninstallStorePackageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreUninstallStorePackageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreUninstallStorePackageResult;
      m_IID            : aliased WinRt.IID := (1437238013, 52821, 21770, (149, 236, 5, 84, 177, 145, 82, 8 )); -- Windows.Services.Store.StoreUninstallStorePackageResult;
      m_HandlerIID     : aliased WinRt.IID := (3302924214, 8153, 21033, (136, 24, 186, 101, 117, 29, 176, 70 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind := new AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreUninstallStorePackageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreUninstallStorePackageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext3, WinRt.Windows.Services.Store.IID_IStoreContext3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreUninstallStorePackageResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.UninstallStorePackageByStoreIdAsync (HStr_storeId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreUninstallStorePackageResult := new Windows.Services.Store.IStoreUninstallStorePackageResult;
                  Retval.m_IStoreUninstallStorePackageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storeId);
      end return;
   end;

   function RequestRateAndReviewAppAsync
   (
      this : in out StoreContext
   )
   return WinRt.Windows.Services.Store.StoreRateAndReviewResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreRateAndReviewResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreRateAndReviewResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreRateAndReviewResult;
      m_IID            : aliased WinRt.IID := (2219209708, 13314, 23072, (190, 207, 233, 44, 63, 150, 129, 234 )); -- Windows.Services.Store.StoreRateAndReviewResult;
      m_HandlerIID     : aliased WinRt.IID := (3994211737, 40381, 24134, (164, 111, 2, 35, 184, 73, 39, 97 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreRateAndReviewResult.Kind := new AsyncOperationCompletedHandler_StoreRateAndReviewResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreRateAndReviewResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreRateAndReviewResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreRateAndReviewResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreRateAndReviewResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext4, WinRt.Windows.Services.Store.IID_IStoreContext4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreRateAndReviewResult do
         m_Interface := QInterface (this.m_IStoreContext.all);
         Hr := m_Interface.RequestRateAndReviewAppAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreRateAndReviewResult := new Windows.Services.Store.IStoreRateAndReviewResult;
                  Retval.m_IStoreRateAndReviewResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SetInstallOrderForAssociatedStoreQueueItemsAsync
   (
      this : in out StoreContext;
      items : GenericObject
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreContext4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (323368829, 19823, 22937, (154, 110, 156, 143, 191, 111, 56, 162 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2003503204, 47421, 22121, (167, 93, 112, 162, 147, 37, 233, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreContext_Interface, WinRt.Windows.Services.Store.IStoreContext4, WinRt.Windows.Services.Store.IID_IStoreContext4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreContext.all);
      Hr := m_Interface.SetInstallOrderForAssociatedStoreQueueItemsAsync (items, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreImage

   procedure Initialize (this : in out StoreImage) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreImage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreImage, IStoreImage_Ptr);
   begin
      if this.m_IStoreImage /= null then
         if this.m_IStoreImage.all /= null then
            RefCount := this.m_IStoreImage.all.Release;
            Free (this.m_IStoreImage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreImage

   function get_Uri
   (
      this : in out StoreImage
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IStoreImage.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ImagePurposeTag
   (
      this : in out StoreImage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreImage.all.get_ImagePurposeTag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Width
   (
      this : in out StoreImage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStoreImage.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out StoreImage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStoreImage.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Caption
   (
      this : in out StoreImage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreImage.all.get_Caption (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreLicense

   procedure Initialize (this : in out StoreLicense) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreLicense) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreLicense, IStoreLicense_Ptr);
   begin
      if this.m_IStoreLicense /= null then
         if this.m_IStoreLicense.all /= null then
            RefCount := this.m_IStoreLicense.all.Release;
            Free (this.m_IStoreLicense);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreLicense

   function get_SkuStoreId
   (
      this : in out StoreLicense
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreLicense.all.get_SkuStoreId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsActive
   (
      this : in out StoreLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreLicense.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpirationDate
   (
      this : in out StoreLicense
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IStoreLicense.all.get_ExpirationDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedJsonData
   (
      this : in out StoreLicense
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreLicense.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InAppOfferToken
   (
      this : in out StoreLicense
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreLicense.all.get_InAppOfferToken (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePackageInstallOptions

   procedure Initialize (this : in out StorePackageInstallOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePackageInstallOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePackageInstallOptions, IStorePackageInstallOptions_Ptr);
   begin
      if this.m_IStorePackageInstallOptions /= null then
         if this.m_IStorePackageInstallOptions.all /= null then
            RefCount := this.m_IStorePackageInstallOptions.all.Release;
            Free (this.m_IStorePackageInstallOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorePackageInstallOptions

   function Constructor return StorePackageInstallOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Services.Store.StorePackageInstallOptions");
      m_ComRetVal  : aliased Windows.Services.Store.IStorePackageInstallOptions;
   begin
      return RetVal : StorePackageInstallOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStorePackageInstallOptions := new Windows.Services.Store.IStorePackageInstallOptions;
            Retval.m_IStorePackageInstallOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePackageInstallOptions

   function get_AllowForcedAppRestart
   (
      this : in out StorePackageInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStorePackageInstallOptions.all.get_AllowForcedAppRestart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowForcedAppRestart
   (
      this : in out StorePackageInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorePackageInstallOptions.all.put_AllowForcedAppRestart (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePackageLicense

   procedure Initialize (this : in out StorePackageLicense) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePackageLicense) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePackageLicense, IStorePackageLicense_Ptr);
   begin
      if this.m_IStorePackageLicense /= null then
         if this.m_IStorePackageLicense.all /= null then
            RefCount := this.m_IStorePackageLicense.all.Release;
            Free (this.m_IStorePackageLicense);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePackageLicense

   function add_LicenseLost
   (
      this : in out StorePackageLicense;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStorePackageLicense.all.add_LicenseLost (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LicenseLost
   (
      this : in out StorePackageLicense;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorePackageLicense.all.remove_LicenseLost (token);
   end;

   function get_Package
   (
      this : in out StorePackageLicense
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IStorePackageLicense.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_IsValid
   (
      this : in out StorePackageLicense
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStorePackageLicense.all.get_IsValid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReleaseLicense
   (
      this : in out StorePackageLicense
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorePackageLicense.all.ReleaseLicense;
   end;

   procedure Close
   (
      this : in out StorePackageLicense
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStorePackageLicense_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorePackageLicense.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePackageUpdate

   procedure Initialize (this : in out StorePackageUpdate) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePackageUpdate) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePackageUpdate, IStorePackageUpdate_Ptr);
   begin
      if this.m_IStorePackageUpdate /= null then
         if this.m_IStorePackageUpdate.all /= null then
            RefCount := this.m_IStorePackageUpdate.all.Release;
            Free (this.m_IStorePackageUpdate);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePackageUpdate

   function get_Package
   (
      this : in out StorePackageUpdate
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IStorePackageUpdate.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Mandatory
   (
      this : in out StorePackageUpdate
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStorePackageUpdate.all.get_Mandatory (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePackageUpdateResult

   procedure Initialize (this : in out StorePackageUpdateResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePackageUpdateResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePackageUpdateResult, IStorePackageUpdateResult_Ptr);
   begin
      if this.m_IStorePackageUpdateResult /= null then
         if this.m_IStorePackageUpdateResult.all /= null then
            RefCount := this.m_IStorePackageUpdateResult.all.Release;
            Free (this.m_IStorePackageUpdateResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePackageUpdateResult

   function get_OverallState
   (
      this : in out StorePackageUpdateResult
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StorePackageUpdateState;
   begin
      Hr := this.m_IStorePackageUpdateResult.all.get_OverallState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StorePackageUpdateStatuses
   (
      this : in out StorePackageUpdateResult
   )
   return IVectorView_StorePackageUpdateStatus.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_StorePackageUpdateStatus.Kind;
   begin
      Hr := this.m_IStorePackageUpdateResult.all.get_StorePackageUpdateStatuses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_StorePackageUpdateStatus (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_StoreQueueItems
   (
      this : in out StorePackageUpdateResult
   )
   return IVectorView_IStoreQueueItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStorePackageUpdateResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStoreQueueItem.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStorePackageUpdateResult_Interface, WinRt.Windows.Services.Store.IStorePackageUpdateResult2, WinRt.Windows.Services.Store.IID_IStorePackageUpdateResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorePackageUpdateResult.all);
      Hr := m_Interface.get_StoreQueueItems (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IStoreQueueItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePrice

   procedure Initialize (this : in out StorePrice) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePrice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePrice, IStorePrice_Ptr);
   begin
      if this.m_IStorePrice /= null then
         if this.m_IStorePrice.all /= null then
            RefCount := this.m_IStorePrice.all.Release;
            Free (this.m_IStorePrice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePrice

   function get_FormattedBasePrice
   (
      this : in out StorePrice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePrice.all.get_FormattedBasePrice (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FormattedPrice
   (
      this : in out StorePrice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePrice.all.get_FormattedPrice (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsOnSale
   (
      this : in out StorePrice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStorePrice.all.get_IsOnSale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SaleEndDate
   (
      this : in out StorePrice
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IStorePrice.all.get_SaleEndDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurrencyCode
   (
      this : in out StorePrice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePrice.all.get_CurrencyCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FormattedRecurrencePrice
   (
      this : in out StorePrice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePrice.all.get_FormattedRecurrencePrice (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreProduct

   procedure Initialize (this : in out StoreProduct) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreProduct) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreProduct, IStoreProduct_Ptr);
   begin
      if this.m_IStoreProduct /= null then
         if this.m_IStoreProduct.all /= null then
            RefCount := this.m_IStoreProduct.all.Release;
            Free (this.m_IStoreProduct);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreProduct

   function get_StoreId
   (
      this : in out StoreProduct
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreProduct.all.get_StoreId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out StoreProduct
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreProduct.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Title
   (
      this : in out StoreProduct
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreProduct.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out StoreProduct
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreProduct.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProductKind
   (
      this : in out StoreProduct
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreProduct.all.get_ProductKind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HasDigitalDownload
   (
      this : in out StoreProduct
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreProduct.all.get_HasDigitalDownload (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Keywords
   (
      this : in out StoreProduct
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IStoreProduct.all.get_Keywords (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Images
   (
      this : in out StoreProduct
   )
   return IVectorView_IStoreImage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStoreImage.Kind;
   begin
      Hr := this.m_IStoreProduct.all.get_Images (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IStoreImage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Videos
   (
      this : in out StoreProduct
   )
   return IVectorView_IStoreVideo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStoreVideo.Kind;
   begin
      Hr := this.m_IStoreProduct.all.get_Videos (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IStoreVideo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Skus
   (
      this : in out StoreProduct
   )
   return IVectorView_IStoreSku.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStoreSku.Kind;
   begin
      Hr := this.m_IStoreProduct.all.get_Skus (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IStoreSku (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsInUserCollection
   (
      this : in out StoreProduct
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreProduct.all.get_IsInUserCollection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Price
   (
      this : in out StoreProduct
   )
   return WinRt.Windows.Services.Store.StorePrice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStorePrice;
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePrice do
         Hr := this.m_IStoreProduct.all.get_Price (m_ComRetVal'Access);
         Retval.m_IStorePrice := new Windows.Services.Store.IStorePrice;
         Retval.m_IStorePrice.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedJsonData
   (
      this : in out StoreProduct
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreProduct.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LinkUri
   (
      this : in out StoreProduct
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IStoreProduct.all.get_LinkUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function GetIsAnySkuInstalledAsync
   (
      this : in out StoreProduct
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStoreProduct.all.GetIsAnySkuInstalledAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreProduct
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreProduct.all.RequestPurchaseAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreProduct;
      storePurchaseProperties_p : Windows.Services.Store.StorePurchaseProperties'Class
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreProduct.all.RequestPurchaseAsync (storePurchaseProperties_p.m_IStorePurchaseProperties.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_InAppOfferToken
   (
      this : in out StoreProduct
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreProduct.all.get_InAppOfferToken (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreProductOptions

   procedure Initialize (this : in out StoreProductOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreProductOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreProductOptions, IStoreProductOptions_Ptr);
   begin
      if this.m_IStoreProductOptions /= null then
         if this.m_IStoreProductOptions.all /= null then
            RefCount := this.m_IStoreProductOptions.all.Release;
            Free (this.m_IStoreProductOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StoreProductOptions

   function Constructor return StoreProductOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Services.Store.StoreProductOptions");
      m_ComRetVal  : aliased Windows.Services.Store.IStoreProductOptions;
   begin
      return RetVal : StoreProductOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStoreProductOptions := new Windows.Services.Store.IStoreProductOptions;
            Retval.m_IStoreProductOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreProductOptions

   function get_ActionFilters
   (
      this : in out StoreProductOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IStoreProductOptions.all.get_ActionFilters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreProductPagedQueryResult

   procedure Initialize (this : in out StoreProductPagedQueryResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreProductPagedQueryResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreProductPagedQueryResult, IStoreProductPagedQueryResult_Ptr);
   begin
      if this.m_IStoreProductPagedQueryResult /= null then
         if this.m_IStoreProductPagedQueryResult.all /= null then
            RefCount := this.m_IStoreProductPagedQueryResult.all.Release;
            Free (this.m_IStoreProductPagedQueryResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreProductPagedQueryResult

   function get_Products
   (
      this : in out StoreProductPagedQueryResult
   )
   return IMapView_HString_IStoreProduct.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IStoreProduct.Kind;
   begin
      Hr := this.m_IStoreProductPagedQueryResult.all.get_Products (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IStoreProduct (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_HasMoreResults
   (
      this : in out StoreProductPagedQueryResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreProductPagedQueryResult.all.get_HasMoreResults (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out StoreProductPagedQueryResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreProductPagedQueryResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetNextAsync
   (
      this : in out StoreProductPagedQueryResult
   )
   return WinRt.Windows.Services.Store.StoreProductPagedQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StoreProductPagedQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StoreProductPagedQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreProductPagedQueryResult;
      m_IID            : aliased WinRt.IID := (813295579, 7076, 23454, (133, 106, 101, 118, 191, 127, 156, 138 )); -- Windows.Services.Store.StoreProductPagedQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (3884331551, 46993, 24120, (139, 196, 152, 203, 40, 125, 16, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind := new AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreProductPagedQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreProductPagedQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProductPagedQueryResult do
         Hr := this.m_IStoreProductPagedQueryResult.all.GetNextAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStoreProductPagedQueryResult := new Windows.Services.Store.IStoreProductPagedQueryResult;
                  Retval.m_IStoreProductPagedQueryResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreProductQueryResult

   procedure Initialize (this : in out StoreProductQueryResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreProductQueryResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreProductQueryResult, IStoreProductQueryResult_Ptr);
   begin
      if this.m_IStoreProductQueryResult /= null then
         if this.m_IStoreProductQueryResult.all /= null then
            RefCount := this.m_IStoreProductQueryResult.all.Release;
            Free (this.m_IStoreProductQueryResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreProductQueryResult

   function get_Products
   (
      this : in out StoreProductQueryResult
   )
   return IMapView_HString_IStoreProduct.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IStoreProduct.Kind;
   begin
      Hr := this.m_IStoreProductQueryResult.all.get_Products (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IStoreProduct (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExtendedError
   (
      this : in out StoreProductQueryResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreProductQueryResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreProductResult

   procedure Initialize (this : in out StoreProductResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreProductResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreProductResult, IStoreProductResult_Ptr);
   begin
      if this.m_IStoreProductResult /= null then
         if this.m_IStoreProductResult.all /= null then
            RefCount := this.m_IStoreProductResult.all.Release;
            Free (this.m_IStoreProductResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreProductResult

   function get_Product
   (
      this : in out StoreProductResult
   )
   return WinRt.Windows.Services.Store.StoreProduct'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreProduct;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreProduct do
         Hr := this.m_IStoreProductResult.all.get_Product (m_ComRetVal'Access);
         Retval.m_IStoreProduct := new Windows.Services.Store.IStoreProduct;
         Retval.m_IStoreProduct.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out StoreProductResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreProductResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePurchaseProperties

   procedure Initialize (this : in out StorePurchaseProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePurchaseProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePurchaseProperties, IStorePurchaseProperties_Ptr);
   begin
      if this.m_IStorePurchaseProperties /= null then
         if this.m_IStorePurchaseProperties.all /= null then
            RefCount := this.m_IStorePurchaseProperties.all.Release;
            Free (this.m_IStorePurchaseProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorePurchaseProperties

   function Constructor return StorePurchaseProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Services.Store.StorePurchaseProperties");
      m_ComRetVal  : aliased Windows.Services.Store.IStorePurchaseProperties;
   begin
      return RetVal : StorePurchaseProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStorePurchaseProperties := new Windows.Services.Store.IStorePurchaseProperties;
            Retval.m_IStorePurchaseProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString
   )
   return StorePurchaseProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Services.Store.StorePurchaseProperties");
      m_Factory    : access IStorePurchasePropertiesFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Services.Store.IStorePurchaseProperties;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : StorePurchaseProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IStorePurchasePropertiesFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_name, m_ComRetVal'Access);
            Retval.m_IStorePurchaseProperties := new Windows.Services.Store.IStorePurchaseProperties;
            Retval.m_IStorePurchaseProperties.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePurchaseProperties

   function get_Name
   (
      this : in out StorePurchaseProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePurchaseProperties.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out StorePurchaseProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorePurchaseProperties.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ExtendedJsonData
   (
      this : in out StorePurchaseProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorePurchaseProperties.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ExtendedJsonData
   (
      this : in out StorePurchaseProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorePurchaseProperties.all.put_ExtendedJsonData (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorePurchaseResult

   procedure Initialize (this : in out StorePurchaseResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorePurchaseResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorePurchaseResult, IStorePurchaseResult_Ptr);
   begin
      if this.m_IStorePurchaseResult /= null then
         if this.m_IStorePurchaseResult.all /= null then
            RefCount := this.m_IStorePurchaseResult.all.Release;
            Free (this.m_IStorePurchaseResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorePurchaseResult

   function get_Status
   (
      this : in out StorePurchaseResult
   )
   return WinRt.Windows.Services.Store.StorePurchaseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StorePurchaseStatus;
   begin
      Hr := this.m_IStorePurchaseResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out StorePurchaseResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStorePurchaseResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreQueueItem

   procedure Initialize (this : in out StoreQueueItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreQueueItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreQueueItem, IStoreQueueItem_Ptr);
   begin
      if this.m_IStoreQueueItem /= null then
         if this.m_IStoreQueueItem.all /= null then
            RefCount := this.m_IStoreQueueItem.all.Release;
            Free (this.m_IStoreQueueItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreQueueItem

   function get_ProductId
   (
      this : in out StoreQueueItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreQueueItem.all.get_ProductId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PackageFamilyName
   (
      this : in out StoreQueueItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreQueueItem.all.get_PackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InstallKind
   (
      this : in out StoreQueueItem
   )
   return WinRt.Windows.Services.Store.StoreQueueItemKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreQueueItemKind;
   begin
      Hr := this.m_IStoreQueueItem.all.get_InstallKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetCurrentStatus
   (
      this : in out StoreQueueItem
   )
   return WinRt.Windows.Services.Store.StoreQueueItemStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreQueueItemStatus;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreQueueItemStatus do
         Hr := this.m_IStoreQueueItem.all.GetCurrentStatus (m_ComRetVal'Access);
         Retval.m_IStoreQueueItemStatus := new Windows.Services.Store.IStoreQueueItemStatus;
         Retval.m_IStoreQueueItemStatus.all := m_ComRetVal;
      end return;
   end;

   function add_Completed
   (
      this : in out StoreQueueItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStoreQueueItem.all.add_Completed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out StoreQueueItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStoreQueueItem.all.remove_Completed (token);
   end;

   function add_StatusChanged
   (
      this : in out StoreQueueItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStoreQueueItem.all.add_StatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusChanged
   (
      this : in out StoreQueueItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStoreQueueItem.all.remove_StatusChanged (token);
   end;

   procedure CancelInstallAsync
   (
      this : in out StoreQueueItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreQueueItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreQueueItem_Interface, WinRt.Windows.Services.Store.IStoreQueueItem2, WinRt.Windows.Services.Store.IID_IStoreQueueItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreQueueItem.all);
      Hr := m_Interface.CancelInstallAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure PauseInstallAsync
   (
      this : in out StoreQueueItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreQueueItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreQueueItem_Interface, WinRt.Windows.Services.Store.IStoreQueueItem2, WinRt.Windows.Services.Store.IID_IStoreQueueItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreQueueItem.all);
      Hr := m_Interface.PauseInstallAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ResumeInstallAsync
   (
      this : in out StoreQueueItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreQueueItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreQueueItem_Interface, WinRt.Windows.Services.Store.IStoreQueueItem2, WinRt.Windows.Services.Store.IID_IStoreQueueItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreQueueItem.all);
      Hr := m_Interface.ResumeInstallAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreQueueItemCompletedEventArgs

   procedure Initialize (this : in out StoreQueueItemCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreQueueItemCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreQueueItemCompletedEventArgs, IStoreQueueItemCompletedEventArgs_Ptr);
   begin
      if this.m_IStoreQueueItemCompletedEventArgs /= null then
         if this.m_IStoreQueueItemCompletedEventArgs.all /= null then
            RefCount := this.m_IStoreQueueItemCompletedEventArgs.all.Release;
            Free (this.m_IStoreQueueItemCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreQueueItemCompletedEventArgs

   function get_Status
   (
      this : in out StoreQueueItemCompletedEventArgs
   )
   return WinRt.Windows.Services.Store.StoreQueueItemStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreQueueItemStatus;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreQueueItemStatus do
         Hr := this.m_IStoreQueueItemCompletedEventArgs.all.get_Status (m_ComRetVal'Access);
         Retval.m_IStoreQueueItemStatus := new Windows.Services.Store.IStoreQueueItemStatus;
         Retval.m_IStoreQueueItemStatus.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreQueueItemStatus

   procedure Initialize (this : in out StoreQueueItemStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreQueueItemStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreQueueItemStatus, IStoreQueueItemStatus_Ptr);
   begin
      if this.m_IStoreQueueItemStatus /= null then
         if this.m_IStoreQueueItemStatus.all /= null then
            RefCount := this.m_IStoreQueueItemStatus.all.Release;
            Free (this.m_IStoreQueueItemStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreQueueItemStatus

   function get_PackageInstallState
   (
      this : in out StoreQueueItemStatus
   )
   return WinRt.Windows.Services.Store.StoreQueueItemState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreQueueItemState;
   begin
      Hr := this.m_IStoreQueueItemStatus.all.get_PackageInstallState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PackageInstallExtendedState
   (
      this : in out StoreQueueItemStatus
   )
   return WinRt.Windows.Services.Store.StoreQueueItemExtendedState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreQueueItemExtendedState;
   begin
      Hr := this.m_IStoreQueueItemStatus.all.get_PackageInstallExtendedState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateStatus
   (
      this : in out StoreQueueItemStatus
   )
   return WinRt.Windows.Services.Store.StorePackageUpdateStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StorePackageUpdateStatus;
   begin
      Hr := this.m_IStoreQueueItemStatus.all.get_UpdateStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out StoreQueueItemStatus
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreQueueItemStatus.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreRateAndReviewResult

   procedure Initialize (this : in out StoreRateAndReviewResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreRateAndReviewResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreRateAndReviewResult, IStoreRateAndReviewResult_Ptr);
   begin
      if this.m_IStoreRateAndReviewResult /= null then
         if this.m_IStoreRateAndReviewResult.all /= null then
            RefCount := this.m_IStoreRateAndReviewResult.all.Release;
            Free (this.m_IStoreRateAndReviewResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreRateAndReviewResult

   function get_ExtendedError
   (
      this : in out StoreRateAndReviewResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreRateAndReviewResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedJsonData
   (
      this : in out StoreRateAndReviewResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreRateAndReviewResult.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WasUpdated
   (
      this : in out StoreRateAndReviewResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreRateAndReviewResult.all.get_WasUpdated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out StoreRateAndReviewResult
   )
   return WinRt.Windows.Services.Store.StoreRateAndReviewStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreRateAndReviewStatus;
   begin
      Hr := this.m_IStoreRateAndReviewResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StoreRequestHelper is

      function SendRequestAsync
      (
         context : Windows.Services.Store.StoreContext'Class;
         requestKind : WinRt.UInt32;
         parametersAsJson : WinRt.WString
      )
      return WinRt.Windows.Services.Store.StoreSendRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Services.Store.StoreRequestHelper");
         m_Factory        : access WinRt.Windows.Services.Store.IStoreRequestHelperStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_parametersAsJson : WinRt.HString := To_HString (parametersAsJson);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_StoreSendRequestResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_StoreSendRequestResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Services.Store.IStoreSendRequestResult;
         m_IID            : aliased WinRt.IID := (718143464, 9628, 24238, (147, 193, 19, 162, 60, 116, 223, 238 )); -- Windows.Services.Store.StoreSendRequestResult;
         m_HandlerIID     : aliased WinRt.IID := (2013311651, 48060, 23057, (140, 53, 210, 189, 229, 72, 158, 129 ));
         m_Handler        : AsyncOperationCompletedHandler_StoreSendRequestResult.Kind := new AsyncOperationCompletedHandler_StoreSendRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StoreSendRequestResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StoreSendRequestResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StoreSendRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_StoreSendRequestResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Services.Store.StoreSendRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_IStoreRequestHelperStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.SendRequestAsync (context.m_IStoreContext.all, requestKind, HStr_parametersAsJson, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IStoreSendRequestResult := new Windows.Services.Store.IStoreSendRequestResult;
                        Retval.m_IStoreSendRequestResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_parametersAsJson);
         end return;
      end;

   end StoreRequestHelper;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreSendRequestResult

   procedure Initialize (this : in out StoreSendRequestResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreSendRequestResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreSendRequestResult, IStoreSendRequestResult_Ptr);
   begin
      if this.m_IStoreSendRequestResult /= null then
         if this.m_IStoreSendRequestResult.all /= null then
            RefCount := this.m_IStoreSendRequestResult.all.Release;
            Free (this.m_IStoreSendRequestResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreSendRequestResult

   function get_Response
   (
      this : in out StoreSendRequestResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreSendRequestResult.all.get_Response (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ExtendedError
   (
      this : in out StoreSendRequestResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreSendRequestResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HttpStatusCode
   (
      this : in out StoreSendRequestResult
   )
   return WinRt.Windows.Web.Http.HttpStatusCode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Services.Store.IStoreSendRequestResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.HttpStatusCode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.Store.IStoreSendRequestResult_Interface, WinRt.Windows.Services.Store.IStoreSendRequestResult2, WinRt.Windows.Services.Store.IID_IStoreSendRequestResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStoreSendRequestResult.all);
      Hr := m_Interface.get_HttpStatusCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreSku

   procedure Initialize (this : in out StoreSku) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreSku) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreSku, IStoreSku_Ptr);
   begin
      if this.m_IStoreSku /= null then
         if this.m_IStoreSku.all /= null then
            RefCount := this.m_IStoreSku.all.Release;
            Free (this.m_IStoreSku);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreSku

   function get_StoreId
   (
      this : in out StoreSku
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreSku.all.get_StoreId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out StoreSku
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreSku.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Title
   (
      this : in out StoreSku
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreSku.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out StoreSku
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreSku.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsTrial
   (
      this : in out StoreSku
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreSku.all.get_IsTrial (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CustomDeveloperData
   (
      this : in out StoreSku
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreSku.all.get_CustomDeveloperData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Images
   (
      this : in out StoreSku
   )
   return IVectorView_IStoreImage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStoreImage.Kind;
   begin
      Hr := this.m_IStoreSku.all.get_Images (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IStoreImage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Videos
   (
      this : in out StoreSku
   )
   return IVectorView_IStoreVideo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStoreVideo.Kind;
   begin
      Hr := this.m_IStoreSku.all.get_Videos (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IStoreVideo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Availabilities
   (
      this : in out StoreSku
   )
   return IVectorView_IStoreAvailability.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IStoreAvailability.Kind;
   begin
      Hr := this.m_IStoreSku.all.get_Availabilities (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IStoreAvailability (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Price
   (
      this : in out StoreSku
   )
   return WinRt.Windows.Services.Store.StorePrice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStorePrice;
   begin
      return RetVal : WinRt.Windows.Services.Store.StorePrice do
         Hr := this.m_IStoreSku.all.get_Price (m_ComRetVal'Access);
         Retval.m_IStorePrice := new Windows.Services.Store.IStorePrice;
         Retval.m_IStorePrice.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedJsonData
   (
      this : in out StoreSku
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreSku.all.get_ExtendedJsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsInUserCollection
   (
      this : in out StoreSku
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreSku.all.get_IsInUserCollection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BundledSkus
   (
      this : in out StoreSku
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IStoreSku.all.get_BundledSkus (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CollectionData
   (
      this : in out StoreSku
   )
   return WinRt.Windows.Services.Store.StoreCollectionData'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreCollectionData;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreCollectionData do
         Hr := this.m_IStoreSku.all.get_CollectionData (m_ComRetVal'Access);
         Retval.m_IStoreCollectionData := new Windows.Services.Store.IStoreCollectionData;
         Retval.m_IStoreCollectionData.all := m_ComRetVal;
      end return;
   end;

   function GetIsInstalledAsync
   (
      this : in out StoreSku
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStoreSku.all.GetIsInstalledAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreSku
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreSku.all.RequestPurchaseAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestPurchaseAsync
   (
      this : in out StoreSku;
      storePurchaseProperties_p : Windows.Services.Store.StorePurchaseProperties'Class
   )
   return WinRt.Windows.Services.Store.StorePurchaseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorePurchaseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorePurchaseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Store.IStorePurchaseResult;
      m_IID            : aliased WinRt.IID := (869846064, 30965, 24449, (170, 45, 164, 250, 42, 59, 28, 104 )); -- Windows.Services.Store.StorePurchaseResult;
      m_HandlerIID     : aliased WinRt.IID := (496994798, 12238, 21734, (160, 169, 82, 208, 12, 82, 204, 58 ));
      m_Handler        : AsyncOperationCompletedHandler_StorePurchaseResult.Kind := new AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorePurchaseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorePurchaseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorePurchaseResult.Kind_Delegate, AsyncOperationCompletedHandler_StorePurchaseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Store.StorePurchaseResult do
         Hr := this.m_IStoreSku.all.RequestPurchaseAsync (storePurchaseProperties_p.m_IStorePurchaseProperties.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorePurchaseResult := new Windows.Services.Store.IStorePurchaseResult;
                  Retval.m_IStorePurchaseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_IsSubscription
   (
      this : in out StoreSku
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreSku.all.get_IsSubscription (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SubscriptionInfo
   (
      this : in out StoreSku
   )
   return WinRt.Windows.Services.Store.StoreSubscriptionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreSubscriptionInfo;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreSubscriptionInfo do
         Hr := this.m_IStoreSku.all.get_SubscriptionInfo (m_ComRetVal'Access);
         Retval.m_IStoreSubscriptionInfo := new Windows.Services.Store.IStoreSubscriptionInfo;
         Retval.m_IStoreSubscriptionInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreSubscriptionInfo

   procedure Initialize (this : in out StoreSubscriptionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreSubscriptionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreSubscriptionInfo, IStoreSubscriptionInfo_Ptr);
   begin
      if this.m_IStoreSubscriptionInfo /= null then
         if this.m_IStoreSubscriptionInfo.all /= null then
            RefCount := this.m_IStoreSubscriptionInfo.all.Release;
            Free (this.m_IStoreSubscriptionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreSubscriptionInfo

   function get_BillingPeriod
   (
      this : in out StoreSubscriptionInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStoreSubscriptionInfo.all.get_BillingPeriod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BillingPeriodUnit
   (
      this : in out StoreSubscriptionInfo
   )
   return WinRt.Windows.Services.Store.StoreDurationUnit is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreDurationUnit;
   begin
      Hr := this.m_IStoreSubscriptionInfo.all.get_BillingPeriodUnit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasTrialPeriod
   (
      this : in out StoreSubscriptionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStoreSubscriptionInfo.all.get_HasTrialPeriod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrialPeriod
   (
      this : in out StoreSubscriptionInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStoreSubscriptionInfo.all.get_TrialPeriod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrialPeriodUnit
   (
      this : in out StoreSubscriptionInfo
   )
   return WinRt.Windows.Services.Store.StoreDurationUnit is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreDurationUnit;
   begin
      Hr := this.m_IStoreSubscriptionInfo.all.get_TrialPeriodUnit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreUninstallStorePackageResult

   procedure Initialize (this : in out StoreUninstallStorePackageResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreUninstallStorePackageResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreUninstallStorePackageResult, IStoreUninstallStorePackageResult_Ptr);
   begin
      if this.m_IStoreUninstallStorePackageResult /= null then
         if this.m_IStoreUninstallStorePackageResult.all /= null then
            RefCount := this.m_IStoreUninstallStorePackageResult.all.Release;
            Free (this.m_IStoreUninstallStorePackageResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreUninstallStorePackageResult

   function get_ExtendedError
   (
      this : in out StoreUninstallStorePackageResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IStoreUninstallStorePackageResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out StoreUninstallStorePackageResult
   )
   return WinRt.Windows.Services.Store.StoreUninstallStorePackageStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.StoreUninstallStorePackageStatus;
   begin
      Hr := this.m_IStoreUninstallStorePackageResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StoreVideo

   procedure Initialize (this : in out StoreVideo) is
   begin
      null;
   end;

   procedure Finalize (this : in out StoreVideo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStoreVideo, IStoreVideo_Ptr);
   begin
      if this.m_IStoreVideo /= null then
         if this.m_IStoreVideo.all /= null then
            RefCount := this.m_IStoreVideo.all.Release;
            Free (this.m_IStoreVideo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StoreVideo

   function get_Uri
   (
      this : in out StoreVideo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IStoreVideo.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_VideoPurposeTag
   (
      this : in out StoreVideo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreVideo.all.get_VideoPurposeTag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Width
   (
      this : in out StoreVideo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStoreVideo.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out StoreVideo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStoreVideo.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Caption
   (
      this : in out StoreVideo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStoreVideo.all.get_Caption (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PreviewImage
   (
      this : in out StoreVideo
   )
   return WinRt.Windows.Services.Store.StoreImage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Store.IStoreImage;
   begin
      return RetVal : WinRt.Windows.Services.Store.StoreImage do
         Hr := this.m_IStoreVideo.all.get_PreviewImage (m_ComRetVal'Access);
         Retval.m_IStoreImage := new Windows.Services.Store.IStoreImage;
         Retval.m_IStoreImage.all := m_ComRetVal;
      end return;
   end;

end;

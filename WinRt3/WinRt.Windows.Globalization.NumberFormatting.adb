--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Globalization.NumberFormatting is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CurrencyFormatter

   procedure Initialize (this : in out CurrencyFormatter) is
   begin
      null;
   end;

   procedure Finalize (this : in out CurrencyFormatter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICurrencyFormatter, ICurrencyFormatter_Ptr);
   begin
      if this.m_ICurrencyFormatter /= null then
         if this.m_ICurrencyFormatter.all /= null then
            RefCount := this.m_ICurrencyFormatter.all.Release;
            Free (this.m_ICurrencyFormatter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CurrencyFormatter

   function Constructor
   (
      currencyCode : WinRt.WString
   )
   return CurrencyFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.CurrencyFormatter");
      m_Factory    : access ICurrencyFormatterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.ICurrencyFormatter;
      HStr_currencyCode : WinRt.HString := To_HString (currencyCode);
   begin
      return RetVal : CurrencyFormatter do
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyFormatterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCurrencyFormatterCode (HStr_currencyCode, m_ComRetVal'Access);
            Retval.m_ICurrencyFormatter := new Windows.Globalization.NumberFormatting.ICurrencyFormatter;
            Retval.m_ICurrencyFormatter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_currencyCode);
      end return;
   end;

   function Constructor
   (
      currencyCode : WinRt.WString;
      languages : GenericObject;
      geographicRegion : WinRt.WString
   )
   return CurrencyFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.CurrencyFormatter");
      m_Factory    : access ICurrencyFormatterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.ICurrencyFormatter;
      HStr_currencyCode : WinRt.HString := To_HString (currencyCode);
      HStr_geographicRegion : WinRt.HString := To_HString (geographicRegion);
   begin
      return RetVal : CurrencyFormatter do
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyFormatterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCurrencyFormatterCodeContext (HStr_currencyCode, languages, HStr_geographicRegion, m_ComRetVal'Access);
            Retval.m_ICurrencyFormatter := new Windows.Globalization.NumberFormatting.ICurrencyFormatter;
            Retval.m_ICurrencyFormatter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_currencyCode);
         Hr := WindowsDeleteString (HStr_geographicRegion);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CurrencyFormatter

   function get_Currency
   (
      this : in out CurrencyFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICurrencyFormatter.all.get_Currency (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Currency
   (
      this : in out CurrencyFormatter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICurrencyFormatter.all.put_Currency (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function ParseInt
   (
      this : in out CurrencyFormatter;
      text : WinRt.WString
   )
   return IReference_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.ParseInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseUInt
   (
      this : in out CurrencyFormatter;
      text : WinRt.WString
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.ParseUInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseDouble
   (
      this : in out CurrencyFormatter;
      text : WinRt.WString
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.ParseDouble (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function FormatInt
   (
      this : in out CurrencyFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.FormatInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatUInt
   (
      this : in out CurrencyFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.FormatUInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatDouble
   (
      this : in out CurrencyFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.FormatDouble (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out CurrencyFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.Format (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out CurrencyFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.Format (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out CurrencyFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.Format (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Languages
   (
      this : in out CurrencyFormatter
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_Languages (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_GeographicRegion
   (
      this : in out CurrencyFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_GeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IntegerDigits
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_IntegerDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IntegerDigits
   (
      this : in out CurrencyFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_IntegerDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_FractionDigits
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_FractionDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_FractionDigits
   (
      this : in out CurrencyFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_FractionDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsGrouped
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_IsGrouped (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsGrouped
   (
      this : in out CurrencyFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_IsGrouped (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDecimalPointAlwaysDisplayed
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_IsDecimalPointAlwaysDisplayed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsDecimalPointAlwaysDisplayed
   (
      this : in out CurrencyFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_IsDecimalPointAlwaysDisplayed (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumeralSystem
   (
      this : in out CurrencyFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_NumeralSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NumeralSystem
   (
      this : in out CurrencyFormatter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_NumeralSystem (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ResolvedLanguage
   (
      this : in out CurrencyFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_ResolvedLanguage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ResolvedGeographicRegion
   (
      this : in out CurrencyFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_ResolvedGeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Mode
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Windows.Globalization.NumberFormatting.CurrencyFormatterMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.NumberFormatting.CurrencyFormatterMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_ICurrencyFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_Mode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out CurrencyFormatter;
      value : Windows.Globalization.NumberFormatting.CurrencyFormatterMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_ICurrencyFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_Mode (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure ApplyRoundingForCurrency
   (
      this : in out CurrencyFormatter;
      roundingAlgorithm : Windows.Globalization.NumberFormatting.RoundingAlgorithm
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_ICurrencyFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.ApplyRoundingForCurrency (roundingAlgorithm);
      m_RefCount := m_Interface.Release;
   end;

   function get_SignificantDigits
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_SignificantDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SignificantDigits
   (
      this : in out CurrencyFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_SignificantDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumberRounder
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Windows.Globalization.NumberFormatting.INumberRounder is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.NumberFormatting.INumberRounder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_NumberRounder (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NumberRounder
   (
      this : in out CurrencyFormatter;
      value : Windows.Globalization.NumberFormatting.INumberRounder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_NumberRounder (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsZeroSigned
   (
      this : in out CurrencyFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.get_IsZeroSigned (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsZeroSigned
   (
      this : in out CurrencyFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.ICurrencyFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrencyFormatter.all);
      Hr := m_Interface.put_IsZeroSigned (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DecimalFormatter

   procedure Initialize (this : in out DecimalFormatter) is
   begin
      null;
   end;

   procedure Finalize (this : in out DecimalFormatter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INumberFormatter, INumberFormatter_Ptr);
   begin
      if this.m_INumberFormatter /= null then
         if this.m_INumberFormatter.all /= null then
            RefCount := this.m_INumberFormatter.all.Release;
            Free (this.m_INumberFormatter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DecimalFormatter

   function Constructor
   (
      languages : GenericObject;
      geographicRegion : WinRt.WString
   )
   return DecimalFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.DecimalFormatter");
      m_Factory    : access IDecimalFormatterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberFormatter;
      HStr_geographicRegion : WinRt.HString := To_HString (geographicRegion);
   begin
      return RetVal : DecimalFormatter do
         Hr := RoGetActivationFactory (m_hString, IID_IDecimalFormatterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDecimalFormatter (languages, HStr_geographicRegion, m_ComRetVal'Access);
            Retval.m_INumberFormatter := new Windows.Globalization.NumberFormatting.INumberFormatter;
            Retval.m_INumberFormatter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_geographicRegion);
      end return;
   end;

   function Constructor return DecimalFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.DecimalFormatter");
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberFormatter;
   begin
      return RetVal : DecimalFormatter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INumberFormatter := new Windows.Globalization.NumberFormatting.INumberFormatter;
            Retval.m_INumberFormatter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DecimalFormatter

   function get_Languages
   (
      this : in out DecimalFormatter
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_Languages (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_GeographicRegion
   (
      this : in out DecimalFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_GeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IntegerDigits
   (
      this : in out DecimalFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IntegerDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IntegerDigits
   (
      this : in out DecimalFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IntegerDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_FractionDigits
   (
      this : in out DecimalFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_FractionDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_FractionDigits
   (
      this : in out DecimalFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_FractionDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsGrouped
   (
      this : in out DecimalFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsGrouped (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsGrouped
   (
      this : in out DecimalFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsGrouped (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDecimalPointAlwaysDisplayed
   (
      this : in out DecimalFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsDecimalPointAlwaysDisplayed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsDecimalPointAlwaysDisplayed
   (
      this : in out DecimalFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsDecimalPointAlwaysDisplayed (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumeralSystem
   (
      this : in out DecimalFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_NumeralSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NumeralSystem
   (
      this : in out DecimalFormatter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_NumeralSystem (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ResolvedLanguage
   (
      this : in out DecimalFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_ResolvedLanguage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ResolvedGeographicRegion
   (
      this : in out DecimalFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_ResolvedGeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out DecimalFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out DecimalFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out DecimalFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatInt
   (
      this : in out DecimalFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatUInt
   (
      this : in out DecimalFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatUInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatDouble
   (
      this : in out DecimalFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatDouble (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ParseInt
   (
      this : in out DecimalFormatter;
      text : WinRt.WString
   )
   return IReference_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseUInt
   (
      this : in out DecimalFormatter;
      text : WinRt.WString
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseUInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseDouble
   (
      this : in out DecimalFormatter;
      text : WinRt.WString
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseDouble (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SignificantDigits
   (
      this : in out DecimalFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_SignificantDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SignificantDigits
   (
      this : in out DecimalFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_SignificantDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumberRounder
   (
      this : in out DecimalFormatter
   )
   return WinRt.Windows.Globalization.NumberFormatting.INumberRounder is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.NumberFormatting.INumberRounder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_NumberRounder (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NumberRounder
   (
      this : in out DecimalFormatter;
      value : Windows.Globalization.NumberFormatting.INumberRounder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_NumberRounder (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsZeroSigned
   (
      this : in out DecimalFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsZeroSigned (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsZeroSigned
   (
      this : in out DecimalFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsZeroSigned (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for IncrementNumberRounder

   procedure Initialize (this : in out IncrementNumberRounder) is
   begin
      null;
   end;

   procedure Finalize (this : in out IncrementNumberRounder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INumberRounder, INumberRounder_Ptr);
   begin
      if this.m_INumberRounder /= null then
         if this.m_INumberRounder.all /= null then
            RefCount := this.m_INumberRounder.all.Release;
            Free (this.m_INumberRounder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for IncrementNumberRounder

   function Constructor return IncrementNumberRounder is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.IncrementNumberRounder");
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberRounder;
   begin
      return RetVal : IncrementNumberRounder do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INumberRounder := new Windows.Globalization.NumberFormatting.INumberRounder;
            Retval.m_INumberRounder.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for IncrementNumberRounder

   function RoundInt32
   (
      this : in out IncrementNumberRounder;
      value : WinRt.Int32
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_INumberRounder.all.RoundInt32 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundUInt32
   (
      this : in out IncrementNumberRounder;
      value : WinRt.UInt32
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_INumberRounder.all.RoundUInt32 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundInt64
   (
      this : in out IncrementNumberRounder;
      value : WinRt.Int64
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_INumberRounder.all.RoundInt64 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundUInt64
   (
      this : in out IncrementNumberRounder;
      value : WinRt.UInt64
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_INumberRounder.all.RoundUInt64 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundSingle
   (
      this : in out IncrementNumberRounder;
      value : WinRt.Single
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_INumberRounder.all.RoundSingle (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundDouble
   (
      this : in out IncrementNumberRounder;
      value : WinRt.Double
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_INumberRounder.all.RoundDouble (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RoundingAlgorithm
   (
      this : in out IncrementNumberRounder
   )
   return WinRt.Windows.Globalization.NumberFormatting.RoundingAlgorithm is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.NumberFormatting.RoundingAlgorithm;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_IIncrementNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.get_RoundingAlgorithm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RoundingAlgorithm
   (
      this : in out IncrementNumberRounder;
      value : Windows.Globalization.NumberFormatting.RoundingAlgorithm
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_IIncrementNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.put_RoundingAlgorithm (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Increment
   (
      this : in out IncrementNumberRounder
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_IIncrementNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.get_Increment (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Increment
   (
      this : in out IncrementNumberRounder;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.IIncrementNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_IIncrementNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.put_Increment (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NumeralSystemTranslator

   procedure Initialize (this : in out NumeralSystemTranslator) is
   begin
      null;
   end;

   procedure Finalize (this : in out NumeralSystemTranslator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INumeralSystemTranslator, INumeralSystemTranslator_Ptr);
   begin
      if this.m_INumeralSystemTranslator /= null then
         if this.m_INumeralSystemTranslator.all /= null then
            RefCount := this.m_INumeralSystemTranslator.all.Release;
            Free (this.m_INumeralSystemTranslator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NumeralSystemTranslator

   function Constructor
   (
      languages : GenericObject
   )
   return NumeralSystemTranslator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.NumeralSystemTranslator");
      m_Factory    : access INumeralSystemTranslatorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumeralSystemTranslator;
   begin
      return RetVal : NumeralSystemTranslator do
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemTranslatorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (languages, m_ComRetVal'Access);
            Retval.m_INumeralSystemTranslator := new Windows.Globalization.NumberFormatting.INumeralSystemTranslator;
            Retval.m_INumeralSystemTranslator.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return NumeralSystemTranslator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.NumeralSystemTranslator");
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumeralSystemTranslator;
   begin
      return RetVal : NumeralSystemTranslator do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INumeralSystemTranslator := new Windows.Globalization.NumberFormatting.INumeralSystemTranslator;
            Retval.m_INumeralSystemTranslator.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NumeralSystemTranslator

   function get_Languages
   (
      this : in out NumeralSystemTranslator
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_INumeralSystemTranslator.all.get_Languages (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResolvedLanguage
   (
      this : in out NumeralSystemTranslator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumeralSystemTranslator.all.get_ResolvedLanguage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NumeralSystem
   (
      this : in out NumeralSystemTranslator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumeralSystemTranslator.all.get_NumeralSystem (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NumeralSystem
   (
      this : in out NumeralSystemTranslator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_INumeralSystemTranslator.all.put_NumeralSystem (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function TranslateNumerals
   (
      this : in out NumeralSystemTranslator;
      value : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_INumeralSystemTranslator.all.TranslateNumerals (HStr_value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_value);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PercentFormatter

   procedure Initialize (this : in out PercentFormatter) is
   begin
      null;
   end;

   procedure Finalize (this : in out PercentFormatter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INumberFormatter, INumberFormatter_Ptr);
   begin
      if this.m_INumberFormatter /= null then
         if this.m_INumberFormatter.all /= null then
            RefCount := this.m_INumberFormatter.all.Release;
            Free (this.m_INumberFormatter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PercentFormatter

   function Constructor
   (
      languages : GenericObject;
      geographicRegion : WinRt.WString
   )
   return PercentFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.PercentFormatter");
      m_Factory    : access IPercentFormatterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberFormatter;
      HStr_geographicRegion : WinRt.HString := To_HString (geographicRegion);
   begin
      return RetVal : PercentFormatter do
         Hr := RoGetActivationFactory (m_hString, IID_IPercentFormatterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePercentFormatter (languages, HStr_geographicRegion, m_ComRetVal'Access);
            Retval.m_INumberFormatter := new Windows.Globalization.NumberFormatting.INumberFormatter;
            Retval.m_INumberFormatter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_geographicRegion);
      end return;
   end;

   function Constructor return PercentFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.PercentFormatter");
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberFormatter;
   begin
      return RetVal : PercentFormatter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INumberFormatter := new Windows.Globalization.NumberFormatting.INumberFormatter;
            Retval.m_INumberFormatter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PercentFormatter

   function get_Languages
   (
      this : in out PercentFormatter
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_Languages (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_GeographicRegion
   (
      this : in out PercentFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_GeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IntegerDigits
   (
      this : in out PercentFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IntegerDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IntegerDigits
   (
      this : in out PercentFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IntegerDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_FractionDigits
   (
      this : in out PercentFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_FractionDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_FractionDigits
   (
      this : in out PercentFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_FractionDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsGrouped
   (
      this : in out PercentFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsGrouped (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsGrouped
   (
      this : in out PercentFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsGrouped (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDecimalPointAlwaysDisplayed
   (
      this : in out PercentFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsDecimalPointAlwaysDisplayed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsDecimalPointAlwaysDisplayed
   (
      this : in out PercentFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsDecimalPointAlwaysDisplayed (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumeralSystem
   (
      this : in out PercentFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_NumeralSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NumeralSystem
   (
      this : in out PercentFormatter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_NumeralSystem (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ResolvedLanguage
   (
      this : in out PercentFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_ResolvedLanguage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ResolvedGeographicRegion
   (
      this : in out PercentFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_ResolvedGeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out PercentFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out PercentFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out PercentFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatInt
   (
      this : in out PercentFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatUInt
   (
      this : in out PercentFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatUInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatDouble
   (
      this : in out PercentFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatDouble (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ParseInt
   (
      this : in out PercentFormatter;
      text : WinRt.WString
   )
   return IReference_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseUInt
   (
      this : in out PercentFormatter;
      text : WinRt.WString
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseUInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseDouble
   (
      this : in out PercentFormatter;
      text : WinRt.WString
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseDouble (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SignificantDigits
   (
      this : in out PercentFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_SignificantDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SignificantDigits
   (
      this : in out PercentFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_SignificantDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumberRounder
   (
      this : in out PercentFormatter
   )
   return WinRt.Windows.Globalization.NumberFormatting.INumberRounder is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.NumberFormatting.INumberRounder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_NumberRounder (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NumberRounder
   (
      this : in out PercentFormatter;
      value : Windows.Globalization.NumberFormatting.INumberRounder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_NumberRounder (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsZeroSigned
   (
      this : in out PercentFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsZeroSigned (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsZeroSigned
   (
      this : in out PercentFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsZeroSigned (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PermilleFormatter

   procedure Initialize (this : in out PermilleFormatter) is
   begin
      null;
   end;

   procedure Finalize (this : in out PermilleFormatter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INumberFormatter, INumberFormatter_Ptr);
   begin
      if this.m_INumberFormatter /= null then
         if this.m_INumberFormatter.all /= null then
            RefCount := this.m_INumberFormatter.all.Release;
            Free (this.m_INumberFormatter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PermilleFormatter

   function Constructor
   (
      languages : GenericObject;
      geographicRegion : WinRt.WString
   )
   return PermilleFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.PermilleFormatter");
      m_Factory    : access IPermilleFormatterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberFormatter;
      HStr_geographicRegion : WinRt.HString := To_HString (geographicRegion);
   begin
      return RetVal : PermilleFormatter do
         Hr := RoGetActivationFactory (m_hString, IID_IPermilleFormatterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePermilleFormatter (languages, HStr_geographicRegion, m_ComRetVal'Access);
            Retval.m_INumberFormatter := new Windows.Globalization.NumberFormatting.INumberFormatter;
            Retval.m_INumberFormatter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_geographicRegion);
      end return;
   end;

   function Constructor return PermilleFormatter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.PermilleFormatter");
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberFormatter;
   begin
      return RetVal : PermilleFormatter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INumberFormatter := new Windows.Globalization.NumberFormatting.INumberFormatter;
            Retval.m_INumberFormatter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PermilleFormatter

   function get_Languages
   (
      this : in out PermilleFormatter
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_Languages (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_GeographicRegion
   (
      this : in out PermilleFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_GeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IntegerDigits
   (
      this : in out PermilleFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IntegerDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IntegerDigits
   (
      this : in out PermilleFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IntegerDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_FractionDigits
   (
      this : in out PermilleFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_FractionDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_FractionDigits
   (
      this : in out PermilleFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_FractionDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsGrouped
   (
      this : in out PermilleFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsGrouped (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsGrouped
   (
      this : in out PermilleFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsGrouped (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDecimalPointAlwaysDisplayed
   (
      this : in out PermilleFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsDecimalPointAlwaysDisplayed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsDecimalPointAlwaysDisplayed
   (
      this : in out PermilleFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsDecimalPointAlwaysDisplayed (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumeralSystem
   (
      this : in out PermilleFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_NumeralSystem (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NumeralSystem
   (
      this : in out PermilleFormatter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_NumeralSystem (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ResolvedLanguage
   (
      this : in out PermilleFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_ResolvedLanguage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ResolvedGeographicRegion
   (
      this : in out PermilleFormatter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatterOptions, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatterOptions'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_ResolvedGeographicRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out PermilleFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out PermilleFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Format
   (
      this : in out PermilleFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INumberFormatter.all.Format (value, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatInt
   (
      this : in out PermilleFormatter;
      value : WinRt.Int64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatUInt
   (
      this : in out PermilleFormatter;
      value : WinRt.UInt64
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatUInt (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FormatDouble
   (
      this : in out PermilleFormatter;
      value : WinRt.Double
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberFormatter2, WinRt.Windows.Globalization.NumberFormatting.IID_INumberFormatter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.FormatDouble (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ParseInt
   (
      this : in out PermilleFormatter;
      text : WinRt.WString
   )
   return IReference_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseUInt
   (
      this : in out PermilleFormatter;
      text : WinRt.WString
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseUInt (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ParseDouble
   (
      this : in out PermilleFormatter;
      text : WinRt.WString
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberParser := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      HStr_text : WinRt.HString := To_HString (text);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberParser, WinRt.Windows.Globalization.NumberFormatting.IID_INumberParser'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.ParseDouble (HStr_text, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_text);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SignificantDigits
   (
      this : in out PermilleFormatter
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_SignificantDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SignificantDigits
   (
      this : in out PermilleFormatter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_SignificantDigits (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_NumberRounder
   (
      this : in out PermilleFormatter
   )
   return WinRt.Windows.Globalization.NumberFormatting.INumberRounder is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.NumberFormatting.INumberRounder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_NumberRounder (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NumberRounder
   (
      this : in out PermilleFormatter;
      value : Windows.Globalization.NumberFormatting.INumberRounder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.INumberRounderOption, WinRt.Windows.Globalization.NumberFormatting.IID_INumberRounderOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_NumberRounder (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsZeroSigned
   (
      this : in out PermilleFormatter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.get_IsZeroSigned (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsZeroSigned
   (
      this : in out PermilleFormatter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberFormatter_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignedZeroOption, WinRt.Windows.Globalization.NumberFormatting.IID_ISignedZeroOption'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberFormatter.all);
      Hr := m_Interface.put_IsZeroSigned (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SignificantDigitsNumberRounder

   procedure Initialize (this : in out SignificantDigitsNumberRounder) is
   begin
      null;
   end;

   procedure Finalize (this : in out SignificantDigitsNumberRounder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INumberRounder, INumberRounder_Ptr);
   begin
      if this.m_INumberRounder /= null then
         if this.m_INumberRounder.all /= null then
            RefCount := this.m_INumberRounder.all.Release;
            Free (this.m_INumberRounder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SignificantDigitsNumberRounder

   function Constructor return SignificantDigitsNumberRounder is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.NumberFormatting.SignificantDigitsNumberRounder");
      m_ComRetVal  : aliased Windows.Globalization.NumberFormatting.INumberRounder;
   begin
      return RetVal : SignificantDigitsNumberRounder do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INumberRounder := new Windows.Globalization.NumberFormatting.INumberRounder;
            Retval.m_INumberRounder.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SignificantDigitsNumberRounder

   function RoundInt32
   (
      this : in out SignificantDigitsNumberRounder;
      value : WinRt.Int32
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_INumberRounder.all.RoundInt32 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundUInt32
   (
      this : in out SignificantDigitsNumberRounder;
      value : WinRt.UInt32
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_INumberRounder.all.RoundUInt32 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundInt64
   (
      this : in out SignificantDigitsNumberRounder;
      value : WinRt.Int64
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_INumberRounder.all.RoundInt64 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundUInt64
   (
      this : in out SignificantDigitsNumberRounder;
      value : WinRt.UInt64
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_INumberRounder.all.RoundUInt64 (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundSingle
   (
      this : in out SignificantDigitsNumberRounder;
      value : WinRt.Single
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_INumberRounder.all.RoundSingle (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RoundDouble
   (
      this : in out SignificantDigitsNumberRounder;
      value : WinRt.Double
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_INumberRounder.all.RoundDouble (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RoundingAlgorithm
   (
      this : in out SignificantDigitsNumberRounder
   )
   return WinRt.Windows.Globalization.NumberFormatting.RoundingAlgorithm is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.NumberFormatting.RoundingAlgorithm;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.get_RoundingAlgorithm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RoundingAlgorithm
   (
      this : in out SignificantDigitsNumberRounder;
      value : Windows.Globalization.NumberFormatting.RoundingAlgorithm
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.put_RoundingAlgorithm (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SignificantDigits
   (
      this : in out SignificantDigitsNumberRounder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.get_SignificantDigits (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SignificantDigits
   (
      this : in out SignificantDigitsNumberRounder;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.NumberFormatting.INumberRounder_Interface, WinRt.Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder, WinRt.Windows.Globalization.NumberFormatting.IID_ISignificantDigitsNumberRounder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INumberRounder.all);
      Hr := m_Interface.put_SignificantDigits (value);
      m_RefCount := m_Interface.Release;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Playback;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Protection is

   package IAsyncOperation_RenewalStatus is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Media.Protection.RenewalStatus, GenericObject);
   package AsyncOperationCompletedHandler_RenewalStatus is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Media.Protection.RenewalStatus, GenericObject);

   package IAsyncOperation_HdcpSetProtectionResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Protection.HdcpSetProtectionResult);
   package AsyncOperationCompletedHandler_HdcpSetProtectionResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Protection.HdcpSetProtectionResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ComponentLoadFailedEventArgs

   procedure Initialize (this : in out ComponentLoadFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ComponentLoadFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IComponentLoadFailedEventArgs, IComponentLoadFailedEventArgs_Ptr);
   begin
      if this.m_IComponentLoadFailedEventArgs /= null then
         if this.m_IComponentLoadFailedEventArgs.all /= null then
            RefCount := this.m_IComponentLoadFailedEventArgs.all.Release;
            Free (this.m_IComponentLoadFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ComponentLoadFailedEventArgs

   function get_Information
   (
      this : in out ComponentLoadFailedEventArgs
   )
   return WinRt.Windows.Media.Protection.RevocationAndRenewalInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.IRevocationAndRenewalInformation;
   begin
      return RetVal : WinRt.Windows.Media.Protection.RevocationAndRenewalInformation do
         Hr := this.m_IComponentLoadFailedEventArgs.all.get_Information (m_ComRetVal'Access);
         Retval.m_IRevocationAndRenewalInformation := new Windows.Media.Protection.IRevocationAndRenewalInformation;
         Retval.m_IRevocationAndRenewalInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Completion
   (
      this : in out ComponentLoadFailedEventArgs
   )
   return WinRt.Windows.Media.Protection.MediaProtectionServiceCompletion'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.IMediaProtectionServiceCompletion;
   begin
      return RetVal : WinRt.Windows.Media.Protection.MediaProtectionServiceCompletion do
         Hr := this.m_IComponentLoadFailedEventArgs.all.get_Completion (m_ComRetVal'Access);
         Retval.m_IMediaProtectionServiceCompletion := new Windows.Media.Protection.IMediaProtectionServiceCompletion;
         Retval.m_IMediaProtectionServiceCompletion.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate ComponentLoadFailedEventHandler

   function Invoke
   (
      this : access ComponentLoadFailedEventHandler_Delegate;
      sender : Windows.Media.Protection.IMediaProtectionManager;
      e : Windows.Media.Protection.IComponentLoadFailedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ComponentRenewal is

      function RenewSystemComponentsAsync
      (
         information : Windows.Media.Protection.RevocationAndRenewalInformation'Class
      )
      return WinRt.Windows.Media.Protection.RenewalStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Protection.ComponentRenewal");
         m_Factory        : access WinRt.Windows.Media.Protection.IComponentRenewalStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_RenewalStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_RenewalStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Media.Protection.RenewalStatus;
         m_IID            : aliased WinRt.IID := (1499319305, 39635, 20628, (128, 10, 8, 131, 204, 225, 239, 1 )); -- Windows.Media.Protection.RenewalStatus;
         m_HandlerIID     : aliased WinRt.IID := (3959846951, 26585, 22950, (165, 123, 62, 124, 161, 43, 137, 193 ));
         m_Handler        : AsyncOperationCompletedHandler_RenewalStatus.Kind := new AsyncOperationCompletedHandler_RenewalStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RenewalStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RenewalStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RenewalStatus.Kind_Delegate, AsyncOperationCompletedHandler_RenewalStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IComponentRenewalStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RenewSystemComponentsAsync (information.m_IRevocationAndRenewalInformation.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end ComponentRenewal;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HdcpSession

   procedure Initialize (this : in out HdcpSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out HdcpSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHdcpSession, IHdcpSession_Ptr);
   begin
      if this.m_IHdcpSession /= null then
         if this.m_IHdcpSession.all /= null then
            RefCount := this.m_IHdcpSession.all.Release;
            Free (this.m_IHdcpSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HdcpSession

   function Constructor return HdcpSession is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.HdcpSession");
      m_ComRetVal  : aliased Windows.Media.Protection.IHdcpSession;
   begin
      return RetVal : HdcpSession do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHdcpSession := new Windows.Media.Protection.IHdcpSession;
            Retval.m_IHdcpSession.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HdcpSession

   function IsEffectiveProtectionAtLeast
   (
      this : in out HdcpSession;
      protection : Windows.Media.Protection.HdcpProtection
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHdcpSession.all.IsEffectiveProtectionAtLeast (protection, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetEffectiveProtection
   (
      this : in out HdcpSession
   )
   return IReference_HdcpProtection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_HdcpProtection.Kind;
   begin
      Hr := this.m_IHdcpSession.all.GetEffectiveProtection (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_HdcpProtection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function SetDesiredMinProtectionAsync
   (
      this : in out HdcpSession;
      protection : Windows.Media.Protection.HdcpProtection
   )
   return WinRt.Windows.Media.Protection.HdcpSetProtectionResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HdcpSetProtectionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HdcpSetProtectionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Protection.HdcpSetProtectionResult;
      m_IID            : aliased WinRt.IID := (1348595215, 35226, 22172, (160, 163, 194, 86, 110, 184, 129, 66 )); -- Windows.Media.Protection.HdcpSetProtectionResult;
      m_HandlerIID     : aliased WinRt.IID := (422857304, 42433, 20840, (128, 62, 99, 39, 113, 98, 129, 67 ));
      m_Handler        : AsyncOperationCompletedHandler_HdcpSetProtectionResult.Kind := new AsyncOperationCompletedHandler_HdcpSetProtectionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HdcpSetProtectionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HdcpSetProtectionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HdcpSetProtectionResult.Kind_Delegate, AsyncOperationCompletedHandler_HdcpSetProtectionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHdcpSession.all.SetDesiredMinProtectionAsync (protection, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_ProtectionChanged
   (
      this : in out HdcpSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IHdcpSession.all.add_ProtectionChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ProtectionChanged
   (
      this : in out HdcpSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHdcpSession.all.remove_ProtectionChanged (token);
   end;

   procedure Close
   (
      this : in out HdcpSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.IHdcpSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHdcpSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaProtectionManager

   procedure Initialize (this : in out MediaProtectionManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaProtectionManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaProtectionManager, IMediaProtectionManager_Ptr);
   begin
      if this.m_IMediaProtectionManager /= null then
         if this.m_IMediaProtectionManager.all /= null then
            RefCount := this.m_IMediaProtectionManager.all.Release;
            Free (this.m_IMediaProtectionManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaProtectionManager

   function Constructor return MediaProtectionManager is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.MediaProtectionManager");
      m_ComRetVal  : aliased Windows.Media.Protection.IMediaProtectionManager;
   begin
      return RetVal : MediaProtectionManager do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaProtectionManager := new Windows.Media.Protection.IMediaProtectionManager;
            Retval.m_IMediaProtectionManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaProtectionManager

   function add_ServiceRequested
   (
      this : in out MediaProtectionManager;
      handler : Windows.Media.Protection.ServiceRequestedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaProtectionManager.all.add_ServiceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ServiceRequested
   (
      this : in out MediaProtectionManager;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaProtectionManager.all.remove_ServiceRequested (cookie);
   end;

   function add_RebootNeeded
   (
      this : in out MediaProtectionManager;
      handler : Windows.Media.Protection.RebootNeededEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaProtectionManager.all.add_RebootNeeded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RebootNeeded
   (
      this : in out MediaProtectionManager;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaProtectionManager.all.remove_RebootNeeded (cookie);
   end;

   function add_ComponentLoadFailed
   (
      this : in out MediaProtectionManager;
      handler : Windows.Media.Protection.ComponentLoadFailedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaProtectionManager.all.add_ComponentLoadFailed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ComponentLoadFailed
   (
      this : in out MediaProtectionManager;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaProtectionManager.all.remove_ComponentLoadFailed (cookie);
   end;

   function get_Properties
   (
      this : in out MediaProtectionManager
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IMediaProtectionManager.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaProtectionPMPServer

   procedure Initialize (this : in out MediaProtectionPMPServer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaProtectionPMPServer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaProtectionPMPServer, IMediaProtectionPMPServer_Ptr);
   begin
      if this.m_IMediaProtectionPMPServer /= null then
         if this.m_IMediaProtectionPMPServer.all /= null then
            RefCount := this.m_IMediaProtectionPMPServer.all.Release;
            Free (this.m_IMediaProtectionPMPServer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaProtectionPMPServer

   function Constructor
   (
      pProperties : Windows.Foundation.Collections.IPropertySet
   )
   return MediaProtectionPMPServer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.MediaProtectionPMPServer");
      m_Factory    : access IMediaProtectionPMPServerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Protection.IMediaProtectionPMPServer;
   begin
      return RetVal : MediaProtectionPMPServer do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaProtectionPMPServerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePMPServer (pProperties, m_ComRetVal'Access);
            Retval.m_IMediaProtectionPMPServer := new Windows.Media.Protection.IMediaProtectionPMPServer;
            Retval.m_IMediaProtectionPMPServer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaProtectionPMPServer

   function get_Properties
   (
      this : in out MediaProtectionPMPServer
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IMediaProtectionPMPServer.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaProtectionServiceCompletion

   procedure Initialize (this : in out MediaProtectionServiceCompletion) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaProtectionServiceCompletion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaProtectionServiceCompletion, IMediaProtectionServiceCompletion_Ptr);
   begin
      if this.m_IMediaProtectionServiceCompletion /= null then
         if this.m_IMediaProtectionServiceCompletion.all /= null then
            RefCount := this.m_IMediaProtectionServiceCompletion.all.Release;
            Free (this.m_IMediaProtectionServiceCompletion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaProtectionServiceCompletion

   procedure Complete
   (
      this : in out MediaProtectionServiceCompletion;
      success : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaProtectionServiceCompletion.all.Complete (success);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectionCapabilities

   procedure Initialize (this : in out ProtectionCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectionCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectionCapabilities, IProtectionCapabilities_Ptr);
   begin
      if this.m_IProtectionCapabilities /= null then
         if this.m_IProtectionCapabilities.all /= null then
            RefCount := this.m_IProtectionCapabilities.all.Release;
            Free (this.m_IProtectionCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ProtectionCapabilities

   function Constructor return ProtectionCapabilities is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Protection.ProtectionCapabilities");
      m_ComRetVal  : aliased Windows.Media.Protection.IProtectionCapabilities;
   begin
      return RetVal : ProtectionCapabilities do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IProtectionCapabilities := new Windows.Media.Protection.IProtectionCapabilities;
            Retval.m_IProtectionCapabilities.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectionCapabilities

   function IsTypeSupported
   (
      this : in out ProtectionCapabilities;
      type_x : WinRt.WString;
      keySystem : WinRt.WString
   )
   return WinRt.Windows.Media.Protection.ProtectionCapabilityResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.ProtectionCapabilityResult;
      HStr_type_x : WinRt.HString := To_HString (type_x);
      HStr_keySystem : WinRt.HString := To_HString (keySystem);
   begin
      Hr := this.m_IProtectionCapabilities.all.IsTypeSupported (HStr_type_x, HStr_keySystem, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_type_x);
      Hr := WindowsDeleteString (HStr_keySystem);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate RebootNeededEventHandler

   function Invoke
   (
      this : access RebootNeededEventHandler_Delegate;
      sender : Windows.Media.Protection.IMediaProtectionManager
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RevocationAndRenewalInformation

   procedure Initialize (this : in out RevocationAndRenewalInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out RevocationAndRenewalInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRevocationAndRenewalInformation, IRevocationAndRenewalInformation_Ptr);
   begin
      if this.m_IRevocationAndRenewalInformation /= null then
         if this.m_IRevocationAndRenewalInformation.all /= null then
            RefCount := this.m_IRevocationAndRenewalInformation.all.Release;
            Free (this.m_IRevocationAndRenewalInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RevocationAndRenewalInformation

   function get_Items
   (
      this : in out RevocationAndRenewalInformation
   )
   return IVector_IRevocationAndRenewalItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IRevocationAndRenewalItem.Kind;
   begin
      Hr := this.m_IRevocationAndRenewalInformation.all.get_Items (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IRevocationAndRenewalItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RevocationAndRenewalItem

   procedure Initialize (this : in out RevocationAndRenewalItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out RevocationAndRenewalItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRevocationAndRenewalItem, IRevocationAndRenewalItem_Ptr);
   begin
      if this.m_IRevocationAndRenewalItem /= null then
         if this.m_IRevocationAndRenewalItem.all /= null then
            RefCount := this.m_IRevocationAndRenewalItem.all.Release;
            Free (this.m_IRevocationAndRenewalItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RevocationAndRenewalItem

   function get_Reasons
   (
      this : in out RevocationAndRenewalItem
   )
   return WinRt.Windows.Media.Protection.RevocationAndRenewalReasons is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.RevocationAndRenewalReasons;
   begin
      Hr := this.m_IRevocationAndRenewalItem.all.get_Reasons (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HeaderHash
   (
      this : in out RevocationAndRenewalItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRevocationAndRenewalItem.all.get_HeaderHash (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PublicKeyHash
   (
      this : in out RevocationAndRenewalItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRevocationAndRenewalItem.all.get_PublicKeyHash (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out RevocationAndRenewalItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRevocationAndRenewalItem.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RenewalId
   (
      this : in out RevocationAndRenewalItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRevocationAndRenewalItem.all.get_RenewalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ServiceRequestedEventArgs

   procedure Initialize (this : in out ServiceRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ServiceRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IServiceRequestedEventArgs, IServiceRequestedEventArgs_Ptr);
   begin
      if this.m_IServiceRequestedEventArgs /= null then
         if this.m_IServiceRequestedEventArgs.all /= null then
            RefCount := this.m_IServiceRequestedEventArgs.all.Release;
            Free (this.m_IServiceRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ServiceRequestedEventArgs

   function get_Request
   (
      this : in out ServiceRequestedEventArgs
   )
   return WinRt.Windows.Media.Protection.IMediaProtectionServiceRequest is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.IMediaProtectionServiceRequest;
   begin
      Hr := this.m_IServiceRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Completion
   (
      this : in out ServiceRequestedEventArgs
   )
   return WinRt.Windows.Media.Protection.MediaProtectionServiceCompletion'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.IMediaProtectionServiceCompletion;
   begin
      return RetVal : WinRt.Windows.Media.Protection.MediaProtectionServiceCompletion do
         Hr := this.m_IServiceRequestedEventArgs.all.get_Completion (m_ComRetVal'Access);
         Retval.m_IMediaProtectionServiceCompletion := new Windows.Media.Protection.IMediaProtectionServiceCompletion;
         Retval.m_IMediaProtectionServiceCompletion.all := m_ComRetVal;
      end return;
   end;

   function get_MediaPlaybackItem
   (
      this : in out ServiceRequestedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Protection.IServiceRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Protection.IServiceRequestedEventArgs_Interface, WinRt.Windows.Media.Protection.IServiceRequestedEventArgs2, WinRt.Windows.Media.Protection.IID_IServiceRequestedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         m_Interface := QInterface (this.m_IServiceRequestedEventArgs.all);
         Hr := m_Interface.get_MediaPlaybackItem (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate ServiceRequestedEventHandler

   function Invoke
   (
      this : access ServiceRequestedEventHandler_Delegate;
      sender : Windows.Media.Protection.IMediaProtectionManager;
      e : Windows.Media.Protection.IServiceRequestedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.UI.Core;
with WinRt.Windows.UI.Text;
with WinRt.Windows.UI.Xaml.Input;
with WinRt.Windows.UI.Xaml.Media;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Documents is

   package IVector_IBlock is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Documents.IBlock);
   package IIterable_IBlock is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Documents.IBlock);
   package IVector_IContentLinkProvider is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Documents.IContentLinkProvider);
   package IIterable_IContentLinkProvider is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Documents.IContentLinkProvider);
   package IVector_IInline is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Xaml.Documents.IInline);
   package IIterable_IInline is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Xaml.Documents.IInline);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextElement

   procedure Initialize (this : in out TextElement) is
   begin
      null;
   end;

   procedure Finalize (this : in out TextElement) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextElement, ITextElement_Ptr);
   begin
      if this.m_ITextElement /= null then
         if this.m_ITextElement.all /= null then
            RefCount := this.m_ITextElement.all.Release;
            Free (this.m_ITextElement);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextElement

   -----------------------------------------------------------------------------
   -- Static Interfaces for TextElement

   function get_IsTextScaleFactorEnabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsTextScaleFactorEnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TextDecorationsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TextDecorationsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsAccessKeyScopeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsAccessKeyScopeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AccessKeyScopeOwnerProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AccessKeyScopeOwnerProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_KeyTipPlacementModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KeyTipPlacementModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_KeyTipHorizontalOffsetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KeyTipHorizontalOffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_KeyTipVerticalOffsetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KeyTipVerticalOffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AllowFocusOnInteractionProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllowFocusOnInteractionProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AccessKeyProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AccessKeyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ExitDisplayModeOnAccessKeyInvokedProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExitDisplayModeOnAccessKeyInvokedProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FontSizeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FontSizeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FontFamilyProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FontFamilyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FontWeightProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FontWeightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FontStyleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FontStyleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FontStretchProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FontStretchProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CharacterSpacingProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CharacterSpacingProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ForegroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ForegroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_LanguageProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextElement");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextElementStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextElementStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LanguageProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextElement

   function get_Name
   (
      this : in out TextElement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITextElement.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FontSize
   (
      this : in out TextElement
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ITextElement.all.get_FontSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FontSize
   (
      this : in out TextElement;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextElement.all.put_FontSize (value);
   end;

   function get_FontFamily
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.Media.FontFamily'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IFontFamily;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.FontFamily do
         Hr := this.m_ITextElement.all.get_FontFamily (m_ComRetVal'Access);
         Retval.m_IFontFamily := new Windows.UI.Xaml.Media.IFontFamily;
         Retval.m_IFontFamily.all := m_ComRetVal;
      end return;
   end;

   procedure put_FontFamily
   (
      this : in out TextElement;
      value : Windows.UI.Xaml.Media.FontFamily'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextElement.all.put_FontFamily (value.m_IFontFamily.all);
   end;

   function get_FontWeight
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := this.m_ITextElement.all.get_FontWeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FontWeight
   (
      this : in out TextElement;
      value : Windows.UI.Text.FontWeight
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextElement.all.put_FontWeight (value);
   end;

   function get_FontStyle
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Text.FontStyle is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontStyle;
   begin
      Hr := this.m_ITextElement.all.get_FontStyle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FontStyle
   (
      this : in out TextElement;
      value : Windows.UI.Text.FontStyle
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextElement.all.put_FontStyle (value);
   end;

   function get_FontStretch
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Text.FontStretch is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontStretch;
   begin
      Hr := this.m_ITextElement.all.get_FontStretch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FontStretch
   (
      this : in out TextElement;
      value : Windows.UI.Text.FontStretch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextElement.all.put_FontStretch (value);
   end;

   function get_CharacterSpacing
   (
      this : in out TextElement
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextElement.all.get_CharacterSpacing (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CharacterSpacing
   (
      this : in out TextElement;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextElement.all.put_CharacterSpacing (value);
   end;

   function get_Foreground
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_ITextElement.all.get_Foreground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Foreground
   (
      this : in out TextElement;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextElement.all.put_Foreground (value.m_IBrush.all);
   end;

   function get_Language
   (
      this : in out TextElement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITextElement.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out TextElement;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITextElement.all.put_Language (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ContentStart
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.Documents.TextPointer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.ITextPointer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.TextPointer do
         Hr := this.m_ITextElement.all.get_ContentStart (m_ComRetVal'Access);
         Retval.m_ITextPointer := new Windows.UI.Xaml.Documents.ITextPointer;
         Retval.m_ITextPointer.all := m_ComRetVal;
      end return;
   end;

   function get_ContentEnd
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.Documents.TextPointer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.ITextPointer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.TextPointer do
         Hr := this.m_ITextElement.all.get_ContentEnd (m_ComRetVal'Access);
         Retval.m_ITextPointer := new Windows.UI.Xaml.Documents.ITextPointer;
         Retval.m_ITextPointer.all := m_ComRetVal;
      end return;
   end;

   function get_ElementStart
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.Documents.TextPointer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.ITextPointer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.TextPointer do
         Hr := this.m_ITextElement.all.get_ElementStart (m_ComRetVal'Access);
         Retval.m_ITextPointer := new Windows.UI.Xaml.Documents.ITextPointer;
         Retval.m_ITextPointer.all := m_ComRetVal;
      end return;
   end;

   function get_ElementEnd
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.Documents.TextPointer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.ITextPointer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.TextPointer do
         Hr := this.m_ITextElement.all.get_ElementEnd (m_ComRetVal'Access);
         Retval.m_ITextPointer := new Windows.UI.Xaml.Documents.ITextPointer;
         Retval.m_ITextPointer.all := m_ComRetVal;
      end return;
   end;

   function FindName
   (
      this : in out TextElement;
      name : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ITextElement.all.FindName (HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function get_IsTextScaleFactorEnabled
   (
      this : in out TextElement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement2, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_IsTextScaleFactorEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsTextScaleFactorEnabled
   (
      this : in out TextElement;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement2, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_IsTextScaleFactorEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AllowFocusOnInteraction
   (
      this : in out TextElement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement3, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_AllowFocusOnInteraction (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AllowFocusOnInteraction
   (
      this : in out TextElement;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement3, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_AllowFocusOnInteraction (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AccessKey
   (
      this : in out TextElement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement3, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_AccessKey (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AccessKey
   (
      this : in out TextElement;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement3, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_AccessKey (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ExitDisplayModeOnAccessKeyInvoked
   (
      this : in out TextElement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement3, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_ExitDisplayModeOnAccessKeyInvoked (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ExitDisplayModeOnAccessKeyInvoked
   (
      this : in out TextElement;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement3, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_ExitDisplayModeOnAccessKeyInvoked (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TextDecorations
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Text.TextDecorations is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.TextDecorations;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_TextDecorations (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TextDecorations
   (
      this : in out TextElement;
      value : Windows.UI.Text.TextDecorations
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_TextDecorations (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsAccessKeyScope
   (
      this : in out TextElement
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_IsAccessKeyScope (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsAccessKeyScope
   (
      this : in out TextElement;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_IsAccessKeyScope (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AccessKeyScopeOwner
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         m_Interface := QInterface (this.m_ITextElement.all);
         Hr := m_Interface.get_AccessKeyScopeOwner (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_AccessKeyScopeOwner
   (
      this : in out TextElement;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_AccessKeyScopeOwner (value.m_IDependencyObject.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_KeyTipPlacementMode
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.Input.KeyTipPlacementMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.KeyTipPlacementMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_KeyTipPlacementMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_KeyTipPlacementMode
   (
      this : in out TextElement;
      value : Windows.UI.Xaml.Input.KeyTipPlacementMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_KeyTipPlacementMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_KeyTipHorizontalOffset
   (
      this : in out TextElement
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_KeyTipHorizontalOffset (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_KeyTipHorizontalOffset
   (
      this : in out TextElement;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_KeyTipHorizontalOffset (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_KeyTipVerticalOffset
   (
      this : in out TextElement
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.get_KeyTipVerticalOffset (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_KeyTipVerticalOffset
   (
      this : in out TextElement;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_KeyTipVerticalOffset (value);
      m_RefCount := m_Interface.Release;
   end;

   function add_AccessKeyDisplayRequested
   (
      this : in out TextElement;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.add_AccessKeyDisplayRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AccessKeyDisplayRequested
   (
      this : in out TextElement;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.remove_AccessKeyDisplayRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_AccessKeyDisplayDismissed
   (
      this : in out TextElement;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.add_AccessKeyDisplayDismissed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AccessKeyDisplayDismissed
   (
      this : in out TextElement;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.remove_AccessKeyDisplayDismissed (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_AccessKeyInvoked
   (
      this : in out TextElement;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.add_AccessKeyInvoked (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AccessKeyInvoked
   (
      this : in out TextElement;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement4, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.remove_AccessKeyInvoked (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_XamlRoot
   (
      this : in out TextElement
   )
   return WinRt.Windows.UI.Xaml.XamlRoot'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IXamlRoot;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement5, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.XamlRoot do
         m_Interface := QInterface (this.m_ITextElement.all);
         Hr := m_Interface.get_XamlRoot (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXamlRoot := new Windows.UI.Xaml.IXamlRoot;
         Retval.m_IXamlRoot.all := m_ComRetVal;
      end return;
   end;

   procedure put_XamlRoot
   (
      this : in out TextElement;
      value : Windows.UI.Xaml.XamlRoot'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElement5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElement5, WinRt.Windows.UI.Xaml.Documents.IID_ITextElement5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.put_XamlRoot (value.m_IXamlRoot.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure OnDisconnectVisualChildren
   (
      this : in out TextElement
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.ITextElementOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.ITextElement_Interface, WinRt.Windows.UI.Xaml.Documents.ITextElementOverrides, WinRt.Windows.UI.Xaml.Documents.IID_ITextElementOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextElement.all);
      Hr := m_Interface.OnDisconnectVisualChildren;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Block

   procedure Initialize (this : in out Block) is
   begin
      null;
   end;

   procedure Finalize (this : in out Block) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBlock, IBlock_Ptr);
   begin
      if this.m_IBlock /= null then
         if this.m_IBlock.all /= null then
            RefCount := this.m_IBlock.all.Release;
            Free (this.m_IBlock);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Block

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Block is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Block");
      m_Factory    : access IBlockFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IBlock;
   begin
      return RetVal : Block do
         Hr := RoGetActivationFactory (m_hString, IID_IBlockFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IBlock := new Windows.UI.Xaml.Documents.IBlock;
            Retval.m_IBlock.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Block

   function get_HorizontalTextAlignmentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Block");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IBlockStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBlockStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HorizontalTextAlignmentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TextAlignmentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Block");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IBlockStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBlockStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TextAlignmentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_LineHeightProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Block");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IBlockStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBlockStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LineHeightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_LineStackingStrategyProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Block");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IBlockStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBlockStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LineStackingStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MarginProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Block");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IBlockStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBlockStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MarginProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Block

   function get_TextAlignment
   (
      this : in out Block
   )
   return WinRt.Windows.UI.Xaml.TextAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.TextAlignment;
   begin
      Hr := this.m_IBlock.all.get_TextAlignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TextAlignment
   (
      this : in out Block;
      value : Windows.UI.Xaml.TextAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBlock.all.put_TextAlignment (value);
   end;

   function get_LineHeight
   (
      this : in out Block
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBlock.all.get_LineHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LineHeight
   (
      this : in out Block;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBlock.all.put_LineHeight (value);
   end;

   function get_LineStackingStrategy
   (
      this : in out Block
   )
   return WinRt.Windows.UI.Xaml.LineStackingStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.LineStackingStrategy;
   begin
      Hr := this.m_IBlock.all.get_LineStackingStrategy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LineStackingStrategy
   (
      this : in out Block;
      value : Windows.UI.Xaml.LineStackingStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBlock.all.put_LineStackingStrategy (value);
   end;

   function get_Margin
   (
      this : in out Block
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IBlock.all.get_Margin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Margin
   (
      this : in out Block;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBlock.all.put_Margin (value);
   end;

   function get_HorizontalTextAlignment
   (
      this : in out Block
   )
   return WinRt.Windows.UI.Xaml.TextAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IBlock2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.TextAlignment;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IBlock_Interface, WinRt.Windows.UI.Xaml.Documents.IBlock2, WinRt.Windows.UI.Xaml.Documents.IID_IBlock2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBlock.all);
      Hr := m_Interface.get_HorizontalTextAlignment (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_HorizontalTextAlignment
   (
      this : in out Block;
      value : Windows.UI.Xaml.TextAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IBlock2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IBlock_Interface, WinRt.Windows.UI.Xaml.Documents.IBlock2, WinRt.Windows.UI.Xaml.Documents.IID_IBlock2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBlock.all);
      Hr := m_Interface.put_HorizontalTextAlignment (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BlockCollection

   procedure Initialize (this : in out BlockCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out BlockCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BlockCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Documents.Block>
   function GetAt
   (
      this : in out BlockCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Documents.Block'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.IBlock;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.Block do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBlock := new Windows.UI.Xaml.Documents.IBlock;
         Retval.m_IBlock.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out BlockCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out BlockCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out BlockCollection;
      value : Windows.UI.Xaml.Documents.Block'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IBlock.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out BlockCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Documents.Block'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_IBlock.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out BlockCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Documents.Block'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_IBlock.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out BlockCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out BlockCollection;
      value : Windows.UI.Xaml.Documents.Block'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_IBlock.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out BlockCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out BlockCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out BlockCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Documents.IBlock_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out BlockCollection;
      items : Windows.UI.Xaml.Documents.IBlock_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1055361588, 5646, 20735, (181, 170, 9, 242, 99, 166, 105, 248 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IBlock.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Documents.Block>
   function First
   (
      this : in out BlockCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IBlock.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4144118682, 59089, 24109, (143, 65, 178, 140, 51, 50, 62, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IBlock.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Inline

   procedure Initialize (this : in out Inline) is
   begin
      null;
   end;

   procedure Finalize (this : in out Inline) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInline, IInline_Ptr);
   begin
      if this.m_IInline /= null then
         if this.m_IInline.all /= null then
            RefCount := this.m_IInline.all.Release;
            Free (this.m_IInline);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Inline

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Inline is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Inline");
      m_Factory    : access IInlineFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IInline;
   begin
      return RetVal : Inline do
         Hr := RoGetActivationFactory (m_hString, IID_IInlineFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IInline := new Windows.UI.Xaml.Documents.IInline;
            Retval.m_IInline.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Inline

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Span

   procedure Initialize (this : in out Span) is
   begin
      null;
   end;

   procedure Finalize (this : in out Span) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpan, ISpan_Ptr);
   begin
      if this.m_ISpan /= null then
         if this.m_ISpan.all /= null then
            RefCount := this.m_ISpan.all.Release;
            Free (this.m_ISpan);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Span

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Span is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Span");
      m_Factory    : access ISpanFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.ISpan;
   begin
      return RetVal : Span do
         Hr := RoGetActivationFactory (m_hString, IID_ISpanFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISpan := new Windows.UI.Xaml.Documents.ISpan;
            Retval.m_ISpan.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Span

   function get_Inlines
   (
      this : in out Span
   )
   return WinRt.Windows.UI.Xaml.Documents.InlineCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.InlineCollection do
         Hr := this.m_ISpan.all.get_Inlines (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Inlines
   (
      this : in out Span;
      value : Windows.UI.Xaml.Documents.InlineCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpan.all.put_Inlines (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Bold

   procedure Initialize (this : in out Bold) is
   begin
      null;
   end;

   procedure Finalize (this : in out Bold) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBold, IBold_Ptr);
   begin
      if this.m_IBold /= null then
         if this.m_IBold.all /= null then
            RefCount := this.m_IBold.all.Release;
            Free (this.m_IBold);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Bold

   function Constructor return Bold is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Bold");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IBold;
   begin
      return RetVal : Bold do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBold := new Windows.UI.Xaml.Documents.IBold;
            Retval.m_IBold.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Bold

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContentLinkProvider

   procedure Initialize (this : in out ContentLinkProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContentLinkProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContentLinkProvider, IContentLinkProvider_Ptr);
   begin
      if this.m_IContentLinkProvider /= null then
         if this.m_IContentLinkProvider.all /= null then
            RefCount := this.m_IContentLinkProvider.all.Release;
            Free (this.m_IContentLinkProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContentLinkProvider

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ContentLinkProvider is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLinkProvider");
      m_Factory    : access IContentLinkProviderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IContentLinkProvider;
   begin
      return RetVal : ContentLinkProvider do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkProviderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IContentLinkProvider := new Windows.UI.Xaml.Documents.IContentLinkProvider;
            Retval.m_IContentLinkProvider.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContentLinkProvider

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactContentLinkProvider

   procedure Initialize (this : in out ContactContentLinkProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactContentLinkProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactContentLinkProvider, IContactContentLinkProvider_Ptr);
   begin
      if this.m_IContactContentLinkProvider /= null then
         if this.m_IContactContentLinkProvider.all /= null then
            RefCount := this.m_IContactContentLinkProvider.all.Release;
            Free (this.m_IContactContentLinkProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactContentLinkProvider

   function Constructor return ContactContentLinkProvider is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContactContentLinkProvider");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IContactContentLinkProvider;
   begin
      return RetVal : ContactContentLinkProvider do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactContentLinkProvider := new Windows.UI.Xaml.Documents.IContactContentLinkProvider;
            Retval.m_IContactContentLinkProvider.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactContentLinkProvider

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContentLink

   procedure Initialize (this : in out ContentLink) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContentLink) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContentLink, IContentLink_Ptr);
   begin
      if this.m_IContentLink /= null then
         if this.m_IContentLink.all /= null then
            RefCount := this.m_IContentLink.all.Release;
            Free (this.m_IContentLink);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContentLink

   function Constructor return ContentLink is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IContentLink;
   begin
      return RetVal : ContentLink do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContentLink := new Windows.UI.Xaml.Documents.IContentLink;
            Retval.m_IContentLink.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ContentLink

   function get_BackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CursorProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CursorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusLeftProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusLeftProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusRightProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusRightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusUpProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusUpProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusDownProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusDownProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ElementSoundModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ElementSoundModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FocusStateProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FocusStateProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusUpNavigationStrategyProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusUpNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusDownNavigationStrategyProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusDownNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusLeftNavigationStrategyProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusLeftNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusRightNavigationStrategyProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusRightNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsTabStopProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsTabStopProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TabIndexProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IContentLinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IContentLinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TabIndexProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContentLink

   function get_Info
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Text.ContentLinkInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.IContentLinkInfo;
   begin
      return RetVal : WinRt.Windows.UI.Text.ContentLinkInfo do
         Hr := this.m_IContentLink.all.get_Info (m_ComRetVal'Access);
         Retval.m_IContentLinkInfo := new Windows.UI.Text.IContentLinkInfo;
         Retval.m_IContentLinkInfo.all := m_ComRetVal;
      end return;
   end;

   procedure put_Info
   (
      this : in out ContentLink;
      value : Windows.UI.Text.ContentLinkInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_Info (value.m_IContentLinkInfo.all);
   end;

   function get_Background
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IContentLink.all.get_Background (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Background
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_Background (value.m_IBrush.all);
   end;

   function get_Cursor
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Core.CoreCursorType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.CoreCursorType;
   begin
      Hr := this.m_IContentLink.all.get_Cursor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Cursor
   (
      this : in out ContentLink;
      value : Windows.UI.Core.CoreCursorType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_Cursor (value);
   end;

   function get_XYFocusLeft
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         Hr := this.m_IContentLink.all.get_XYFocusLeft (m_ComRetVal'Access);
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusLeft
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusLeft (value.m_IDependencyObject.all);
   end;

   function get_XYFocusRight
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         Hr := this.m_IContentLink.all.get_XYFocusRight (m_ComRetVal'Access);
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusRight
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusRight (value.m_IDependencyObject.all);
   end;

   function get_XYFocusUp
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         Hr := this.m_IContentLink.all.get_XYFocusUp (m_ComRetVal'Access);
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusUp
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusUp (value.m_IDependencyObject.all);
   end;

   function get_XYFocusDown
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         Hr := this.m_IContentLink.all.get_XYFocusDown (m_ComRetVal'Access);
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusDown
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusDown (value.m_IDependencyObject.all);
   end;

   function get_ElementSoundMode
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.ElementSoundMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.ElementSoundMode;
   begin
      Hr := this.m_IContentLink.all.get_ElementSoundMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ElementSoundMode
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.ElementSoundMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_ElementSoundMode (value);
   end;

   function get_FocusState
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.FocusState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FocusState;
   begin
      Hr := this.m_IContentLink.all.get_FocusState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_XYFocusUpNavigationStrategy
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
   begin
      Hr := this.m_IContentLink.all.get_XYFocusUpNavigationStrategy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_XYFocusUpNavigationStrategy
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusUpNavigationStrategy (value);
   end;

   function get_XYFocusDownNavigationStrategy
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
   begin
      Hr := this.m_IContentLink.all.get_XYFocusDownNavigationStrategy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_XYFocusDownNavigationStrategy
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusDownNavigationStrategy (value);
   end;

   function get_XYFocusLeftNavigationStrategy
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
   begin
      Hr := this.m_IContentLink.all.get_XYFocusLeftNavigationStrategy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_XYFocusLeftNavigationStrategy
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusLeftNavigationStrategy (value);
   end;

   function get_XYFocusRightNavigationStrategy
   (
      this : in out ContentLink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
   begin
      Hr := this.m_IContentLink.all.get_XYFocusRightNavigationStrategy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_XYFocusRightNavigationStrategy
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_XYFocusRightNavigationStrategy (value);
   end;

   function get_IsTabStop
   (
      this : in out ContentLink
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContentLink.all.get_IsTabStop (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsTabStop
   (
      this : in out ContentLink;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_IsTabStop (value);
   end;

   function get_TabIndex
   (
      this : in out ContentLink
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IContentLink.all.get_TabIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TabIndex
   (
      this : in out ContentLink;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.put_TabIndex (value);
   end;

   function add_Invoked
   (
      this : in out ContentLink;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContentLink.all.add_Invoked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Invoked
   (
      this : in out ContentLink;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.remove_Invoked (token);
   end;

   function add_GotFocus
   (
      this : in out ContentLink;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContentLink.all.add_GotFocus (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GotFocus
   (
      this : in out ContentLink;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.remove_GotFocus (token);
   end;

   function add_LostFocus
   (
      this : in out ContentLink;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContentLink.all.add_LostFocus (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LostFocus
   (
      this : in out ContentLink;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLink.all.remove_LostFocus (token);
   end;

   function Focus
   (
      this : in out ContentLink;
      value : Windows.UI.Xaml.FocusState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContentLink.all.Focus (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContentLinkInvokedEventArgs

   procedure Initialize (this : in out ContentLinkInvokedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContentLinkInvokedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContentLinkInvokedEventArgs, IContentLinkInvokedEventArgs_Ptr);
   begin
      if this.m_IContentLinkInvokedEventArgs /= null then
         if this.m_IContentLinkInvokedEventArgs.all /= null then
            RefCount := this.m_IContentLinkInvokedEventArgs.all.Release;
            Free (this.m_IContentLinkInvokedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContentLinkInvokedEventArgs

   function get_ContentLinkInfo
   (
      this : in out ContentLinkInvokedEventArgs
   )
   return WinRt.Windows.UI.Text.ContentLinkInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.IContentLinkInfo;
   begin
      return RetVal : WinRt.Windows.UI.Text.ContentLinkInfo do
         Hr := this.m_IContentLinkInvokedEventArgs.all.get_ContentLinkInfo (m_ComRetVal'Access);
         Retval.m_IContentLinkInfo := new Windows.UI.Text.IContentLinkInfo;
         Retval.m_IContentLinkInfo.all := m_ComRetVal;
      end return;
   end;

   function get_Handled
   (
      this : in out ContentLinkInvokedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IContentLinkInvokedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out ContentLinkInvokedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLinkInvokedEventArgs.all.put_Handled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContentLinkProviderCollection

   procedure Initialize (this : in out ContentLinkProviderCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContentLinkProviderCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContentLinkProviderCollection, IContentLinkProviderCollection_Ptr);
   begin
      if this.m_IContentLinkProviderCollection /= null then
         if this.m_IContentLinkProviderCollection.all /= null then
            RefCount := this.m_IContentLinkProviderCollection.all.Release;
            Free (this.m_IContentLinkProviderCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContentLinkProviderCollection

   function Constructor return ContentLinkProviderCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.ContentLinkProviderCollection");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IContentLinkProviderCollection;
   begin
      return RetVal : ContentLinkProviderCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContentLinkProviderCollection := new Windows.UI.Xaml.Documents.IContentLinkProviderCollection;
            Retval.m_IContentLinkProviderCollection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContentLinkProviderCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Documents.ContentLinkProvider>
   function GetAt
   (
      this : in out ContentLinkProviderCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Documents.ContentLinkProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.IContentLinkProvider;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.ContentLinkProvider do
         m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContentLinkProvider := new Windows.UI.Xaml.Documents.IContentLinkProvider;
         Retval.m_IContentLinkProvider.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out ContentLinkProviderCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out ContentLinkProviderCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out ContentLinkProviderCollection;
      value : Windows.UI.Xaml.Documents.ContentLinkProvider'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.IndexOf (value.m_IContentLinkProvider.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out ContentLinkProviderCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Documents.ContentLinkProvider'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IContentLinkProvider.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out ContentLinkProviderCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Documents.ContentLinkProvider'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IContentLinkProvider.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out ContentLinkProviderCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out ContentLinkProviderCollection;
      value : Windows.UI.Xaml.Documents.ContentLinkProvider'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.Append (value.m_IContentLinkProvider.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out ContentLinkProviderCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out ContentLinkProviderCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out ContentLinkProviderCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Documents.IContentLinkProvider_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out ContentLinkProviderCollection;
      items : Windows.UI.Xaml.Documents.IContentLinkProvider_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3869176246, 11953, 24220, (188, 65, 185, 77, 57, 98, 129, 228 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IVector_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Documents.ContentLinkProvider>
   function First
   (
      this : in out ContentLinkProviderCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IContentLinkProvider.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (423264699, 55388, 23763, (161, 48, 161, 208, 142, 170, 244, 190 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IContentLinkProviderCollection_Interface, IIterable_IContentLinkProvider.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContentLinkProviderCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Glyphs

   procedure Initialize (this : in out Glyphs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Glyphs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGlyphs, IGlyphs_Ptr);
   begin
      if this.m_IGlyphs /= null then
         if this.m_IGlyphs.all /= null then
            RefCount := this.m_IGlyphs.all.Release;
            Free (this.m_IGlyphs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Glyphs

   function Constructor return Glyphs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IGlyphs;
   begin
      return RetVal : Glyphs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGlyphs := new Windows.UI.Xaml.Documents.IGlyphs;
            Retval.m_IGlyphs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Glyphs

   function get_IsColorFontEnabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsColorFontEnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ColorFontPaletteIndexProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorFontPaletteIndexProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_UnicodeStringProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UnicodeStringProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IndicesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IndicesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FontUriProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FontUriProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StyleSimulationsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StyleSimulationsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FontRenderingEmSizeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FontRenderingEmSizeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_OriginXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OriginXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_OriginYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OriginYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FillProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Glyphs");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IGlyphsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGlyphsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FillProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Glyphs

   function get_UnicodeString
   (
      this : in out Glyphs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGlyphs.all.get_UnicodeString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_UnicodeString
   (
      this : in out Glyphs;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IGlyphs.all.put_UnicodeString (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Indices
   (
      this : in out Glyphs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGlyphs.all.get_Indices (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Indices
   (
      this : in out Glyphs;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IGlyphs.all.put_Indices (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FontUri
   (
      this : in out Glyphs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IGlyphs.all.get_FontUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_FontUri
   (
      this : in out Glyphs;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGlyphs.all.put_FontUri (value.m_IUriRuntimeClass.all);
   end;

   function get_StyleSimulations
   (
      this : in out Glyphs
   )
   return WinRt.Windows.UI.Xaml.Media.StyleSimulations is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.StyleSimulations;
   begin
      Hr := this.m_IGlyphs.all.get_StyleSimulations (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StyleSimulations
   (
      this : in out Glyphs;
      value : Windows.UI.Xaml.Media.StyleSimulations
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGlyphs.all.put_StyleSimulations (value);
   end;

   function get_FontRenderingEmSize
   (
      this : in out Glyphs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IGlyphs.all.get_FontRenderingEmSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FontRenderingEmSize
   (
      this : in out Glyphs;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGlyphs.all.put_FontRenderingEmSize (value);
   end;

   function get_OriginX
   (
      this : in out Glyphs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IGlyphs.all.get_OriginX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OriginX
   (
      this : in out Glyphs;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGlyphs.all.put_OriginX (value);
   end;

   function get_OriginY
   (
      this : in out Glyphs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IGlyphs.all.get_OriginY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OriginY
   (
      this : in out Glyphs;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGlyphs.all.put_OriginY (value);
   end;

   function get_Fill
   (
      this : in out Glyphs
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGlyphs.all.get_Fill (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Fill
   (
      this : in out Glyphs;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGlyphs.all.put_Fill (value.m_IBrush.all);
   end;

   function get_IsColorFontEnabled
   (
      this : in out Glyphs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IGlyphs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IGlyphs_Interface, WinRt.Windows.UI.Xaml.Documents.IGlyphs2, WinRt.Windows.UI.Xaml.Documents.IID_IGlyphs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGlyphs.all);
      Hr := m_Interface.get_IsColorFontEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsColorFontEnabled
   (
      this : in out Glyphs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IGlyphs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IGlyphs_Interface, WinRt.Windows.UI.Xaml.Documents.IGlyphs2, WinRt.Windows.UI.Xaml.Documents.IID_IGlyphs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGlyphs.all);
      Hr := m_Interface.put_IsColorFontEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ColorFontPaletteIndex
   (
      this : in out Glyphs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IGlyphs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IGlyphs_Interface, WinRt.Windows.UI.Xaml.Documents.IGlyphs2, WinRt.Windows.UI.Xaml.Documents.IID_IGlyphs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGlyphs.all);
      Hr := m_Interface.get_ColorFontPaletteIndex (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ColorFontPaletteIndex
   (
      this : in out Glyphs;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IGlyphs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IGlyphs_Interface, WinRt.Windows.UI.Xaml.Documents.IGlyphs2, WinRt.Windows.UI.Xaml.Documents.IID_IGlyphs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGlyphs.all);
      Hr := m_Interface.put_ColorFontPaletteIndex (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Hyperlink

   procedure Initialize (this : in out Hyperlink) is
   begin
      null;
   end;

   procedure Finalize (this : in out Hyperlink) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHyperlink, IHyperlink_Ptr);
   begin
      if this.m_IHyperlink /= null then
         if this.m_IHyperlink.all /= null then
            RefCount := this.m_IHyperlink.all.Release;
            Free (this.m_IHyperlink);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Hyperlink

   function Constructor return Hyperlink is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IHyperlink;
   begin
      return RetVal : Hyperlink do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHyperlink := new Windows.UI.Xaml.Documents.IHyperlink;
            Retval.m_IHyperlink.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Hyperlink

   function get_FocusStateProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FocusStateProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusUpNavigationStrategyProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusUpNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusDownNavigationStrategyProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusDownNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusLeftNavigationStrategyProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusLeftNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusRightNavigationStrategyProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusRightNavigationStrategyProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusLeftProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusLeftProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusRightProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusRightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusUpProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusUpProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_XYFocusDownProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XYFocusDownProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ElementSoundModeProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ElementSoundModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_NavigateUriProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NavigateUriProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_UnderlineStyleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UnderlineStyleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsTabStopProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics5_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsTabStopProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TabIndexProperty_Hyperlink
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Hyperlink");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IHyperlinkStatics5_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IHyperlinkStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TabIndexProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Hyperlink

   function get_NavigateUri
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHyperlink.all.get_NavigateUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_NavigateUri
   (
      this : in out Hyperlink;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHyperlink.all.put_NavigateUri (value.m_IUriRuntimeClass.all);
   end;

   function add_Click
   (
      this : in out Hyperlink;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IHyperlink.all.add_Click (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Click
   (
      this : in out Hyperlink;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHyperlink.all.remove_Click (token);
   end;

   function get_UnderlineStyle
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.Documents.UnderlineStyle is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.UnderlineStyle;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink2, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_UnderlineStyle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_UnderlineStyle
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.Documents.UnderlineStyle
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink2, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_UnderlineStyle (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_XYFocusLeft
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         m_Interface := QInterface (this.m_IHyperlink.all);
         Hr := m_Interface.get_XYFocusLeft (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusLeft
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusLeft (value.m_IDependencyObject.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_XYFocusRight
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         m_Interface := QInterface (this.m_IHyperlink.all);
         Hr := m_Interface.get_XYFocusRight (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusRight
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusRight (value.m_IDependencyObject.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_XYFocusUp
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         m_Interface := QInterface (this.m_IHyperlink.all);
         Hr := m_Interface.get_XYFocusUp (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusUp
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusUp (value.m_IDependencyObject.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_XYFocusDown
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         m_Interface := QInterface (this.m_IHyperlink.all);
         Hr := m_Interface.get_XYFocusDown (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_XYFocusDown
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusDown (value.m_IDependencyObject.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ElementSoundMode
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.ElementSoundMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.ElementSoundMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_ElementSoundMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ElementSoundMode
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.ElementSoundMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink3, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_ElementSoundMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_FocusState
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.FocusState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FocusState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_FocusState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_XYFocusUpNavigationStrategy
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_XYFocusUpNavigationStrategy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_XYFocusUpNavigationStrategy
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusUpNavigationStrategy (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_XYFocusDownNavigationStrategy
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_XYFocusDownNavigationStrategy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_XYFocusDownNavigationStrategy
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusDownNavigationStrategy (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_XYFocusLeftNavigationStrategy
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_XYFocusLeftNavigationStrategy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_XYFocusLeftNavigationStrategy
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusLeftNavigationStrategy (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_XYFocusRightNavigationStrategy
   (
      this : in out Hyperlink
   )
   return WinRt.Windows.UI.Xaml.Input.XYFocusNavigationStrategy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.XYFocusNavigationStrategy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_XYFocusRightNavigationStrategy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_XYFocusRightNavigationStrategy
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.Input.XYFocusNavigationStrategy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_XYFocusRightNavigationStrategy (value);
      m_RefCount := m_Interface.Release;
   end;

   function add_GotFocus
   (
      this : in out Hyperlink;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.add_GotFocus (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_GotFocus
   (
      this : in out Hyperlink;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.remove_GotFocus (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_LostFocus
   (
      this : in out Hyperlink;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.add_LostFocus (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_LostFocus
   (
      this : in out Hyperlink;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.remove_LostFocus (token);
      m_RefCount := m_Interface.Release;
   end;

   function Focus
   (
      this : in out Hyperlink;
      value : Windows.UI.Xaml.FocusState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink4, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.Focus (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsTabStop
   (
      this : in out Hyperlink
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink5, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_IsTabStop (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsTabStop
   (
      this : in out Hyperlink;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink5, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_IsTabStop (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TabIndex
   (
      this : in out Hyperlink
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink5, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.get_TabIndex (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TabIndex
   (
      this : in out Hyperlink;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Documents.IHyperlink5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Documents.IHyperlink_Interface, WinRt.Windows.UI.Xaml.Documents.IHyperlink5, WinRt.Windows.UI.Xaml.Documents.IID_IHyperlink5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHyperlink.all);
      Hr := m_Interface.put_TabIndex (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HyperlinkClickEventArgs

   procedure Initialize (this : in out HyperlinkClickEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out HyperlinkClickEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHyperlinkClickEventArgs, IHyperlinkClickEventArgs_Ptr);
   begin
      if this.m_IHyperlinkClickEventArgs /= null then
         if this.m_IHyperlinkClickEventArgs.all /= null then
            RefCount := this.m_IHyperlinkClickEventArgs.all.Release;
            Free (this.m_IHyperlinkClickEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HyperlinkClickEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InlineCollection

   procedure Initialize (this : in out InlineCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out InlineCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InlineCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Documents.Inline>
   function GetAt
   (
      this : in out InlineCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Xaml.Documents.Inline'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.IInline;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.Inline do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IInline := new Windows.UI.Xaml.Documents.IInline;
         Retval.m_IInline.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out InlineCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out InlineCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out InlineCollection;
      value : Windows.UI.Xaml.Documents.Inline'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IInline.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out InlineCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Documents.Inline'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_IInline.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out InlineCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Xaml.Documents.Inline'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_IInline.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out InlineCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out InlineCollection;
      value : Windows.UI.Xaml.Documents.Inline'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_IInline.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out InlineCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out InlineCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out InlineCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Xaml.Documents.IInline_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out InlineCollection;
      items : Windows.UI.Xaml.Documents.IInline_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2464977490, 36579, 21974, (132, 180, 48, 182, 53, 7, 119, 120 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_IInline.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Documents.Inline>
   function First
   (
      this : in out InlineCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IInline.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3788683536, 6338, 22790, (143, 138, 214, 42, 99, 249, 63, 24 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IInline.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InlineUIContainer

   procedure Initialize (this : in out InlineUIContainer) is
   begin
      null;
   end;

   procedure Finalize (this : in out InlineUIContainer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInlineUIContainer, IInlineUIContainer_Ptr);
   begin
      if this.m_IInlineUIContainer /= null then
         if this.m_IInlineUIContainer.all /= null then
            RefCount := this.m_IInlineUIContainer.all.Release;
            Free (this.m_IInlineUIContainer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InlineUIContainer

   function Constructor return InlineUIContainer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.InlineUIContainer");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IInlineUIContainer;
   begin
      return RetVal : InlineUIContainer do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IInlineUIContainer := new Windows.UI.Xaml.Documents.IInlineUIContainer;
            Retval.m_IInlineUIContainer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InlineUIContainer

   function get_Child
   (
      this : in out InlineUIContainer
   )
   return WinRt.Windows.UI.Xaml.UIElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElement do
         Hr := this.m_IInlineUIContainer.all.get_Child (m_ComRetVal'Access);
         Retval.m_IUIElement := new Windows.UI.Xaml.IUIElement;
         Retval.m_IUIElement.all := m_ComRetVal;
      end return;
   end;

   procedure put_Child
   (
      this : in out InlineUIContainer;
      value : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInlineUIContainer.all.put_Child (value.m_IUIElement.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Italic

   procedure Initialize (this : in out Italic) is
   begin
      null;
   end;

   procedure Finalize (this : in out Italic) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IItalic, IItalic_Ptr);
   begin
      if this.m_IItalic /= null then
         if this.m_IItalic.all /= null then
            RefCount := this.m_IItalic.all.Release;
            Free (this.m_IItalic);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Italic

   function Constructor return Italic is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Italic");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IItalic;
   begin
      return RetVal : Italic do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IItalic := new Windows.UI.Xaml.Documents.IItalic;
            Retval.m_IItalic.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Italic

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LineBreak

   procedure Initialize (this : in out LineBreak) is
   begin
      null;
   end;

   procedure Finalize (this : in out LineBreak) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILineBreak, ILineBreak_Ptr);
   begin
      if this.m_ILineBreak /= null then
         if this.m_ILineBreak.all /= null then
            RefCount := this.m_ILineBreak.all.Release;
            Free (this.m_ILineBreak);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LineBreak

   function Constructor return LineBreak is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.LineBreak");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.ILineBreak;
   begin
      return RetVal : LineBreak do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILineBreak := new Windows.UI.Xaml.Documents.ILineBreak;
            Retval.m_ILineBreak.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LineBreak

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Paragraph

   procedure Initialize (this : in out Paragraph) is
   begin
      null;
   end;

   procedure Finalize (this : in out Paragraph) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IParagraph, IParagraph_Ptr);
   begin
      if this.m_IParagraph /= null then
         if this.m_IParagraph.all /= null then
            RefCount := this.m_IParagraph.all.Release;
            Free (this.m_IParagraph);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Paragraph

   function Constructor return Paragraph is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Paragraph");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IParagraph;
   begin
      return RetVal : Paragraph do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IParagraph := new Windows.UI.Xaml.Documents.IParagraph;
            Retval.m_IParagraph.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Paragraph

   function get_TextIndentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Paragraph");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IParagraphStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IParagraphStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TextIndentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Paragraph

   function get_Inlines
   (
      this : in out Paragraph
   )
   return WinRt.Windows.UI.Xaml.Documents.InlineCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.InlineCollection do
         Hr := this.m_IParagraph.all.get_Inlines (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_TextIndent
   (
      this : in out Paragraph
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IParagraph.all.get_TextIndent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TextIndent
   (
      this : in out Paragraph;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IParagraph.all.put_TextIndent (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaceContentLinkProvider

   procedure Initialize (this : in out PlaceContentLinkProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaceContentLinkProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaceContentLinkProvider, IPlaceContentLinkProvider_Ptr);
   begin
      if this.m_IPlaceContentLinkProvider /= null then
         if this.m_IPlaceContentLinkProvider.all /= null then
            RefCount := this.m_IPlaceContentLinkProvider.all.Release;
            Free (this.m_IPlaceContentLinkProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlaceContentLinkProvider

   function Constructor return PlaceContentLinkProvider is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.PlaceContentLinkProvider");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IPlaceContentLinkProvider;
   begin
      return RetVal : PlaceContentLinkProvider do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlaceContentLinkProvider := new Windows.UI.Xaml.Documents.IPlaceContentLinkProvider;
            Retval.m_IPlaceContentLinkProvider.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaceContentLinkProvider

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Run

   procedure Initialize (this : in out Run) is
   begin
      null;
   end;

   procedure Finalize (this : in out Run) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRun, IRun_Ptr);
   begin
      if this.m_IRun /= null then
         if this.m_IRun.all /= null then
            RefCount := this.m_IRun.all.Release;
            Free (this.m_IRun);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Run

   function Constructor return Run is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Run");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IRun;
   begin
      return RetVal : Run do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRun := new Windows.UI.Xaml.Documents.IRun;
            Retval.m_IRun.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Run

   function get_FlowDirectionProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Run");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.IRunStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRunStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FlowDirectionProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Run

   function get_Text
   (
      this : in out Run
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRun.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out Run;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IRun.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FlowDirection
   (
      this : in out Run
   )
   return WinRt.Windows.UI.Xaml.FlowDirection is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FlowDirection;
   begin
      Hr := this.m_IRun.all.get_FlowDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FlowDirection
   (
      this : in out Run;
      value : Windows.UI.Xaml.FlowDirection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRun.all.put_FlowDirection (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextHighlighter

   procedure Initialize (this : in out TextHighlighter) is
   begin
      null;
   end;

   procedure Finalize (this : in out TextHighlighter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextHighlighter, ITextHighlighter_Ptr);
   begin
      if this.m_ITextHighlighter /= null then
         if this.m_ITextHighlighter.all /= null then
            RefCount := this.m_ITextHighlighter.all.Release;
            Free (this.m_ITextHighlighter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextHighlighter

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return TextHighlighter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextHighlighter");
      m_Factory    : access ITextHighlighterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.ITextHighlighter;
   begin
      return RetVal : TextHighlighter do
         Hr := RoGetActivationFactory (m_hString, IID_ITextHighlighterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITextHighlighter := new Windows.UI.Xaml.Documents.ITextHighlighter;
            Retval.m_ITextHighlighter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TextHighlighter

   function get_ForegroundProperty_TextHighlighter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextHighlighter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextHighlighterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextHighlighterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ForegroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_BackgroundProperty_TextHighlighter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.TextHighlighter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITextHighlighterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITextHighlighterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextHighlighter

   function get_Ranges
   (
      this : in out TextHighlighter
   )
   return IVector_TextRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_TextRange.Kind;
   begin
      Hr := this.m_ITextHighlighter.all.get_Ranges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_TextRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Foreground
   (
      this : in out TextHighlighter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_ITextHighlighter.all.get_Foreground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Foreground
   (
      this : in out TextHighlighter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextHighlighter.all.put_Foreground (value.m_IBrush.all);
   end;

   function get_Background
   (
      this : in out TextHighlighter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_ITextHighlighter.all.get_Background (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Background
   (
      this : in out TextHighlighter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextHighlighter.all.put_Background (value.m_IBrush.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextHighlighterBase

   procedure Initialize (this : in out TextHighlighterBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out TextHighlighterBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextHighlighterBase, ITextHighlighterBase_Ptr);
   begin
      if this.m_ITextHighlighterBase /= null then
         if this.m_ITextHighlighterBase.all /= null then
            RefCount := this.m_ITextHighlighterBase.all.Release;
            Free (this.m_ITextHighlighterBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TextHighlighterBase

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextHighlighterBase

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TextPointer

   procedure Initialize (this : in out TextPointer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TextPointer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextPointer, ITextPointer_Ptr);
   begin
      if this.m_ITextPointer /= null then
         if this.m_ITextPointer.all /= null then
            RefCount := this.m_ITextPointer.all.Release;
            Free (this.m_ITextPointer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TextPointer

   function get_Parent
   (
      this : in out TextPointer
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         Hr := this.m_ITextPointer.all.get_Parent (m_ComRetVal'Access);
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   function get_VisualParent
   (
      this : in out TextPointer
   )
   return WinRt.Windows.UI.Xaml.FrameworkElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IFrameworkElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.FrameworkElement do
         Hr := this.m_ITextPointer.all.get_VisualParent (m_ComRetVal'Access);
         Retval.m_IFrameworkElement := new Windows.UI.Xaml.IFrameworkElement;
         Retval.m_IFrameworkElement.all := m_ComRetVal;
      end return;
   end;

   function get_LogicalDirection
   (
      this : in out TextPointer
   )
   return WinRt.Windows.UI.Xaml.Documents.LogicalDirection is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.LogicalDirection;
   begin
      Hr := this.m_ITextPointer.all.get_LogicalDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Offset
   (
      this : in out TextPointer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextPointer.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetCharacterRect
   (
      this : in out TextPointer;
      direction : Windows.UI.Xaml.Documents.LogicalDirection
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ITextPointer.all.GetCharacterRect (direction, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetPositionAtOffset
   (
      this : in out TextPointer;
      offset : WinRt.Int32;
      direction : Windows.UI.Xaml.Documents.LogicalDirection
   )
   return WinRt.Windows.UI.Xaml.Documents.TextPointer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Documents.ITextPointer;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Documents.TextPointer do
         Hr := this.m_ITextPointer.all.GetPositionAtOffset (offset, direction, m_ComRetVal'Access);
         Retval.m_ITextPointer := new Windows.UI.Xaml.Documents.ITextPointer;
         Retval.m_ITextPointer.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Typography

   procedure Initialize (this : in out Typography) is
   begin
      null;
   end;

   procedure Finalize (this : in out Typography) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITypography, ITypography_Ptr);
   begin
      if this.m_ITypography /= null then
         if this.m_ITypography.all /= null then
            RefCount := this.m_ITypography.all.Release;
            Free (this.m_ITypography);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Typography

   function get_AnnotationAlternatesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AnnotationAlternatesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetAnnotationAlternates
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetAnnotationAlternates (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetAnnotationAlternates
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetAnnotationAlternates (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_EastAsianExpertFormsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EastAsianExpertFormsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetEastAsianExpertForms
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEastAsianExpertForms (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetEastAsianExpertForms
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetEastAsianExpertForms (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_EastAsianLanguageProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EastAsianLanguageProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetEastAsianLanguage
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.FontEastAsianLanguage is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FontEastAsianLanguage;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEastAsianLanguage (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetEastAsianLanguage
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.FontEastAsianLanguage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetEastAsianLanguage (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_EastAsianWidthsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EastAsianWidthsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetEastAsianWidths
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.FontEastAsianWidths is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FontEastAsianWidths;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEastAsianWidths (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetEastAsianWidths
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.FontEastAsianWidths
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetEastAsianWidths (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StandardLigaturesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StandardLigaturesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStandardLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStandardLigatures (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStandardLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStandardLigatures (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_ContextualLigaturesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ContextualLigaturesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetContextualLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetContextualLigatures (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetContextualLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetContextualLigatures (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_DiscretionaryLigaturesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DiscretionaryLigaturesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetDiscretionaryLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDiscretionaryLigatures (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetDiscretionaryLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetDiscretionaryLigatures (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_HistoricalLigaturesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HistoricalLigaturesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetHistoricalLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetHistoricalLigatures (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetHistoricalLigatures
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetHistoricalLigatures (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StandardSwashesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StandardSwashesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStandardSwashes
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStandardSwashes (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStandardSwashes
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStandardSwashes (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_ContextualSwashesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ContextualSwashesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetContextualSwashes
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetContextualSwashes (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetContextualSwashes
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetContextualSwashes (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_ContextualAlternatesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ContextualAlternatesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetContextualAlternates
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetContextualAlternates (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetContextualAlternates
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetContextualAlternates (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticAlternatesProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticAlternatesProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticAlternates
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticAlternates (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticAlternates
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticAlternates (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet1Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet1Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet1
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet1 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet1
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet1 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet2Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet2Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet2
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet2 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet2
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet2 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet3Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet3Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet3
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet3 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet3
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet3 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet4Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet4Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet4
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet4 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet4
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet4 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet5Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet5Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet5
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet5 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet5
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet5 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet6Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet6Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet6
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet6 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet6
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet6 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet7Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet7Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet7
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet7 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet7
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet7 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet8Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet8Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet8
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet8 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet8
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet8 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet9Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet9Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet9
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet9 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet9
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet9 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet10Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet10Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet10
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet10 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet10
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet10 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet11Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet11Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet11
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet11 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet11
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet11 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet12Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet12Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet12
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet12 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet12
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet12 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet13Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet13Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet13
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet13 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet13
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet13 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet14Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet14Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet14
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet14 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet14
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet14 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet15Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet15Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet15
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet15 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet15
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet15 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet16Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet16Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet16
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet16 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet16
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet16 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet17Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet17Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet17
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet17 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet17
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet17 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet18Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet18Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet18
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet18 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet18
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet18 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet19Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet19Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet19
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet19 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet19
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet19 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_StylisticSet20Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StylisticSet20Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetStylisticSet20
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetStylisticSet20 (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetStylisticSet20
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetStylisticSet20 (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_CapitalsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CapitalsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetCapitals
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.FontCapitals is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FontCapitals;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCapitals (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetCapitals
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.FontCapitals
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetCapitals (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_CapitalSpacingProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CapitalSpacingProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetCapitalSpacing
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCapitalSpacing (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetCapitalSpacing
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetCapitalSpacing (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_KerningProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KerningProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetKerning
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetKerning (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetKerning
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetKerning (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_CaseSensitiveFormsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CaseSensitiveFormsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetCaseSensitiveForms
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCaseSensitiveForms (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetCaseSensitiveForms
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetCaseSensitiveForms (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_HistoricalFormsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HistoricalFormsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetHistoricalForms
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetHistoricalForms (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetHistoricalForms
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetHistoricalForms (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_FractionProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FractionProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetFraction
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.FontFraction is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FontFraction;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetFraction (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetFraction
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.FontFraction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetFraction (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_NumeralStyleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NumeralStyleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetNumeralStyle
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.FontNumeralStyle is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FontNumeralStyle;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetNumeralStyle (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetNumeralStyle
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.FontNumeralStyle
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetNumeralStyle (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_NumeralAlignmentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NumeralAlignmentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetNumeralAlignment
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.FontNumeralAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FontNumeralAlignment;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetNumeralAlignment (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetNumeralAlignment
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.FontNumeralAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetNumeralAlignment (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_SlashedZeroProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SlashedZeroProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetSlashedZero
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetSlashedZero (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetSlashedZero
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetSlashedZero (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_MathematicalGreekProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MathematicalGreekProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetMathematicalGreek
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetMathematicalGreek (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetMathematicalGreek
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetMathematicalGreek (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_VariantsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VariantsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetVariants
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.FontVariants is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.FontVariants;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetVariants (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetVariants
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.FontVariants
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Typography");
      m_Factory        : access WinRt.Windows.UI.Xaml.Documents.ITypographyStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ITypographyStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetVariants (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Typography

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Underline

   procedure Initialize (this : in out Underline) is
   begin
      null;
   end;

   procedure Finalize (this : in out Underline) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUnderline, IUnderline_Ptr);
   begin
      if this.m_IUnderline /= null then
         if this.m_IUnderline.all /= null then
            RefCount := this.m_IUnderline.all.Release;
            Free (this.m_IUnderline);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Underline

   function Constructor return Underline is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Documents.Underline");
      m_ComRetVal  : aliased Windows.UI.Xaml.Documents.IUnderline;
   begin
      return RetVal : Underline do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUnderline := new Windows.UI.Xaml.Documents.IUnderline;
            Retval.m_IUnderline.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Underline

end;

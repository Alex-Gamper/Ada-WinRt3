--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Calls.Background is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallBlockedTriggerDetails

   procedure Initialize (this : in out PhoneCallBlockedTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallBlockedTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallBlockedTriggerDetails, IPhoneCallBlockedTriggerDetails_Ptr);
   begin
      if this.m_IPhoneCallBlockedTriggerDetails /= null then
         if this.m_IPhoneCallBlockedTriggerDetails.all /= null then
            RefCount := this.m_IPhoneCallBlockedTriggerDetails.all.Release;
            Free (this.m_IPhoneCallBlockedTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallBlockedTriggerDetails

   function get_PhoneNumber
   (
      this : in out PhoneCallBlockedTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallBlockedTriggerDetails.all.get_PhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LineId
   (
      this : in out PhoneCallBlockedTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneCallBlockedTriggerDetails.all.get_LineId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CallBlockedReason
   (
      this : in out PhoneCallBlockedTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Calls.Background.PhoneCallBlockedReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.Background.PhoneCallBlockedReason;
   begin
      Hr := this.m_IPhoneCallBlockedTriggerDetails.all.get_CallBlockedReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallOriginDataRequestTriggerDetails

   procedure Initialize (this : in out PhoneCallOriginDataRequestTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallOriginDataRequestTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallOriginDataRequestTriggerDetails, IPhoneCallOriginDataRequestTriggerDetails_Ptr);
   begin
      if this.m_IPhoneCallOriginDataRequestTriggerDetails /= null then
         if this.m_IPhoneCallOriginDataRequestTriggerDetails.all /= null then
            RefCount := this.m_IPhoneCallOriginDataRequestTriggerDetails.all.Release;
            Free (this.m_IPhoneCallOriginDataRequestTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallOriginDataRequestTriggerDetails

   function get_RequestId
   (
      this : in out PhoneCallOriginDataRequestTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneCallOriginDataRequestTriggerDetails.all.get_RequestId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhoneNumber
   (
      this : in out PhoneCallOriginDataRequestTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallOriginDataRequestTriggerDetails.all.get_PhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneIncomingCallDismissedTriggerDetails

   procedure Initialize (this : in out PhoneIncomingCallDismissedTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneIncomingCallDismissedTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneIncomingCallDismissedTriggerDetails, IPhoneIncomingCallDismissedTriggerDetails_Ptr);
   begin
      if this.m_IPhoneIncomingCallDismissedTriggerDetails /= null then
         if this.m_IPhoneIncomingCallDismissedTriggerDetails.all /= null then
            RefCount := this.m_IPhoneIncomingCallDismissedTriggerDetails.all.Release;
            Free (this.m_IPhoneIncomingCallDismissedTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneIncomingCallDismissedTriggerDetails

   function get_LineId
   (
      this : in out PhoneIncomingCallDismissedTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneIncomingCallDismissedTriggerDetails.all.get_LineId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhoneNumber
   (
      this : in out PhoneIncomingCallDismissedTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneIncomingCallDismissedTriggerDetails.all.get_PhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out PhoneIncomingCallDismissedTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneIncomingCallDismissedTriggerDetails.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DismissalTime
   (
      this : in out PhoneIncomingCallDismissedTriggerDetails
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPhoneIncomingCallDismissedTriggerDetails.all.get_DismissalTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TextReplyMessage
   (
      this : in out PhoneIncomingCallDismissedTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneIncomingCallDismissedTriggerDetails.all.get_TextReplyMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Reason
   (
      this : in out PhoneIncomingCallDismissedTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Calls.Background.PhoneIncomingCallDismissedReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.Background.PhoneIncomingCallDismissedReason;
   begin
      Hr := this.m_IPhoneIncomingCallDismissedTriggerDetails.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLineChangedTriggerDetails

   procedure Initialize (this : in out PhoneLineChangedTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLineChangedTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLineChangedTriggerDetails, IPhoneLineChangedTriggerDetails_Ptr);
   begin
      if this.m_IPhoneLineChangedTriggerDetails /= null then
         if this.m_IPhoneLineChangedTriggerDetails.all /= null then
            RefCount := this.m_IPhoneLineChangedTriggerDetails.all.Release;
            Free (this.m_IPhoneLineChangedTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLineChangedTriggerDetails

   function get_LineId
   (
      this : in out PhoneLineChangedTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneLineChangedTriggerDetails.all.get_LineId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ChangeType
   (
      this : in out PhoneLineChangedTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Calls.Background.PhoneLineChangeKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.Background.PhoneLineChangeKind;
   begin
      Hr := this.m_IPhoneLineChangedTriggerDetails.all.get_ChangeType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function HasLinePropertyChanged
   (
      this : in out PhoneLineChangedTriggerDetails;
      lineProperty : Windows.ApplicationModel.Calls.Background.PhoneLineProperties
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLineChangedTriggerDetails.all.HasLinePropertyChanged (lineProperty, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneNewVoicemailMessageTriggerDetails

   procedure Initialize (this : in out PhoneNewVoicemailMessageTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneNewVoicemailMessageTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneNewVoicemailMessageTriggerDetails, IPhoneNewVoicemailMessageTriggerDetails_Ptr);
   begin
      if this.m_IPhoneNewVoicemailMessageTriggerDetails /= null then
         if this.m_IPhoneNewVoicemailMessageTriggerDetails.all /= null then
            RefCount := this.m_IPhoneNewVoicemailMessageTriggerDetails.all.Release;
            Free (this.m_IPhoneNewVoicemailMessageTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneNewVoicemailMessageTriggerDetails

   function get_LineId
   (
      this : in out PhoneNewVoicemailMessageTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneNewVoicemailMessageTriggerDetails.all.get_LineId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VoicemailCount
   (
      this : in out PhoneNewVoicemailMessageTriggerDetails
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPhoneNewVoicemailMessageTriggerDetails.all.get_VoicemailCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OperatorMessage
   (
      this : in out PhoneNewVoicemailMessageTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneNewVoicemailMessageTriggerDetails.all.get_OperatorMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

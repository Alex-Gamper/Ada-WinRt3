--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Resources is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CustomXamlResourceLoader

   procedure Initialize (this : in out CustomXamlResourceLoader) is
   begin
      null;
   end;

   procedure Finalize (this : in out CustomXamlResourceLoader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICustomXamlResourceLoader, ICustomXamlResourceLoader_Ptr);
   begin
      if this.m_ICustomXamlResourceLoader /= null then
         if this.m_ICustomXamlResourceLoader.all /= null then
            RefCount := this.m_ICustomXamlResourceLoader.all.Release;
            Free (this.m_ICustomXamlResourceLoader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CustomXamlResourceLoader

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CustomXamlResourceLoader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Resources.CustomXamlResourceLoader");
      m_Factory    : access ICustomXamlResourceLoaderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Resources.ICustomXamlResourceLoader;
   begin
      return RetVal : CustomXamlResourceLoader do
         Hr := RoGetActivationFactory (m_hString, IID_ICustomXamlResourceLoaderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICustomXamlResourceLoader := new Windows.UI.Xaml.Resources.ICustomXamlResourceLoader;
            Retval.m_ICustomXamlResourceLoader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CustomXamlResourceLoader

   function get_Current
   return WinRt.Windows.UI.Xaml.Resources.CustomXamlResourceLoader is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Resources.CustomXamlResourceLoader");
      m_Factory        : access WinRt.Windows.UI.Xaml.Resources.ICustomXamlResourceLoaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Resources.ICustomXamlResourceLoader;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Resources.CustomXamlResourceLoader do
         Hr := RoGetActivationFactory (m_hString, IID_ICustomXamlResourceLoaderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICustomXamlResourceLoader := new Windows.UI.Xaml.Resources.ICustomXamlResourceLoader;
            Retval.m_ICustomXamlResourceLoader.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure put_Current
   (
      value : Windows.UI.Xaml.Resources.CustomXamlResourceLoader'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Resources.CustomXamlResourceLoader");
      m_Factory        : access WinRt.Windows.UI.Xaml.Resources.ICustomXamlResourceLoaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICustomXamlResourceLoaderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.put_Current (value.m_ICustomXamlResourceLoader.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CustomXamlResourceLoader

   function GetResource
   (
      this : in out CustomXamlResourceLoader;
      resourceId : WinRt.WString;
      objectType : WinRt.WString;
      propertyName : WinRt.WString;
      propertyType : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Resources.ICustomXamlResourceLoaderOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_resourceId : WinRt.HString := To_HString (resourceId);
      HStr_objectType : WinRt.HString := To_HString (objectType);
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
      HStr_propertyType : WinRt.HString := To_HString (propertyType);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Resources.ICustomXamlResourceLoader_Interface, WinRt.Windows.UI.Xaml.Resources.ICustomXamlResourceLoaderOverrides, WinRt.Windows.UI.Xaml.Resources.IID_ICustomXamlResourceLoaderOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICustomXamlResourceLoader.all);
      Hr := m_Interface.GetResource (HStr_resourceId, HStr_objectType, HStr_propertyName, HStr_propertyType, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_resourceId);
      Hr := WindowsDeleteString (HStr_objectType);
      Hr := WindowsDeleteString (HStr_propertyName);
      Hr := WindowsDeleteString (HStr_propertyType);
      return m_ComRetVal;
   end;

end;

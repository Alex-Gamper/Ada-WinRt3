--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System.Diagnostics.TraceReporting is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PlatformDiagnosticActions is

      function IsScenarioEnabled
      (
         scenarioId : WinRt.Guid
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsScenarioEnabled (scenarioId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function TryEscalateScenario
      (
         scenarioId : WinRt.Guid;
         escalationType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticEscalationType;
         outputDirectory : WinRt.WString;
         timestampOutputDirectory : WinRt.Boolean;
         forceEscalationUpload : WinRt.Boolean;
         triggers : GenericObject
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
         HStr_outputDirectory : WinRt.HString := To_HString (outputDirectory);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryEscalateScenario (scenarioId, escalationType, HStr_outputDirectory, timestampOutputDirectory, forceEscalationUpload, triggers, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_outputDirectory);
         return m_ComRetVal;
      end;

      function DownloadLatestSettingsForNamespace
      (
         partner : WinRt.WString;
         feature : WinRt.WString;
         isScenarioNamespace : WinRt.Boolean;
         downloadOverCostedNetwork : WinRt.Boolean;
         downloadOverBattery : WinRt.Boolean
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState;
         HStr_partner : WinRt.HString := To_HString (partner);
         HStr_feature : WinRt.HString := To_HString (feature);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DownloadLatestSettingsForNamespace (HStr_partner, HStr_feature, isScenarioNamespace, downloadOverCostedNetwork, downloadOverBattery, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_partner);
         Hr := WindowsDeleteString (HStr_feature);
         return m_ComRetVal;
      end;

      function GetActiveScenarioList
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetActiveScenarioList (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function ForceUpload
      (
         latency : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticEventBufferLatencies;
         uploadOverCostedNetwork : WinRt.Boolean;
         uploadOverBattery : WinRt.Boolean
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ForceUpload (latency, uploadOverCostedNetwork, uploadOverBattery, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function IsTraceRunning
      (
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType;
         scenarioId : WinRt.Guid;
         traceProfileHash : WinRt.UInt64
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotState is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotState;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsTraceRunning (slotType, scenarioId, traceProfileHash, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetActiveTraceRuntime
      (
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType
      )
      return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceRuntimeInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceRuntimeInfo;
      begin
         return RetVal : WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceRuntimeInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetActiveTraceRuntime (slotType, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPlatformDiagnosticTraceRuntimeInfo := new Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceRuntimeInfo;
               Retval.m_IPlatformDiagnosticTraceRuntimeInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetKnownTraceList
      (
         slotType : Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotType
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions");
         m_Factory        : access WinRt.Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticActionsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetKnownTraceList (slotType, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end PlatformDiagnosticActions;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlatformDiagnosticTraceInfo

   procedure Initialize (this : in out PlatformDiagnosticTraceInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlatformDiagnosticTraceInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlatformDiagnosticTraceInfo, IPlatformDiagnosticTraceInfo_Ptr);
   begin
      if this.m_IPlatformDiagnosticTraceInfo /= null then
         if this.m_IPlatformDiagnosticTraceInfo.all /= null then
            RefCount := this.m_IPlatformDiagnosticTraceInfo.all.Release;
            Free (this.m_IPlatformDiagnosticTraceInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlatformDiagnosticTraceInfo

   function get_ScenarioId
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPlatformDiagnosticTraceInfo.all.get_ScenarioId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProfileHash
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPlatformDiagnosticTraceInfo.all.get_ProfileHash (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsExclusive
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlatformDiagnosticTraceInfo.all.get_IsExclusive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAutoLogger
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlatformDiagnosticTraceInfo.all.get_IsAutoLogger (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxTraceDurationFileTime
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IPlatformDiagnosticTraceInfo.all.get_MaxTraceDurationFileTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Priority
   (
      this : in out PlatformDiagnosticTraceInfo
   )
   return WinRt.Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTracePriority is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTracePriority;
   begin
      Hr := this.m_IPlatformDiagnosticTraceInfo.all.get_Priority (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlatformDiagnosticTraceRuntimeInfo

   procedure Initialize (this : in out PlatformDiagnosticTraceRuntimeInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlatformDiagnosticTraceRuntimeInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlatformDiagnosticTraceRuntimeInfo, IPlatformDiagnosticTraceRuntimeInfo_Ptr);
   begin
      if this.m_IPlatformDiagnosticTraceRuntimeInfo /= null then
         if this.m_IPlatformDiagnosticTraceRuntimeInfo.all /= null then
            RefCount := this.m_IPlatformDiagnosticTraceRuntimeInfo.all.Release;
            Free (this.m_IPlatformDiagnosticTraceRuntimeInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlatformDiagnosticTraceRuntimeInfo

   function get_RuntimeFileTime
   (
      this : in out PlatformDiagnosticTraceRuntimeInfo
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IPlatformDiagnosticTraceRuntimeInfo.all.get_RuntimeFileTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EtwRuntimeFileTime
   (
      this : in out PlatformDiagnosticTraceRuntimeInfo
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IPlatformDiagnosticTraceRuntimeInfo.all.get_EtwRuntimeFileTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

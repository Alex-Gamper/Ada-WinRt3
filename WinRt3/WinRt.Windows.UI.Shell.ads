--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with WinRt.Windows.ApplicationModel.Core;
with WinRt.Windows.Foundation;
limited with WinRt.Windows.UI.StartScreen;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.UI.Shell is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IAdaptiveCard_Interface is interface and WinRt.IInspectable_Interface;
   type IAdaptiveCard is access all IAdaptiveCard_Interface'Class;

   type IAdaptiveCardBuilderStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IAdaptiveCardBuilderStatics is access all IAdaptiveCardBuilderStatics_Interface'Class;

   type ISecurityAppManager_Interface is interface and WinRt.IInspectable_Interface;
   type ISecurityAppManager is access all ISecurityAppManager_Interface'Class;
   type ISecurityAppManager_Ptr is access all ISecurityAppManager;

   type ITaskbarManager_Interface is interface and WinRt.IInspectable_Interface;
   type ITaskbarManager is access all ITaskbarManager_Interface'Class;
   type ITaskbarManager_Ptr is access all ITaskbarManager;

   type ITaskbarManager2_Interface is interface and WinRt.IInspectable_Interface;
   type ITaskbarManager2 is access all ITaskbarManager2_Interface'Class;

   type ITaskbarManagerStatics_Interface is interface and WinRt.IInspectable_Interface;
   type ITaskbarManagerStatics is access all ITaskbarManagerStatics_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type SecurityAppManager is new Ada.Finalization.Limited_Controlled with
      record
         m_ISecurityAppManager : access Windows.UI.Shell.ISecurityAppManager;
      end record;
   type SecurityAppManager_Ptr is access all SecurityAppManager;

   type TaskbarManager is new Ada.Finalization.Limited_Controlled with
      record
         m_ITaskbarManager : access Windows.UI.Shell.ITaskbarManager;
      end record;
   type TaskbarManager_Ptr is access all TaskbarManager;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type SecurityAppKind is (
      WebProtection_e
   );
   for SecurityAppKind use (
      WebProtection_e => 0
   );
   type SecurityAppKind_Ptr is access all SecurityAppKind;

   type SecurityAppState is (
      Disabled_e,
      Enabled_e
   );
   for SecurityAppState use (
      Disabled_e => 0,
      Enabled_e => 1
   );
   type SecurityAppState_Ptr is access all SecurityAppState;

   type SecurityAppSubstatus is (
      Undetermined_e,
      NoActionNeeded_e,
      ActionRecommended_e,
      ActionNeeded_e
   );
   for SecurityAppSubstatus use (
      Undetermined_e => 0,
      NoActionNeeded_e => 1,
      ActionRecommended_e => 2,
      ActionNeeded_e => 3
   );
   type SecurityAppSubstatus_Ptr is access all SecurityAppSubstatus;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type SecurityAppManagerContract is record
      null;
   end record with Convention => C_Pass_By_Copy;
   type SecurityAppManagerContract_Ptr is access all SecurityAppManagerContract;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IAdaptiveCard is interface and WinRt.IInspectable;

      function ToJson
      (
         this : access IAdaptiveCard_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IAdaptiveCard : aliased WinRt.IID := (1926256268, 41588, 16845, (130, 168, 152, 157, 64, 185, 176, 94 ));

   -----------------------------------------------------------------------------
   -- type IAdaptiveCardBuilderStatics is interface and WinRt.IInspectable;

      function CreateAdaptiveCardFromJson
      (
         this : access IAdaptiveCardBuilderStatics_Interface;
         value : WinRt.HString;
         RetVal : access Windows.UI.Shell.IAdaptiveCard
      )
      return WinRt.Hresult is abstract;

      IID_IAdaptiveCardBuilderStatics : aliased WinRt.IID := (1986891528, 54270, 17223, (160, 188, 185, 234, 154, 109, 194, 142 ));

   -----------------------------------------------------------------------------
   -- type ISecurityAppManager is interface and WinRt.IInspectable;

      function Register
      (
         this : access ISecurityAppManager_Interface;
         kind : Windows.UI.Shell.SecurityAppKind;
         displayName : WinRt.HString;
         detailsUri : Windows.Foundation.IUriRuntimeClass;
         registerPerUser : WinRt.Boolean;
         RetVal : access WinRt.Guid
      )
      return WinRt.Hresult is abstract;

      function Unregister
      (
         this : access ISecurityAppManager_Interface;
         kind : Windows.UI.Shell.SecurityAppKind;
         guidRegistration : WinRt.Guid
      )
      return WinRt.Hresult is abstract;

      function UpdateState
      (
         this : access ISecurityAppManager_Interface;
         kind : Windows.UI.Shell.SecurityAppKind;
         guidRegistration : WinRt.Guid;
         state : Windows.UI.Shell.SecurityAppState;
         substatus : Windows.UI.Shell.SecurityAppSubstatus;
         detailsUri : Windows.Foundation.IUriRuntimeClass
      )
      return WinRt.Hresult is abstract;

      IID_ISecurityAppManager : aliased WinRt.IID := (2527875084, 44756, 22045, (189, 232, 149, 53, 32, 52, 58, 45 ));

   -----------------------------------------------------------------------------
   -- type ITaskbarManager is interface and WinRt.IInspectable;

      function get_IsSupported
      (
         this : access ITaskbarManager_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_IsPinningAllowed
      (
         this : access ITaskbarManager_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsCurrentAppPinnedAsync
      (
         this : access ITaskbarManager_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function IsAppListEntryPinnedAsync
      (
         this : access ITaskbarManager_Interface;
         appListEntry : Windows.ApplicationModel.Core.IAppListEntry;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function RequestPinCurrentAppAsync
      (
         this : access ITaskbarManager_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function RequestPinAppListEntryAsync
      (
         this : access ITaskbarManager_Interface;
         appListEntry : Windows.ApplicationModel.Core.IAppListEntry;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ITaskbarManager : aliased WinRt.IID := (2269710873, 6873, 18932, (178, 232, 134, 115, 141, 197, 172, 64 ));

   -----------------------------------------------------------------------------
   -- type ITaskbarManager2 is interface and WinRt.IInspectable;

      function IsSecondaryTilePinnedAsync
      (
         this : access ITaskbarManager2_Interface;
         tileId : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function RequestPinSecondaryTileAsync
      (
         this : access ITaskbarManager2_Interface;
         secondaryTile : Windows.UI.StartScreen.ISecondaryTile;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function TryUnpinSecondaryTileAsync
      (
         this : access ITaskbarManager2_Interface;
         tileId : WinRt.HString;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ITaskbarManager2 : aliased WinRt.IID := (2045812846, 31490, 18705, (145, 140, 222, 224, 187, 210, 11, 164 ));

   -----------------------------------------------------------------------------
   -- type ITaskbarManagerStatics is interface and WinRt.IInspectable;

      function GetDefault
      (
         this : access ITaskbarManagerStatics_Interface;
         RetVal : access Windows.UI.Shell.ITaskbarManager
      )
      return WinRt.Hresult is abstract;

      IID_ITaskbarManagerStatics : aliased WinRt.IID := (3677530996, 56914, 20454, (183, 182, 149, 255, 159, 131, 149, 223 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package AdaptiveCardBuilder is

      function CreateAdaptiveCardFromJson
      (
         value : WinRt.WString
      )
      return WinRt.Windows.UI.Shell.IAdaptiveCard;

   end AdaptiveCardBuilder;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecurityAppManager

   overriding procedure Initialize (this : in out SecurityAppManager);
   overriding procedure Finalize (this : in out SecurityAppManager);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SecurityAppManager

   function Constructor return SecurityAppManager;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecurityAppManager

   function Register
   (
      this : in out SecurityAppManager;
      kind : Windows.UI.Shell.SecurityAppKind;
      displayName : WinRt.WString;
      detailsUri : Windows.Foundation.Uri'Class;
      registerPerUser : WinRt.Boolean
   )
   return WinRt.Guid;

   procedure Unregister
   (
      this : in out SecurityAppManager;
      kind : Windows.UI.Shell.SecurityAppKind;
      guidRegistration : WinRt.Guid
   );

   procedure UpdateState
   (
      this : in out SecurityAppManager;
      kind : Windows.UI.Shell.SecurityAppKind;
      guidRegistration : WinRt.Guid;
      state : Windows.UI.Shell.SecurityAppState;
      substatus : Windows.UI.Shell.SecurityAppSubstatus;
      detailsUri : Windows.Foundation.Uri'Class
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TaskbarManager

   overriding procedure Initialize (this : in out TaskbarManager);
   overriding procedure Finalize (this : in out TaskbarManager);

   -----------------------------------------------------------------------------
   -- Static Interfaces for TaskbarManager

   function GetDefault
   return WinRt.Windows.UI.Shell.TaskbarManager;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TaskbarManager

   function get_IsSupported
   (
      this : in out TaskbarManager
   )
   return WinRt.Boolean;

   function get_IsPinningAllowed
   (
      this : in out TaskbarManager
   )
   return WinRt.Boolean;

   function IsCurrentAppPinnedAsync
   (
      this : in out TaskbarManager
   )
   return WinRt.Boolean;

   function IsAppListEntryPinnedAsync
   (
      this : in out TaskbarManager;
      appListEntry : Windows.ApplicationModel.Core.AppListEntry'Class
   )
   return WinRt.Boolean;

   function RequestPinCurrentAppAsync
   (
      this : in out TaskbarManager
   )
   return WinRt.Boolean;

   function RequestPinAppListEntryAsync
   (
      this : in out TaskbarManager;
      appListEntry : Windows.ApplicationModel.Core.AppListEntry'Class
   )
   return WinRt.Boolean;

   function IsSecondaryTilePinnedAsync
   (
      this : in out TaskbarManager;
      tileId : WinRt.WString
   )
   return WinRt.Boolean;

   function RequestPinSecondaryTileAsync
   (
      this : in out TaskbarManager;
      secondaryTile : Windows.UI.StartScreen.SecondaryTile'Class
   )
   return WinRt.Boolean;

   function TryUnpinSecondaryTileAsync
   (
      this : in out TaskbarManager;
      tileId : WinRt.WString
   )
   return WinRt.Boolean;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Authentication.Web.Core;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Security.Cryptography.Core;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.Web.Http;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authentication.Web.Provider is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_WebAccount is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.IWebAccount);
   package AsyncOperationCompletedHandler_WebAccount is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.IWebAccount);

   package IAsyncOperation_CryptographicKey is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Cryptography.Core.ICryptographicKey);
   package AsyncOperationCompletedHandler_CryptographicKey is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Cryptography.Core.ICryptographicKey);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IBuffer);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountClientView

   procedure Initialize (this : in out WebAccountClientView) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountClientView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountClientView, IWebAccountClientView_Ptr);
   begin
      if this.m_IWebAccountClientView /= null then
         if this.m_IWebAccountClientView.all /= null then
            RefCount := this.m_IWebAccountClientView.all.Release;
            Free (this.m_IWebAccountClientView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebAccountClientView

   function Constructor
   (
      viewType : Windows.Security.Authentication.Web.Provider.WebAccountClientViewType;
      applicationCallbackUri : Windows.Foundation.Uri'Class
   )
   return WebAccountClientView is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountClientView");
      m_Factory    : access IWebAccountClientViewFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Provider.IWebAccountClientView;
   begin
      return RetVal : WebAccountClientView do
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountClientViewFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (viewType, applicationCallbackUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IWebAccountClientView := new Windows.Security.Authentication.Web.Provider.IWebAccountClientView;
            Retval.m_IWebAccountClientView.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      viewType : Windows.Security.Authentication.Web.Provider.WebAccountClientViewType;
      applicationCallbackUri : Windows.Foundation.Uri'Class;
      accountPairwiseId : WinRt.WString
   )
   return WebAccountClientView is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountClientView");
      m_Factory    : access IWebAccountClientViewFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Provider.IWebAccountClientView;
      HStr_accountPairwiseId : WinRt.HString := To_HString (accountPairwiseId);
   begin
      return RetVal : WebAccountClientView do
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountClientViewFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithPairwiseId (viewType, applicationCallbackUri.m_IUriRuntimeClass.all, HStr_accountPairwiseId, m_ComRetVal'Access);
            Retval.m_IWebAccountClientView := new Windows.Security.Authentication.Web.Provider.IWebAccountClientView;
            Retval.m_IWebAccountClientView.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_accountPairwiseId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountClientView

   function get_ApplicationCallbackUri
   (
      this : in out WebAccountClientView
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebAccountClientView.all.get_ApplicationCallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out WebAccountClientView
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountClientViewType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountClientViewType;
   begin
      Hr := this.m_IWebAccountClientView.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AccountPairwiseId
   (
      this : in out WebAccountClientView
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebAccountClientView.all.get_AccountPairwiseId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WebAccountManager is

      function FindAllProviderWebAccountsForUserAsync
      (
         user : Windows.System.User'Class
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (1723174976, 31891, 24470, (181, 47, 44, 9, 141, 21, 87, 208 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (3255373196, 14296, 23623, (149, 129, 15, 23, 185, 26, 12, 211 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllProviderWebAccountsForUserAsync (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function AddWebAccountForUserAsync
      (
         user : Windows.System.User'Class;
         webAccountId : WinRt.WString;
         webAccountUserName : WinRt.WString;
         props : GenericObject
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
         HStr_webAccountUserName : WinRt.HString := To_HString (webAccountUserName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddWebAccountForUserAsync (user.m_IUser.all, HStr_webAccountId, HStr_webAccountUserName, props, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountId);
            Hr := WindowsDeleteString (HStr_webAccountUserName);
         end return;
      end;

      function AddWebAccountForUserAsync
      (
         user : Windows.System.User'Class;
         webAccountId : WinRt.WString;
         webAccountUserName : WinRt.WString;
         props : GenericObject;
         scope : Windows.Security.Authentication.Web.Provider.WebAccountScope
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
         HStr_webAccountUserName : WinRt.HString := To_HString (webAccountUserName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddWebAccountForUserAsync (user.m_IUser.all, HStr_webAccountId, HStr_webAccountUserName, props, scope, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountId);
            Hr := WindowsDeleteString (HStr_webAccountUserName);
         end return;
      end;

      function AddWebAccountForUserAsync
      (
         user : Windows.System.User'Class;
         webAccountId : WinRt.WString;
         webAccountUserName : WinRt.WString;
         props : GenericObject;
         scope : Windows.Security.Authentication.Web.Provider.WebAccountScope;
         perUserWebAccountId : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
         HStr_webAccountUserName : WinRt.HString := To_HString (webAccountUserName);
         HStr_perUserWebAccountId : WinRt.HString := To_HString (perUserWebAccountId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddWebAccountForUserAsync (user.m_IUser.all, HStr_webAccountId, HStr_webAccountUserName, props, scope, HStr_perUserWebAccountId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountId);
            Hr := WindowsDeleteString (HStr_webAccountUserName);
            Hr := WindowsDeleteString (HStr_perUserWebAccountId);
         end return;
      end;

      procedure PullCookiesAsync
      (
         uriString : WinRt.WString;
         callerPFN : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_uriString : WinRt.HString := To_HString (uriString);
         HStr_callerPFN : WinRt.HString := To_HString (callerPFN);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PullCookiesAsync (HStr_uriString, HStr_callerPFN, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_uriString);
         Hr := WindowsDeleteString (HStr_callerPFN);
      end;

      function AddWebAccountAsync
      (
         webAccountId : WinRt.WString;
         webAccountUserName : WinRt.WString;
         props : GenericObject;
         scope : Windows.Security.Authentication.Web.Provider.WebAccountScope;
         perUserWebAccountId : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountMapManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
         HStr_webAccountUserName : WinRt.HString := To_HString (webAccountUserName);
         HStr_perUserWebAccountId : WinRt.HString := To_HString (perUserWebAccountId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAccountMapManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddWebAccountAsync (HStr_webAccountId, HStr_webAccountUserName, props, scope, HStr_perUserWebAccountId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountId);
            Hr := WindowsDeleteString (HStr_webAccountUserName);
            Hr := WindowsDeleteString (HStr_perUserWebAccountId);
         end return;
      end;

      procedure SetPerAppToPerUserAccountAsync
      (
         perAppAccount : Windows.Security.Credentials.WebAccount'Class;
         perUserWebAccountId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountMapManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_perUserWebAccountId : WinRt.HString := To_HString (perUserWebAccountId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountMapManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetPerAppToPerUserAccountAsync (perAppAccount.m_IWebAccount.all, HStr_perUserWebAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_perUserWebAccountId);
      end;

      function GetPerUserFromPerAppAccountAsync
      (
         perAppAccount : Windows.Security.Credentials.WebAccount'Class
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountMapManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAccountMapManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetPerUserFromPerAppAccountAsync (perAppAccount.m_IWebAccount.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ClearPerUserFromPerAppAccountAsync
      (
         perAppAccount : Windows.Security.Credentials.WebAccount'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountMapManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountMapManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ClearPerUserFromPerAppAccountAsync (perAppAccount.m_IWebAccount.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure InvalidateAppCacheForAllAccountsAsync is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.InvalidateAppCacheForAllAccountsAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure InvalidateAppCacheForAccountAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.InvalidateAppCacheForAccountAsync (webAccount.m_IWebAccount.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function AddWebAccountAsync
      (
         webAccountId : WinRt.WString;
         webAccountUserName : WinRt.WString;
         props : GenericObject;
         scope : Windows.Security.Authentication.Web.Provider.WebAccountScope
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountScopeManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
         HStr_webAccountUserName : WinRt.HString := To_HString (webAccountUserName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAccountScopeManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddWebAccountAsync (HStr_webAccountId, HStr_webAccountUserName, props, scope, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountId);
            Hr := WindowsDeleteString (HStr_webAccountUserName);
         end return;
      end;

      procedure SetScopeAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class;
         scope : Windows.Security.Authentication.Web.Provider.WebAccountScope
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountScopeManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountScopeManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetScopeAsync (webAccount.m_IWebAccount.all, scope, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetScope
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountScope is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountScopeManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountScope;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountScopeManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetScope (webAccount.m_IWebAccount.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure UpdateWebAccountPropertiesAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class;
         webAccountUserName : WinRt.WString;
         additionalProperties : GenericObject
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountUserName : WinRt.HString := To_HString (webAccountUserName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.UpdateWebAccountPropertiesAsync (webAccount.m_IWebAccount.all, HStr_webAccountUserName, additionalProperties, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_webAccountUserName);
      end;

      function AddWebAccountAsync
      (
         webAccountId : WinRt.WString;
         webAccountUserName : WinRt.WString;
         props : GenericObject
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
         HStr_webAccountUserName : WinRt.HString := To_HString (webAccountUserName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddWebAccountAsync (HStr_webAccountId, HStr_webAccountUserName, props, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountId);
            Hr := WindowsDeleteString (HStr_webAccountUserName);
         end return;
      end;

      procedure DeleteWebAccountAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DeleteWebAccountAsync (webAccount.m_IWebAccount.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function FindAllProviderWebAccountsAsync
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (1723174976, 31891, 24470, (181, 47, 44, 9, 141, 21, 87, 208 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (3255373196, 14296, 23623, (149, 129, 15, 23, 185, 26, 12, 211 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllProviderWebAccountsAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure PushCookiesAsync
      (
         uri : Windows.Foundation.Uri'Class;
         cookies : GenericObject
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.PushCookiesAsync (uri.m_IUriRuntimeClass.all, cookies, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SetViewAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class;
         view : Windows.Security.Authentication.Web.Provider.WebAccountClientView'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetViewAsync (webAccount.m_IWebAccount.all, view.m_IWebAccountClientView.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure ClearViewAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class;
         applicationCallbackUri : Windows.Foundation.Uri'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ClearViewAsync (webAccount.m_IWebAccount.all, applicationCallbackUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetViewsAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (292038593, 6270, 20629, (161, 75, 223, 65, 17, 198, 56, 194 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (1067864943, 32378, 23497, (178, 15, 216, 102, 202, 202, 248, 28 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetViewsAsync (webAccount.m_IWebAccount.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure SetWebAccountPictureAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class;
         webAccountPicture : Windows.Storage.Streams.IRandomAccessStream
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetWebAccountPictureAsync (webAccount.m_IWebAccount.all, webAccountPicture, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure ClearWebAccountPictureAsync
      (
         webAccount : Windows.Security.Credentials.WebAccount'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebAccountManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAccountManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ClearWebAccountPictureAsync (webAccount.m_IWebAccount.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end WebAccountManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderAddAccountOperation

   procedure Initialize (this : in out WebAccountProviderAddAccountOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderAddAccountOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderAddAccountOperation, IWebAccountProviderAddAccountOperation_Ptr);
   begin
      if this.m_IWebAccountProviderAddAccountOperation /= null then
         if this.m_IWebAccountProviderAddAccountOperation.all /= null then
            RefCount := this.m_IWebAccountProviderAddAccountOperation.all.Release;
            Free (this.m_IWebAccountProviderAddAccountOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderAddAccountOperation

   procedure ReportCompleted
   (
      this : in out WebAccountProviderAddAccountOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountProviderAddAccountOperation.all.ReportCompleted;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderAddAccountOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderAddAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderAddAccountOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderDeleteAccountOperation

   procedure Initialize (this : in out WebAccountProviderDeleteAccountOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderDeleteAccountOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderDeleteAccountOperation, IWebAccountProviderDeleteAccountOperation_Ptr);
   begin
      if this.m_IWebAccountProviderDeleteAccountOperation /= null then
         if this.m_IWebAccountProviderDeleteAccountOperation.all /= null then
            RefCount := this.m_IWebAccountProviderDeleteAccountOperation.all.Release;
            Free (this.m_IWebAccountProviderDeleteAccountOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderDeleteAccountOperation

   function get_WebAccount
   (
      this : in out WebAccountProviderDeleteAccountOperation
   )
   return WinRt.Windows.Security.Credentials.WebAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccount;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
         Hr := this.m_IWebAccountProviderDeleteAccountOperation.all.get_WebAccount (m_ComRetVal'Access);
         Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
         Retval.m_IWebAccount.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderDeleteAccountOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderDeleteAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderDeleteAccountOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out WebAccountProviderDeleteAccountOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderDeleteAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderDeleteAccountOperation.all);
      Hr := m_Interface.ReportCompleted;
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportError
   (
      this : in out WebAccountProviderDeleteAccountOperation;
      value : Windows.Security.Authentication.Web.Core.WebProviderError'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderDeleteAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderDeleteAccountOperation.all);
      Hr := m_Interface.ReportError (value.m_IWebProviderError.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderGetTokenSilentOperation

   procedure Initialize (this : in out WebAccountProviderGetTokenSilentOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderGetTokenSilentOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderTokenOperation, IWebAccountProviderTokenOperation_Ptr);
   begin
      if this.m_IWebAccountProviderTokenOperation /= null then
         if this.m_IWebAccountProviderTokenOperation.all /= null then
            RefCount := this.m_IWebAccountProviderTokenOperation.all.Release;
            Free (this.m_IWebAccountProviderTokenOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderGetTokenSilentOperation

   function get_ProviderRequest
   (
      this : in out WebAccountProviderGetTokenSilentOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest do
         Hr := this.m_IWebAccountProviderTokenOperation.all.get_ProviderRequest (m_ComRetVal'Access);
         Retval.m_IWebProviderTokenRequest := new Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest;
         Retval.m_IWebProviderTokenRequest.all := m_ComRetVal;
      end return;
   end;

   function get_ProviderResponses
   (
      this : in out WebAccountProviderGetTokenSilentOperation
   )
   return IVector_IWebProviderTokenResponse.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IWebProviderTokenResponse.Kind;
   begin
      Hr := this.m_IWebAccountProviderTokenOperation.all.get_ProviderResponses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IWebProviderTokenResponse (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_CacheExpirationTime
   (
      this : in out WebAccountProviderGetTokenSilentOperation;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountProviderTokenOperation.all.put_CacheExpirationTime (value);
   end;

   function get_CacheExpirationTime
   (
      this : in out WebAccountProviderGetTokenSilentOperation
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IWebAccountProviderTokenOperation.all.get_CacheExpirationTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderGetTokenSilentOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReportUserInteractionRequired
   (
      this : in out WebAccountProviderGetTokenSilentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderSilentReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderSilentReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderSilentReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.ReportUserInteractionRequired;
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportUserInteractionRequired
   (
      this : in out WebAccountProviderGetTokenSilentOperation;
      value : Windows.Security.Authentication.Web.Core.WebProviderError'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderSilentReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderSilentReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderSilentReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.ReportUserInteractionRequired (value.m_IWebProviderError.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportCompleted
   (
      this : in out WebAccountProviderGetTokenSilentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.ReportCompleted;
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportError
   (
      this : in out WebAccountProviderGetTokenSilentOperation;
      value : Windows.Security.Authentication.Web.Core.WebProviderError'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.ReportError (value.m_IWebProviderError.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderManageAccountOperation

   procedure Initialize (this : in out WebAccountProviderManageAccountOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderManageAccountOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderManageAccountOperation, IWebAccountProviderManageAccountOperation_Ptr);
   begin
      if this.m_IWebAccountProviderManageAccountOperation /= null then
         if this.m_IWebAccountProviderManageAccountOperation.all /= null then
            RefCount := this.m_IWebAccountProviderManageAccountOperation.all.Release;
            Free (this.m_IWebAccountProviderManageAccountOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderManageAccountOperation

   function get_WebAccount
   (
      this : in out WebAccountProviderManageAccountOperation
   )
   return WinRt.Windows.Security.Credentials.WebAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccount;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
         Hr := this.m_IWebAccountProviderManageAccountOperation.all.get_WebAccount (m_ComRetVal'Access);
         Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
         Retval.m_IWebAccount.all := m_ComRetVal;
      end return;
   end;

   procedure ReportCompleted
   (
      this : in out WebAccountProviderManageAccountOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountProviderManageAccountOperation.all.ReportCompleted;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderManageAccountOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderManageAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderManageAccountOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderRequestTokenOperation

   procedure Initialize (this : in out WebAccountProviderRequestTokenOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderRequestTokenOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderTokenOperation, IWebAccountProviderTokenOperation_Ptr);
   begin
      if this.m_IWebAccountProviderTokenOperation /= null then
         if this.m_IWebAccountProviderTokenOperation.all /= null then
            RefCount := this.m_IWebAccountProviderTokenOperation.all.Release;
            Free (this.m_IWebAccountProviderTokenOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderRequestTokenOperation

   function get_ProviderRequest
   (
      this : in out WebAccountProviderRequestTokenOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest do
         Hr := this.m_IWebAccountProviderTokenOperation.all.get_ProviderRequest (m_ComRetVal'Access);
         Retval.m_IWebProviderTokenRequest := new Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest;
         Retval.m_IWebProviderTokenRequest.all := m_ComRetVal;
      end return;
   end;

   function get_ProviderResponses
   (
      this : in out WebAccountProviderRequestTokenOperation
   )
   return IVector_IWebProviderTokenResponse.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IWebProviderTokenResponse.Kind;
   begin
      Hr := this.m_IWebAccountProviderTokenOperation.all.get_ProviderResponses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IWebProviderTokenResponse (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_CacheExpirationTime
   (
      this : in out WebAccountProviderRequestTokenOperation;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountProviderTokenOperation.all.put_CacheExpirationTime (value);
   end;

   function get_CacheExpirationTime
   (
      this : in out WebAccountProviderRequestTokenOperation
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IWebAccountProviderTokenOperation.all.get_CacheExpirationTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderRequestTokenOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReportUserCanceled
   (
      this : in out WebAccountProviderRequestTokenOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderUIReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderUIReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderUIReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.ReportUserCanceled;
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportCompleted
   (
      this : in out WebAccountProviderRequestTokenOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.ReportCompleted;
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportError
   (
      this : in out WebAccountProviderRequestTokenOperation;
      value : Windows.Security.Authentication.Web.Core.WebProviderError'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderTokenOperation.all);
      Hr := m_Interface.ReportError (value.m_IWebProviderError.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderRetrieveCookiesOperation

   procedure Initialize (this : in out WebAccountProviderRetrieveCookiesOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderRetrieveCookiesOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderRetrieveCookiesOperation, IWebAccountProviderRetrieveCookiesOperation_Ptr);
   begin
      if this.m_IWebAccountProviderRetrieveCookiesOperation /= null then
         if this.m_IWebAccountProviderRetrieveCookiesOperation.all /= null then
            RefCount := this.m_IWebAccountProviderRetrieveCookiesOperation.all.Release;
            Free (this.m_IWebAccountProviderRetrieveCookiesOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderRetrieveCookiesOperation

   function get_Context
   (
      this : in out WebAccountProviderRetrieveCookiesOperation
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebAccountProviderRetrieveCookiesOperation.all.get_Context (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Cookies
   (
      this : in out WebAccountProviderRetrieveCookiesOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWebAccountProviderRetrieveCookiesOperation.all.get_Cookies (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Uri
   (
      this : in out WebAccountProviderRetrieveCookiesOperation;
      uri : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountProviderRetrieveCookiesOperation.all.put_Uri (uri.m_IUriRuntimeClass.all);
   end;

   function get_Uri
   (
      this : in out WebAccountProviderRetrieveCookiesOperation
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebAccountProviderRetrieveCookiesOperation.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ApplicationCallbackUri
   (
      this : in out WebAccountProviderRetrieveCookiesOperation
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebAccountProviderRetrieveCookiesOperation.all.get_ApplicationCallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderRetrieveCookiesOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderRetrieveCookiesOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderRetrieveCookiesOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out WebAccountProviderRetrieveCookiesOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderRetrieveCookiesOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderRetrieveCookiesOperation.all);
      Hr := m_Interface.ReportCompleted;
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportError
   (
      this : in out WebAccountProviderRetrieveCookiesOperation;
      value : Windows.Security.Authentication.Web.Core.WebProviderError'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderRetrieveCookiesOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderRetrieveCookiesOperation.all);
      Hr := m_Interface.ReportError (value.m_IWebProviderError.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderSignOutAccountOperation

   procedure Initialize (this : in out WebAccountProviderSignOutAccountOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderSignOutAccountOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderSignOutAccountOperation, IWebAccountProviderSignOutAccountOperation_Ptr);
   begin
      if this.m_IWebAccountProviderSignOutAccountOperation /= null then
         if this.m_IWebAccountProviderSignOutAccountOperation.all /= null then
            RefCount := this.m_IWebAccountProviderSignOutAccountOperation.all.Release;
            Free (this.m_IWebAccountProviderSignOutAccountOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderSignOutAccountOperation

   function get_WebAccount
   (
      this : in out WebAccountProviderSignOutAccountOperation
   )
   return WinRt.Windows.Security.Credentials.WebAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccount;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
         Hr := this.m_IWebAccountProviderSignOutAccountOperation.all.get_WebAccount (m_ComRetVal'Access);
         Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
         Retval.m_IWebAccount.all := m_ComRetVal;
      end return;
   end;

   function get_ApplicationCallbackUri
   (
      this : in out WebAccountProviderSignOutAccountOperation
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebAccountProviderSignOutAccountOperation.all.get_ApplicationCallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ClientId
   (
      this : in out WebAccountProviderSignOutAccountOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebAccountProviderSignOutAccountOperation.all.get_ClientId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out WebAccountProviderSignOutAccountOperation
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderSignOutAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderSignOutAccountOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out WebAccountProviderSignOutAccountOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderSignOutAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderSignOutAccountOperation.all);
      Hr := m_Interface.ReportCompleted;
      m_RefCount := m_Interface.Release;
   end;

   procedure ReportError
   (
      this : in out WebAccountProviderSignOutAccountOperation;
      value : Windows.Security.Authentication.Web.Core.WebProviderError'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderSignOutAccountOperation_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderBaseReportOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountProviderSignOutAccountOperation.all);
      Hr := m_Interface.ReportError (value.m_IWebProviderError.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountProviderTriggerDetails

   procedure Initialize (this : in out WebAccountProviderTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountProviderTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountProviderTokenObjects, IWebAccountProviderTokenObjects_Ptr);
   begin
      if this.m_IWebAccountProviderTokenObjects /= null then
         if this.m_IWebAccountProviderTokenObjects.all /= null then
            RefCount := this.m_IWebAccountProviderTokenObjects.all.Release;
            Free (this.m_IWebAccountProviderTokenObjects);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountProviderTriggerDetails

   function get_Operation
   (
      this : in out WebAccountProviderTriggerDetails
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation;
   begin
      Hr := this.m_IWebAccountProviderTokenObjects.all.get_Operation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_User
   (
      this : in out WebAccountProviderTriggerDetails
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects2, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebAccountProviderTokenObjects2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IWebAccountProviderTokenObjects.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebProviderTokenRequest

   procedure Initialize (this : in out WebProviderTokenRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebProviderTokenRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebProviderTokenRequest, IWebProviderTokenRequest_Ptr);
   begin
      if this.m_IWebProviderTokenRequest /= null then
         if this.m_IWebProviderTokenRequest.all /= null then
            RefCount := this.m_IWebProviderTokenRequest.all.Release;
            Free (this.m_IWebProviderTokenRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebProviderTokenRequest

   function get_ClientRequest
   (
      this : in out WebProviderTokenRequest
   )
   return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.IWebTokenRequest;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequest do
         Hr := this.m_IWebProviderTokenRequest.all.get_ClientRequest (m_ComRetVal'Access);
         Retval.m_IWebTokenRequest := new Windows.Security.Authentication.Web.Core.IWebTokenRequest;
         Retval.m_IWebTokenRequest.all := m_ComRetVal;
      end return;
   end;

   function get_WebAccounts
   (
      this : in out WebProviderTokenRequest
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWebProviderTokenRequest.all.get_WebAccounts (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WebAccountSelectionOptions
   (
      this : in out WebProviderTokenRequest
   )
   return WinRt.Windows.Security.Authentication.Web.Provider.WebAccountSelectionOptions is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Provider.WebAccountSelectionOptions;
   begin
      Hr := this.m_IWebProviderTokenRequest.all.get_WebAccountSelectionOptions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ApplicationCallbackUri
   (
      this : in out WebProviderTokenRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebProviderTokenRequest.all.get_ApplicationCallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function GetApplicationTokenBindingKeyAsync
   (
      this : in out WebProviderTokenRequest;
      keyType : Windows.Security.Authentication.Web.TokenBindingKeyType;
      target : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CryptographicKey.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CryptographicKey.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Cryptography.Core.ICryptographicKey;
      m_IID            : aliased WinRt.IID := (2177530011, 39135, 23658, (149, 49, 150, 98, 56, 227, 231, 174 )); -- Windows.Security.Cryptography.Core.CryptographicKey;
      m_HandlerIID     : aliased WinRt.IID := (80364408, 62868, 24038, (165, 85, 48, 79, 98, 203, 79, 175 ));
      m_Handler        : AsyncOperationCompletedHandler_CryptographicKey.Kind := new AsyncOperationCompletedHandler_CryptographicKey.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CryptographicKey.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CryptographicKey.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CryptographicKey.Kind_Delegate, AsyncOperationCompletedHandler_CryptographicKey.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Core.CryptographicKey do
         Hr := this.m_IWebProviderTokenRequest.all.GetApplicationTokenBindingKeyAsync (keyType, target.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICryptographicKey := new Windows.Security.Cryptography.Core.ICryptographicKey;
                  Retval.m_ICryptographicKey.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetApplicationTokenBindingKeyIdAsync
   (
      this : in out WebProviderTokenRequest;
      keyType : Windows.Security.Authentication.Web.TokenBindingKeyType;
      target : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest2, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebProviderTokenRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebProviderTokenRequest.all);
      Hr := m_Interface.GetApplicationTokenBindingKeyIdAsync (keyType, target.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_ApplicationPackageFamilyName
   (
      this : in out WebProviderTokenRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebProviderTokenRequest3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebProviderTokenRequest.all);
      Hr := m_Interface.get_ApplicationPackageFamilyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ApplicationProcessName
   (
      this : in out WebProviderTokenRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebProviderTokenRequest3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebProviderTokenRequest.all);
      Hr := m_Interface.get_ApplicationProcessName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function CheckApplicationForCapabilityAsync
   (
      this : in out WebProviderTokenRequest;
      capabilityName : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_capabilityName : WinRt.HString := To_HString (capabilityName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest_Interface, WinRt.Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3, WinRt.Windows.Security.Authentication.Web.Provider.IID_IWebProviderTokenRequest3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebProviderTokenRequest.all);
      Hr := m_Interface.CheckApplicationForCapabilityAsync (HStr_capabilityName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_capabilityName);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebProviderTokenResponse

   procedure Initialize (this : in out WebProviderTokenResponse) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebProviderTokenResponse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebProviderTokenResponse, IWebProviderTokenResponse_Ptr);
   begin
      if this.m_IWebProviderTokenResponse /= null then
         if this.m_IWebProviderTokenResponse.all /= null then
            RefCount := this.m_IWebProviderTokenResponse.all.Release;
            Free (this.m_IWebProviderTokenResponse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebProviderTokenResponse

   function Constructor
   (
      webTokenResponse : Windows.Security.Authentication.Web.Core.WebTokenResponse'Class
   )
   return WebProviderTokenResponse is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Provider.WebProviderTokenResponse");
      m_Factory    : access IWebProviderTokenResponseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Provider.IWebProviderTokenResponse;
   begin
      return RetVal : WebProviderTokenResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IWebProviderTokenResponseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (webTokenResponse.m_IWebTokenResponse.all, m_ComRetVal'Access);
            Retval.m_IWebProviderTokenResponse := new Windows.Security.Authentication.Web.Provider.IWebProviderTokenResponse;
            Retval.m_IWebProviderTokenResponse.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebProviderTokenResponse

   function get_ClientResponse
   (
      this : in out WebProviderTokenResponse
   )
   return WinRt.Windows.Security.Authentication.Web.Core.WebTokenResponse'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.IWebTokenResponse;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenResponse do
         Hr := this.m_IWebProviderTokenResponse.all.get_ClientResponse (m_ComRetVal'Access);
         Retval.m_IWebTokenResponse := new Windows.Security.Authentication.Web.Core.IWebTokenResponse;
         Retval.m_IWebTokenResponse.all := m_ComRetVal;
      end return;
   end;

end;

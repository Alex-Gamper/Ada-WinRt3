--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Globalization;
with WinRt.Windows.UI.ViewManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Text.Core is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextCompositionCompletedEventArgs

   procedure Initialize (this : in out CoreTextCompositionCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextCompositionCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextCompositionCompletedEventArgs, ICoreTextCompositionCompletedEventArgs_Ptr);
   begin
      if this.m_ICoreTextCompositionCompletedEventArgs /= null then
         if this.m_ICoreTextCompositionCompletedEventArgs.all /= null then
            RefCount := this.m_ICoreTextCompositionCompletedEventArgs.all.Release;
            Free (this.m_ICoreTextCompositionCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextCompositionCompletedEventArgs

   function get_IsCanceled
   (
      this : in out CoreTextCompositionCompletedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextCompositionCompletedEventArgs.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CompositionSegments
   (
      this : in out CoreTextCompositionCompletedEventArgs
   )
   return IVectorView_ICoreTextCompositionSegment.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ICoreTextCompositionSegment.Kind;
   begin
      Hr := this.m_ICoreTextCompositionCompletedEventArgs.all.get_CompositionSegments (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ICoreTextCompositionSegment (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextCompositionCompletedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextCompositionCompletedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextCompositionSegment

   procedure Initialize (this : in out CoreTextCompositionSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextCompositionSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextCompositionSegment, ICoreTextCompositionSegment_Ptr);
   begin
      if this.m_ICoreTextCompositionSegment /= null then
         if this.m_ICoreTextCompositionSegment.all /= null then
            RefCount := this.m_ICoreTextCompositionSegment.all.Release;
            Free (this.m_ICoreTextCompositionSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextCompositionSegment

   function get_PreconversionString
   (
      this : in out CoreTextCompositionSegment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICoreTextCompositionSegment.all.get_PreconversionString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Range
   (
      this : in out CoreTextCompositionSegment
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextCompositionSegment.all.get_Range (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextCompositionStartedEventArgs

   procedure Initialize (this : in out CoreTextCompositionStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextCompositionStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextCompositionStartedEventArgs, ICoreTextCompositionStartedEventArgs_Ptr);
   begin
      if this.m_ICoreTextCompositionStartedEventArgs /= null then
         if this.m_ICoreTextCompositionStartedEventArgs.all /= null then
            RefCount := this.m_ICoreTextCompositionStartedEventArgs.all.Release;
            Free (this.m_ICoreTextCompositionStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextCompositionStartedEventArgs

   function get_IsCanceled
   (
      this : in out CoreTextCompositionStartedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextCompositionStartedEventArgs.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextCompositionStartedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextCompositionStartedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextEditContext

   procedure Initialize (this : in out CoreTextEditContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextEditContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextEditContext, ICoreTextEditContext_Ptr);
   begin
      if this.m_ICoreTextEditContext /= null then
         if this.m_ICoreTextEditContext.all /= null then
            RefCount := this.m_ICoreTextEditContext.all.Release;
            Free (this.m_ICoreTextEditContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextEditContext

   function get_Name
   (
      this : in out CoreTextEditContext
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICoreTextEditContext.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out CoreTextEditContext;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICoreTextEditContext.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_InputScope
   (
      this : in out CoreTextEditContext
   )
   return WinRt.Windows.UI.Text.Core.CoreTextInputScope is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextInputScope;
   begin
      Hr := this.m_ICoreTextEditContext.all.get_InputScope (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InputScope
   (
      this : in out CoreTextEditContext;
      value : Windows.UI.Text.Core.CoreTextInputScope
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.put_InputScope (value);
   end;

   function get_IsReadOnly
   (
      this : in out CoreTextEditContext
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextEditContext.all.get_IsReadOnly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsReadOnly
   (
      this : in out CoreTextEditContext;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.put_IsReadOnly (value);
   end;

   function get_InputPaneDisplayPolicy
   (
      this : in out CoreTextEditContext
   )
   return WinRt.Windows.UI.Text.Core.CoreTextInputPaneDisplayPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextInputPaneDisplayPolicy;
   begin
      Hr := this.m_ICoreTextEditContext.all.get_InputPaneDisplayPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InputPaneDisplayPolicy
   (
      this : in out CoreTextEditContext;
      value : Windows.UI.Text.Core.CoreTextInputPaneDisplayPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.put_InputPaneDisplayPolicy (value);
   end;

   function add_TextRequested
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_TextRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TextRequested
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_TextRequested (cookie);
   end;

   function add_SelectionRequested
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_SelectionRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SelectionRequested
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_SelectionRequested (cookie);
   end;

   function add_LayoutRequested
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_LayoutRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LayoutRequested
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_LayoutRequested (cookie);
   end;

   function add_TextUpdating
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_TextUpdating (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TextUpdating
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_TextUpdating (cookie);
   end;

   function add_SelectionUpdating
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_SelectionUpdating (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SelectionUpdating
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_SelectionUpdating (cookie);
   end;

   function add_FormatUpdating
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_FormatUpdating (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FormatUpdating
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_FormatUpdating (cookie);
   end;

   function add_CompositionStarted
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_CompositionStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CompositionStarted
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_CompositionStarted (cookie);
   end;

   function add_CompositionCompleted
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_CompositionCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CompositionCompleted
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_CompositionCompleted (cookie);
   end;

   function add_FocusRemoved
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextEditContext.all.add_FocusRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FocusRemoved
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.remove_FocusRemoved (cookie);
   end;

   procedure NotifyFocusEnter
   (
      this : in out CoreTextEditContext
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.NotifyFocusEnter;
   end;

   procedure NotifyFocusLeave
   (
      this : in out CoreTextEditContext
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.NotifyFocusLeave;
   end;

   procedure NotifyTextChanged
   (
      this : in out CoreTextEditContext;
      modifiedRange : Windows.UI.Text.Core.CoreTextRange;
      newLength : WinRt.Int32;
      newSelection : Windows.UI.Text.Core.CoreTextRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.NotifyTextChanged (modifiedRange, newLength, newSelection);
   end;

   procedure NotifySelectionChanged
   (
      this : in out CoreTextEditContext;
      selection : Windows.UI.Text.Core.CoreTextRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.NotifySelectionChanged (selection);
   end;

   procedure NotifyLayoutChanged
   (
      this : in out CoreTextEditContext
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextEditContext.all.NotifyLayoutChanged;
   end;

   function add_NotifyFocusLeaveCompleted
   (
      this : in out CoreTextEditContext;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.Core.ICoreTextEditContext2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.Core.ICoreTextEditContext_Interface, WinRt.Windows.UI.Text.Core.ICoreTextEditContext2, WinRt.Windows.UI.Text.Core.IID_ICoreTextEditContext2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICoreTextEditContext.all);
      Hr := m_Interface.add_NotifyFocusLeaveCompleted (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_NotifyFocusLeaveCompleted
   (
      this : in out CoreTextEditContext;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.Core.ICoreTextEditContext2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.Core.ICoreTextEditContext_Interface, WinRt.Windows.UI.Text.Core.ICoreTextEditContext2, WinRt.Windows.UI.Text.Core.IID_ICoreTextEditContext2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICoreTextEditContext.all);
      Hr := m_Interface.remove_NotifyFocusLeaveCompleted (cookie);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextFormatUpdatingEventArgs

   procedure Initialize (this : in out CoreTextFormatUpdatingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextFormatUpdatingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextFormatUpdatingEventArgs, ICoreTextFormatUpdatingEventArgs_Ptr);
   begin
      if this.m_ICoreTextFormatUpdatingEventArgs /= null then
         if this.m_ICoreTextFormatUpdatingEventArgs.all /= null then
            RefCount := this.m_ICoreTextFormatUpdatingEventArgs.all.Release;
            Free (this.m_ICoreTextFormatUpdatingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextFormatUpdatingEventArgs

   function get_Range
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_Range (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TextColor
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_TextColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BackgroundColor
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_BackgroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UnderlineColor
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_UnderlineColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UnderlineType
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return IReference_UnderlineType.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UnderlineType.Kind;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_UnderlineType (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UnderlineType (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Reason
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextFormatUpdatingReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextFormatUpdatingReason;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Result
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextFormatUpdatingResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextFormatUpdatingResult;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_Result (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Result
   (
      this : in out CoreTextFormatUpdatingEventArgs;
      value : Windows.UI.Text.Core.CoreTextFormatUpdatingResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.put_Result (value);
   end;

   function get_IsCanceled
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextFormatUpdatingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextFormatUpdatingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextLayoutBounds

   procedure Initialize (this : in out CoreTextLayoutBounds) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextLayoutBounds) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextLayoutBounds, ICoreTextLayoutBounds_Ptr);
   begin
      if this.m_ICoreTextLayoutBounds /= null then
         if this.m_ICoreTextLayoutBounds.all /= null then
            RefCount := this.m_ICoreTextLayoutBounds.all.Release;
            Free (this.m_ICoreTextLayoutBounds);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextLayoutBounds

   function get_TextBounds
   (
      this : in out CoreTextLayoutBounds
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICoreTextLayoutBounds.all.get_TextBounds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TextBounds
   (
      this : in out CoreTextLayoutBounds;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextLayoutBounds.all.put_TextBounds (value);
   end;

   function get_ControlBounds
   (
      this : in out CoreTextLayoutBounds
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICoreTextLayoutBounds.all.get_ControlBounds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ControlBounds
   (
      this : in out CoreTextLayoutBounds;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextLayoutBounds.all.put_ControlBounds (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextLayoutRequest

   procedure Initialize (this : in out CoreTextLayoutRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextLayoutRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextLayoutRequest, ICoreTextLayoutRequest_Ptr);
   begin
      if this.m_ICoreTextLayoutRequest /= null then
         if this.m_ICoreTextLayoutRequest.all /= null then
            RefCount := this.m_ICoreTextLayoutRequest.all.Release;
            Free (this.m_ICoreTextLayoutRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextLayoutRequest

   function get_Range
   (
      this : in out CoreTextLayoutRequest
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextLayoutRequest.all.get_Range (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LayoutBounds
   (
      this : in out CoreTextLayoutRequest
   )
   return WinRt.Windows.UI.Text.Core.CoreTextLayoutBounds'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.ICoreTextLayoutBounds;
   begin
      return RetVal : WinRt.Windows.UI.Text.Core.CoreTextLayoutBounds do
         Hr := this.m_ICoreTextLayoutRequest.all.get_LayoutBounds (m_ComRetVal'Access);
         Retval.m_ICoreTextLayoutBounds := new Windows.UI.Text.Core.ICoreTextLayoutBounds;
         Retval.m_ICoreTextLayoutBounds.all := m_ComRetVal;
      end return;
   end;

   function get_IsCanceled
   (
      this : in out CoreTextLayoutRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextLayoutRequest.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextLayoutRequest
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextLayoutRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_LayoutBoundsVisualPixels
   (
      this : in out CoreTextLayoutRequest
   )
   return WinRt.Windows.UI.Text.Core.CoreTextLayoutBounds'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.Core.ICoreTextLayoutRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.ICoreTextLayoutBounds;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.Core.ICoreTextLayoutRequest_Interface, WinRt.Windows.UI.Text.Core.ICoreTextLayoutRequest2, WinRt.Windows.UI.Text.Core.IID_ICoreTextLayoutRequest2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Text.Core.CoreTextLayoutBounds do
         m_Interface := QInterface (this.m_ICoreTextLayoutRequest.all);
         Hr := m_Interface.get_LayoutBoundsVisualPixels (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICoreTextLayoutBounds := new Windows.UI.Text.Core.ICoreTextLayoutBounds;
         Retval.m_ICoreTextLayoutBounds.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextLayoutRequestedEventArgs

   procedure Initialize (this : in out CoreTextLayoutRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextLayoutRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextLayoutRequestedEventArgs, ICoreTextLayoutRequestedEventArgs_Ptr);
   begin
      if this.m_ICoreTextLayoutRequestedEventArgs /= null then
         if this.m_ICoreTextLayoutRequestedEventArgs.all /= null then
            RefCount := this.m_ICoreTextLayoutRequestedEventArgs.all.Release;
            Free (this.m_ICoreTextLayoutRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextLayoutRequestedEventArgs

   function get_Request
   (
      this : in out CoreTextLayoutRequestedEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextLayoutRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.ICoreTextLayoutRequest;
   begin
      return RetVal : WinRt.Windows.UI.Text.Core.CoreTextLayoutRequest do
         Hr := this.m_ICoreTextLayoutRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_ICoreTextLayoutRequest := new Windows.UI.Text.Core.ICoreTextLayoutRequest;
         Retval.m_ICoreTextLayoutRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextSelectionRequest

   procedure Initialize (this : in out CoreTextSelectionRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextSelectionRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextSelectionRequest, ICoreTextSelectionRequest_Ptr);
   begin
      if this.m_ICoreTextSelectionRequest /= null then
         if this.m_ICoreTextSelectionRequest.all /= null then
            RefCount := this.m_ICoreTextSelectionRequest.all.Release;
            Free (this.m_ICoreTextSelectionRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextSelectionRequest

   function get_Selection
   (
      this : in out CoreTextSelectionRequest
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextSelectionRequest.all.get_Selection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Selection
   (
      this : in out CoreTextSelectionRequest;
      value : Windows.UI.Text.Core.CoreTextRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextSelectionRequest.all.put_Selection (value);
   end;

   function get_IsCanceled
   (
      this : in out CoreTextSelectionRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextSelectionRequest.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextSelectionRequest
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextSelectionRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextSelectionRequestedEventArgs

   procedure Initialize (this : in out CoreTextSelectionRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextSelectionRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextSelectionRequestedEventArgs, ICoreTextSelectionRequestedEventArgs_Ptr);
   begin
      if this.m_ICoreTextSelectionRequestedEventArgs /= null then
         if this.m_ICoreTextSelectionRequestedEventArgs.all /= null then
            RefCount := this.m_ICoreTextSelectionRequestedEventArgs.all.Release;
            Free (this.m_ICoreTextSelectionRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextSelectionRequestedEventArgs

   function get_Request
   (
      this : in out CoreTextSelectionRequestedEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextSelectionRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.ICoreTextSelectionRequest;
   begin
      return RetVal : WinRt.Windows.UI.Text.Core.CoreTextSelectionRequest do
         Hr := this.m_ICoreTextSelectionRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_ICoreTextSelectionRequest := new Windows.UI.Text.Core.ICoreTextSelectionRequest;
         Retval.m_ICoreTextSelectionRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextSelectionUpdatingEventArgs

   procedure Initialize (this : in out CoreTextSelectionUpdatingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextSelectionUpdatingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextSelectionUpdatingEventArgs, ICoreTextSelectionUpdatingEventArgs_Ptr);
   begin
      if this.m_ICoreTextSelectionUpdatingEventArgs /= null then
         if this.m_ICoreTextSelectionUpdatingEventArgs.all /= null then
            RefCount := this.m_ICoreTextSelectionUpdatingEventArgs.all.Release;
            Free (this.m_ICoreTextSelectionUpdatingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextSelectionUpdatingEventArgs

   function get_Selection
   (
      this : in out CoreTextSelectionUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextSelectionUpdatingEventArgs.all.get_Selection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Result
   (
      this : in out CoreTextSelectionUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextSelectionUpdatingResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextSelectionUpdatingResult;
   begin
      Hr := this.m_ICoreTextSelectionUpdatingEventArgs.all.get_Result (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Result
   (
      this : in out CoreTextSelectionUpdatingEventArgs;
      value : Windows.UI.Text.Core.CoreTextSelectionUpdatingResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextSelectionUpdatingEventArgs.all.put_Result (value);
   end;

   function get_IsCanceled
   (
      this : in out CoreTextSelectionUpdatingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextSelectionUpdatingEventArgs.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextSelectionUpdatingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextSelectionUpdatingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CoreTextServicesConstants is

      function get_HiddenCharacter
      return WinRt.Wide_Char is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.Core.CoreTextServicesConstants");
         m_Factory        : access WinRt.Windows.UI.Text.Core.ICoreTextServicesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Wide_Char;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICoreTextServicesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HiddenCharacter (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end CoreTextServicesConstants;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextServicesManager

   procedure Initialize (this : in out CoreTextServicesManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextServicesManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextServicesManager, ICoreTextServicesManager_Ptr);
   begin
      if this.m_ICoreTextServicesManager /= null then
         if this.m_ICoreTextServicesManager.all /= null then
            RefCount := this.m_ICoreTextServicesManager.all.Release;
            Free (this.m_ICoreTextServicesManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CoreTextServicesManager

   function GetForCurrentView
   return WinRt.Windows.UI.Text.Core.CoreTextServicesManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.Core.CoreTextServicesManager");
      m_Factory        : access WinRt.Windows.UI.Text.Core.ICoreTextServicesManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.ICoreTextServicesManager;
   begin
      return RetVal : WinRt.Windows.UI.Text.Core.CoreTextServicesManager do
         Hr := RoGetActivationFactory (m_hString, IID_ICoreTextServicesManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICoreTextServicesManager := new Windows.UI.Text.Core.ICoreTextServicesManager;
            Retval.m_ICoreTextServicesManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextServicesManager

   function get_InputLanguage
   (
      this : in out CoreTextServicesManager
   )
   return WinRt.Windows.Globalization.Language'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         Hr := this.m_ICoreTextServicesManager.all.get_InputLanguage (m_ComRetVal'Access);
         Retval.m_ILanguage := new Windows.Globalization.ILanguage;
         Retval.m_ILanguage.all := m_ComRetVal;
      end return;
   end;

   function add_InputLanguageChanged
   (
      this : in out CoreTextServicesManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICoreTextServicesManager.all.add_InputLanguageChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_InputLanguageChanged
   (
      this : in out CoreTextServicesManager;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextServicesManager.all.remove_InputLanguageChanged (cookie);
   end;

   function CreateEditContext
   (
      this : in out CoreTextServicesManager
   )
   return WinRt.Windows.UI.Text.Core.CoreTextEditContext'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.ICoreTextEditContext;
   begin
      return RetVal : WinRt.Windows.UI.Text.Core.CoreTextEditContext do
         Hr := this.m_ICoreTextServicesManager.all.CreateEditContext (m_ComRetVal'Access);
         Retval.m_ICoreTextEditContext := new Windows.UI.Text.Core.ICoreTextEditContext;
         Retval.m_ICoreTextEditContext.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextTextRequest

   procedure Initialize (this : in out CoreTextTextRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextTextRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextTextRequest, ICoreTextTextRequest_Ptr);
   begin
      if this.m_ICoreTextTextRequest /= null then
         if this.m_ICoreTextTextRequest.all /= null then
            RefCount := this.m_ICoreTextTextRequest.all.Release;
            Free (this.m_ICoreTextTextRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextTextRequest

   function get_Range
   (
      this : in out CoreTextTextRequest
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextTextRequest.all.get_Range (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out CoreTextTextRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICoreTextTextRequest.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out CoreTextTextRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICoreTextTextRequest.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsCanceled
   (
      this : in out CoreTextTextRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextTextRequest.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextTextRequest
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextTextRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextTextRequestedEventArgs

   procedure Initialize (this : in out CoreTextTextRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextTextRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextTextRequestedEventArgs, ICoreTextTextRequestedEventArgs_Ptr);
   begin
      if this.m_ICoreTextTextRequestedEventArgs /= null then
         if this.m_ICoreTextTextRequestedEventArgs.all /= null then
            RefCount := this.m_ICoreTextTextRequestedEventArgs.all.Release;
            Free (this.m_ICoreTextTextRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextTextRequestedEventArgs

   function get_Request
   (
      this : in out CoreTextTextRequestedEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextTextRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.ICoreTextTextRequest;
   begin
      return RetVal : WinRt.Windows.UI.Text.Core.CoreTextTextRequest do
         Hr := this.m_ICoreTextTextRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_ICoreTextTextRequest := new Windows.UI.Text.Core.ICoreTextTextRequest;
         Retval.m_ICoreTextTextRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CoreTextTextUpdatingEventArgs

   procedure Initialize (this : in out CoreTextTextUpdatingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CoreTextTextUpdatingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICoreTextTextUpdatingEventArgs, ICoreTextTextUpdatingEventArgs_Ptr);
   begin
      if this.m_ICoreTextTextUpdatingEventArgs /= null then
         if this.m_ICoreTextTextUpdatingEventArgs.all /= null then
            RefCount := this.m_ICoreTextTextUpdatingEventArgs.all.Release;
            Free (this.m_ICoreTextTextUpdatingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CoreTextTextUpdatingEventArgs

   function get_Range
   (
      this : in out CoreTextTextUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextTextUpdatingEventArgs.all.get_Range (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out CoreTextTextUpdatingEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICoreTextTextUpdatingEventArgs.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NewSelection
   (
      this : in out CoreTextTextUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextRange;
   begin
      Hr := this.m_ICoreTextTextUpdatingEventArgs.all.get_NewSelection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InputLanguage
   (
      this : in out CoreTextTextUpdatingEventArgs
   )
   return WinRt.Windows.Globalization.Language'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         Hr := this.m_ICoreTextTextUpdatingEventArgs.all.get_InputLanguage (m_ComRetVal'Access);
         Retval.m_ILanguage := new Windows.Globalization.ILanguage;
         Retval.m_ILanguage.all := m_ComRetVal;
      end return;
   end;

   function get_Result
   (
      this : in out CoreTextTextUpdatingEventArgs
   )
   return WinRt.Windows.UI.Text.Core.CoreTextTextUpdatingResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.Core.CoreTextTextUpdatingResult;
   begin
      Hr := this.m_ICoreTextTextUpdatingEventArgs.all.get_Result (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Result
   (
      this : in out CoreTextTextUpdatingEventArgs;
      value : Windows.UI.Text.Core.CoreTextTextUpdatingResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICoreTextTextUpdatingEventArgs.all.put_Result (value);
   end;

   function get_IsCanceled
   (
      this : in out CoreTextTextUpdatingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICoreTextTextUpdatingEventArgs.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out CoreTextTextUpdatingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ICoreTextTextUpdatingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.UserDataAccounts.Provider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataAccountPartnerAccountInfo

   procedure Initialize (this : in out UserDataAccountPartnerAccountInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataAccountPartnerAccountInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataAccountPartnerAccountInfo, IUserDataAccountPartnerAccountInfo_Ptr);
   begin
      if this.m_IUserDataAccountPartnerAccountInfo /= null then
         if this.m_IUserDataAccountPartnerAccountInfo.all /= null then
            RefCount := this.m_IUserDataAccountPartnerAccountInfo.all.Release;
            Free (this.m_IUserDataAccountPartnerAccountInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataAccountPartnerAccountInfo

   function get_DisplayName
   (
      this : in out UserDataAccountPartnerAccountInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataAccountPartnerAccountInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Priority
   (
      this : in out UserDataAccountPartnerAccountInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IUserDataAccountPartnerAccountInfo.all.get_Priority (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AccountKind
   (
      this : in out UserDataAccountPartnerAccountInfo
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderPartnerAccountKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderPartnerAccountKind;
   begin
      Hr := this.m_IUserDataAccountPartnerAccountInfo.all.get_AccountKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataAccountProviderAddAccountOperation

   procedure Initialize (this : in out UserDataAccountProviderAddAccountOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataAccountProviderAddAccountOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataAccountProviderAddAccountOperation, IUserDataAccountProviderAddAccountOperation_Ptr);
   begin
      if this.m_IUserDataAccountProviderAddAccountOperation /= null then
         if this.m_IUserDataAccountProviderAddAccountOperation.all /= null then
            RefCount := this.m_IUserDataAccountProviderAddAccountOperation.all.Release;
            Free (this.m_IUserDataAccountProviderAddAccountOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataAccountProviderAddAccountOperation

   function get_ContentKinds
   (
      this : in out UserDataAccountProviderAddAccountOperation
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.UserDataAccountContentKinds is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.UserDataAccountContentKinds;
   begin
      Hr := this.m_IUserDataAccountProviderAddAccountOperation.all.get_ContentKinds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PartnerAccountInfos
   (
      this : in out UserDataAccountProviderAddAccountOperation
   )
   return IVectorView_IUserDataAccountPartnerAccountInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IUserDataAccountPartnerAccountInfo.Kind;
   begin
      Hr := this.m_IUserDataAccountProviderAddAccountOperation.all.get_PartnerAccountInfos (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IUserDataAccountPartnerAccountInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out UserDataAccountProviderAddAccountOperation;
      userDataAccountId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userDataAccountId : WinRt.HString := To_HString (userDataAccountId);
   begin
      Hr := this.m_IUserDataAccountProviderAddAccountOperation.all.ReportCompleted (HStr_userDataAccountId);
      Hr := WindowsDeleteString (HStr_userDataAccountId);
   end;

   function get_Kind
   (
      this : in out UserDataAccountProviderAddAccountOperation
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderAddAccountOperation_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation, WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IID_IUserDataAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserDataAccountProviderAddAccountOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataAccountProviderResolveErrorsOperation

   procedure Initialize (this : in out UserDataAccountProviderResolveErrorsOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataAccountProviderResolveErrorsOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataAccountProviderResolveErrorsOperation, IUserDataAccountProviderResolveErrorsOperation_Ptr);
   begin
      if this.m_IUserDataAccountProviderResolveErrorsOperation /= null then
         if this.m_IUserDataAccountProviderResolveErrorsOperation.all /= null then
            RefCount := this.m_IUserDataAccountProviderResolveErrorsOperation.all.Release;
            Free (this.m_IUserDataAccountProviderResolveErrorsOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataAccountProviderResolveErrorsOperation

   function get_UserDataAccountId
   (
      this : in out UserDataAccountProviderResolveErrorsOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataAccountProviderResolveErrorsOperation.all.get_UserDataAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out UserDataAccountProviderResolveErrorsOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataAccountProviderResolveErrorsOperation.all.ReportCompleted;
   end;

   function get_Kind
   (
      this : in out UserDataAccountProviderResolveErrorsOperation
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderResolveErrorsOperation_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation, WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IID_IUserDataAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserDataAccountProviderResolveErrorsOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserDataAccountProviderSettingsOperation

   procedure Initialize (this : in out UserDataAccountProviderSettingsOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserDataAccountProviderSettingsOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserDataAccountProviderSettingsOperation, IUserDataAccountProviderSettingsOperation_Ptr);
   begin
      if this.m_IUserDataAccountProviderSettingsOperation /= null then
         if this.m_IUserDataAccountProviderSettingsOperation.all /= null then
            RefCount := this.m_IUserDataAccountProviderSettingsOperation.all.Release;
            Free (this.m_IUserDataAccountProviderSettingsOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserDataAccountProviderSettingsOperation

   function get_UserDataAccountId
   (
      this : in out UserDataAccountProviderSettingsOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserDataAccountProviderSettingsOperation.all.get_UserDataAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out UserDataAccountProviderSettingsOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserDataAccountProviderSettingsOperation.all.ReportCompleted;
   end;

   function get_Kind
   (
      this : in out UserDataAccountProviderSettingsOperation
   )
   return WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderOperationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserDataAccounts.Provider.UserDataAccountProviderOperationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderSettingsOperation_Interface, WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IUserDataAccountProviderOperation, WinRt.Windows.ApplicationModel.UserDataAccounts.Provider.IID_IUserDataAccountProviderOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserDataAccountProviderSettingsOperation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Import is

   package IAsyncOperation_PhotoImportImportItemsResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Media.Import.IPhotoImportImportItemsResult, GenericObject);
   package AsyncOperationCompletedHandler_PhotoImportImportItemsResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Media.Import.IPhotoImportImportItemsResult, GenericObject);

   package IAsyncOperation_PhotoImportDeleteImportedItemsFromSourceResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Media.Import.IPhotoImportDeleteImportedItemsFromSourceResult, GenericObject);
   package AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Media.Import.IPhotoImportDeleteImportedItemsFromSourceResult, GenericObject);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_PhotoImportFindItemsResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Media.Import.IPhotoImportFindItemsResult, GenericObject);
   package AsyncOperationCompletedHandler_PhotoImportFindItemsResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Media.Import.IPhotoImportFindItemsResult, GenericObject);

   package IAsyncOperation_PhotoImportSource is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Import.IPhotoImportSource);
   package AsyncOperationCompletedHandler_PhotoImportSource is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Import.IPhotoImportSource);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportDeleteImportedItemsFromSourceResult

   procedure Initialize (this : in out PhotoImportDeleteImportedItemsFromSourceResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportDeleteImportedItemsFromSourceResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportDeleteImportedItemsFromSourceResult, IPhotoImportDeleteImportedItemsFromSourceResult_Ptr);
   begin
      if this.m_IPhotoImportDeleteImportedItemsFromSourceResult /= null then
         if this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all /= null then
            RefCount := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.Release;
            Free (this.m_IPhotoImportDeleteImportedItemsFromSourceResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportDeleteImportedItemsFromSourceResult

   function get_Session
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.Windows.Media.Import.PhotoImportSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSession;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSession do
         Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_Session (m_ComRetVal'Access);
         Retval.m_IPhotoImportSession := new Windows.Media.Import.IPhotoImportSession;
         Retval.m_IPhotoImportSession.all := m_ComRetVal;
      end return;
   end;

   function get_HasSucceeded
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_HasSucceeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeletedItems
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return IVectorView_IPhotoImportItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPhotoImportItem.Kind;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_DeletedItems (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPhotoImportItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PhotosCount
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_PhotosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhotosSizeInBytes
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_PhotosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideosCount
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_VideosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideosSizeInBytes
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_VideosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidecarsCount
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_SidecarsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidecarsSizeInBytes
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_SidecarsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SiblingsCount
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_SiblingsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SiblingsSizeInBytes
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_SiblingsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalCount
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_TotalCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalSizeInBytes
   (
      this : in out PhotoImportDeleteImportedItemsFromSourceResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportDeleteImportedItemsFromSourceResult.all.get_TotalSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportFindItemsResult

   procedure Initialize (this : in out PhotoImportFindItemsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportFindItemsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportFindItemsResult, IPhotoImportFindItemsResult_Ptr);
   begin
      if this.m_IPhotoImportFindItemsResult /= null then
         if this.m_IPhotoImportFindItemsResult.all /= null then
            RefCount := this.m_IPhotoImportFindItemsResult.all.Release;
            Free (this.m_IPhotoImportFindItemsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportFindItemsResult

   function get_Session
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.Windows.Media.Import.PhotoImportSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSession;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSession do
         Hr := this.m_IPhotoImportFindItemsResult.all.get_Session (m_ComRetVal'Access);
         Retval.m_IPhotoImportSession := new Windows.Media.Import.IPhotoImportSession;
         Retval.m_IPhotoImportSession.all := m_ComRetVal;
      end return;
   end;

   function get_HasSucceeded
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_HasSucceeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FoundItems
   (
      this : in out PhotoImportFindItemsResult
   )
   return IVectorView_IPhotoImportItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPhotoImportItem.Kind;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_FoundItems (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPhotoImportItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PhotosCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_PhotosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhotosSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_PhotosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideosCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_VideosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideosSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_VideosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidecarsCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SidecarsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidecarsSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SidecarsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SiblingsCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SiblingsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SiblingsSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SiblingsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_TotalCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_TotalSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SelectAll
   (
      this : in out PhotoImportFindItemsResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.SelectAll;
   end;

   procedure SelectNone
   (
      this : in out PhotoImportFindItemsResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.SelectNone;
   end;

   procedure SelectNewAsync
   (
      this : in out PhotoImportFindItemsResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.SelectNewAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetImportMode
   (
      this : in out PhotoImportFindItemsResult;
      value : Windows.Media.Import.PhotoImportImportMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.SetImportMode (value);
   end;

   function get_ImportMode
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.Windows.Media.Import.PhotoImportImportMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportImportMode;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_ImportMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedPhotosCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedPhotosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedPhotosSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedPhotosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedVideosCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedVideosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedVideosSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedVideosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedSidecarsCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedSidecarsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedSidecarsSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedSidecarsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedSiblingsCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedSiblingsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedSiblingsSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedSiblingsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedTotalCount
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedTotalCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedTotalSizeInBytes
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.get_SelectedTotalSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SelectionChanged
   (
      this : in out PhotoImportFindItemsResult;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.add_SelectionChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SelectionChanged
   (
      this : in out PhotoImportFindItemsResult;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.remove_SelectionChanged (token);
   end;

   function ImportItemsAsync
   (
      this : in out PhotoImportFindItemsResult
   )
   return WinRt.Windows.Media.Import.PhotoImportImportItemsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportImportItemsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportImportItemsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportImportItemsResult;
      m_IID            : aliased WinRt.IID := (3631541348, 2385, 21593, (160, 221, 15, 139, 243, 145, 126, 177 )); -- Windows.Media.Import.PhotoImportImportItemsResult;
      m_HandlerIID     : aliased WinRt.IID := (219422402, 61072, 21408, (147, 24, 16, 240, 171, 127, 45, 23 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind := new AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportImportItemsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportImportItemsResult do
         Hr := this.m_IPhotoImportFindItemsResult.all.ImportItemsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhotoImportImportItemsResult := new Windows.Media.Import.IPhotoImportImportItemsResult;
                  Retval.m_IPhotoImportImportItemsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_ItemImported
   (
      this : in out PhotoImportFindItemsResult;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.add_ItemImported (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ItemImported
   (
      this : in out PhotoImportFindItemsResult;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportFindItemsResult.all.remove_ItemImported (token);
   end;

   procedure AddItemsInDateRangeToSelection
   (
      this : in out PhotoImportFindItemsResult;
      rangeStart : Windows.Foundation.DateTime;
      rangeLength : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Import.IPhotoImportFindItemsResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Import.IPhotoImportFindItemsResult_Interface, WinRt.Windows.Media.Import.IPhotoImportFindItemsResult2, WinRt.Windows.Media.Import.IID_IPhotoImportFindItemsResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhotoImportFindItemsResult.all);
      Hr := m_Interface.AddItemsInDateRangeToSelection (rangeStart, rangeLength);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportImportItemsResult

   procedure Initialize (this : in out PhotoImportImportItemsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportImportItemsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportImportItemsResult, IPhotoImportImportItemsResult_Ptr);
   begin
      if this.m_IPhotoImportImportItemsResult /= null then
         if this.m_IPhotoImportImportItemsResult.all /= null then
            RefCount := this.m_IPhotoImportImportItemsResult.all.Release;
            Free (this.m_IPhotoImportImportItemsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportImportItemsResult

   function get_Session
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.Windows.Media.Import.PhotoImportSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSession;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSession do
         Hr := this.m_IPhotoImportImportItemsResult.all.get_Session (m_ComRetVal'Access);
         Retval.m_IPhotoImportSession := new Windows.Media.Import.IPhotoImportSession;
         Retval.m_IPhotoImportSession.all := m_ComRetVal;
      end return;
   end;

   function get_HasSucceeded
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_HasSucceeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImportedItems
   (
      this : in out PhotoImportImportItemsResult
   )
   return IVectorView_IPhotoImportItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPhotoImportItem.Kind;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_ImportedItems (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPhotoImportItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PhotosCount
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_PhotosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhotosSizeInBytes
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_PhotosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideosCount
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_VideosCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideosSizeInBytes
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_VideosSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidecarsCount
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_SidecarsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SidecarsSizeInBytes
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_SidecarsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SiblingsCount
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_SiblingsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SiblingsSizeInBytes
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_SiblingsSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalCount
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_TotalCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TotalSizeInBytes
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportImportItemsResult.all.get_TotalSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function DeleteImportedItemsFromSourceAsync
   (
      this : in out PhotoImportImportItemsResult
   )
   return WinRt.Windows.Media.Import.PhotoImportDeleteImportedItemsFromSourceResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportDeleteImportedItemsFromSourceResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportDeleteImportedItemsFromSourceResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportDeleteImportedItemsFromSourceResult;
      m_IID            : aliased WinRt.IID := (1042510249, 10266, 21030, (174, 133, 202, 165, 92, 13, 97, 222 )); -- Windows.Media.Import.PhotoImportDeleteImportedItemsFromSourceResult;
      m_HandlerIID     : aliased WinRt.IID := (1579476929, 62294, 22977, (176, 229, 178, 223, 178, 37, 235, 78 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind := new AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportDeleteImportedItemsFromSourceResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportDeleteImportedItemsFromSourceResult do
         Hr := this.m_IPhotoImportImportItemsResult.all.DeleteImportedItemsFromSourceAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhotoImportDeleteImportedItemsFromSourceResult := new Windows.Media.Import.IPhotoImportDeleteImportedItemsFromSourceResult;
                  Retval.m_IPhotoImportDeleteImportedItemsFromSourceResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportItem

   procedure Initialize (this : in out PhotoImportItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportItem, IPhotoImportItem_Ptr);
   begin
      if this.m_IPhotoImportItem /= null then
         if this.m_IPhotoImportItem.all /= null then
            RefCount := this.m_IPhotoImportItem.all.Release;
            Free (this.m_IPhotoImportItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportItem

   function get_Name
   (
      this : in out PhotoImportItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportItem.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ItemKey
   (
      this : in out PhotoImportItem
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportItem.all.get_ItemKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContentType
   (
      this : in out PhotoImportItem
   )
   return WinRt.Windows.Media.Import.PhotoImportContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportContentType;
   begin
      Hr := this.m_IPhotoImportItem.all.get_ContentType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SizeInBytes
   (
      this : in out PhotoImportItem
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportItem.all.get_SizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Date
   (
      this : in out PhotoImportItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPhotoImportItem.all.get_Date (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Sibling
   (
      this : in out PhotoImportItem
   )
   return WinRt.Windows.Media.Import.PhotoImportSidecar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSidecar;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSidecar do
         Hr := this.m_IPhotoImportItem.all.get_Sibling (m_ComRetVal'Access);
         Retval.m_IPhotoImportSidecar := new Windows.Media.Import.IPhotoImportSidecar;
         Retval.m_IPhotoImportSidecar.all := m_ComRetVal;
      end return;
   end;

   function get_Sidecars
   (
      this : in out PhotoImportItem
   )
   return IVectorView_IPhotoImportSidecar.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPhotoImportSidecar.Kind;
   begin
      Hr := this.m_IPhotoImportItem.all.get_Sidecars (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPhotoImportSidecar (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_VideoSegments
   (
      this : in out PhotoImportItem
   )
   return IVectorView_IPhotoImportVideoSegment.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPhotoImportVideoSegment.Kind;
   begin
      Hr := this.m_IPhotoImportItem.all.get_VideoSegments (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPhotoImportVideoSegment (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsSelected
   (
      this : in out PhotoImportItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoImportItem.all.get_IsSelected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSelected
   (
      this : in out PhotoImportItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportItem.all.put_IsSelected (value);
   end;

   function get_Thumbnail
   (
      this : in out PhotoImportItem
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IPhotoImportItem.all.get_Thumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImportedFileNames
   (
      this : in out PhotoImportItem
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPhotoImportItem.all.get_ImportedFileNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DeletedFileNames
   (
      this : in out PhotoImportItem
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPhotoImportItem.all.get_DeletedFileNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Path
   (
      this : in out PhotoImportItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Import.IPhotoImportItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Import.IPhotoImportItem_Interface, WinRt.Windows.Media.Import.IPhotoImportItem2, WinRt.Windows.Media.Import.IID_IPhotoImportItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhotoImportItem.all);
      Hr := m_Interface.get_Path (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportItemImportedEventArgs

   procedure Initialize (this : in out PhotoImportItemImportedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportItemImportedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportItemImportedEventArgs, IPhotoImportItemImportedEventArgs_Ptr);
   begin
      if this.m_IPhotoImportItemImportedEventArgs /= null then
         if this.m_IPhotoImportItemImportedEventArgs.all /= null then
            RefCount := this.m_IPhotoImportItemImportedEventArgs.all.Release;
            Free (this.m_IPhotoImportItemImportedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportItemImportedEventArgs

   function get_ImportedItem
   (
      this : in out PhotoImportItemImportedEventArgs
   )
   return WinRt.Windows.Media.Import.PhotoImportItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportItem;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportItem do
         Hr := this.m_IPhotoImportItemImportedEventArgs.all.get_ImportedItem (m_ComRetVal'Access);
         Retval.m_IPhotoImportItem := new Windows.Media.Import.IPhotoImportItem;
         Retval.m_IPhotoImportItem.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PhotoImportManager is

      function IsSupportedAsync
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Import.PhotoImportManager");
         m_Factory        : access WinRt.Windows.Media.Import.IPhotoImportManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhotoImportManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsSupportedAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function FindAllSourcesAsync
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Import.PhotoImportManager");
         m_Factory        : access WinRt.Windows.Media.Import.IPhotoImportManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (1056202606, 14777, 22902, (134, 67, 107, 175, 234, 77, 20, 121 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (1926096536, 37447, 20563, (140, 189, 217, 7, 107, 253, 253, 165 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhotoImportManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllSourcesAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function GetPendingOperations
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Import.PhotoImportManager");
         m_Factory        : access WinRt.Windows.Media.Import.IPhotoImportManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhotoImportManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetPendingOperations (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end PhotoImportManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportOperation

   procedure Initialize (this : in out PhotoImportOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportOperation, IPhotoImportOperation_Ptr);
   begin
      if this.m_IPhotoImportOperation /= null then
         if this.m_IPhotoImportOperation.all /= null then
            RefCount := this.m_IPhotoImportOperation.all.Release;
            Free (this.m_IPhotoImportOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportOperation

   function get_Stage
   (
      this : in out PhotoImportOperation
   )
   return WinRt.Windows.Media.Import.PhotoImportStage is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportStage;
   begin
      Hr := this.m_IPhotoImportOperation.all.get_Stage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Session
   (
      this : in out PhotoImportOperation
   )
   return WinRt.Windows.Media.Import.PhotoImportSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSession;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSession do
         Hr := this.m_IPhotoImportOperation.all.get_Session (m_ComRetVal'Access);
         Retval.m_IPhotoImportSession := new Windows.Media.Import.IPhotoImportSession;
         Retval.m_IPhotoImportSession.all := m_ComRetVal;
      end return;
   end;

   function get_ContinueFindingItemsAsync
   (
      this : in out PhotoImportOperation
   )
   return WinRt.Windows.Media.Import.PhotoImportFindItemsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportFindItemsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportFindItemsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportFindItemsResult;
      m_IID            : aliased WinRt.IID := (1852808014, 50913, 21348, (166, 80, 17, 195, 82, 17, 190, 173 )); -- Windows.Media.Import.PhotoImportFindItemsResult;
      m_HandlerIID     : aliased WinRt.IID := (3715787220, 9302, 21072, (150, 83, 49, 189, 45, 72, 113, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind := new AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportFindItemsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportFindItemsResult do
         Hr := this.m_IPhotoImportOperation.all.get_ContinueFindingItemsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhotoImportFindItemsResult := new Windows.Media.Import.IPhotoImportFindItemsResult;
                  Retval.m_IPhotoImportFindItemsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_ContinueImportingItemsAsync
   (
      this : in out PhotoImportOperation
   )
   return WinRt.Windows.Media.Import.PhotoImportImportItemsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportImportItemsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportImportItemsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportImportItemsResult;
      m_IID            : aliased WinRt.IID := (3631541348, 2385, 21593, (160, 221, 15, 139, 243, 145, 126, 177 )); -- Windows.Media.Import.PhotoImportImportItemsResult;
      m_HandlerIID     : aliased WinRt.IID := (219422402, 61072, 21408, (147, 24, 16, 240, 171, 127, 45, 23 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind := new AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportImportItemsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportImportItemsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportImportItemsResult do
         Hr := this.m_IPhotoImportOperation.all.get_ContinueImportingItemsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhotoImportImportItemsResult := new Windows.Media.Import.IPhotoImportImportItemsResult;
                  Retval.m_IPhotoImportImportItemsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_ContinueDeletingImportedItemsFromSourceAsync
   (
      this : in out PhotoImportOperation
   )
   return WinRt.Windows.Media.Import.PhotoImportDeleteImportedItemsFromSourceResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportDeleteImportedItemsFromSourceResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportDeleteImportedItemsFromSourceResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportDeleteImportedItemsFromSourceResult;
      m_IID            : aliased WinRt.IID := (1042510249, 10266, 21030, (174, 133, 202, 165, 92, 13, 97, 222 )); -- Windows.Media.Import.PhotoImportDeleteImportedItemsFromSourceResult;
      m_HandlerIID     : aliased WinRt.IID := (1579476929, 62294, 22977, (176, 229, 178, 223, 178, 37, 235, 78 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind := new AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportDeleteImportedItemsFromSourceResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportDeleteImportedItemsFromSourceResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportDeleteImportedItemsFromSourceResult do
         Hr := this.m_IPhotoImportOperation.all.get_ContinueDeletingImportedItemsFromSourceAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhotoImportDeleteImportedItemsFromSourceResult := new Windows.Media.Import.IPhotoImportDeleteImportedItemsFromSourceResult;
                  Retval.m_IPhotoImportDeleteImportedItemsFromSourceResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportSelectionChangedEventArgs

   procedure Initialize (this : in out PhotoImportSelectionChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportSelectionChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportSelectionChangedEventArgs, IPhotoImportSelectionChangedEventArgs_Ptr);
   begin
      if this.m_IPhotoImportSelectionChangedEventArgs /= null then
         if this.m_IPhotoImportSelectionChangedEventArgs.all /= null then
            RefCount := this.m_IPhotoImportSelectionChangedEventArgs.all.Release;
            Free (this.m_IPhotoImportSelectionChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportSelectionChangedEventArgs

   function get_IsSelectionEmpty
   (
      this : in out PhotoImportSelectionChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoImportSelectionChangedEventArgs.all.get_IsSelectionEmpty (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportSession

   procedure Initialize (this : in out PhotoImportSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportSession, IPhotoImportSession_Ptr);
   begin
      if this.m_IPhotoImportSession /= null then
         if this.m_IPhotoImportSession.all /= null then
            RefCount := this.m_IPhotoImportSession.all.Release;
            Free (this.m_IPhotoImportSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportSession

   function get_Source
   (
      this : in out PhotoImportSession
   )
   return WinRt.Windows.Media.Import.PhotoImportSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSource;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSource do
         Hr := this.m_IPhotoImportSession.all.get_Source (m_ComRetVal'Access);
         Retval.m_IPhotoImportSource := new Windows.Media.Import.IPhotoImportSource;
         Retval.m_IPhotoImportSource.all := m_ComRetVal;
      end return;
   end;

   function get_SessionId
   (
      this : in out PhotoImportSession
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhotoImportSession.all.get_SessionId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DestinationFolder
   (
      this : in out PhotoImportSession;
      value : Windows.Storage.IStorageFolder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportSession.all.put_DestinationFolder (value);
   end;

   function get_DestinationFolder
   (
      this : in out PhotoImportSession
   )
   return WinRt.Windows.Storage.IStorageFolder is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
   begin
      Hr := this.m_IPhotoImportSession.all.get_DestinationFolder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AppendSessionDateToDestinationFolder
   (
      this : in out PhotoImportSession;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportSession.all.put_AppendSessionDateToDestinationFolder (value);
   end;

   function get_AppendSessionDateToDestinationFolder
   (
      this : in out PhotoImportSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoImportSession.all.get_AppendSessionDateToDestinationFolder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SubfolderCreationMode
   (
      this : in out PhotoImportSession;
      value : Windows.Media.Import.PhotoImportSubfolderCreationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportSession.all.put_SubfolderCreationMode (value);
   end;

   function get_SubfolderCreationMode
   (
      this : in out PhotoImportSession
   )
   return WinRt.Windows.Media.Import.PhotoImportSubfolderCreationMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportSubfolderCreationMode;
   begin
      Hr := this.m_IPhotoImportSession.all.get_SubfolderCreationMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DestinationFileNamePrefix
   (
      this : in out PhotoImportSession;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhotoImportSession.all.put_DestinationFileNamePrefix (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DestinationFileNamePrefix
   (
      this : in out PhotoImportSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSession.all.get_DestinationFileNamePrefix (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FindItemsAsync
   (
      this : in out PhotoImportSession;
      contentTypeFilter : Windows.Media.Import.PhotoImportContentTypeFilter;
      itemSelectionMode : Windows.Media.Import.PhotoImportItemSelectionMode
   )
   return WinRt.Windows.Media.Import.PhotoImportFindItemsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportFindItemsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportFindItemsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportFindItemsResult;
      m_IID            : aliased WinRt.IID := (1852808014, 50913, 21348, (166, 80, 17, 195, 82, 17, 190, 173 )); -- Windows.Media.Import.PhotoImportFindItemsResult;
      m_HandlerIID     : aliased WinRt.IID := (3715787220, 9302, 21072, (150, 83, 49, 189, 45, 72, 113, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind := new AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportFindItemsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportFindItemsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportFindItemsResult do
         Hr := this.m_IPhotoImportSession.all.FindItemsAsync (contentTypeFilter, itemSelectionMode, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhotoImportFindItemsResult := new Windows.Media.Import.IPhotoImportFindItemsResult;
                  Retval.m_IPhotoImportFindItemsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Close
   (
      this : in out PhotoImportSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Import.IPhotoImportSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhotoImportSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_SubfolderDateFormat
   (
      this : in out PhotoImportSession;
      value : Windows.Media.Import.PhotoImportSubfolderDateFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Import.IPhotoImportSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Import.IPhotoImportSession_Interface, WinRt.Windows.Media.Import.IPhotoImportSession2, WinRt.Windows.Media.Import.IID_IPhotoImportSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhotoImportSession.all);
      Hr := m_Interface.put_SubfolderDateFormat (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SubfolderDateFormat
   (
      this : in out PhotoImportSession
   )
   return WinRt.Windows.Media.Import.PhotoImportSubfolderDateFormat is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Import.IPhotoImportSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportSubfolderDateFormat;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Import.IPhotoImportSession_Interface, WinRt.Windows.Media.Import.IPhotoImportSession2, WinRt.Windows.Media.Import.IID_IPhotoImportSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhotoImportSession.all);
      Hr := m_Interface.get_SubfolderDateFormat (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RememberDeselectedItems
   (
      this : in out PhotoImportSession;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Import.IPhotoImportSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Import.IPhotoImportSession_Interface, WinRt.Windows.Media.Import.IPhotoImportSession2, WinRt.Windows.Media.Import.IID_IPhotoImportSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhotoImportSession.all);
      Hr := m_Interface.put_RememberDeselectedItems (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RememberDeselectedItems
   (
      this : in out PhotoImportSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Import.IPhotoImportSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Import.IPhotoImportSession_Interface, WinRt.Windows.Media.Import.IPhotoImportSession2, WinRt.Windows.Media.Import.IID_IPhotoImportSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhotoImportSession.all);
      Hr := m_Interface.get_RememberDeselectedItems (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportSidecar

   procedure Initialize (this : in out PhotoImportSidecar) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportSidecar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportSidecar, IPhotoImportSidecar_Ptr);
   begin
      if this.m_IPhotoImportSidecar /= null then
         if this.m_IPhotoImportSidecar.all /= null then
            RefCount := this.m_IPhotoImportSidecar.all.Release;
            Free (this.m_IPhotoImportSidecar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportSidecar

   function get_Name
   (
      this : in out PhotoImportSidecar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSidecar.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SizeInBytes
   (
      this : in out PhotoImportSidecar
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportSidecar.all.get_SizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Date
   (
      this : in out PhotoImportSidecar
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPhotoImportSidecar.all.get_Date (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportSource

   procedure Initialize (this : in out PhotoImportSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportSource, IPhotoImportSource_Ptr);
   begin
      if this.m_IPhotoImportSource /= null then
         if this.m_IPhotoImportSource.all /= null then
            RefCount := this.m_IPhotoImportSource.all.Release;
            Free (this.m_IPhotoImportSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PhotoImportSource

   function FromIdAsync
   (
      sourceId : WinRt.WString
   )
   return WinRt.Windows.Media.Import.PhotoImportSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Import.PhotoImportSource");
      m_Factory        : access WinRt.Windows.Media.Import.IPhotoImportSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceId : WinRt.HString := To_HString (sourceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportSource.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportSource.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportSource;
      m_IID            : aliased WinRt.IID := (3368410142, 60231, 20664, (181, 217, 170, 254, 26, 130, 49, 138 )); -- Windows.Media.Import.PhotoImportSource;
      m_HandlerIID     : aliased WinRt.IID := (3694703146, 34606, 21496, (142, 151, 69, 237, 133, 223, 13, 35 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportSource.Kind := new AsyncOperationCompletedHandler_PhotoImportSource.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportSource.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportSource.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportSource.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportSource.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSource do
         Hr := RoGetActivationFactory (m_hString, IID_IPhotoImportSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_sourceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPhotoImportSource := new Windows.Media.Import.IPhotoImportSource;
                     Retval.m_IPhotoImportSource.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_sourceId);
      end return;
   end;

   function FromFolderAsync
   (
      sourceRootFolder : Windows.Storage.IStorageFolder
   )
   return WinRt.Windows.Media.Import.PhotoImportSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Import.PhotoImportSource");
      m_Factory        : access WinRt.Windows.Media.Import.IPhotoImportSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhotoImportSource.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhotoImportSource.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Import.IPhotoImportSource;
      m_IID            : aliased WinRt.IID := (3368410142, 60231, 20664, (181, 217, 170, 254, 26, 130, 49, 138 )); -- Windows.Media.Import.PhotoImportSource;
      m_HandlerIID     : aliased WinRt.IID := (3694703146, 34606, 21496, (142, 151, 69, 237, 133, 223, 13, 35 ));
      m_Handler        : AsyncOperationCompletedHandler_PhotoImportSource.Kind := new AsyncOperationCompletedHandler_PhotoImportSource.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhotoImportSource.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhotoImportSource.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhotoImportSource.Kind_Delegate, AsyncOperationCompletedHandler_PhotoImportSource.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSource do
         Hr := RoGetActivationFactory (m_hString, IID_IPhotoImportSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromFolderAsync (sourceRootFolder, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPhotoImportSource := new Windows.Media.Import.IPhotoImportSource;
                     Retval.m_IPhotoImportSource.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportSource

   function get_Id
   (
      this : in out PhotoImportSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSource.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out PhotoImportSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSource.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out PhotoImportSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSource.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Manufacturer
   (
      this : in out PhotoImportSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSource.all.get_Manufacturer (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Model
   (
      this : in out PhotoImportSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSource.all.get_Model (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SerialNumber
   (
      this : in out PhotoImportSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSource.all.get_SerialNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ConnectionProtocol
   (
      this : in out PhotoImportSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportSource.all.get_ConnectionProtocol (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ConnectionTransport
   (
      this : in out PhotoImportSource
   )
   return WinRt.Windows.Media.Import.PhotoImportConnectionTransport is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportConnectionTransport;
   begin
      Hr := this.m_IPhotoImportSource.all.get_ConnectionTransport (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PhotoImportSource
   )
   return WinRt.Windows.Media.Import.PhotoImportSourceType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportSourceType;
   begin
      Hr := this.m_IPhotoImportSource.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PowerSource
   (
      this : in out PhotoImportSource
   )
   return WinRt.Windows.Media.Import.PhotoImportPowerSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportPowerSource;
   begin
      Hr := this.m_IPhotoImportSource.all.get_PowerSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BatteryLevelPercent
   (
      this : in out PhotoImportSource
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IPhotoImportSource.all.get_BatteryLevelPercent (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DateTime
   (
      this : in out PhotoImportSource
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IPhotoImportSource.all.get_DateTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_StorageMedia
   (
      this : in out PhotoImportSource
   )
   return IVectorView_IPhotoImportStorageMedium.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPhotoImportStorageMedium.Kind;
   begin
      Hr := this.m_IPhotoImportSource.all.get_StorageMedia (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPhotoImportStorageMedium (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsLocked
   (
      this : in out PhotoImportSource
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
   begin
      Hr := this.m_IPhotoImportSource.all.get_IsLocked (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsMassStorage
   (
      this : in out PhotoImportSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhotoImportSource.all.get_IsMassStorage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Thumbnail
   (
      this : in out PhotoImportSource
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IPhotoImportSource.all.get_Thumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateImportSession
   (
      this : in out PhotoImportSource
   )
   return WinRt.Windows.Media.Import.PhotoImportSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSession;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSession do
         Hr := this.m_IPhotoImportSource.all.CreateImportSession (m_ComRetVal'Access);
         Retval.m_IPhotoImportSession := new Windows.Media.Import.IPhotoImportSession;
         Retval.m_IPhotoImportSession.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportStorageMedium

   procedure Initialize (this : in out PhotoImportStorageMedium) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportStorageMedium) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportStorageMedium, IPhotoImportStorageMedium_Ptr);
   begin
      if this.m_IPhotoImportStorageMedium /= null then
         if this.m_IPhotoImportStorageMedium.all /= null then
            RefCount := this.m_IPhotoImportStorageMedium.all.Release;
            Free (this.m_IPhotoImportStorageMedium);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportStorageMedium

   function get_Name
   (
      this : in out PhotoImportStorageMedium
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out PhotoImportStorageMedium
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SerialNumber
   (
      this : in out PhotoImportStorageMedium
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.get_SerialNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_StorageMediumType
   (
      this : in out PhotoImportStorageMedium
   )
   return WinRt.Windows.Media.Import.PhotoImportStorageMediumType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportStorageMediumType;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.get_StorageMediumType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedAccessMode
   (
      this : in out PhotoImportStorageMedium
   )
   return WinRt.Windows.Media.Import.PhotoImportAccessMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.PhotoImportAccessMode;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.get_SupportedAccessMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CapacityInBytes
   (
      this : in out PhotoImportStorageMedium
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.get_CapacityInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AvailableSpaceInBytes
   (
      this : in out PhotoImportStorageMedium
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.get_AvailableSpaceInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Refresh
   (
      this : in out PhotoImportStorageMedium
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhotoImportStorageMedium.all.Refresh;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoImportVideoSegment

   procedure Initialize (this : in out PhotoImportVideoSegment) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoImportVideoSegment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoImportVideoSegment, IPhotoImportVideoSegment_Ptr);
   begin
      if this.m_IPhotoImportVideoSegment /= null then
         if this.m_IPhotoImportVideoSegment.all /= null then
            RefCount := this.m_IPhotoImportVideoSegment.all.Release;
            Free (this.m_IPhotoImportVideoSegment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoImportVideoSegment

   function get_Name
   (
      this : in out PhotoImportVideoSegment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhotoImportVideoSegment.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SizeInBytes
   (
      this : in out PhotoImportVideoSegment
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IPhotoImportVideoSegment.all.get_SizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Date
   (
      this : in out PhotoImportVideoSegment
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPhotoImportVideoSegment.all.get_Date (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Sibling
   (
      this : in out PhotoImportVideoSegment
   )
   return WinRt.Windows.Media.Import.PhotoImportSidecar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Import.IPhotoImportSidecar;
   begin
      return RetVal : WinRt.Windows.Media.Import.PhotoImportSidecar do
         Hr := this.m_IPhotoImportVideoSegment.all.get_Sibling (m_ComRetVal'Access);
         Retval.m_IPhotoImportSidecar := new Windows.Media.Import.IPhotoImportSidecar;
         Retval.m_IPhotoImportSidecar.all := m_ComRetVal;
      end return;
   end;

   function get_Sidecars
   (
      this : in out PhotoImportVideoSegment
   )
   return IVectorView_IPhotoImportSidecar.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPhotoImportSidecar.Kind;
   begin
      Hr := this.m_IPhotoImportVideoSegment.all.get_Sidecars (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPhotoImportSidecar (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

end;

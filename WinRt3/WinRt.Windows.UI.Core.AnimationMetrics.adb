--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Core.AnimationMetrics is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AnimationDescription

   procedure Initialize (this : in out AnimationDescription) is
   begin
      null;
   end;

   procedure Finalize (this : in out AnimationDescription) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAnimationDescription, IAnimationDescription_Ptr);
   begin
      if this.m_IAnimationDescription /= null then
         if this.m_IAnimationDescription.all /= null then
            RefCount := this.m_IAnimationDescription.all.Release;
            Free (this.m_IAnimationDescription);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AnimationDescription

   function Constructor
   (
      effect : Windows.UI.Core.AnimationMetrics.AnimationEffect;
      target : Windows.UI.Core.AnimationMetrics.AnimationEffectTarget
   )
   return AnimationDescription is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Core.AnimationMetrics.AnimationDescription");
      m_Factory    : access IAnimationDescriptionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Core.AnimationMetrics.IAnimationDescription;
   begin
      return RetVal : AnimationDescription do
         Hr := RoGetActivationFactory (m_hString, IID_IAnimationDescriptionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (effect, target, m_ComRetVal'Access);
            Retval.m_IAnimationDescription := new Windows.UI.Core.AnimationMetrics.IAnimationDescription;
            Retval.m_IAnimationDescription.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AnimationDescription

   function get_Animations
   (
      this : in out AnimationDescription
   )
   return IVectorView_IPropertyAnimation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPropertyAnimation.Kind;
   begin
      Hr := this.m_IAnimationDescription.all.get_Animations (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPropertyAnimation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_StaggerDelay
   (
      this : in out AnimationDescription
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAnimationDescription.all.get_StaggerDelay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StaggerDelayFactor
   (
      this : in out AnimationDescription
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAnimationDescription.all.get_StaggerDelayFactor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DelayLimit
   (
      this : in out AnimationDescription
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAnimationDescription.all.get_DelayLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ZOrder
   (
      this : in out AnimationDescription
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAnimationDescription.all.get_ZOrder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OpacityAnimation

   procedure Initialize (this : in out OpacityAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out OpacityAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOpacityAnimation, IOpacityAnimation_Ptr);
   begin
      if this.m_IOpacityAnimation /= null then
         if this.m_IOpacityAnimation.all /= null then
            RefCount := this.m_IOpacityAnimation.all.Release;
            Free (this.m_IOpacityAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OpacityAnimation

   function get_InitialOpacity
   (
      this : in out OpacityAnimation
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IOpacityAnimation.all.get_InitialOpacity (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FinalOpacity
   (
      this : in out OpacityAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IOpacityAnimation.all.get_FinalOpacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out OpacityAnimation
   )
   return WinRt.Windows.UI.Core.AnimationMetrics.PropertyAnimationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.AnimationMetrics.PropertyAnimationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IOpacityAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOpacityAnimation.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Delay
   (
      this : in out OpacityAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IOpacityAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOpacityAnimation.all);
      Hr := m_Interface.get_Delay (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out OpacityAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IOpacityAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOpacityAnimation.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Control1
   (
      this : in out OpacityAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IOpacityAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOpacityAnimation.all);
      Hr := m_Interface.get_Control1 (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Control2
   (
      this : in out OpacityAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IOpacityAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOpacityAnimation.all);
      Hr := m_Interface.get_Control2 (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PropertyAnimation

   procedure Initialize (this : in out PropertyAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out PropertyAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPropertyAnimation, IPropertyAnimation_Ptr);
   begin
      if this.m_IPropertyAnimation /= null then
         if this.m_IPropertyAnimation.all /= null then
            RefCount := this.m_IPropertyAnimation.all.Release;
            Free (this.m_IPropertyAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PropertyAnimation

   function get_Type
   (
      this : in out PropertyAnimation
   )
   return WinRt.Windows.UI.Core.AnimationMetrics.PropertyAnimationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.AnimationMetrics.PropertyAnimationType;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Delay
   (
      this : in out PropertyAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Delay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out PropertyAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Control1
   (
      this : in out PropertyAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Control1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Control2
   (
      this : in out PropertyAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Control2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScaleAnimation

   procedure Initialize (this : in out ScaleAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScaleAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScaleAnimation, IScaleAnimation_Ptr);
   begin
      if this.m_IScaleAnimation /= null then
         if this.m_IScaleAnimation.all /= null then
            RefCount := this.m_IScaleAnimation.all.Release;
            Free (this.m_IScaleAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScaleAnimation

   function get_InitialScaleX
   (
      this : in out ScaleAnimation
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IScaleAnimation.all.get_InitialScaleX (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_InitialScaleY
   (
      this : in out ScaleAnimation
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IScaleAnimation.all.get_InitialScaleY (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FinalScaleX
   (
      this : in out ScaleAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IScaleAnimation.all.get_FinalScaleX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FinalScaleY
   (
      this : in out ScaleAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IScaleAnimation.all.get_FinalScaleY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NormalizedOrigin
   (
      this : in out ScaleAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IScaleAnimation.all.get_NormalizedOrigin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out ScaleAnimation
   )
   return WinRt.Windows.UI.Core.AnimationMetrics.PropertyAnimationType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.AnimationMetrics.PropertyAnimationType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IScaleAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScaleAnimation.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Delay
   (
      this : in out ScaleAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IScaleAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScaleAnimation.all);
      Hr := m_Interface.get_Delay (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out ScaleAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IScaleAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScaleAnimation.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Control1
   (
      this : in out ScaleAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IScaleAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScaleAnimation.all);
      Hr := m_Interface.get_Control1 (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Control2
   (
      this : in out ScaleAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Core.AnimationMetrics.IScaleAnimation_Interface, WinRt.Windows.UI.Core.AnimationMetrics.IPropertyAnimation, WinRt.Windows.UI.Core.AnimationMetrics.IID_IPropertyAnimation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IScaleAnimation.all);
      Hr := m_Interface.get_Control2 (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TranslationAnimation

   procedure Initialize (this : in out TranslationAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out TranslationAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPropertyAnimation, IPropertyAnimation_Ptr);
   begin
      if this.m_IPropertyAnimation /= null then
         if this.m_IPropertyAnimation.all /= null then
            RefCount := this.m_IPropertyAnimation.all.Release;
            Free (this.m_IPropertyAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TranslationAnimation

   function get_Type
   (
      this : in out TranslationAnimation
   )
   return WinRt.Windows.UI.Core.AnimationMetrics.PropertyAnimationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.AnimationMetrics.PropertyAnimationType;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Delay
   (
      this : in out TranslationAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Delay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out TranslationAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Control1
   (
      this : in out TranslationAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Control1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Control2
   (
      this : in out TranslationAnimation
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IPropertyAnimation.all.get_Control2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

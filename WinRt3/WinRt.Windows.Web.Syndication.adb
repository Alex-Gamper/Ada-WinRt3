--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Data.Xml.Dom;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Web.Syndication is

   package IAsyncOperation_SyndicationFeed is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Syndication.ISyndicationFeed, GenericObject);
   package AsyncOperationCompletedHandler_SyndicationFeed is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Syndication.ISyndicationFeed, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationAttribute

   procedure Initialize (this : in out SyndicationAttribute) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationAttribute) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationAttribute, ISyndicationAttribute_Ptr);
   begin
      if this.m_ISyndicationAttribute /= null then
         if this.m_ISyndicationAttribute.all /= null then
            RefCount := this.m_ISyndicationAttribute.all.Release;
            Free (this.m_ISyndicationAttribute);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationAttribute

   function Constructor return SyndicationAttribute is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationAttribute");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationAttribute;
   begin
      return RetVal : SyndicationAttribute do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationAttribute := new Windows.Web.Syndication.ISyndicationAttribute;
            Retval.m_ISyndicationAttribute.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      attributeName : WinRt.WString;
      attributeNamespace : WinRt.WString;
      attributeValue : WinRt.WString
   )
   return SyndicationAttribute is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationAttribute");
      m_Factory    : access ISyndicationAttributeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationAttribute;
      HStr_attributeName : WinRt.HString := To_HString (attributeName);
      HStr_attributeNamespace : WinRt.HString := To_HString (attributeNamespace);
      HStr_attributeValue : WinRt.HString := To_HString (attributeValue);
   begin
      return RetVal : SyndicationAttribute do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationAttributeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationAttribute (HStr_attributeName, HStr_attributeNamespace, HStr_attributeValue, m_ComRetVal'Access);
            Retval.m_ISyndicationAttribute := new Windows.Web.Syndication.ISyndicationAttribute;
            Retval.m_ISyndicationAttribute.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_attributeName);
         Hr := WindowsDeleteString (HStr_attributeNamespace);
         Hr := WindowsDeleteString (HStr_attributeValue);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationAttribute

   function get_Name
   (
      this : in out SyndicationAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationAttribute.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out SyndicationAttribute;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationAttribute.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Namespace
   (
      this : in out SyndicationAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationAttribute.all.get_Namespace (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Namespace
   (
      this : in out SyndicationAttribute;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationAttribute.all.put_Namespace (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Value
   (
      this : in out SyndicationAttribute
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationAttribute.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out SyndicationAttribute;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationAttribute.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationCategory

   procedure Initialize (this : in out SyndicationCategory) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationCategory) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationCategory, ISyndicationCategory_Ptr);
   begin
      if this.m_ISyndicationCategory /= null then
         if this.m_ISyndicationCategory.all /= null then
            RefCount := this.m_ISyndicationCategory.all.Release;
            Free (this.m_ISyndicationCategory);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationCategory

   function Constructor return SyndicationCategory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationCategory");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationCategory;
   begin
      return RetVal : SyndicationCategory do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationCategory := new Windows.Web.Syndication.ISyndicationCategory;
            Retval.m_ISyndicationCategory.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      term : WinRt.WString
   )
   return SyndicationCategory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationCategory");
      m_Factory    : access ISyndicationCategoryFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationCategory;
      HStr_term : WinRt.HString := To_HString (term);
   begin
      return RetVal : SyndicationCategory do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationCategoryFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationCategory (HStr_term, m_ComRetVal'Access);
            Retval.m_ISyndicationCategory := new Windows.Web.Syndication.ISyndicationCategory;
            Retval.m_ISyndicationCategory.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_term);
      end return;
   end;

   function Constructor
   (
      term : WinRt.WString;
      scheme : WinRt.WString;
      label : WinRt.WString
   )
   return SyndicationCategory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationCategory");
      m_Factory    : access ISyndicationCategoryFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationCategory;
      HStr_term : WinRt.HString := To_HString (term);
      HStr_scheme : WinRt.HString := To_HString (scheme);
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : SyndicationCategory do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationCategoryFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationCategoryEx (HStr_term, HStr_scheme, HStr_label, m_ComRetVal'Access);
            Retval.m_ISyndicationCategory := new Windows.Web.Syndication.ISyndicationCategory;
            Retval.m_ISyndicationCategory.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_term);
         Hr := WindowsDeleteString (HStr_scheme);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationCategory

   function get_Label
   (
      this : in out SyndicationCategory
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationCategory.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out SyndicationCategory;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationCategory.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Scheme
   (
      this : in out SyndicationCategory
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationCategory.all.get_Scheme (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Scheme
   (
      this : in out SyndicationCategory;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationCategory.all.put_Scheme (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Term
   (
      this : in out SyndicationCategory
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationCategory.all.get_Term (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Term
   (
      this : in out SyndicationCategory;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationCategory.all.put_Term (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeName
   (
      this : in out SyndicationCategory
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationCategory;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationCategory
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationCategory;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationCategory
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationCategory;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationCategory
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationCategory;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationCategory
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationCategory.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationCategory;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationCategory
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationCategory
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationCategory.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationCategory;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationCategory_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationCategory.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationClient

   procedure Initialize (this : in out SyndicationClient) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationClient) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationClient, ISyndicationClient_Ptr);
   begin
      if this.m_ISyndicationClient /= null then
         if this.m_ISyndicationClient.all /= null then
            RefCount := this.m_ISyndicationClient.all.Release;
            Free (this.m_ISyndicationClient);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationClient

   function Constructor
   (
      serverCredential : Windows.Security.Credentials.PasswordCredential'Class
   )
   return SyndicationClient is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationClient");
      m_Factory    : access ISyndicationClientFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationClient;
   begin
      return RetVal : SyndicationClient do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationClientFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationClient (serverCredential.m_IPasswordCredential.all, m_ComRetVal'Access);
            Retval.m_ISyndicationClient := new Windows.Web.Syndication.ISyndicationClient;
            Retval.m_ISyndicationClient.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return SyndicationClient is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationClient");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationClient;
   begin
      return RetVal : SyndicationClient do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationClient := new Windows.Web.Syndication.ISyndicationClient;
            Retval.m_ISyndicationClient.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationClient

   function get_ServerCredential
   (
      this : in out SyndicationClient
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_ISyndicationClient.all.get_ServerCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ServerCredential
   (
      this : in out SyndicationClient;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationClient.all.put_ServerCredential (value.m_IPasswordCredential.all);
   end;

   function get_ProxyCredential
   (
      this : in out SyndicationClient
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_ISyndicationClient.all.get_ProxyCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyCredential
   (
      this : in out SyndicationClient;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationClient.all.put_ProxyCredential (value.m_IPasswordCredential.all);
   end;

   function get_MaxResponseBufferSize
   (
      this : in out SyndicationClient
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISyndicationClient.all.get_MaxResponseBufferSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxResponseBufferSize
   (
      this : in out SyndicationClient;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationClient.all.put_MaxResponseBufferSize (value);
   end;

   function get_Timeout
   (
      this : in out SyndicationClient
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISyndicationClient.all.get_Timeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Timeout
   (
      this : in out SyndicationClient;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationClient.all.put_Timeout (value);
   end;

   function get_BypassCacheOnRetrieve
   (
      this : in out SyndicationClient
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISyndicationClient.all.get_BypassCacheOnRetrieve (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BypassCacheOnRetrieve
   (
      this : in out SyndicationClient;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationClient.all.put_BypassCacheOnRetrieve (value);
   end;

   procedure SetRequestHeader
   (
      this : in out SyndicationClient;
      name : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationClient.all.SetRequestHeader (HStr_name, HStr_value);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function RetrieveFeedAsync
   (
      this : in out SyndicationClient;
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Web.Syndication.SyndicationFeed'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SyndicationFeed.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SyndicationFeed.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Syndication.ISyndicationFeed;
      m_IID            : aliased WinRt.IID := (2464870737, 16734, 24455, (128, 149, 120, 22, 35, 200, 137, 152 )); -- Windows.Web.Syndication.SyndicationFeed;
      m_HandlerIID     : aliased WinRt.IID := (238911344, 20108, 21088, (167, 229, 120, 110, 5, 189, 237, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_SyndicationFeed.Kind := new AsyncOperationCompletedHandler_SyndicationFeed.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SyndicationFeed.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SyndicationFeed.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SyndicationFeed.Kind_Delegate, AsyncOperationCompletedHandler_SyndicationFeed.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationFeed do
         Hr := this.m_ISyndicationClient.all.RetrieveFeedAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISyndicationFeed := new Windows.Web.Syndication.ISyndicationFeed;
                  Retval.m_ISyndicationFeed.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationContent

   procedure Initialize (this : in out SyndicationContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationContent, ISyndicationContent_Ptr);
   begin
      if this.m_ISyndicationContent /= null then
         if this.m_ISyndicationContent.all /= null then
            RefCount := this.m_ISyndicationContent.all.Release;
            Free (this.m_ISyndicationContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationContent

   function Constructor return SyndicationContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationContent");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationContent;
   begin
      return RetVal : SyndicationContent do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationContent := new Windows.Web.Syndication.ISyndicationContent;
            Retval.m_ISyndicationContent.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      text : WinRt.WString;
      type_x : Windows.Web.Syndication.SyndicationTextType
   )
   return SyndicationContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationContent");
      m_Factory    : access ISyndicationContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationContent;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      return RetVal : SyndicationContent do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationContent (HStr_text, type_x, m_ComRetVal'Access);
            Retval.m_ISyndicationContent := new Windows.Web.Syndication.ISyndicationContent;
            Retval.m_ISyndicationContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   function Constructor
   (
      sourceUri : Windows.Foundation.Uri'Class
   )
   return SyndicationContent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationContent");
      m_Factory    : access ISyndicationContentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationContent;
   begin
      return RetVal : SyndicationContent do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationContentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationContentWithSourceUri (sourceUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_ISyndicationContent := new Windows.Web.Syndication.ISyndicationContent;
            Retval.m_ISyndicationContent.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationContent

   function get_Text
   (
      this : in out SyndicationContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationText := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationText, WinRt.Windows.Web.Syndication.IID_ISyndicationText'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_Text (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out SyndicationContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationText := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationText, WinRt.Windows.Web.Syndication.IID_ISyndicationText'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_Text (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Type
   (
      this : in out SyndicationContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationText := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationText, WinRt.Windows.Web.Syndication.IID_ISyndicationText'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Type
   (
      this : in out SyndicationContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationText := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationText, WinRt.Windows.Web.Syndication.IID_ISyndicationText'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_Type (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Xml
   (
      this : in out SyndicationContent
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationText := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationText, WinRt.Windows.Web.Syndication.IID_ISyndicationText'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationContent.all);
         Hr := m_Interface.get_Xml (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   procedure put_Xml
   (
      this : in out SyndicationContent;
      value : Windows.Data.Xml.Dom.XmlDocument'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationText := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationText, WinRt.Windows.Web.Syndication.IID_ISyndicationText'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_Xml (value.m_IXmlDocument.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_NodeName
   (
      this : in out SyndicationContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationContent
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationContent.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationContent;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationContent
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationContent
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationContent.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationContent;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationContent_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationContent.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function get_SourceUri
   (
      this : in out SyndicationContent
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationContent.all.get_SourceUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_SourceUri
   (
      this : in out SyndicationContent;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationContent.all.put_SourceUri (value.m_IUriRuntimeClass.all);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SyndicationError is

      function GetStatus
      (
         hresult : WinRt.Int32
      )
      return WinRt.Windows.Web.Syndication.SyndicationErrorStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationError");
         m_Factory        : access WinRt.Windows.Web.Syndication.ISyndicationErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Web.Syndication.SyndicationErrorStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStatus (hresult, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end SyndicationError;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationFeed

   procedure Initialize (this : in out SyndicationFeed) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationFeed) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationFeed, ISyndicationFeed_Ptr);
   begin
      if this.m_ISyndicationFeed /= null then
         if this.m_ISyndicationFeed.all /= null then
            RefCount := this.m_ISyndicationFeed.all.Release;
            Free (this.m_ISyndicationFeed);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationFeed

   function Constructor
   (
      title : WinRt.WString;
      subtitle : WinRt.WString;
      uri : Windows.Foundation.Uri'Class
   )
   return SyndicationFeed is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationFeed");
      m_Factory    : access ISyndicationFeedFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationFeed;
      HStr_title : WinRt.HString := To_HString (title);
      HStr_subtitle : WinRt.HString := To_HString (subtitle);
   begin
      return RetVal : SyndicationFeed do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationFeedFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationFeed (HStr_title, HStr_subtitle, uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_ISyndicationFeed := new Windows.Web.Syndication.ISyndicationFeed;
            Retval.m_ISyndicationFeed.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_title);
         Hr := WindowsDeleteString (HStr_subtitle);
      end return;
   end;

   function Constructor return SyndicationFeed is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationFeed");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationFeed;
   begin
      return RetVal : SyndicationFeed do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationFeed := new Windows.Web.Syndication.ISyndicationFeed;
            Retval.m_ISyndicationFeed.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationFeed

   function get_Authors
   (
      this : in out SyndicationFeed
   )
   return IVector_ISyndicationPerson.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationPerson.Kind;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Authors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationPerson (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Categories
   (
      this : in out SyndicationFeed
   )
   return IVector_ISyndicationCategory.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationCategory.Kind;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Categories (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationCategory (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Contributors
   (
      this : in out SyndicationFeed
   )
   return IVector_ISyndicationPerson.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationPerson.Kind;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Contributors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationPerson (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Generator
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Web.Syndication.SyndicationGenerator'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationGenerator;
   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationGenerator do
         Hr := this.m_ISyndicationFeed.all.get_Generator (m_ComRetVal'Access);
         Retval.m_ISyndicationGenerator := new Windows.Web.Syndication.ISyndicationGenerator;
         Retval.m_ISyndicationGenerator.all := m_ComRetVal;
      end return;
   end;

   procedure put_Generator
   (
      this : in out SyndicationFeed;
      value : Windows.Web.Syndication.SyndicationGenerator'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.put_Generator (value.m_ISyndicationGenerator.all);
   end;

   function get_IconUri
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationFeed.all.get_IconUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_IconUri
   (
      this : in out SyndicationFeed;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.put_IconUri (value.m_IUriRuntimeClass.all);
   end;

   function get_Id
   (
      this : in out SyndicationFeed
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out SyndicationFeed;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationFeed.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Items
   (
      this : in out SyndicationFeed
   )
   return IVector_ISyndicationItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationItem.Kind;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Items (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LastUpdatedTime
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISyndicationFeed.all.get_LastUpdatedTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LastUpdatedTime
   (
      this : in out SyndicationFeed;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.put_LastUpdatedTime (value);
   end;

   function get_Links
   (
      this : in out SyndicationFeed
   )
   return IVector_ISyndicationLink.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationLink.Kind;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Links (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationLink (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ImageUri
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationFeed.all.get_ImageUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ImageUri
   (
      this : in out SyndicationFeed;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.put_ImageUri (value.m_IUriRuntimeClass.all);
   end;

   function get_Rights
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Rights (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Rights
   (
      this : in out SyndicationFeed;
      value : Windows.Web.Syndication.ISyndicationText
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.put_Rights (value);
   end;

   function get_Subtitle
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Subtitle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Subtitle
   (
      this : in out SyndicationFeed;
      value : Windows.Web.Syndication.ISyndicationText
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.put_Subtitle (value);
   end;

   function get_Title
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_ISyndicationFeed.all.get_Title (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Title
   (
      this : in out SyndicationFeed;
      value : Windows.Web.Syndication.ISyndicationText
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.put_Title (value);
   end;

   function get_FirstUri
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationFeed.all.get_FirstUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_LastUri
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationFeed.all.get_LastUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_NextUri
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationFeed.all.get_NextUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_PreviousUri
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationFeed.all.get_PreviousUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_SourceFormat
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Web.Syndication.SyndicationFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.SyndicationFormat;
   begin
      Hr := this.m_ISyndicationFeed.all.get_SourceFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Load
   (
      this : in out SyndicationFeed;
      feed : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_feed : WinRt.HString := To_HString (feed);
   begin
      Hr := this.m_ISyndicationFeed.all.Load (HStr_feed);
      Hr := WindowsDeleteString (HStr_feed);
   end;

   procedure LoadFromXml
   (
      this : in out SyndicationFeed;
      feedDocument : Windows.Data.Xml.Dom.XmlDocument'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationFeed.all.LoadFromXml (feedDocument.m_IXmlDocument.all);
   end;

   function get_NodeName
   (
      this : in out SyndicationFeed
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationFeed;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationFeed
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationFeed;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationFeed
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationFeed;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationFeed
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationFeed;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationFeed
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationFeed.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationFeed;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationFeed
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationFeed
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationFeed.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationFeed;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationFeed_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationFeed.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationGenerator

   procedure Initialize (this : in out SyndicationGenerator) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationGenerator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationGenerator, ISyndicationGenerator_Ptr);
   begin
      if this.m_ISyndicationGenerator /= null then
         if this.m_ISyndicationGenerator.all /= null then
            RefCount := this.m_ISyndicationGenerator.all.Release;
            Free (this.m_ISyndicationGenerator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationGenerator

   function Constructor return SyndicationGenerator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationGenerator");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationGenerator;
   begin
      return RetVal : SyndicationGenerator do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationGenerator := new Windows.Web.Syndication.ISyndicationGenerator;
            Retval.m_ISyndicationGenerator.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      text : WinRt.WString
   )
   return SyndicationGenerator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationGenerator");
      m_Factory    : access ISyndicationGeneratorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationGenerator;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      return RetVal : SyndicationGenerator do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationGeneratorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationGenerator (HStr_text, m_ComRetVal'Access);
            Retval.m_ISyndicationGenerator := new Windows.Web.Syndication.ISyndicationGenerator;
            Retval.m_ISyndicationGenerator.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationGenerator

   function get_Text
   (
      this : in out SyndicationGenerator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationGenerator.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out SyndicationGenerator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationGenerator.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Uri
   (
      this : in out SyndicationGenerator
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationGenerator.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out SyndicationGenerator;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationGenerator.all.put_Uri (value.m_IUriRuntimeClass.all);
   end;

   function get_Version
   (
      this : in out SyndicationGenerator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationGenerator.all.get_Version (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Version
   (
      this : in out SyndicationGenerator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationGenerator.all.put_Version (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeName
   (
      this : in out SyndicationGenerator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationGenerator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationGenerator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationGenerator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationGenerator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationGenerator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationGenerator
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationGenerator;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationGenerator
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationGenerator.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationGenerator;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationGenerator
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationGenerator
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationGenerator.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationGenerator;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationGenerator_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationGenerator.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationItem

   procedure Initialize (this : in out SyndicationItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationItem, ISyndicationItem_Ptr);
   begin
      if this.m_ISyndicationItem /= null then
         if this.m_ISyndicationItem.all /= null then
            RefCount := this.m_ISyndicationItem.all.Release;
            Free (this.m_ISyndicationItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationItem

   function Constructor return SyndicationItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationItem");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationItem;
   begin
      return RetVal : SyndicationItem do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationItem := new Windows.Web.Syndication.ISyndicationItem;
            Retval.m_ISyndicationItem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      title : WinRt.WString;
      content : Windows.Web.Syndication.SyndicationContent'Class;
      uri : Windows.Foundation.Uri'Class
   )
   return SyndicationItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationItem");
      m_Factory    : access ISyndicationItemFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationItem;
      HStr_title : WinRt.HString := To_HString (title);
   begin
      return RetVal : SyndicationItem do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationItemFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationItem (HStr_title, content.m_ISyndicationContent.all, uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_ISyndicationItem := new Windows.Web.Syndication.ISyndicationItem;
            Retval.m_ISyndicationItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_title);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationItem

   function get_Authors
   (
      this : in out SyndicationItem
   )
   return IVector_ISyndicationPerson.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationPerson.Kind;
   begin
      Hr := this.m_ISyndicationItem.all.get_Authors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationPerson (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Categories
   (
      this : in out SyndicationItem
   )
   return IVector_ISyndicationCategory.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationCategory.Kind;
   begin
      Hr := this.m_ISyndicationItem.all.get_Categories (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationCategory (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Contributors
   (
      this : in out SyndicationItem
   )
   return IVector_ISyndicationPerson.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationPerson.Kind;
   begin
      Hr := this.m_ISyndicationItem.all.get_Contributors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationPerson (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Content
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Web.Syndication.SyndicationContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationContent;
   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationContent do
         Hr := this.m_ISyndicationItem.all.get_Content (m_ComRetVal'Access);
         Retval.m_ISyndicationContent := new Windows.Web.Syndication.ISyndicationContent;
         Retval.m_ISyndicationContent.all := m_ComRetVal;
      end return;
   end;

   procedure put_Content
   (
      this : in out SyndicationItem;
      value : Windows.Web.Syndication.SyndicationContent'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_Content (value.m_ISyndicationContent.all);
   end;

   function get_Id
   (
      this : in out SyndicationItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationItem.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out SyndicationItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationItem.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_LastUpdatedTime
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISyndicationItem.all.get_LastUpdatedTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LastUpdatedTime
   (
      this : in out SyndicationItem;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_LastUpdatedTime (value);
   end;

   function get_Links
   (
      this : in out SyndicationItem
   )
   return IVector_ISyndicationLink.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationLink.Kind;
   begin
      Hr := this.m_ISyndicationItem.all.get_Links (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationLink (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PublishedDate
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISyndicationItem.all.get_PublishedDate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PublishedDate
   (
      this : in out SyndicationItem;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_PublishedDate (value);
   end;

   function get_Rights
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_ISyndicationItem.all.get_Rights (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Rights
   (
      this : in out SyndicationItem;
      value : Windows.Web.Syndication.ISyndicationText
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_Rights (value);
   end;

   function get_Source
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Web.Syndication.SyndicationFeed'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationFeed;
   begin
      return RetVal : WinRt.Windows.Web.Syndication.SyndicationFeed do
         Hr := this.m_ISyndicationItem.all.get_Source (m_ComRetVal'Access);
         Retval.m_ISyndicationFeed := new Windows.Web.Syndication.ISyndicationFeed;
         Retval.m_ISyndicationFeed.all := m_ComRetVal;
      end return;
   end;

   procedure put_Source
   (
      this : in out SyndicationItem;
      value : Windows.Web.Syndication.SyndicationFeed'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_Source (value.m_ISyndicationFeed.all);
   end;

   function get_Summary
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_ISyndicationItem.all.get_Summary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Summary
   (
      this : in out SyndicationItem;
      value : Windows.Web.Syndication.ISyndicationText
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_Summary (value);
   end;

   function get_Title
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Web.Syndication.ISyndicationText is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      Hr := this.m_ISyndicationItem.all.get_Title (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Title
   (
      this : in out SyndicationItem;
      value : Windows.Web.Syndication.ISyndicationText
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_Title (value);
   end;

   function get_CommentsUri
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationItem.all.get_CommentsUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_CommentsUri
   (
      this : in out SyndicationItem;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.put_CommentsUri (value.m_IUriRuntimeClass.all);
   end;

   function get_EditUri
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationItem.all.get_EditUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_EditMediaUri
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationItem.all.get_EditMediaUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_ETag
   (
      this : in out SyndicationItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationItem.all.get_ETag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ItemUri
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationItem.all.get_ItemUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure Load
   (
      this : in out SyndicationItem;
      item : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_item : WinRt.HString := To_HString (item);
   begin
      Hr := this.m_ISyndicationItem.all.Load (HStr_item);
      Hr := WindowsDeleteString (HStr_item);
   end;

   procedure LoadFromXml
   (
      this : in out SyndicationItem;
      itemDocument : Windows.Data.Xml.Dom.XmlDocument'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationItem.all.LoadFromXml (itemDocument.m_IXmlDocument.all);
   end;

   function get_NodeName
   (
      this : in out SyndicationItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationItem.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationItem;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationItem
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationItem
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationItem.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationItem;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationItem_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationItem.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationLink

   procedure Initialize (this : in out SyndicationLink) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationLink) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationLink, ISyndicationLink_Ptr);
   begin
      if this.m_ISyndicationLink /= null then
         if this.m_ISyndicationLink.all /= null then
            RefCount := this.m_ISyndicationLink.all.Release;
            Free (this.m_ISyndicationLink);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationLink

   function Constructor return SyndicationLink is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationLink");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationLink;
   begin
      return RetVal : SyndicationLink do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationLink := new Windows.Web.Syndication.ISyndicationLink;
            Retval.m_ISyndicationLink.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      uri : Windows.Foundation.Uri'Class
   )
   return SyndicationLink is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationLink");
      m_Factory    : access ISyndicationLinkFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationLink;
   begin
      return RetVal : SyndicationLink do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationLinkFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationLink (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_ISyndicationLink := new Windows.Web.Syndication.ISyndicationLink;
            Retval.m_ISyndicationLink.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      uri : Windows.Foundation.Uri'Class;
      relationship : WinRt.WString;
      title : WinRt.WString;
      mediaType : WinRt.WString;
      length : WinRt.UInt32
   )
   return SyndicationLink is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationLink");
      m_Factory    : access ISyndicationLinkFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationLink;
      HStr_relationship : WinRt.HString := To_HString (relationship);
      HStr_title : WinRt.HString := To_HString (title);
      HStr_mediaType : WinRt.HString := To_HString (mediaType);
   begin
      return RetVal : SyndicationLink do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationLinkFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationLinkEx (uri.m_IUriRuntimeClass.all, HStr_relationship, HStr_title, HStr_mediaType, length, m_ComRetVal'Access);
            Retval.m_ISyndicationLink := new Windows.Web.Syndication.ISyndicationLink;
            Retval.m_ISyndicationLink.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_relationship);
         Hr := WindowsDeleteString (HStr_title);
         Hr := WindowsDeleteString (HStr_mediaType);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationLink

   function get_Length
   (
      this : in out SyndicationLink
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISyndicationLink.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Length
   (
      this : in out SyndicationLink;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationLink.all.put_Length (value);
   end;

   function get_MediaType
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationLink.all.get_MediaType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_MediaType
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationLink.all.put_MediaType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Relationship
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationLink.all.get_Relationship (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Relationship
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationLink.all.put_Relationship (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Title
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationLink.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationLink.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Uri
   (
      this : in out SyndicationLink
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationLink.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out SyndicationLink;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationLink.all.put_Uri (value.m_IUriRuntimeClass.all);
   end;

   function get_ResourceLanguage
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationLink.all.get_ResourceLanguage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ResourceLanguage
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationLink.all.put_ResourceLanguage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeName
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationLink
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationLink;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationLink
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationLink.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationLink;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationLink
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationLink
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationLink.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationLink;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationLink_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationLink.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationNode

   procedure Initialize (this : in out SyndicationNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationNode, ISyndicationNode_Ptr);
   begin
      if this.m_ISyndicationNode /= null then
         if this.m_ISyndicationNode.all /= null then
            RefCount := this.m_ISyndicationNode.all.Release;
            Free (this.m_ISyndicationNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationNode

   function Constructor return SyndicationNode is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationNode");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationNode;
   begin
      return RetVal : SyndicationNode do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationNode := new Windows.Web.Syndication.ISyndicationNode;
            Retval.m_ISyndicationNode.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      nodeName : WinRt.WString;
      nodeNamespace : WinRt.WString;
      nodeValue : WinRt.WString
   )
   return SyndicationNode is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationNode");
      m_Factory    : access ISyndicationNodeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationNode;
      HStr_nodeName : WinRt.HString := To_HString (nodeName);
      HStr_nodeNamespace : WinRt.HString := To_HString (nodeNamespace);
      HStr_nodeValue : WinRt.HString := To_HString (nodeValue);
   begin
      return RetVal : SyndicationNode do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationNodeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationNode (HStr_nodeName, HStr_nodeNamespace, HStr_nodeValue, m_ComRetVal'Access);
            Retval.m_ISyndicationNode := new Windows.Web.Syndication.ISyndicationNode;
            Retval.m_ISyndicationNode.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_nodeName);
         Hr := WindowsDeleteString (HStr_nodeNamespace);
         Hr := WindowsDeleteString (HStr_nodeValue);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationNode

   function get_NodeName
   (
      this : in out SyndicationNode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationNode.all.get_NodeName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationNode;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationNode.all.put_NodeName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationNode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationNode.all.get_NodeNamespace (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationNode;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationNode.all.put_NodeNamespace (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationNode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationNode.all.get_NodeValue (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationNode;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationNode.all.put_NodeValue (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationNode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationNode.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationNode;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationNode.all.put_Language (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationNode
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationNode.all.get_BaseUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationNode;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationNode.all.put_BaseUri (value.m_IUriRuntimeClass.all);
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationNode
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
   begin
      Hr := this.m_ISyndicationNode.all.get_AttributeExtensions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationNode
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
   begin
      Hr := this.m_ISyndicationNode.all.get_ElementExtensions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationNode;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_ISyndicationNode.all.GetXmlDocument (format, m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationPerson

   procedure Initialize (this : in out SyndicationPerson) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationPerson) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationPerson, ISyndicationPerson_Ptr);
   begin
      if this.m_ISyndicationPerson /= null then
         if this.m_ISyndicationPerson.all /= null then
            RefCount := this.m_ISyndicationPerson.all.Release;
            Free (this.m_ISyndicationPerson);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationPerson

   function Constructor return SyndicationPerson is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationPerson");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationPerson;
   begin
      return RetVal : SyndicationPerson do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationPerson := new Windows.Web.Syndication.ISyndicationPerson;
            Retval.m_ISyndicationPerson.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString
   )
   return SyndicationPerson is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationPerson");
      m_Factory    : access ISyndicationPersonFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationPerson;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : SyndicationPerson do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationPersonFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationPerson (HStr_name, m_ComRetVal'Access);
            Retval.m_ISyndicationPerson := new Windows.Web.Syndication.ISyndicationPerson;
            Retval.m_ISyndicationPerson.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      email : WinRt.WString;
      uri : Windows.Foundation.Uri'Class
   )
   return SyndicationPerson is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationPerson");
      m_Factory    : access ISyndicationPersonFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationPerson;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_email : WinRt.HString := To_HString (email);
   begin
      return RetVal : SyndicationPerson do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationPersonFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationPersonEx (HStr_name, HStr_email, uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_ISyndicationPerson := new Windows.Web.Syndication.ISyndicationPerson;
            Retval.m_ISyndicationPerson.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_email);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationPerson

   function get_Email
   (
      this : in out SyndicationPerson
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationPerson.all.get_Email (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Email
   (
      this : in out SyndicationPerson;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationPerson.all.put_Email (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Name
   (
      this : in out SyndicationPerson
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationPerson.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out SyndicationPerson;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationPerson.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Uri
   (
      this : in out SyndicationPerson
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISyndicationPerson.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out SyndicationPerson;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationPerson.all.put_Uri (value.m_IUriRuntimeClass.all);
   end;

   function get_NodeName
   (
      this : in out SyndicationPerson
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationPerson;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationPerson
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationPerson;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationPerson
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationPerson;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationPerson
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationPerson;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationPerson
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationPerson.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationPerson;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationPerson
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationPerson
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationPerson.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationPerson;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationPerson_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationPerson.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SyndicationText

   procedure Initialize (this : in out SyndicationText) is
   begin
      null;
   end;

   procedure Finalize (this : in out SyndicationText) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISyndicationText, ISyndicationText_Ptr);
   begin
      if this.m_ISyndicationText /= null then
         if this.m_ISyndicationText.all /= null then
            RefCount := this.m_ISyndicationText.all.Release;
            Free (this.m_ISyndicationText);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SyndicationText

   function Constructor return SyndicationText is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationText");
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationText;
   begin
      return RetVal : SyndicationText do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISyndicationText := new Windows.Web.Syndication.ISyndicationText;
            Retval.m_ISyndicationText.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      text : WinRt.WString
   )
   return SyndicationText is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationText");
      m_Factory    : access ISyndicationTextFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationText;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      return RetVal : SyndicationText do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationTextFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationText (HStr_text, m_ComRetVal'Access);
            Retval.m_ISyndicationText := new Windows.Web.Syndication.ISyndicationText;
            Retval.m_ISyndicationText.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   function Constructor
   (
      text : WinRt.WString;
      type_x : Windows.Web.Syndication.SyndicationTextType
   )
   return SyndicationText is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Syndication.SyndicationText");
      m_Factory    : access ISyndicationTextFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Syndication.ISyndicationText;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      return RetVal : SyndicationText do
         Hr := RoGetActivationFactory (m_hString, IID_ISyndicationTextFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSyndicationTextEx (HStr_text, type_x, m_ComRetVal'Access);
            Retval.m_ISyndicationText := new Windows.Web.Syndication.ISyndicationText;
            Retval.m_ISyndicationText.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SyndicationText

   function get_Text
   (
      this : in out SyndicationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationText.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out SyndicationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationText.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Type
   (
      this : in out SyndicationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISyndicationText.all.get_Type (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Type
   (
      this : in out SyndicationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISyndicationText.all.put_Type (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Xml
   (
      this : in out SyndicationText
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_ISyndicationText.all.get_Xml (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   procedure put_Xml
   (
      this : in out SyndicationText;
      value : Windows.Data.Xml.Dom.XmlDocument'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISyndicationText.all.put_Xml (value.m_IXmlDocument.all);
   end;

   function get_NodeName
   (
      this : in out SyndicationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.get_NodeName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeName
   (
      this : in out SyndicationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.put_NodeName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeNamespace
   (
      this : in out SyndicationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.get_NodeNamespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeNamespace
   (
      this : in out SyndicationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.put_NodeNamespace (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_NodeValue
   (
      this : in out SyndicationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.get_NodeValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NodeValue
   (
      this : in out SyndicationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.put_NodeValue (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Language
   (
      this : in out SyndicationText
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Language
   (
      this : in out SyndicationText;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.put_Language (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BaseUri
   (
      this : in out SyndicationText
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_ISyndicationText.all);
         Hr := m_Interface.get_BaseUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseUri
   (
      this : in out SyndicationText;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.put_BaseUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_AttributeExtensions
   (
      this : in out SyndicationText
   )
   return IVector_ISyndicationAttribute.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationAttribute.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.get_AttributeExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationAttribute (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ElementExtensions
   (
      this : in out SyndicationText
   )
   return IVector_ISyndicationNode.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISyndicationNode.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISyndicationText.all);
      Hr := m_Interface.get_ElementExtensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ISyndicationNode (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetXmlDocument
   (
      this : in out SyndicationText;
      format : Windows.Web.Syndication.SyndicationFormat
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Syndication.ISyndicationNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Syndication.ISyndicationText_Interface, WinRt.Windows.Web.Syndication.ISyndicationNode, WinRt.Windows.Web.Syndication.IID_ISyndicationNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         m_Interface := QInterface (this.m_ISyndicationText.all);
         Hr := m_Interface.GetXmlDocument (format, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

end;

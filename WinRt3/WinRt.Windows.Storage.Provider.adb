--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Storage.Provider is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CachedFileUpdater is

      procedure SetUpdateInformation
      (
         file : Windows.Storage.IStorageFile;
         contentId : WinRt.WString;
         readMode : Windows.Storage.Provider.ReadActivationMode;
         writeMode : Windows.Storage.Provider.WriteActivationMode;
         options : Windows.Storage.Provider.CachedFileOptions
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.CachedFileUpdater");
         m_Factory        : access WinRt.Windows.Storage.Provider.ICachedFileUpdaterStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_contentId : WinRt.HString := To_HString (contentId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICachedFileUpdaterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetUpdateInformation (file, HStr_contentId, readMode, writeMode, options);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentId);
      end;

   end CachedFileUpdater;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CachedFileUpdaterUI

   procedure Initialize (this : in out CachedFileUpdaterUI) is
   begin
      null;
   end;

   procedure Finalize (this : in out CachedFileUpdaterUI) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICachedFileUpdaterUI, ICachedFileUpdaterUI_Ptr);
   begin
      if this.m_ICachedFileUpdaterUI /= null then
         if this.m_ICachedFileUpdaterUI.all /= null then
            RefCount := this.m_ICachedFileUpdaterUI.all.Release;
            Free (this.m_ICachedFileUpdaterUI);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CachedFileUpdaterUI

   function get_Title
   (
      this : in out CachedFileUpdaterUI
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out CachedFileUpdaterUI;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_UpdateTarget
   (
      this : in out CachedFileUpdaterUI
   )
   return WinRt.Windows.Storage.Provider.CachedFileTarget is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.CachedFileTarget;
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.get_UpdateTarget (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_FileUpdateRequested
   (
      this : in out CachedFileUpdaterUI;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.add_FileUpdateRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FileUpdateRequested
   (
      this : in out CachedFileUpdaterUI;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.remove_FileUpdateRequested (token);
   end;

   function add_UIRequested
   (
      this : in out CachedFileUpdaterUI;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.add_UIRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UIRequested
   (
      this : in out CachedFileUpdaterUI;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.remove_UIRequested (token);
   end;

   function get_UIStatus
   (
      this : in out CachedFileUpdaterUI
   )
   return WinRt.Windows.Storage.Provider.UIStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.UIStatus;
   begin
      Hr := this.m_ICachedFileUpdaterUI.all.get_UIStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateRequest
   (
      this : in out CachedFileUpdaterUI
   )
   return WinRt.Windows.Storage.Provider.FileUpdateRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Provider.ICachedFileUpdaterUI2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.IFileUpdateRequest;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Provider.ICachedFileUpdaterUI_Interface, WinRt.Windows.Storage.Provider.ICachedFileUpdaterUI2, WinRt.Windows.Storage.Provider.IID_ICachedFileUpdaterUI2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Provider.FileUpdateRequest do
         m_Interface := QInterface (this.m_ICachedFileUpdaterUI.all);
         Hr := m_Interface.get_UpdateRequest (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IFileUpdateRequest := new Windows.Storage.Provider.IFileUpdateRequest;
         Retval.m_IFileUpdateRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out CachedFileUpdaterUI
   )
   return WinRt.Windows.Storage.Provider.FileUpdateRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Provider.ICachedFileUpdaterUI2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.IFileUpdateRequestDeferral;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Provider.ICachedFileUpdaterUI_Interface, WinRt.Windows.Storage.Provider.ICachedFileUpdaterUI2, WinRt.Windows.Storage.Provider.IID_ICachedFileUpdaterUI2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Provider.FileUpdateRequestDeferral do
         m_Interface := QInterface (this.m_ICachedFileUpdaterUI.all);
         Hr := m_Interface.GetDeferral (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IFileUpdateRequestDeferral := new Windows.Storage.Provider.IFileUpdateRequestDeferral;
         Retval.m_IFileUpdateRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileUpdateRequest

   procedure Initialize (this : in out FileUpdateRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileUpdateRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileUpdateRequest, IFileUpdateRequest_Ptr);
   begin
      if this.m_IFileUpdateRequest /= null then
         if this.m_IFileUpdateRequest.all /= null then
            RefCount := this.m_IFileUpdateRequest.all.Release;
            Free (this.m_IFileUpdateRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileUpdateRequest

   function get_ContentId
   (
      this : in out FileUpdateRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileUpdateRequest.all.get_ContentId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_File
   (
      this : in out FileUpdateRequest
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IFileUpdateRequest.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out FileUpdateRequest
   )
   return WinRt.Windows.Storage.Provider.FileUpdateStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.FileUpdateStatus;
   begin
      Hr := this.m_IFileUpdateRequest.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Status
   (
      this : in out FileUpdateRequest;
      value : Windows.Storage.Provider.FileUpdateStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileUpdateRequest.all.put_Status (value);
   end;

   function GetDeferral
   (
      this : in out FileUpdateRequest
   )
   return WinRt.Windows.Storage.Provider.FileUpdateRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.IFileUpdateRequestDeferral;
   begin
      return RetVal : WinRt.Windows.Storage.Provider.FileUpdateRequestDeferral do
         Hr := this.m_IFileUpdateRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IFileUpdateRequestDeferral := new Windows.Storage.Provider.IFileUpdateRequestDeferral;
         Retval.m_IFileUpdateRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure UpdateLocalFile
   (
      this : in out FileUpdateRequest;
      value : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileUpdateRequest.all.UpdateLocalFile (value);
   end;

   function get_UserInputNeededMessage
   (
      this : in out FileUpdateRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Provider.IFileUpdateRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Provider.IFileUpdateRequest_Interface, WinRt.Windows.Storage.Provider.IFileUpdateRequest2, WinRt.Windows.Storage.Provider.IID_IFileUpdateRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileUpdateRequest.all);
      Hr := m_Interface.get_UserInputNeededMessage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_UserInputNeededMessage
   (
      this : in out FileUpdateRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Provider.IFileUpdateRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Provider.IFileUpdateRequest_Interface, WinRt.Windows.Storage.Provider.IFileUpdateRequest2, WinRt.Windows.Storage.Provider.IID_IFileUpdateRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileUpdateRequest.all);
      Hr := m_Interface.put_UserInputNeededMessage (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileUpdateRequestDeferral

   procedure Initialize (this : in out FileUpdateRequestDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileUpdateRequestDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileUpdateRequestDeferral, IFileUpdateRequestDeferral_Ptr);
   begin
      if this.m_IFileUpdateRequestDeferral /= null then
         if this.m_IFileUpdateRequestDeferral.all /= null then
            RefCount := this.m_IFileUpdateRequestDeferral.all.Release;
            Free (this.m_IFileUpdateRequestDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileUpdateRequestDeferral

   procedure Complete
   (
      this : in out FileUpdateRequestDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileUpdateRequestDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileUpdateRequestedEventArgs

   procedure Initialize (this : in out FileUpdateRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileUpdateRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileUpdateRequestedEventArgs, IFileUpdateRequestedEventArgs_Ptr);
   begin
      if this.m_IFileUpdateRequestedEventArgs /= null then
         if this.m_IFileUpdateRequestedEventArgs.all /= null then
            RefCount := this.m_IFileUpdateRequestedEventArgs.all.Release;
            Free (this.m_IFileUpdateRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileUpdateRequestedEventArgs

   function get_Request
   (
      this : in out FileUpdateRequestedEventArgs
   )
   return WinRt.Windows.Storage.Provider.FileUpdateRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.IFileUpdateRequest;
   begin
      return RetVal : WinRt.Windows.Storage.Provider.FileUpdateRequest do
         Hr := this.m_IFileUpdateRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IFileUpdateRequest := new Windows.Storage.Provider.IFileUpdateRequest;
         Retval.m_IFileUpdateRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageProviderFileTypeInfo

   procedure Initialize (this : in out StorageProviderFileTypeInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageProviderFileTypeInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageProviderFileTypeInfo, IStorageProviderFileTypeInfo_Ptr);
   begin
      if this.m_IStorageProviderFileTypeInfo /= null then
         if this.m_IStorageProviderFileTypeInfo.all /= null then
            RefCount := this.m_IStorageProviderFileTypeInfo.all.Release;
            Free (this.m_IStorageProviderFileTypeInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorageProviderFileTypeInfo

   function Constructor
   (
      fileExtension : WinRt.WString;
      iconResource : WinRt.WString
   )
   return StorageProviderFileTypeInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderFileTypeInfo");
      m_Factory    : access IStorageProviderFileTypeInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.Provider.IStorageProviderFileTypeInfo;
      HStr_fileExtension : WinRt.HString := To_HString (fileExtension);
      HStr_iconResource : WinRt.HString := To_HString (iconResource);
   begin
      return RetVal : StorageProviderFileTypeInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderFileTypeInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (HStr_fileExtension, HStr_iconResource, m_ComRetVal'Access);
            Retval.m_IStorageProviderFileTypeInfo := new Windows.Storage.Provider.IStorageProviderFileTypeInfo;
            Retval.m_IStorageProviderFileTypeInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_fileExtension);
         Hr := WindowsDeleteString (HStr_iconResource);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageProviderFileTypeInfo

   function get_FileExtension
   (
      this : in out StorageProviderFileTypeInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderFileTypeInfo.all.get_FileExtension (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IconResource
   (
      this : in out StorageProviderFileTypeInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderFileTypeInfo.all.get_IconResource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageProviderGetContentInfoForPathResult

   procedure Initialize (this : in out StorageProviderGetContentInfoForPathResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageProviderGetContentInfoForPathResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageProviderGetContentInfoForPathResult, IStorageProviderGetContentInfoForPathResult_Ptr);
   begin
      if this.m_IStorageProviderGetContentInfoForPathResult /= null then
         if this.m_IStorageProviderGetContentInfoForPathResult.all /= null then
            RefCount := this.m_IStorageProviderGetContentInfoForPathResult.all.Release;
            Free (this.m_IStorageProviderGetContentInfoForPathResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorageProviderGetContentInfoForPathResult

   function Constructor return StorageProviderGetContentInfoForPathResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderGetContentInfoForPathResult");
      m_ComRetVal  : aliased Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult;
   begin
      return RetVal : StorageProviderGetContentInfoForPathResult do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStorageProviderGetContentInfoForPathResult := new Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult;
            Retval.m_IStorageProviderGetContentInfoForPathResult.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageProviderGetContentInfoForPathResult

   function get_Status
   (
      this : in out StorageProviderGetContentInfoForPathResult
   )
   return WinRt.Windows.Storage.Provider.StorageProviderUriSourceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderUriSourceStatus;
   begin
      Hr := this.m_IStorageProviderGetContentInfoForPathResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Status
   (
      this : in out StorageProviderGetContentInfoForPathResult;
      value : Windows.Storage.Provider.StorageProviderUriSourceStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderGetContentInfoForPathResult.all.put_Status (value);
   end;

   function get_ContentUri
   (
      this : in out StorageProviderGetContentInfoForPathResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderGetContentInfoForPathResult.all.get_ContentUri (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContentUri
   (
      this : in out StorageProviderGetContentInfoForPathResult;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderGetContentInfoForPathResult.all.put_ContentUri (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ContentId
   (
      this : in out StorageProviderGetContentInfoForPathResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderGetContentInfoForPathResult.all.get_ContentId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContentId
   (
      this : in out StorageProviderGetContentInfoForPathResult;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderGetContentInfoForPathResult.all.put_ContentId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageProviderGetPathForContentUriResult

   procedure Initialize (this : in out StorageProviderGetPathForContentUriResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageProviderGetPathForContentUriResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageProviderGetPathForContentUriResult, IStorageProviderGetPathForContentUriResult_Ptr);
   begin
      if this.m_IStorageProviderGetPathForContentUriResult /= null then
         if this.m_IStorageProviderGetPathForContentUriResult.all /= null then
            RefCount := this.m_IStorageProviderGetPathForContentUriResult.all.Release;
            Free (this.m_IStorageProviderGetPathForContentUriResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorageProviderGetPathForContentUriResult

   function Constructor return StorageProviderGetPathForContentUriResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderGetPathForContentUriResult");
      m_ComRetVal  : aliased Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult;
   begin
      return RetVal : StorageProviderGetPathForContentUriResult do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStorageProviderGetPathForContentUriResult := new Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult;
            Retval.m_IStorageProviderGetPathForContentUriResult.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageProviderGetPathForContentUriResult

   function get_Status
   (
      this : in out StorageProviderGetPathForContentUriResult
   )
   return WinRt.Windows.Storage.Provider.StorageProviderUriSourceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderUriSourceStatus;
   begin
      Hr := this.m_IStorageProviderGetPathForContentUriResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Status
   (
      this : in out StorageProviderGetPathForContentUriResult;
      value : Windows.Storage.Provider.StorageProviderUriSourceStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderGetPathForContentUriResult.all.put_Status (value);
   end;

   function get_Path
   (
      this : in out StorageProviderGetPathForContentUriResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderGetPathForContentUriResult.all.get_Path (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Path
   (
      this : in out StorageProviderGetPathForContentUriResult;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderGetPathForContentUriResult.all.put_Path (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StorageProviderItemProperties is

      procedure SetAsync
      (
         item : Windows.Storage.IStorageItem;
         itemProperties : GenericObject
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderItemProperties");
         m_Factory        : access WinRt.Windows.Storage.Provider.IStorageProviderItemPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderItemPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetAsync (item, itemProperties, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end StorageProviderItemProperties;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageProviderItemProperty

   procedure Initialize (this : in out StorageProviderItemProperty) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageProviderItemProperty) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageProviderItemProperty, IStorageProviderItemProperty_Ptr);
   begin
      if this.m_IStorageProviderItemProperty /= null then
         if this.m_IStorageProviderItemProperty.all /= null then
            RefCount := this.m_IStorageProviderItemProperty.all.Release;
            Free (this.m_IStorageProviderItemProperty);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorageProviderItemProperty

   function Constructor return StorageProviderItemProperty is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderItemProperty");
      m_ComRetVal  : aliased Windows.Storage.Provider.IStorageProviderItemProperty;
   begin
      return RetVal : StorageProviderItemProperty do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStorageProviderItemProperty := new Windows.Storage.Provider.IStorageProviderItemProperty;
            Retval.m_IStorageProviderItemProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageProviderItemProperty

   procedure put_Id
   (
      this : in out StorageProviderItemProperty;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderItemProperty.all.put_Id (value);
   end;

   function get_Id
   (
      this : in out StorageProviderItemProperty
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IStorageProviderItemProperty.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Value
   (
      this : in out StorageProviderItemProperty;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderItemProperty.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Value
   (
      this : in out StorageProviderItemProperty
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderItemProperty.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_IconResource
   (
      this : in out StorageProviderItemProperty;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderItemProperty.all.put_IconResource (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IconResource
   (
      this : in out StorageProviderItemProperty
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderItemProperty.all.get_IconResource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageProviderItemPropertyDefinition

   procedure Initialize (this : in out StorageProviderItemPropertyDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageProviderItemPropertyDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageProviderItemPropertyDefinition, IStorageProviderItemPropertyDefinition_Ptr);
   begin
      if this.m_IStorageProviderItemPropertyDefinition /= null then
         if this.m_IStorageProviderItemPropertyDefinition.all /= null then
            RefCount := this.m_IStorageProviderItemPropertyDefinition.all.Release;
            Free (this.m_IStorageProviderItemPropertyDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorageProviderItemPropertyDefinition

   function Constructor return StorageProviderItemPropertyDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderItemPropertyDefinition");
      m_ComRetVal  : aliased Windows.Storage.Provider.IStorageProviderItemPropertyDefinition;
   begin
      return RetVal : StorageProviderItemPropertyDefinition do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStorageProviderItemPropertyDefinition := new Windows.Storage.Provider.IStorageProviderItemPropertyDefinition;
            Retval.m_IStorageProviderItemPropertyDefinition.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageProviderItemPropertyDefinition

   function get_Id
   (
      this : in out StorageProviderItemPropertyDefinition
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IStorageProviderItemPropertyDefinition.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out StorageProviderItemPropertyDefinition;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderItemPropertyDefinition.all.put_Id (value);
   end;

   function get_DisplayNameResource
   (
      this : in out StorageProviderItemPropertyDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderItemPropertyDefinition.all.get_DisplayNameResource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayNameResource
   (
      this : in out StorageProviderItemPropertyDefinition;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderItemPropertyDefinition.all.put_DisplayNameResource (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageProviderSyncRootInfo

   procedure Initialize (this : in out StorageProviderSyncRootInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageProviderSyncRootInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageProviderSyncRootInfo, IStorageProviderSyncRootInfo_Ptr);
   begin
      if this.m_IStorageProviderSyncRootInfo /= null then
         if this.m_IStorageProviderSyncRootInfo.all /= null then
            RefCount := this.m_IStorageProviderSyncRootInfo.all.Release;
            Free (this.m_IStorageProviderSyncRootInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorageProviderSyncRootInfo

   function Constructor return StorageProviderSyncRootInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderSyncRootInfo");
      m_ComRetVal  : aliased Windows.Storage.Provider.IStorageProviderSyncRootInfo;
   begin
      return RetVal : StorageProviderSyncRootInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStorageProviderSyncRootInfo := new Windows.Storage.Provider.IStorageProviderSyncRootInfo;
            Retval.m_IStorageProviderSyncRootInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageProviderSyncRootInfo

   function get_Id
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out StorageProviderSyncRootInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Context
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_Context (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Context
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_Context (value);
   end;

   function get_Path
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.IStorageFolder is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_Path (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Path
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.IStorageFolder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_Path (value);
   end;

   function get_DisplayNameResource
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_DisplayNameResource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayNameResource
   (
      this : in out StorageProviderSyncRootInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_DisplayNameResource (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IconResource
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_IconResource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_IconResource
   (
      this : in out StorageProviderSyncRootInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_IconResource (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_HydrationPolicy
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.Provider.StorageProviderHydrationPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderHydrationPolicy;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_HydrationPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HydrationPolicy
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.Provider.StorageProviderHydrationPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_HydrationPolicy (value);
   end;

   function get_HydrationPolicyModifier
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.Provider.StorageProviderHydrationPolicyModifier is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderHydrationPolicyModifier;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_HydrationPolicyModifier (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HydrationPolicyModifier
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.Provider.StorageProviderHydrationPolicyModifier
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_HydrationPolicyModifier (value);
   end;

   function get_PopulationPolicy
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.Provider.StorageProviderPopulationPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderPopulationPolicy;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_PopulationPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PopulationPolicy
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.Provider.StorageProviderPopulationPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_PopulationPolicy (value);
   end;

   function get_InSyncPolicy
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.Provider.StorageProviderInSyncPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderInSyncPolicy;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_InSyncPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InSyncPolicy
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.Provider.StorageProviderInSyncPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_InSyncPolicy (value);
   end;

   function get_HardlinkPolicy
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.Provider.StorageProviderHardlinkPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderHardlinkPolicy;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_HardlinkPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HardlinkPolicy
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.Provider.StorageProviderHardlinkPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_HardlinkPolicy (value);
   end;

   function get_ShowSiblingsAsGroup
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_ShowSiblingsAsGroup (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShowSiblingsAsGroup
   (
      this : in out StorageProviderSyncRootInfo;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_ShowSiblingsAsGroup (value);
   end;

   function get_Version
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_Version (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Version
   (
      this : in out StorageProviderSyncRootInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_Version (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ProtectionMode
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Storage.Provider.StorageProviderProtectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.StorageProviderProtectionMode;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_ProtectionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProtectionMode
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Storage.Provider.StorageProviderProtectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_ProtectionMode (value);
   end;

   function get_AllowPinning
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_AllowPinning (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowPinning
   (
      this : in out StorageProviderSyncRootInfo;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_AllowPinning (value);
   end;

   function get_StorageProviderItemPropertyDefinitions
   (
      this : in out StorageProviderSyncRootInfo
   )
   return IVector_IStorageProviderItemPropertyDefinition.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IStorageProviderItemPropertyDefinition.Kind;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.get_StorageProviderItemPropertyDefinitions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IStorageProviderItemPropertyDefinition (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RecycleBinUri
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IStorageProviderSyncRootInfo.all.get_RecycleBinUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_RecycleBinUri
   (
      this : in out StorageProviderSyncRootInfo;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageProviderSyncRootInfo.all.put_RecycleBinUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ProviderId
   (
      this : in out StorageProviderSyncRootInfo
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo_Interface, WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo2, WinRt.Windows.Storage.Provider.IID_IStorageProviderSyncRootInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageProviderSyncRootInfo.all);
      Hr := m_Interface.get_ProviderId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ProviderId
   (
      this : in out StorageProviderSyncRootInfo;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo_Interface, WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo2, WinRt.Windows.Storage.Provider.IID_IStorageProviderSyncRootInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageProviderSyncRootInfo.all);
      Hr := m_Interface.put_ProviderId (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_FallbackFileTypeInfo
   (
      this : in out StorageProviderSyncRootInfo
   )
   return IVector_IStorageProviderFileTypeInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IStorageProviderFileTypeInfo.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo_Interface, WinRt.Windows.Storage.Provider.IStorageProviderSyncRootInfo3, WinRt.Windows.Storage.Provider.IID_IStorageProviderSyncRootInfo3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageProviderSyncRootInfo.all);
      Hr := m_Interface.get_FallbackFileTypeInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IStorageProviderFileTypeInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body StorageProviderSyncRootManager is

      procedure Register
      (
         syncRootInformation : Windows.Storage.Provider.StorageProviderSyncRootInfo'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderSyncRootManager");
         m_Factory        : access WinRt.Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderSyncRootManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Register (syncRootInformation.m_IStorageProviderSyncRootInfo.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure Unregister
      (
         id : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderSyncRootManager");
         m_Factory        : access WinRt.Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_id : WinRt.HString := To_HString (id);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderSyncRootManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Unregister (HStr_id);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end;

      function GetSyncRootInformationForFolder
      (
         folder : Windows.Storage.IStorageFolder
      )
      return WinRt.Windows.Storage.Provider.StorageProviderSyncRootInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderSyncRootManager");
         m_Factory        : access WinRt.Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.Provider.IStorageProviderSyncRootInfo;
      begin
         return RetVal : WinRt.Windows.Storage.Provider.StorageProviderSyncRootInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderSyncRootManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetSyncRootInformationForFolder (folder, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IStorageProviderSyncRootInfo := new Windows.Storage.Provider.IStorageProviderSyncRootInfo;
               Retval.m_IStorageProviderSyncRootInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetSyncRootInformationForId
      (
         id : WinRt.WString
      )
      return WinRt.Windows.Storage.Provider.StorageProviderSyncRootInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderSyncRootManager");
         m_Factory        : access WinRt.Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.Provider.IStorageProviderSyncRootInfo;
         HStr_id : WinRt.HString := To_HString (id);
      begin
         return RetVal : WinRt.Windows.Storage.Provider.StorageProviderSyncRootInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderSyncRootManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetSyncRootInformationForId (HStr_id, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IStorageProviderSyncRootInfo := new Windows.Storage.Provider.IStorageProviderSyncRootInfo;
               Retval.m_IStorageProviderSyncRootInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_id);
         end return;
      end;

      function GetCurrentSyncRoots
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderSyncRootManager");
         m_Factory        : access WinRt.Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderSyncRootManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetCurrentSyncRoots (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function IsSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Provider.StorageProviderSyncRootManager");
         m_Factory        : access WinRt.Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IStorageProviderSyncRootManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end StorageProviderSyncRootManager;

end;

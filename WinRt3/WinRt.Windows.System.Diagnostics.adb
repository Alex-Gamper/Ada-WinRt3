--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Data.Json;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System.Diagnostics is

   package IAsyncOperation_DiagnosticActionResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.System.Diagnostics.IDiagnosticActionResult, GenericObject);
   package AsyncOperationCompletedHandler_DiagnosticActionResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.System.Diagnostics.IDiagnosticActionResult, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DiagnosticActionResult

   procedure Initialize (this : in out DiagnosticActionResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out DiagnosticActionResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDiagnosticActionResult, IDiagnosticActionResult_Ptr);
   begin
      if this.m_IDiagnosticActionResult /= null then
         if this.m_IDiagnosticActionResult.all /= null then
            RefCount := this.m_IDiagnosticActionResult.all.Release;
            Free (this.m_IDiagnosticActionResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DiagnosticActionResult

   function get_ExtendedError
   (
      this : in out DiagnosticActionResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IDiagnosticActionResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Results
   (
      this : in out DiagnosticActionResult
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IDiagnosticActionResult.all.get_Results (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DiagnosticInvoker

   procedure Initialize (this : in out DiagnosticInvoker) is
   begin
      null;
   end;

   procedure Finalize (this : in out DiagnosticInvoker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDiagnosticInvoker, IDiagnosticInvoker_Ptr);
   begin
      if this.m_IDiagnosticInvoker /= null then
         if this.m_IDiagnosticInvoker.all /= null then
            RefCount := this.m_IDiagnosticInvoker.all.Release;
            Free (this.m_IDiagnosticInvoker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DiagnosticInvoker

   function GetDefault
   return WinRt.Windows.System.Diagnostics.DiagnosticInvoker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.DiagnosticInvoker");
      m_Factory        : access WinRt.Windows.System.Diagnostics.IDiagnosticInvokerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IDiagnosticInvoker;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.DiagnosticInvoker do
         Hr := RoGetActivationFactory (m_hString, IID_IDiagnosticInvokerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDiagnosticInvoker := new Windows.System.Diagnostics.IDiagnosticInvoker;
            Retval.m_IDiagnosticInvoker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.System.Diagnostics.DiagnosticInvoker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.DiagnosticInvoker");
      m_Factory        : access WinRt.Windows.System.Diagnostics.IDiagnosticInvokerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IDiagnosticInvoker;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.DiagnosticInvoker do
         Hr := RoGetActivationFactory (m_hString, IID_IDiagnosticInvokerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDiagnosticInvoker := new Windows.System.Diagnostics.IDiagnosticInvoker;
            Retval.m_IDiagnosticInvoker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.DiagnosticInvoker");
      m_Factory        : access WinRt.Windows.System.Diagnostics.IDiagnosticInvokerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDiagnosticInvokerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DiagnosticInvoker

   function RunDiagnosticActionAsync
   (
      this : in out DiagnosticInvoker;
      context : Windows.Data.Json.JsonObject'Class
   )
   return WinRt.Windows.System.Diagnostics.DiagnosticActionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DiagnosticActionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DiagnosticActionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.Diagnostics.IDiagnosticActionResult;
      m_IID            : aliased WinRt.IID := (3143452990, 29929, 22433, (140, 76, 146, 62, 13, 196, 86, 91 )); -- Windows.System.Diagnostics.DiagnosticActionResult;
      m_HandlerIID     : aliased WinRt.IID := (957022353, 51959, 23396, (131, 157, 73, 144, 174, 127, 117, 60 ));
      m_Handler        : AsyncOperationCompletedHandler_DiagnosticActionResult.Kind := new AsyncOperationCompletedHandler_DiagnosticActionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DiagnosticActionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DiagnosticActionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DiagnosticActionResult.Kind_Delegate, AsyncOperationCompletedHandler_DiagnosticActionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.System.Diagnostics.DiagnosticActionResult do
         Hr := this.m_IDiagnosticInvoker.all.RunDiagnosticActionAsync (context.m_IJsonObject.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDiagnosticActionResult := new Windows.System.Diagnostics.IDiagnosticActionResult;
                  Retval.m_IDiagnosticActionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RunDiagnosticActionFromStringAsync
   (
      this : in out DiagnosticInvoker;
      context : WinRt.WString
   )
   return WinRt.Windows.System.Diagnostics.DiagnosticActionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.IDiagnosticInvoker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_context : WinRt.HString := To_HString (context);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DiagnosticActionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DiagnosticActionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.Diagnostics.IDiagnosticActionResult;
      m_IID            : aliased WinRt.IID := (3143452990, 29929, 22433, (140, 76, 146, 62, 13, 196, 86, 91 )); -- Windows.System.Diagnostics.DiagnosticActionResult;
      m_HandlerIID     : aliased WinRt.IID := (957022353, 51959, 23396, (131, 157, 73, 144, 174, 127, 117, 60 ));
      m_Handler        : AsyncOperationCompletedHandler_DiagnosticActionResult.Kind := new AsyncOperationCompletedHandler_DiagnosticActionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DiagnosticActionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DiagnosticActionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DiagnosticActionResult.Kind_Delegate, AsyncOperationCompletedHandler_DiagnosticActionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.IDiagnosticInvoker_Interface, WinRt.Windows.System.Diagnostics.IDiagnosticInvoker2, WinRt.Windows.System.Diagnostics.IID_IDiagnosticInvoker2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.DiagnosticActionResult do
         m_Interface := QInterface (this.m_IDiagnosticInvoker.all);
         Hr := m_Interface.RunDiagnosticActionFromStringAsync (HStr_context, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDiagnosticActionResult := new Windows.System.Diagnostics.IDiagnosticActionResult;
                  Retval.m_IDiagnosticActionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_context);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessCpuUsage

   procedure Initialize (this : in out ProcessCpuUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessCpuUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessCpuUsage, IProcessCpuUsage_Ptr);
   begin
      if this.m_IProcessCpuUsage /= null then
         if this.m_IProcessCpuUsage.all /= null then
            RefCount := this.m_IProcessCpuUsage.all.Release;
            Free (this.m_IProcessCpuUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessCpuUsage

   function GetReport
   (
      this : in out ProcessCpuUsage
   )
   return WinRt.Windows.System.Diagnostics.ProcessCpuUsageReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessCpuUsageReport;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessCpuUsageReport do
         Hr := this.m_IProcessCpuUsage.all.GetReport (m_ComRetVal'Access);
         Retval.m_IProcessCpuUsageReport := new Windows.System.Diagnostics.IProcessCpuUsageReport;
         Retval.m_IProcessCpuUsageReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessCpuUsageReport

   procedure Initialize (this : in out ProcessCpuUsageReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessCpuUsageReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessCpuUsageReport, IProcessCpuUsageReport_Ptr);
   begin
      if this.m_IProcessCpuUsageReport /= null then
         if this.m_IProcessCpuUsageReport.all /= null then
            RefCount := this.m_IProcessCpuUsageReport.all.Release;
            Free (this.m_IProcessCpuUsageReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessCpuUsageReport

   function get_KernelTime
   (
      this : in out ProcessCpuUsageReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IProcessCpuUsageReport.all.get_KernelTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UserTime
   (
      this : in out ProcessCpuUsageReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IProcessCpuUsageReport.all.get_UserTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessDiagnosticInfo

   procedure Initialize (this : in out ProcessDiagnosticInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessDiagnosticInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessDiagnosticInfo, IProcessDiagnosticInfo_Ptr);
   begin
      if this.m_IProcessDiagnosticInfo /= null then
         if this.m_IProcessDiagnosticInfo.all /= null then
            RefCount := this.m_IProcessDiagnosticInfo.all.Release;
            Free (this.m_IProcessDiagnosticInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ProcessDiagnosticInfo

   function GetForProcesses
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.ProcessDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProcessDiagnosticInfoStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetForProcesses (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetForCurrentProcess
   return WinRt.Windows.System.Diagnostics.ProcessDiagnosticInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.ProcessDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessDiagnosticInfo;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessDiagnosticInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IProcessDiagnosticInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentProcess (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IProcessDiagnosticInfo := new Windows.System.Diagnostics.IProcessDiagnosticInfo;
            Retval.m_IProcessDiagnosticInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function TryGetForProcessId
   (
      processId : WinRt.UInt32
   )
   return WinRt.Windows.System.Diagnostics.ProcessDiagnosticInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.ProcessDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfoStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessDiagnosticInfo;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessDiagnosticInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IProcessDiagnosticInfoStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryGetForProcessId (processId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IProcessDiagnosticInfo := new Windows.System.Diagnostics.IProcessDiagnosticInfo;
            Retval.m_IProcessDiagnosticInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessDiagnosticInfo

   function get_ProcessId
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IProcessDiagnosticInfo.all.get_ProcessId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExecutableFileName
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProcessDiagnosticInfo.all.get_ExecutableFileName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Parent
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.Windows.System.Diagnostics.ProcessDiagnosticInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessDiagnosticInfo;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessDiagnosticInfo do
         Hr := this.m_IProcessDiagnosticInfo.all.get_Parent (m_ComRetVal'Access);
         Retval.m_IProcessDiagnosticInfo := new Windows.System.Diagnostics.IProcessDiagnosticInfo;
         Retval.m_IProcessDiagnosticInfo.all := m_ComRetVal;
      end return;
   end;

   function get_ProcessStartTime
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IProcessDiagnosticInfo.all.get_ProcessStartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DiskUsage
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.Windows.System.Diagnostics.ProcessDiskUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessDiskUsage;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessDiskUsage do
         Hr := this.m_IProcessDiagnosticInfo.all.get_DiskUsage (m_ComRetVal'Access);
         Retval.m_IProcessDiskUsage := new Windows.System.Diagnostics.IProcessDiskUsage;
         Retval.m_IProcessDiskUsage.all := m_ComRetVal;
      end return;
   end;

   function get_MemoryUsage
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.Windows.System.Diagnostics.ProcessMemoryUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessMemoryUsage;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessMemoryUsage do
         Hr := this.m_IProcessDiagnosticInfo.all.get_MemoryUsage (m_ComRetVal'Access);
         Retval.m_IProcessMemoryUsage := new Windows.System.Diagnostics.IProcessMemoryUsage;
         Retval.m_IProcessMemoryUsage.all := m_ComRetVal;
      end return;
   end;

   function get_CpuUsage
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.Windows.System.Diagnostics.ProcessCpuUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessCpuUsage;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessCpuUsage do
         Hr := this.m_IProcessDiagnosticInfo.all.get_CpuUsage (m_ComRetVal'Access);
         Retval.m_IProcessCpuUsage := new Windows.System.Diagnostics.IProcessCpuUsage;
         Retval.m_IProcessCpuUsage.all := m_ComRetVal;
      end return;
   end;

   function GetAppDiagnosticInfos
   (
      this : in out ProcessDiagnosticInfo
   )
   return IVector_IAppDiagnosticInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IAppDiagnosticInfo.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfo_Interface, WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfo2, WinRt.Windows.System.Diagnostics.IID_IProcessDiagnosticInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProcessDiagnosticInfo.all);
      Hr := m_Interface.GetAppDiagnosticInfos (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IAppDiagnosticInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsPackaged
   (
      this : in out ProcessDiagnosticInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfo_Interface, WinRt.Windows.System.Diagnostics.IProcessDiagnosticInfo2, WinRt.Windows.System.Diagnostics.IID_IProcessDiagnosticInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProcessDiagnosticInfo.all);
      Hr := m_Interface.get_IsPackaged (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessDiskUsage

   procedure Initialize (this : in out ProcessDiskUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessDiskUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessDiskUsage, IProcessDiskUsage_Ptr);
   begin
      if this.m_IProcessDiskUsage /= null then
         if this.m_IProcessDiskUsage.all /= null then
            RefCount := this.m_IProcessDiskUsage.all.Release;
            Free (this.m_IProcessDiskUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessDiskUsage

   function GetReport
   (
      this : in out ProcessDiskUsage
   )
   return WinRt.Windows.System.Diagnostics.ProcessDiskUsageReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessDiskUsageReport;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessDiskUsageReport do
         Hr := this.m_IProcessDiskUsage.all.GetReport (m_ComRetVal'Access);
         Retval.m_IProcessDiskUsageReport := new Windows.System.Diagnostics.IProcessDiskUsageReport;
         Retval.m_IProcessDiskUsageReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessDiskUsageReport

   procedure Initialize (this : in out ProcessDiskUsageReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessDiskUsageReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessDiskUsageReport, IProcessDiskUsageReport_Ptr);
   begin
      if this.m_IProcessDiskUsageReport /= null then
         if this.m_IProcessDiskUsageReport.all /= null then
            RefCount := this.m_IProcessDiskUsageReport.all.Release;
            Free (this.m_IProcessDiskUsageReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessDiskUsageReport

   function get_ReadOperationCount
   (
      this : in out ProcessDiskUsageReport
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProcessDiskUsageReport.all.get_ReadOperationCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WriteOperationCount
   (
      this : in out ProcessDiskUsageReport
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProcessDiskUsageReport.all.get_WriteOperationCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OtherOperationCount
   (
      this : in out ProcessDiskUsageReport
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProcessDiskUsageReport.all.get_OtherOperationCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BytesReadCount
   (
      this : in out ProcessDiskUsageReport
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProcessDiskUsageReport.all.get_BytesReadCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BytesWrittenCount
   (
      this : in out ProcessDiskUsageReport
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProcessDiskUsageReport.all.get_BytesWrittenCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OtherBytesCount
   (
      this : in out ProcessDiskUsageReport
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IProcessDiskUsageReport.all.get_OtherBytesCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessMemoryUsage

   procedure Initialize (this : in out ProcessMemoryUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessMemoryUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessMemoryUsage, IProcessMemoryUsage_Ptr);
   begin
      if this.m_IProcessMemoryUsage /= null then
         if this.m_IProcessMemoryUsage.all /= null then
            RefCount := this.m_IProcessMemoryUsage.all.Release;
            Free (this.m_IProcessMemoryUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessMemoryUsage

   function GetReport
   (
      this : in out ProcessMemoryUsage
   )
   return WinRt.Windows.System.Diagnostics.ProcessMemoryUsageReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.IProcessMemoryUsageReport;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.ProcessMemoryUsageReport do
         Hr := this.m_IProcessMemoryUsage.all.GetReport (m_ComRetVal'Access);
         Retval.m_IProcessMemoryUsageReport := new Windows.System.Diagnostics.IProcessMemoryUsageReport;
         Retval.m_IProcessMemoryUsageReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProcessMemoryUsageReport

   procedure Initialize (this : in out ProcessMemoryUsageReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProcessMemoryUsageReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProcessMemoryUsageReport, IProcessMemoryUsageReport_Ptr);
   begin
      if this.m_IProcessMemoryUsageReport /= null then
         if this.m_IProcessMemoryUsageReport.all /= null then
            RefCount := this.m_IProcessMemoryUsageReport.all.Release;
            Free (this.m_IProcessMemoryUsageReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProcessMemoryUsageReport

   function get_NonPagedPoolSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_NonPagedPoolSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PageFaultCount
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PageFaultCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PageFileSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PageFileSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PagedPoolSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PagedPoolSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeakNonPagedPoolSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PeakNonPagedPoolSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeakPageFileSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PeakPageFileSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeakPagedPoolSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PeakPagedPoolSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeakVirtualMemorySizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PeakVirtualMemorySizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PeakWorkingSetSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PeakWorkingSetSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PrivatePageCount
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_PrivatePageCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VirtualMemorySizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_VirtualMemorySizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WorkingSetSizeInBytes
   (
      this : in out ProcessMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IProcessMemoryUsageReport.all.get_WorkingSetSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemCpuUsage

   procedure Initialize (this : in out SystemCpuUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemCpuUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemCpuUsage, ISystemCpuUsage_Ptr);
   begin
      if this.m_ISystemCpuUsage /= null then
         if this.m_ISystemCpuUsage.all /= null then
            RefCount := this.m_ISystemCpuUsage.all.Release;
            Free (this.m_ISystemCpuUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemCpuUsage

   function GetReport
   (
      this : in out SystemCpuUsage
   )
   return WinRt.Windows.System.Diagnostics.SystemCpuUsageReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.ISystemCpuUsageReport;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.SystemCpuUsageReport do
         Hr := this.m_ISystemCpuUsage.all.GetReport (m_ComRetVal'Access);
         Retval.m_ISystemCpuUsageReport := new Windows.System.Diagnostics.ISystemCpuUsageReport;
         Retval.m_ISystemCpuUsageReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemCpuUsageReport

   procedure Initialize (this : in out SystemCpuUsageReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemCpuUsageReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemCpuUsageReport, ISystemCpuUsageReport_Ptr);
   begin
      if this.m_ISystemCpuUsageReport /= null then
         if this.m_ISystemCpuUsageReport.all /= null then
            RefCount := this.m_ISystemCpuUsageReport.all.Release;
            Free (this.m_ISystemCpuUsageReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemCpuUsageReport

   function get_KernelTime
   (
      this : in out SystemCpuUsageReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemCpuUsageReport.all.get_KernelTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UserTime
   (
      this : in out SystemCpuUsageReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemCpuUsageReport.all.get_UserTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IdleTime
   (
      this : in out SystemCpuUsageReport
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemCpuUsageReport.all.get_IdleTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemDiagnosticInfo

   procedure Initialize (this : in out SystemDiagnosticInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemDiagnosticInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemDiagnosticInfo, ISystemDiagnosticInfo_Ptr);
   begin
      if this.m_ISystemDiagnosticInfo /= null then
         if this.m_ISystemDiagnosticInfo.all /= null then
            RefCount := this.m_ISystemDiagnosticInfo.all.Release;
            Free (this.m_ISystemDiagnosticInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SystemDiagnosticInfo

   function GetForCurrentSystem
   return WinRt.Windows.System.Diagnostics.SystemDiagnosticInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.SystemDiagnosticInfo");
      m_Factory        : access WinRt.Windows.System.Diagnostics.ISystemDiagnosticInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.ISystemDiagnosticInfo;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.SystemDiagnosticInfo do
         Hr := RoGetActivationFactory (m_hString, IID_ISystemDiagnosticInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentSystem (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISystemDiagnosticInfo := new Windows.System.Diagnostics.ISystemDiagnosticInfo;
            Retval.m_ISystemDiagnosticInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemDiagnosticInfo

   function get_MemoryUsage
   (
      this : in out SystemDiagnosticInfo
   )
   return WinRt.Windows.System.Diagnostics.SystemMemoryUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.ISystemMemoryUsage;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.SystemMemoryUsage do
         Hr := this.m_ISystemDiagnosticInfo.all.get_MemoryUsage (m_ComRetVal'Access);
         Retval.m_ISystemMemoryUsage := new Windows.System.Diagnostics.ISystemMemoryUsage;
         Retval.m_ISystemMemoryUsage.all := m_ComRetVal;
      end return;
   end;

   function get_CpuUsage
   (
      this : in out SystemDiagnosticInfo
   )
   return WinRt.Windows.System.Diagnostics.SystemCpuUsage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.ISystemCpuUsage;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.SystemCpuUsage do
         Hr := this.m_ISystemDiagnosticInfo.all.get_CpuUsage (m_ComRetVal'Access);
         Retval.m_ISystemCpuUsage := new Windows.System.Diagnostics.ISystemCpuUsage;
         Retval.m_ISystemCpuUsage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemMemoryUsage

   procedure Initialize (this : in out SystemMemoryUsage) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemMemoryUsage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemMemoryUsage, ISystemMemoryUsage_Ptr);
   begin
      if this.m_ISystemMemoryUsage /= null then
         if this.m_ISystemMemoryUsage.all /= null then
            RefCount := this.m_ISystemMemoryUsage.all.Release;
            Free (this.m_ISystemMemoryUsage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemMemoryUsage

   function GetReport
   (
      this : in out SystemMemoryUsage
   )
   return WinRt.Windows.System.Diagnostics.SystemMemoryUsageReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.ISystemMemoryUsageReport;
   begin
      return RetVal : WinRt.Windows.System.Diagnostics.SystemMemoryUsageReport do
         Hr := this.m_ISystemMemoryUsage.all.GetReport (m_ComRetVal'Access);
         Retval.m_ISystemMemoryUsageReport := new Windows.System.Diagnostics.ISystemMemoryUsageReport;
         Retval.m_ISystemMemoryUsageReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemMemoryUsageReport

   procedure Initialize (this : in out SystemMemoryUsageReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemMemoryUsageReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemMemoryUsageReport, ISystemMemoryUsageReport_Ptr);
   begin
      if this.m_ISystemMemoryUsageReport /= null then
         if this.m_ISystemMemoryUsageReport.all /= null then
            RefCount := this.m_ISystemMemoryUsageReport.all.Release;
            Free (this.m_ISystemMemoryUsageReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemMemoryUsageReport

   function get_TotalPhysicalSizeInBytes
   (
      this : in out SystemMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_ISystemMemoryUsageReport.all.get_TotalPhysicalSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AvailableSizeInBytes
   (
      this : in out SystemMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_ISystemMemoryUsageReport.all.get_AvailableSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CommittedSizeInBytes
   (
      this : in out SystemMemoryUsageReport
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_ISystemMemoryUsageReport.all.get_CommittedSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.SocialInfo is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialFeedChildItem

   procedure Initialize (this : in out SocialFeedChildItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialFeedChildItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialFeedChildItem, ISocialFeedChildItem_Ptr);
   begin
      if this.m_ISocialFeedChildItem /= null then
         if this.m_ISocialFeedChildItem.all /= null then
            RefCount := this.m_ISocialFeedChildItem.all.Release;
            Free (this.m_ISocialFeedChildItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SocialFeedChildItem

   function Constructor return SocialFeedChildItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.SocialFeedChildItem");
      m_ComRetVal  : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedChildItem;
   begin
      return RetVal : SocialFeedChildItem do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISocialFeedChildItem := new Windows.ApplicationModel.SocialInfo.ISocialFeedChildItem;
            Retval.m_ISocialFeedChildItem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialFeedChildItem

   function get_Author
   (
      this : in out SocialFeedChildItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialUserInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialUserInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialUserInfo do
         Hr := this.m_ISocialFeedChildItem.all.get_Author (m_ComRetVal'Access);
         Retval.m_ISocialUserInfo := new Windows.ApplicationModel.SocialInfo.ISocialUserInfo;
         Retval.m_ISocialUserInfo.all := m_ComRetVal;
      end return;
   end;

   function get_PrimaryContent
   (
      this : in out SocialFeedChildItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent do
         Hr := this.m_ISocialFeedChildItem.all.get_PrimaryContent (m_ComRetVal'Access);
         Retval.m_ISocialFeedContent := new Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
         Retval.m_ISocialFeedContent.all := m_ComRetVal;
      end return;
   end;

   function get_SecondaryContent
   (
      this : in out SocialFeedChildItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent do
         Hr := this.m_ISocialFeedChildItem.all.get_SecondaryContent (m_ComRetVal'Access);
         Retval.m_ISocialFeedContent := new Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
         Retval.m_ISocialFeedContent.all := m_ComRetVal;
      end return;
   end;

   function get_Timestamp
   (
      this : in out SocialFeedChildItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISocialFeedChildItem.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Timestamp
   (
      this : in out SocialFeedChildItem;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedChildItem.all.put_Timestamp (value);
   end;

   function get_TargetUri
   (
      this : in out SocialFeedChildItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialFeedChildItem.all.get_TargetUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetUri
   (
      this : in out SocialFeedChildItem;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedChildItem.all.put_TargetUri (value.m_IUriRuntimeClass.all);
   end;

   function get_Thumbnails
   (
      this : in out SocialFeedChildItem
   )
   return IVector_ISocialItemThumbnail.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISocialItemThumbnail.Kind;
   begin
      Hr := this.m_ISocialFeedChildItem.all.get_Thumbnails (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISocialItemThumbnail (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SharedItem
   (
      this : in out SocialFeedChildItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedSharedItem;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem do
         Hr := this.m_ISocialFeedChildItem.all.get_SharedItem (m_ComRetVal'Access);
         Retval.m_ISocialFeedSharedItem := new Windows.ApplicationModel.SocialInfo.ISocialFeedSharedItem;
         Retval.m_ISocialFeedSharedItem.all := m_ComRetVal;
      end return;
   end;

   procedure put_SharedItem
   (
      this : in out SocialFeedChildItem;
      value : Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedChildItem.all.put_SharedItem (value.m_ISocialFeedSharedItem.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialFeedContent

   procedure Initialize (this : in out SocialFeedContent) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialFeedContent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialFeedContent, ISocialFeedContent_Ptr);
   begin
      if this.m_ISocialFeedContent /= null then
         if this.m_ISocialFeedContent.all /= null then
            RefCount := this.m_ISocialFeedContent.all.Release;
            Free (this.m_ISocialFeedContent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialFeedContent

   function get_Title
   (
      this : in out SocialFeedContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialFeedContent.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out SocialFeedContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISocialFeedContent.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Message
   (
      this : in out SocialFeedContent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialFeedContent.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Message
   (
      this : in out SocialFeedContent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISocialFeedContent.all.put_Message (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TargetUri
   (
      this : in out SocialFeedContent
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialFeedContent.all.get_TargetUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetUri
   (
      this : in out SocialFeedContent;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedContent.all.put_TargetUri (value.m_IUriRuntimeClass.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialFeedItem

   procedure Initialize (this : in out SocialFeedItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialFeedItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialFeedItem, ISocialFeedItem_Ptr);
   begin
      if this.m_ISocialFeedItem /= null then
         if this.m_ISocialFeedItem.all /= null then
            RefCount := this.m_ISocialFeedItem.all.Release;
            Free (this.m_ISocialFeedItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SocialFeedItem

   function Constructor return SocialFeedItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.SocialFeedItem");
      m_ComRetVal  : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedItem;
   begin
      return RetVal : SocialFeedItem do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISocialFeedItem := new Windows.ApplicationModel.SocialInfo.ISocialFeedItem;
            Retval.m_ISocialFeedItem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialFeedItem

   function get_Author
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialUserInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialUserInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialUserInfo do
         Hr := this.m_ISocialFeedItem.all.get_Author (m_ComRetVal'Access);
         Retval.m_ISocialUserInfo := new Windows.ApplicationModel.SocialInfo.ISocialUserInfo;
         Retval.m_ISocialUserInfo.all := m_ComRetVal;
      end return;
   end;

   function get_PrimaryContent
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent do
         Hr := this.m_ISocialFeedItem.all.get_PrimaryContent (m_ComRetVal'Access);
         Retval.m_ISocialFeedContent := new Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
         Retval.m_ISocialFeedContent.all := m_ComRetVal;
      end return;
   end;

   function get_SecondaryContent
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent do
         Hr := this.m_ISocialFeedItem.all.get_SecondaryContent (m_ComRetVal'Access);
         Retval.m_ISocialFeedContent := new Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
         Retval.m_ISocialFeedContent.all := m_ComRetVal;
      end return;
   end;

   function get_Timestamp
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISocialFeedItem.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Timestamp
   (
      this : in out SocialFeedItem;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedItem.all.put_Timestamp (value);
   end;

   function get_TargetUri
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialFeedItem.all.get_TargetUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetUri
   (
      this : in out SocialFeedItem;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedItem.all.put_TargetUri (value.m_IUriRuntimeClass.all);
   end;

   function get_Thumbnails
   (
      this : in out SocialFeedItem
   )
   return IVector_ISocialItemThumbnail.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISocialItemThumbnail.Kind;
   begin
      Hr := this.m_ISocialFeedItem.all.get_Thumbnails (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISocialItemThumbnail (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SharedItem
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedSharedItem;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem do
         Hr := this.m_ISocialFeedItem.all.get_SharedItem (m_ComRetVal'Access);
         Retval.m_ISocialFeedSharedItem := new Windows.ApplicationModel.SocialInfo.ISocialFeedSharedItem;
         Retval.m_ISocialFeedSharedItem.all := m_ComRetVal;
      end return;
   end;

   procedure put_SharedItem
   (
      this : in out SocialFeedItem;
      value : Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedItem.all.put_SharedItem (value.m_ISocialFeedSharedItem.all);
   end;

   function get_BadgeStyle
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialItemBadgeStyle is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.SocialItemBadgeStyle;
   begin
      Hr := this.m_ISocialFeedItem.all.get_BadgeStyle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BadgeStyle
   (
      this : in out SocialFeedItem;
      value : Windows.ApplicationModel.SocialInfo.SocialItemBadgeStyle
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedItem.all.put_BadgeStyle (value);
   end;

   function get_BadgeCountValue
   (
      this : in out SocialFeedItem
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISocialFeedItem.all.get_BadgeCountValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BadgeCountValue
   (
      this : in out SocialFeedItem;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedItem.all.put_BadgeCountValue (value);
   end;

   function get_RemoteId
   (
      this : in out SocialFeedItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialFeedItem.all.get_RemoteId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out SocialFeedItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISocialFeedItem.all.put_RemoteId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ChildItem
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedChildItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedChildItem;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedChildItem do
         Hr := this.m_ISocialFeedItem.all.get_ChildItem (m_ComRetVal'Access);
         Retval.m_ISocialFeedChildItem := new Windows.ApplicationModel.SocialInfo.ISocialFeedChildItem;
         Retval.m_ISocialFeedChildItem.all := m_ComRetVal;
      end return;
   end;

   procedure put_ChildItem
   (
      this : in out SocialFeedItem;
      value : Windows.ApplicationModel.SocialInfo.SocialFeedChildItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedItem.all.put_ChildItem (value.m_ISocialFeedChildItem.all);
   end;

   function get_Style
   (
      this : in out SocialFeedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedItemStyle is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.SocialFeedItemStyle;
   begin
      Hr := this.m_ISocialFeedItem.all.get_Style (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Style
   (
      this : in out SocialFeedItem;
      value : Windows.ApplicationModel.SocialInfo.SocialFeedItemStyle
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedItem.all.put_Style (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialFeedSharedItem

   procedure Initialize (this : in out SocialFeedSharedItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialFeedSharedItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialFeedSharedItem, ISocialFeedSharedItem_Ptr);
   begin
      if this.m_ISocialFeedSharedItem /= null then
         if this.m_ISocialFeedSharedItem.all /= null then
            RefCount := this.m_ISocialFeedSharedItem.all.Release;
            Free (this.m_ISocialFeedSharedItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SocialFeedSharedItem

   function Constructor return SocialFeedSharedItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.SocialFeedSharedItem");
      m_ComRetVal  : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedSharedItem;
   begin
      return RetVal : SocialFeedSharedItem do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISocialFeedSharedItem := new Windows.ApplicationModel.SocialInfo.ISocialFeedSharedItem;
            Retval.m_ISocialFeedSharedItem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialFeedSharedItem

   function get_OriginalSource
   (
      this : in out SocialFeedSharedItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialFeedSharedItem.all.get_OriginalSource (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_OriginalSource
   (
      this : in out SocialFeedSharedItem;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedSharedItem.all.put_OriginalSource (value.m_IUriRuntimeClass.all);
   end;

   function get_Content
   (
      this : in out SocialFeedSharedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialFeedContent do
         Hr := this.m_ISocialFeedSharedItem.all.get_Content (m_ComRetVal'Access);
         Retval.m_ISocialFeedContent := new Windows.ApplicationModel.SocialInfo.ISocialFeedContent;
         Retval.m_ISocialFeedContent.all := m_ComRetVal;
      end return;
   end;

   function get_Timestamp
   (
      this : in out SocialFeedSharedItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISocialFeedSharedItem.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Timestamp
   (
      this : in out SocialFeedSharedItem;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedSharedItem.all.put_Timestamp (value);
   end;

   function get_TargetUri
   (
      this : in out SocialFeedSharedItem
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialFeedSharedItem.all.get_TargetUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetUri
   (
      this : in out SocialFeedSharedItem;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedSharedItem.all.put_TargetUri (value.m_IUriRuntimeClass.all);
   end;

   procedure put_Thumbnail
   (
      this : in out SocialFeedSharedItem;
      value : Windows.ApplicationModel.SocialInfo.SocialItemThumbnail'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialFeedSharedItem.all.put_Thumbnail (value.m_ISocialItemThumbnail.all);
   end;

   function get_Thumbnail
   (
      this : in out SocialFeedSharedItem
   )
   return WinRt.Windows.ApplicationModel.SocialInfo.SocialItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.SocialInfo.ISocialItemThumbnail;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SocialInfo.SocialItemThumbnail do
         Hr := this.m_ISocialFeedSharedItem.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_ISocialItemThumbnail := new Windows.ApplicationModel.SocialInfo.ISocialItemThumbnail;
         Retval.m_ISocialItemThumbnail.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialItemThumbnail

   procedure Initialize (this : in out SocialItemThumbnail) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialItemThumbnail) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialItemThumbnail, ISocialItemThumbnail_Ptr);
   begin
      if this.m_ISocialItemThumbnail /= null then
         if this.m_ISocialItemThumbnail.all /= null then
            RefCount := this.m_ISocialItemThumbnail.all.Release;
            Free (this.m_ISocialItemThumbnail);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SocialItemThumbnail

   function Constructor return SocialItemThumbnail is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.SocialInfo.SocialItemThumbnail");
      m_ComRetVal  : aliased Windows.ApplicationModel.SocialInfo.ISocialItemThumbnail;
   begin
      return RetVal : SocialItemThumbnail do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISocialItemThumbnail := new Windows.ApplicationModel.SocialInfo.ISocialItemThumbnail;
            Retval.m_ISocialItemThumbnail.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialItemThumbnail

   function get_TargetUri
   (
      this : in out SocialItemThumbnail
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialItemThumbnail.all.get_TargetUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetUri
   (
      this : in out SocialItemThumbnail;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialItemThumbnail.all.put_TargetUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ImageUri
   (
      this : in out SocialItemThumbnail
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialItemThumbnail.all.get_ImageUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ImageUri
   (
      this : in out SocialItemThumbnail;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialItemThumbnail.all.put_ImageUri (value.m_IUriRuntimeClass.all);
   end;

   function get_BitmapSize
   (
      this : in out SocialItemThumbnail
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapSize;
   begin
      Hr := this.m_ISocialItemThumbnail.all.get_BitmapSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BitmapSize
   (
      this : in out SocialItemThumbnail;
      value : Windows.Graphics.Imaging.BitmapSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialItemThumbnail.all.put_BitmapSize (value);
   end;

   procedure SetImageAsync
   (
      this : in out SocialItemThumbnail;
      image : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISocialItemThumbnail.all.SetImageAsync (image, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocialUserInfo

   procedure Initialize (this : in out SocialUserInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocialUserInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocialUserInfo, ISocialUserInfo_Ptr);
   begin
      if this.m_ISocialUserInfo /= null then
         if this.m_ISocialUserInfo.all /= null then
            RefCount := this.m_ISocialUserInfo.all.Release;
            Free (this.m_ISocialUserInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocialUserInfo

   function get_DisplayName
   (
      this : in out SocialUserInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialUserInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out SocialUserInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISocialUserInfo.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_UserName
   (
      this : in out SocialUserInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialUserInfo.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_UserName
   (
      this : in out SocialUserInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISocialUserInfo.all.put_UserName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RemoteId
   (
      this : in out SocialUserInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocialUserInfo.all.get_RemoteId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out SocialUserInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISocialUserInfo.all.put_RemoteId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TargetUri
   (
      this : in out SocialUserInfo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISocialUserInfo.all.get_TargetUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetUri
   (
      this : in out SocialUserInfo;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISocialUserInfo.all.put_TargetUri (value.m_IUriRuntimeClass.all);
   end;

end;

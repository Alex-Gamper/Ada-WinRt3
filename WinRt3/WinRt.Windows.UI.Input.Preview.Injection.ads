--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation.Collections;
limited with WinRt.Windows.Gaming.Input;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.UI.Input.Preview.Injection is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IInjectedInputGamepadInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IInjectedInputGamepadInfo is access all IInjectedInputGamepadInfo_Interface'Class;
   type IInjectedInputGamepadInfo_Ptr is access all IInjectedInputGamepadInfo;

   type IInjectedInputGamepadInfoFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IInjectedInputGamepadInfoFactory is access all IInjectedInputGamepadInfoFactory_Interface'Class;

   type IInjectedInputKeyboardInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IInjectedInputKeyboardInfo is access all IInjectedInputKeyboardInfo_Interface'Class;
   type IInjectedInputKeyboardInfo_Ptr is access all IInjectedInputKeyboardInfo;

   type IInjectedInputMouseInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IInjectedInputMouseInfo is access all IInjectedInputMouseInfo_Interface'Class;
   type IInjectedInputMouseInfo_Ptr is access all IInjectedInputMouseInfo;

   type IInjectedInputPenInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IInjectedInputPenInfo is access all IInjectedInputPenInfo_Interface'Class;
   type IInjectedInputPenInfo_Ptr is access all IInjectedInputPenInfo;

   type IInjectedInputTouchInfo_Interface is interface and WinRt.IInspectable_Interface;
   type IInjectedInputTouchInfo is access all IInjectedInputTouchInfo_Interface'Class;
   type IInjectedInputTouchInfo_Ptr is access all IInjectedInputTouchInfo;

   type IInputInjector_Interface is interface and WinRt.IInspectable_Interface;
   type IInputInjector is access all IInputInjector_Interface'Class;
   type IInputInjector_Ptr is access all IInputInjector;

   type IInputInjector2_Interface is interface and WinRt.IInspectable_Interface;
   type IInputInjector2 is access all IInputInjector2_Interface'Class;

   type IInputInjectorStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IInputInjectorStatics is access all IInputInjectorStatics_Interface'Class;

   type IInputInjectorStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IInputInjectorStatics2 is access all IInputInjectorStatics2_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type InjectedInputGamepadInfo is new Ada.Finalization.Limited_Controlled with
      record
         m_IInjectedInputGamepadInfo : access Windows.UI.Input.Preview.Injection.IInjectedInputGamepadInfo;
      end record;
   type InjectedInputGamepadInfo_Ptr is access all InjectedInputGamepadInfo;

   type InjectedInputKeyboardInfo is new Ada.Finalization.Limited_Controlled with
      record
         m_IInjectedInputKeyboardInfo : access Windows.UI.Input.Preview.Injection.IInjectedInputKeyboardInfo;
      end record;
   type InjectedInputKeyboardInfo_Ptr is access all InjectedInputKeyboardInfo;

   type InjectedInputMouseInfo is new Ada.Finalization.Limited_Controlled with
      record
         m_IInjectedInputMouseInfo : access Windows.UI.Input.Preview.Injection.IInjectedInputMouseInfo;
      end record;
   type InjectedInputMouseInfo_Ptr is access all InjectedInputMouseInfo;

   type InjectedInputPenInfo is new Ada.Finalization.Limited_Controlled with
      record
         m_IInjectedInputPenInfo : access Windows.UI.Input.Preview.Injection.IInjectedInputPenInfo;
      end record;
   type InjectedInputPenInfo_Ptr is access all InjectedInputPenInfo;

   type InjectedInputTouchInfo is new Ada.Finalization.Limited_Controlled with
      record
         m_IInjectedInputTouchInfo : access Windows.UI.Input.Preview.Injection.IInjectedInputTouchInfo;
      end record;
   type InjectedInputTouchInfo_Ptr is access all InjectedInputTouchInfo;

   type InputInjector is new Ada.Finalization.Limited_Controlled with
      record
         m_IInputInjector : access Windows.UI.Input.Preview.Injection.IInputInjector;
      end record;
   type InputInjector_Ptr is access all InputInjector;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type InjectedInputButtonChangeKind is (
      None_e,
      FirstButtonDown_e,
      FirstButtonUp_e,
      SecondButtonDown_e,
      SecondButtonUp_e,
      ThirdButtonDown_e,
      ThirdButtonUp_e,
      FourthButtonDown_e,
      FourthButtonUp_e,
      FifthButtonDown_e,
      FifthButtonUp_e
   );
   for InjectedInputButtonChangeKind use (
      None_e => 0,
      FirstButtonDown_e => 1,
      FirstButtonUp_e => 2,
      SecondButtonDown_e => 3,
      SecondButtonUp_e => 4,
      ThirdButtonDown_e => 5,
      ThirdButtonUp_e => 6,
      FourthButtonDown_e => 7,
      FourthButtonUp_e => 8,
      FifthButtonDown_e => 9,
      FifthButtonUp_e => 10
   );
   type InjectedInputButtonChangeKind_Ptr is access all InjectedInputButtonChangeKind;

   type InjectedInputKeyOptions is (
      None_e,
      ExtendedKey_e,
      KeyUp_e,
      Unicode_e,
      ScanCode_e
   );
   for InjectedInputKeyOptions use (
      None_e => 0,
      ExtendedKey_e => 1,
      KeyUp_e => 2,
      Unicode_e => 4,
      ScanCode_e => 8
   );
   type InjectedInputKeyOptions_Ptr is access all InjectedInputKeyOptions;

   type InjectedInputMouseOptions is (
      None_e,
      Move_e,
      LeftDown_e,
      LeftUp_e,
      RightDown_e,
      RightUp_e,
      MiddleDown_e,
      MiddleUp_e,
      XDown_e,
      XUp_e,
      Wheel_e,
      HWheel_e,
      MoveNoCoalesce_e,
      VirtualDesk_e,
      Absolute_e
   );
   for InjectedInputMouseOptions use (
      None_e => 0,
      Move_e => 1,
      LeftDown_e => 2,
      LeftUp_e => 4,
      RightDown_e => 8,
      RightUp_e => 16,
      MiddleDown_e => 32,
      MiddleUp_e => 64,
      XDown_e => 128,
      XUp_e => 256,
      Wheel_e => 2048,
      HWheel_e => 4096,
      MoveNoCoalesce_e => 8192,
      VirtualDesk_e => 16384,
      Absolute_e => 32768
   );
   type InjectedInputMouseOptions_Ptr is access all InjectedInputMouseOptions;

   type InjectedInputPenButtons is (
      None_e,
      Barrel_e,
      Inverted_e,
      Eraser_e
   );
   for InjectedInputPenButtons use (
      None_e => 0,
      Barrel_e => 1,
      Inverted_e => 2,
      Eraser_e => 4
   );
   type InjectedInputPenButtons_Ptr is access all InjectedInputPenButtons;

   type InjectedInputPenParameters is (
      None_e,
      Pressure_e,
      Rotation_e,
      TiltX_e,
      TiltY_e
   );
   for InjectedInputPenParameters use (
      None_e => 0,
      Pressure_e => 1,
      Rotation_e => 2,
      TiltX_e => 4,
      TiltY_e => 8
   );
   type InjectedInputPenParameters_Ptr is access all InjectedInputPenParameters;

   type InjectedInputPointerOptions is (
      None_e,
      New_e,
      InRange_e,
      InContact_e,
      FirstButton_e,
      SecondButton_e,
      Primary_e,
      Confidence_e,
      Canceled_e,
      PointerDown_e,
      Update_e,
      PointerUp_e,
      CaptureChanged_e
   );
   for InjectedInputPointerOptions use (
      None_e => 0,
      New_e => 1,
      InRange_e => 2,
      InContact_e => 4,
      FirstButton_e => 16,
      SecondButton_e => 32,
      Primary_e => 8192,
      Confidence_e => 16384,
      Canceled_e => 32768,
      PointerDown_e => 65536,
      Update_e => 131072,
      PointerUp_e => 262144,
      CaptureChanged_e => 2097152
   );
   type InjectedInputPointerOptions_Ptr is access all InjectedInputPointerOptions;

   type InjectedInputShortcut is (
      Back_e,
      Start_e,
      Search_e
   );
   for InjectedInputShortcut use (
      Back_e => 0,
      Start_e => 1,
      Search_e => 2
   );
   type InjectedInputShortcut_Ptr is access all InjectedInputShortcut;

   type InjectedInputTouchParameters is (
      None_e,
      Contact_e,
      Orientation_e,
      Pressure_e
   );
   for InjectedInputTouchParameters use (
      None_e => 0,
      Contact_e => 1,
      Orientation_e => 2,
      Pressure_e => 4
   );
   type InjectedInputTouchParameters_Ptr is access all InjectedInputTouchParameters;

   type InjectedInputVisualizationMode is (
      None_e,
      Default_e,
      Indirect_e
   );
   for InjectedInputVisualizationMode use (
      None_e => 0,
      Default_e => 1,
      Indirect_e => 2
   );
   type InjectedInputVisualizationMode_Ptr is access all InjectedInputVisualizationMode;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type InjectedInputPoint is record
      PositionX : WinRt.Int32;
      PositionY : WinRt.Int32;
   end record with Convention => C_Pass_By_Copy;
   type InjectedInputPoint_Ptr is access all InjectedInputPoint;

   type InjectedInputPointerInfo is record
      PointerId : WinRt.UInt32;
      PointerOptions : Windows.UI.Input.Preview.Injection.InjectedInputPointerOptions;
      PixelLocation : Windows.UI.Input.Preview.Injection.InjectedInputPoint;
      TimeOffsetInMilliseconds : WinRt.UInt32;
      PerformanceCount : WinRt.UInt64;
   end record with Convention => C_Pass_By_Copy;
   type InjectedInputPointerInfo_Ptr is access all InjectedInputPointerInfo;

   type InjectedInputRectangle is record
      Left : WinRt.Int32;
      Top : WinRt.Int32;
      Bottom : WinRt.Int32;
      Right : WinRt.Int32;
   end record with Convention => C_Pass_By_Copy;
   type InjectedInputRectangle_Ptr is access all InjectedInputRectangle;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IInjectedInputGamepadInfo is interface and WinRt.IInspectable;

      function get_Buttons
      (
         this : access IInjectedInputGamepadInfo_Interface;
         RetVal : access Windows.Gaming.Input.GamepadButtons
      )
      return WinRt.Hresult is abstract;

      function put_Buttons
      (
         this : access IInjectedInputGamepadInfo_Interface;
         value : Windows.Gaming.Input.GamepadButtons
      )
      return WinRt.Hresult is abstract;

      function get_LeftThumbstickX
      (
         this : access IInjectedInputGamepadInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_LeftThumbstickX
      (
         this : access IInjectedInputGamepadInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_LeftThumbstickY
      (
         this : access IInjectedInputGamepadInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_LeftThumbstickY
      (
         this : access IInjectedInputGamepadInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_LeftTrigger
      (
         this : access IInjectedInputGamepadInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_LeftTrigger
      (
         this : access IInjectedInputGamepadInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_RightThumbstickX
      (
         this : access IInjectedInputGamepadInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_RightThumbstickX
      (
         this : access IInjectedInputGamepadInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_RightThumbstickY
      (
         this : access IInjectedInputGamepadInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_RightThumbstickY
      (
         this : access IInjectedInputGamepadInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_RightTrigger
      (
         this : access IInjectedInputGamepadInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_RightTrigger
      (
         this : access IInjectedInputGamepadInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      IID_IInjectedInputGamepadInfo : aliased WinRt.IID := (548313663, 57105, 17778, (169, 171, 215, 91, 138, 94, 72, 173 ));

   -----------------------------------------------------------------------------
   -- type IInjectedInputGamepadInfoFactory is interface and WinRt.IInspectable;

      function CreateInstance
      (
         this : access IInjectedInputGamepadInfoFactory_Interface;
         reading : Windows.Gaming.Input.GamepadReading;
         RetVal : access Windows.UI.Input.Preview.Injection.IInjectedInputGamepadInfo
      )
      return WinRt.Hresult is abstract;

      IID_IInjectedInputGamepadInfoFactory : aliased WinRt.IID := (1499031670, 27705, 20164, (139, 42, 41, 239, 125, 225, 138, 202 ));

   -----------------------------------------------------------------------------
   -- type IInjectedInputKeyboardInfo is interface and WinRt.IInspectable;

      function get_KeyOptions
      (
         this : access IInjectedInputKeyboardInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputKeyOptions
      )
      return WinRt.Hresult is abstract;

      function put_KeyOptions
      (
         this : access IInjectedInputKeyboardInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputKeyOptions
      )
      return WinRt.Hresult is abstract;

      function get_ScanCode
      (
         this : access IInjectedInputKeyboardInfo_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function put_ScanCode
      (
         this : access IInjectedInputKeyboardInfo_Interface;
         value : WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function get_VirtualKey
      (
         this : access IInjectedInputKeyboardInfo_Interface;
         RetVal : access WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      function put_VirtualKey
      (
         this : access IInjectedInputKeyboardInfo_Interface;
         value : WinRt.UInt16
      )
      return WinRt.Hresult is abstract;

      IID_IInjectedInputKeyboardInfo : aliased WinRt.IID := (1262932288, 11114, 24570, (126, 174, 189, 7, 123, 5, 42, 205 ));

   -----------------------------------------------------------------------------
   -- type IInjectedInputMouseInfo is interface and WinRt.IInspectable;

      function get_MouseOptions
      (
         this : access IInjectedInputMouseInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputMouseOptions
      )
      return WinRt.Hresult is abstract;

      function put_MouseOptions
      (
         this : access IInjectedInputMouseInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputMouseOptions
      )
      return WinRt.Hresult is abstract;

      function get_MouseData
      (
         this : access IInjectedInputMouseInfo_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function put_MouseData
      (
         this : access IInjectedInputMouseInfo_Interface;
         value : WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function get_DeltaY
      (
         this : access IInjectedInputMouseInfo_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_DeltaY
      (
         this : access IInjectedInputMouseInfo_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_DeltaX
      (
         this : access IInjectedInputMouseInfo_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_DeltaX
      (
         this : access IInjectedInputMouseInfo_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_TimeOffsetInMilliseconds
      (
         this : access IInjectedInputMouseInfo_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function put_TimeOffsetInMilliseconds
      (
         this : access IInjectedInputMouseInfo_Interface;
         value : WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IInjectedInputMouseInfo : aliased WinRt.IID := (2532666987, 58490, 23796, (65, 141, 138, 95, 185, 103, 12, 125 ));

   -----------------------------------------------------------------------------
   -- type IInjectedInputPenInfo is interface and WinRt.IInspectable;

      function get_PointerInfo
      (
         this : access IInjectedInputPenInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo
      )
      return WinRt.Hresult is abstract;

      function put_PointerInfo
      (
         this : access IInjectedInputPenInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo
      )
      return WinRt.Hresult is abstract;

      function get_PenButtons
      (
         this : access IInjectedInputPenInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputPenButtons
      )
      return WinRt.Hresult is abstract;

      function put_PenButtons
      (
         this : access IInjectedInputPenInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputPenButtons
      )
      return WinRt.Hresult is abstract;

      function get_PenParameters
      (
         this : access IInjectedInputPenInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputPenParameters
      )
      return WinRt.Hresult is abstract;

      function put_PenParameters
      (
         this : access IInjectedInputPenInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputPenParameters
      )
      return WinRt.Hresult is abstract;

      function get_Pressure
      (
         this : access IInjectedInputPenInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_Pressure
      (
         this : access IInjectedInputPenInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_Rotation
      (
         this : access IInjectedInputPenInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_Rotation
      (
         this : access IInjectedInputPenInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_TiltX
      (
         this : access IInjectedInputPenInfo_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_TiltX
      (
         this : access IInjectedInputPenInfo_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_TiltY
      (
         this : access IInjectedInputPenInfo_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_TiltY
      (
         this : access IInjectedInputPenInfo_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      IID_IInjectedInputPenInfo : aliased WinRt.IID := (1799400707, 51742, 21799, (126, 2, 40, 40, 84, 11, 177, 212 ));

   -----------------------------------------------------------------------------
   -- type IInjectedInputTouchInfo is interface and WinRt.IInspectable;

      function get_Contact
      (
         this : access IInjectedInputTouchInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputRectangle
      )
      return WinRt.Hresult is abstract;

      function put_Contact
      (
         this : access IInjectedInputTouchInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputRectangle
      )
      return WinRt.Hresult is abstract;

      function get_Orientation
      (
         this : access IInjectedInputTouchInfo_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_Orientation
      (
         this : access IInjectedInputTouchInfo_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_PointerInfo
      (
         this : access IInjectedInputTouchInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo
      )
      return WinRt.Hresult is abstract;

      function put_PointerInfo
      (
         this : access IInjectedInputTouchInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo
      )
      return WinRt.Hresult is abstract;

      function get_Pressure
      (
         this : access IInjectedInputTouchInfo_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_Pressure
      (
         this : access IInjectedInputTouchInfo_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_TouchParameters
      (
         this : access IInjectedInputTouchInfo_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.InjectedInputTouchParameters
      )
      return WinRt.Hresult is abstract;

      function put_TouchParameters
      (
         this : access IInjectedInputTouchInfo_Interface;
         value : Windows.UI.Input.Preview.Injection.InjectedInputTouchParameters
      )
      return WinRt.Hresult is abstract;

      IID_IInjectedInputTouchInfo : aliased WinRt.IID := (575656415, 17384, 24309, (81, 10, 105, 202, 140, 155, 76, 40 ));

   -----------------------------------------------------------------------------
   -- type IInputInjector is interface and WinRt.IInspectable;

      function InjectKeyboardInput
      (
         this : access IInputInjector_Interface;
         input : GenericObject
      )
      return WinRt.Hresult is abstract;

      function InjectMouseInput
      (
         this : access IInputInjector_Interface;
         input : GenericObject
      )
      return WinRt.Hresult is abstract;

      function InitializeTouchInjection
      (
         this : access IInputInjector_Interface;
         visualMode : Windows.UI.Input.Preview.Injection.InjectedInputVisualizationMode
      )
      return WinRt.Hresult is abstract;

      function InjectTouchInput
      (
         this : access IInputInjector_Interface;
         input : GenericObject
      )
      return WinRt.Hresult is abstract;

      function UninitializeTouchInjection
      (
         this : access IInputInjector_Interface
      )
      return WinRt.Hresult is abstract;

      function InitializePenInjection
      (
         this : access IInputInjector_Interface;
         visualMode : Windows.UI.Input.Preview.Injection.InjectedInputVisualizationMode
      )
      return WinRt.Hresult is abstract;

      function InjectPenInput
      (
         this : access IInputInjector_Interface;
         input : Windows.UI.Input.Preview.Injection.IInjectedInputPenInfo
      )
      return WinRt.Hresult is abstract;

      function UninitializePenInjection
      (
         this : access IInputInjector_Interface
      )
      return WinRt.Hresult is abstract;

      function InjectShortcut
      (
         this : access IInputInjector_Interface;
         shortcut : Windows.UI.Input.Preview.Injection.InjectedInputShortcut
      )
      return WinRt.Hresult is abstract;

      IID_IInputInjector : aliased WinRt.IID := (2395107204, 2818, 19410, (173, 122, 61, 70, 88, 190, 62, 24 ));

   -----------------------------------------------------------------------------
   -- type IInputInjector2 is interface and WinRt.IInspectable;

      function InitializeGamepadInjection
      (
         this : access IInputInjector2_Interface
      )
      return WinRt.Hresult is abstract;

      function InjectGamepadInput
      (
         this : access IInputInjector2_Interface;
         input : Windows.UI.Input.Preview.Injection.IInjectedInputGamepadInfo
      )
      return WinRt.Hresult is abstract;

      function UninitializeGamepadInjection
      (
         this : access IInputInjector2_Interface
      )
      return WinRt.Hresult is abstract;

      IID_IInputInjector2 : aliased WinRt.IID := (2390397021, 5203, 17319, (155, 203, 6, 214, 215, 179, 5, 247 ));

   -----------------------------------------------------------------------------
   -- type IInputInjectorStatics is interface and WinRt.IInspectable;

      function TryCreate
      (
         this : access IInputInjectorStatics_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.IInputInjector
      )
      return WinRt.Hresult is abstract;

      IID_IInputInjectorStatics : aliased WinRt.IID := (3735972163, 29698, 16705, (165, 198, 12, 1, 170, 87, 177, 106 ));

   -----------------------------------------------------------------------------
   -- type IInputInjectorStatics2 is interface and WinRt.IInspectable;

      function TryCreateForAppBroadcastOnly
      (
         this : access IInputInjectorStatics2_Interface;
         RetVal : access Windows.UI.Input.Preview.Injection.IInputInjector
      )
      return WinRt.Hresult is abstract;

      IID_IInputInjectorStatics2 : aliased WinRt.IID := (2765830395, 56716, 16719, (149, 234, 248, 126, 244, 192, 174, 108 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InjectedInputGamepadInfo

   overriding procedure Initialize (this : in out InjectedInputGamepadInfo);
   overriding procedure Finalize (this : in out InjectedInputGamepadInfo);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InjectedInputGamepadInfo

   function Constructor
   (
      reading : Windows.Gaming.Input.GamepadReading
   )
   return InjectedInputGamepadInfo;

   function Constructor return InjectedInputGamepadInfo;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InjectedInputGamepadInfo

   function get_Buttons
   (
      this : in out InjectedInputGamepadInfo
   )
   return WinRt.Windows.Gaming.Input.GamepadButtons;

   procedure put_Buttons
   (
      this : in out InjectedInputGamepadInfo;
      value : Windows.Gaming.Input.GamepadButtons
   );

   function get_LeftThumbstickX
   (
      this : in out InjectedInputGamepadInfo
   )
   return WinRt.Double;

   procedure put_LeftThumbstickX
   (
      this : in out InjectedInputGamepadInfo;
      value : WinRt.Double
   );

   function get_LeftThumbstickY
   (
      this : in out InjectedInputGamepadInfo
   )
   return WinRt.Double;

   procedure put_LeftThumbstickY
   (
      this : in out InjectedInputGamepadInfo;
      value : WinRt.Double
   );

   function get_LeftTrigger
   (
      this : in out InjectedInputGamepadInfo
   )
   return WinRt.Double;

   procedure put_LeftTrigger
   (
      this : in out InjectedInputGamepadInfo;
      value : WinRt.Double
   );

   function get_RightThumbstickX
   (
      this : in out InjectedInputGamepadInfo
   )
   return WinRt.Double;

   procedure put_RightThumbstickX
   (
      this : in out InjectedInputGamepadInfo;
      value : WinRt.Double
   );

   function get_RightThumbstickY
   (
      this : in out InjectedInputGamepadInfo
   )
   return WinRt.Double;

   procedure put_RightThumbstickY
   (
      this : in out InjectedInputGamepadInfo;
      value : WinRt.Double
   );

   function get_RightTrigger
   (
      this : in out InjectedInputGamepadInfo
   )
   return WinRt.Double;

   procedure put_RightTrigger
   (
      this : in out InjectedInputGamepadInfo;
      value : WinRt.Double
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InjectedInputKeyboardInfo

   overriding procedure Initialize (this : in out InjectedInputKeyboardInfo);
   overriding procedure Finalize (this : in out InjectedInputKeyboardInfo);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InjectedInputKeyboardInfo

   function Constructor return InjectedInputKeyboardInfo;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InjectedInputKeyboardInfo

   function get_KeyOptions
   (
      this : in out InjectedInputKeyboardInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputKeyOptions;

   procedure put_KeyOptions
   (
      this : in out InjectedInputKeyboardInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputKeyOptions
   );

   function get_ScanCode
   (
      this : in out InjectedInputKeyboardInfo
   )
   return WinRt.UInt16;

   procedure put_ScanCode
   (
      this : in out InjectedInputKeyboardInfo;
      value : WinRt.UInt16
   );

   function get_VirtualKey
   (
      this : in out InjectedInputKeyboardInfo
   )
   return WinRt.UInt16;

   procedure put_VirtualKey
   (
      this : in out InjectedInputKeyboardInfo;
      value : WinRt.UInt16
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InjectedInputMouseInfo

   overriding procedure Initialize (this : in out InjectedInputMouseInfo);
   overriding procedure Finalize (this : in out InjectedInputMouseInfo);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InjectedInputMouseInfo

   function Constructor return InjectedInputMouseInfo;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InjectedInputMouseInfo

   function get_MouseOptions
   (
      this : in out InjectedInputMouseInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputMouseOptions;

   procedure put_MouseOptions
   (
      this : in out InjectedInputMouseInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputMouseOptions
   );

   function get_MouseData
   (
      this : in out InjectedInputMouseInfo
   )
   return WinRt.UInt32;

   procedure put_MouseData
   (
      this : in out InjectedInputMouseInfo;
      value : WinRt.UInt32
   );

   function get_DeltaY
   (
      this : in out InjectedInputMouseInfo
   )
   return WinRt.Int32;

   procedure put_DeltaY
   (
      this : in out InjectedInputMouseInfo;
      value : WinRt.Int32
   );

   function get_DeltaX
   (
      this : in out InjectedInputMouseInfo
   )
   return WinRt.Int32;

   procedure put_DeltaX
   (
      this : in out InjectedInputMouseInfo;
      value : WinRt.Int32
   );

   function get_TimeOffsetInMilliseconds
   (
      this : in out InjectedInputMouseInfo
   )
   return WinRt.UInt32;

   procedure put_TimeOffsetInMilliseconds
   (
      this : in out InjectedInputMouseInfo;
      value : WinRt.UInt32
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InjectedInputPenInfo

   overriding procedure Initialize (this : in out InjectedInputPenInfo);
   overriding procedure Finalize (this : in out InjectedInputPenInfo);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InjectedInputPenInfo

   function Constructor return InjectedInputPenInfo;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InjectedInputPenInfo

   function get_PointerInfo
   (
      this : in out InjectedInputPenInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo;

   procedure put_PointerInfo
   (
      this : in out InjectedInputPenInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo
   );

   function get_PenButtons
   (
      this : in out InjectedInputPenInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputPenButtons;

   procedure put_PenButtons
   (
      this : in out InjectedInputPenInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputPenButtons
   );

   function get_PenParameters
   (
      this : in out InjectedInputPenInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputPenParameters;

   procedure put_PenParameters
   (
      this : in out InjectedInputPenInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputPenParameters
   );

   function get_Pressure
   (
      this : in out InjectedInputPenInfo
   )
   return WinRt.Double;

   procedure put_Pressure
   (
      this : in out InjectedInputPenInfo;
      value : WinRt.Double
   );

   function get_Rotation
   (
      this : in out InjectedInputPenInfo
   )
   return WinRt.Double;

   procedure put_Rotation
   (
      this : in out InjectedInputPenInfo;
      value : WinRt.Double
   );

   function get_TiltX
   (
      this : in out InjectedInputPenInfo
   )
   return WinRt.Int32;

   procedure put_TiltX
   (
      this : in out InjectedInputPenInfo;
      value : WinRt.Int32
   );

   function get_TiltY
   (
      this : in out InjectedInputPenInfo
   )
   return WinRt.Int32;

   procedure put_TiltY
   (
      this : in out InjectedInputPenInfo;
      value : WinRt.Int32
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InjectedInputTouchInfo

   overriding procedure Initialize (this : in out InjectedInputTouchInfo);
   overriding procedure Finalize (this : in out InjectedInputTouchInfo);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InjectedInputTouchInfo

   function Constructor return InjectedInputTouchInfo;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InjectedInputTouchInfo

   function get_Contact
   (
      this : in out InjectedInputTouchInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputRectangle;

   procedure put_Contact
   (
      this : in out InjectedInputTouchInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputRectangle
   );

   function get_Orientation
   (
      this : in out InjectedInputTouchInfo
   )
   return WinRt.Int32;

   procedure put_Orientation
   (
      this : in out InjectedInputTouchInfo;
      value : WinRt.Int32
   );

   function get_PointerInfo
   (
      this : in out InjectedInputTouchInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo;

   procedure put_PointerInfo
   (
      this : in out InjectedInputTouchInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputPointerInfo
   );

   function get_Pressure
   (
      this : in out InjectedInputTouchInfo
   )
   return WinRt.Double;

   procedure put_Pressure
   (
      this : in out InjectedInputTouchInfo;
      value : WinRt.Double
   );

   function get_TouchParameters
   (
      this : in out InjectedInputTouchInfo
   )
   return WinRt.Windows.UI.Input.Preview.Injection.InjectedInputTouchParameters;

   procedure put_TouchParameters
   (
      this : in out InjectedInputTouchInfo;
      value : Windows.UI.Input.Preview.Injection.InjectedInputTouchParameters
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InputInjector

   overriding procedure Initialize (this : in out InputInjector);
   overriding procedure Finalize (this : in out InputInjector);

   -----------------------------------------------------------------------------
   -- Static Interfaces for InputInjector

   function TryCreate
   return WinRt.Windows.UI.Input.Preview.Injection.InputInjector;

   function TryCreateForAppBroadcastOnly
   return WinRt.Windows.UI.Input.Preview.Injection.InputInjector;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InputInjector

   procedure InjectKeyboardInput
   (
      this : in out InputInjector;
      input : GenericObject
   );

   procedure InjectMouseInput
   (
      this : in out InputInjector;
      input : GenericObject
   );

   procedure InitializeTouchInjection
   (
      this : in out InputInjector;
      visualMode : Windows.UI.Input.Preview.Injection.InjectedInputVisualizationMode
   );

   procedure InjectTouchInput
   (
      this : in out InputInjector;
      input : GenericObject
   );

   procedure UninitializeTouchInjection
   (
      this : in out InputInjector
   );

   procedure InitializePenInjection
   (
      this : in out InputInjector;
      visualMode : Windows.UI.Input.Preview.Injection.InjectedInputVisualizationMode
   );

   procedure InjectPenInput
   (
      this : in out InputInjector;
      input : Windows.UI.Input.Preview.Injection.InjectedInputPenInfo'Class
   );

   procedure UninitializePenInjection
   (
      this : in out InputInjector
   );

   procedure InjectShortcut
   (
      this : in out InputInjector;
      shortcut : Windows.UI.Input.Preview.Injection.InjectedInputShortcut
   );

   procedure InitializeGamepadInjection
   (
      this : in out InputInjector
   );

   procedure InjectGamepadInput
   (
      this : in out InputInjector;
      input : Windows.UI.Input.Preview.Injection.InjectedInputGamepadInfo'Class
   );

   procedure UninitializeGamepadInjection
   (
      this : in out InputInjector
   );

end;

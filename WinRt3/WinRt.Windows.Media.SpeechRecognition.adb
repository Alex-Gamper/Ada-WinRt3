--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Globalization;
with WinRt.Windows.Storage;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.SpeechRecognition is

   package IAsyncOperation_SpeechRecognitionCompilationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionCompilationResult);
   package AsyncOperationCompletedHandler_SpeechRecognitionCompilationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionCompilationResult);

   package IAsyncOperation_SpeechRecognitionResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult);
   package AsyncOperationCompletedHandler_SpeechRecognitionResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechContinuousRecognitionCompletedEventArgs

   procedure Initialize (this : in out SpeechContinuousRecognitionCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechContinuousRecognitionCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechContinuousRecognitionCompletedEventArgs, ISpeechContinuousRecognitionCompletedEventArgs_Ptr);
   begin
      if this.m_ISpeechContinuousRecognitionCompletedEventArgs /= null then
         if this.m_ISpeechContinuousRecognitionCompletedEventArgs.all /= null then
            RefCount := this.m_ISpeechContinuousRecognitionCompletedEventArgs.all.Release;
            Free (this.m_ISpeechContinuousRecognitionCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechContinuousRecognitionCompletedEventArgs

   function get_Status
   (
      this : in out SpeechContinuousRecognitionCompletedEventArgs
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus;
   begin
      Hr := this.m_ISpeechContinuousRecognitionCompletedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechContinuousRecognitionResultGeneratedEventArgs

   procedure Initialize (this : in out SpeechContinuousRecognitionResultGeneratedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechContinuousRecognitionResultGeneratedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechContinuousRecognitionResultGeneratedEventArgs, ISpeechContinuousRecognitionResultGeneratedEventArgs_Ptr);
   begin
      if this.m_ISpeechContinuousRecognitionResultGeneratedEventArgs /= null then
         if this.m_ISpeechContinuousRecognitionResultGeneratedEventArgs.all /= null then
            RefCount := this.m_ISpeechContinuousRecognitionResultGeneratedEventArgs.all.Release;
            Free (this.m_ISpeechContinuousRecognitionResultGeneratedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechContinuousRecognitionResultGeneratedEventArgs

   function get_Result
   (
      this : in out SpeechContinuousRecognitionResultGeneratedEventArgs
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult do
         Hr := this.m_ISpeechContinuousRecognitionResultGeneratedEventArgs.all.get_Result (m_ComRetVal'Access);
         Retval.m_ISpeechRecognitionResult := new Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
         Retval.m_ISpeechRecognitionResult.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechContinuousRecognitionSession

   procedure Initialize (this : in out SpeechContinuousRecognitionSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechContinuousRecognitionSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechContinuousRecognitionSession, ISpeechContinuousRecognitionSession_Ptr);
   begin
      if this.m_ISpeechContinuousRecognitionSession /= null then
         if this.m_ISpeechContinuousRecognitionSession.all /= null then
            RefCount := this.m_ISpeechContinuousRecognitionSession.all.Release;
            Free (this.m_ISpeechContinuousRecognitionSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechContinuousRecognitionSession

   function get_AutoStopSilenceTimeout
   (
      this : in out SpeechContinuousRecognitionSession
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.get_AutoStopSilenceTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoStopSilenceTimeout
   (
      this : in out SpeechContinuousRecognitionSession;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.put_AutoStopSilenceTimeout (value);
   end;

   procedure StartAsync
   (
      this : in out SpeechContinuousRecognitionSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartAsync
   (
      this : in out SpeechContinuousRecognitionSession;
      mode : Windows.Media.SpeechRecognition.SpeechContinuousRecognitionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.StartAsync (mode, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StopAsync
   (
      this : in out SpeechContinuousRecognitionSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure CancelAsync
   (
      this : in out SpeechContinuousRecognitionSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.CancelAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure PauseAsync
   (
      this : in out SpeechContinuousRecognitionSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.PauseAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Resume
   (
      this : in out SpeechContinuousRecognitionSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.Resume;
   end;

   function add_Completed
   (
      this : in out SpeechContinuousRecognitionSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.add_Completed (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out SpeechContinuousRecognitionSession;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.remove_Completed (value);
   end;

   function add_ResultGenerated
   (
      this : in out SpeechContinuousRecognitionSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.add_ResultGenerated (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ResultGenerated
   (
      this : in out SpeechContinuousRecognitionSession;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechContinuousRecognitionSession.all.remove_ResultGenerated (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionCompilationResult

   procedure Initialize (this : in out SpeechRecognitionCompilationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionCompilationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionCompilationResult, ISpeechRecognitionCompilationResult_Ptr);
   begin
      if this.m_ISpeechRecognitionCompilationResult /= null then
         if this.m_ISpeechRecognitionCompilationResult.all /= null then
            RefCount := this.m_ISpeechRecognitionCompilationResult.all.Release;
            Free (this.m_ISpeechRecognitionCompilationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionCompilationResult

   function get_Status
   (
      this : in out SpeechRecognitionCompilationResult
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus;
   begin
      Hr := this.m_ISpeechRecognitionCompilationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionGrammarFileConstraint

   procedure Initialize (this : in out SpeechRecognitionGrammarFileConstraint) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionGrammarFileConstraint) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionGrammarFileConstraint, ISpeechRecognitionGrammarFileConstraint_Ptr);
   begin
      if this.m_ISpeechRecognitionGrammarFileConstraint /= null then
         if this.m_ISpeechRecognitionGrammarFileConstraint.all /= null then
            RefCount := this.m_ISpeechRecognitionGrammarFileConstraint.all.Release;
            Free (this.m_ISpeechRecognitionGrammarFileConstraint);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpeechRecognitionGrammarFileConstraint

   function Constructor
   (
      file : Windows.Storage.StorageFile'Class
   )
   return SpeechRecognitionGrammarFileConstraint is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognitionGrammarFileConstraint");
      m_Factory    : access ISpeechRecognitionGrammarFileConstraintFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint;
   begin
      return RetVal : SpeechRecognitionGrammarFileConstraint do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognitionGrammarFileConstraintFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (file.m_IStorageFile.all, m_ComRetVal'Access);
            Retval.m_ISpeechRecognitionGrammarFileConstraint := new Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint;
            Retval.m_ISpeechRecognitionGrammarFileConstraint.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      file : Windows.Storage.StorageFile'Class;
      tag : WinRt.WString
   )
   return SpeechRecognitionGrammarFileConstraint is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognitionGrammarFileConstraint");
      m_Factory    : access ISpeechRecognitionGrammarFileConstraintFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint;
      HStr_tag : WinRt.HString := To_HString (tag);
   begin
      return RetVal : SpeechRecognitionGrammarFileConstraint do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognitionGrammarFileConstraintFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithTag (file.m_IStorageFile.all, HStr_tag, m_ComRetVal'Access);
            Retval.m_ISpeechRecognitionGrammarFileConstraint := new Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint;
            Retval.m_ISpeechRecognitionGrammarFileConstraint.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_tag);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionGrammarFileConstraint

   function get_GrammarFile
   (
      this : in out SpeechRecognitionGrammarFileConstraint
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_ISpeechRecognitionGrammarFileConstraint.all.get_GrammarFile (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function get_IsEnabled
   (
      this : in out SpeechRecognitionGrammarFileConstraint
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionGrammarFileConstraint.all);
      Hr := m_Interface.get_IsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out SpeechRecognitionGrammarFileConstraint;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionGrammarFileConstraint.all);
      Hr := m_Interface.put_IsEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Tag
   (
      this : in out SpeechRecognitionGrammarFileConstraint
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionGrammarFileConstraint.all);
      Hr := m_Interface.get_Tag (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Tag
   (
      this : in out SpeechRecognitionGrammarFileConstraint;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionGrammarFileConstraint.all);
      Hr := m_Interface.put_Tag (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Type
   (
      this : in out SpeechRecognitionGrammarFileConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionGrammarFileConstraint.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Probability
   (
      this : in out SpeechRecognitionGrammarFileConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionGrammarFileConstraint.all);
      Hr := m_Interface.get_Probability (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Probability
   (
      this : in out SpeechRecognitionGrammarFileConstraint;
      value : Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionGrammarFileConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionGrammarFileConstraint.all);
      Hr := m_Interface.put_Probability (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionHypothesis

   procedure Initialize (this : in out SpeechRecognitionHypothesis) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionHypothesis) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionHypothesis, ISpeechRecognitionHypothesis_Ptr);
   begin
      if this.m_ISpeechRecognitionHypothesis /= null then
         if this.m_ISpeechRecognitionHypothesis.all /= null then
            RefCount := this.m_ISpeechRecognitionHypothesis.all.Release;
            Free (this.m_ISpeechRecognitionHypothesis);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionHypothesis

   function get_Text
   (
      this : in out SpeechRecognitionHypothesis
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeechRecognitionHypothesis.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionHypothesisGeneratedEventArgs

   procedure Initialize (this : in out SpeechRecognitionHypothesisGeneratedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionHypothesisGeneratedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionHypothesisGeneratedEventArgs, ISpeechRecognitionHypothesisGeneratedEventArgs_Ptr);
   begin
      if this.m_ISpeechRecognitionHypothesisGeneratedEventArgs /= null then
         if this.m_ISpeechRecognitionHypothesisGeneratedEventArgs.all /= null then
            RefCount := this.m_ISpeechRecognitionHypothesisGeneratedEventArgs.all.Release;
            Free (this.m_ISpeechRecognitionHypothesisGeneratedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionHypothesisGeneratedEventArgs

   function get_Hypothesis
   (
      this : in out SpeechRecognitionHypothesisGeneratedEventArgs
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionHypothesis'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionHypothesis;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionHypothesis do
         Hr := this.m_ISpeechRecognitionHypothesisGeneratedEventArgs.all.get_Hypothesis (m_ComRetVal'Access);
         Retval.m_ISpeechRecognitionHypothesis := new Windows.Media.SpeechRecognition.ISpeechRecognitionHypothesis;
         Retval.m_ISpeechRecognitionHypothesis.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionListConstraint

   procedure Initialize (this : in out SpeechRecognitionListConstraint) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionListConstraint) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionListConstraint, ISpeechRecognitionListConstraint_Ptr);
   begin
      if this.m_ISpeechRecognitionListConstraint /= null then
         if this.m_ISpeechRecognitionListConstraint.all /= null then
            RefCount := this.m_ISpeechRecognitionListConstraint.all.Release;
            Free (this.m_ISpeechRecognitionListConstraint);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpeechRecognitionListConstraint

   function Constructor
   (
      commands : GenericObject
   )
   return SpeechRecognitionListConstraint is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognitionListConstraint");
      m_Factory    : access ISpeechRecognitionListConstraintFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint;
   begin
      return RetVal : SpeechRecognitionListConstraint do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognitionListConstraintFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (commands, m_ComRetVal'Access);
            Retval.m_ISpeechRecognitionListConstraint := new Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint;
            Retval.m_ISpeechRecognitionListConstraint.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      commands : GenericObject;
      tag : WinRt.WString
   )
   return SpeechRecognitionListConstraint is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognitionListConstraint");
      m_Factory    : access ISpeechRecognitionListConstraintFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint;
      HStr_tag : WinRt.HString := To_HString (tag);
   begin
      return RetVal : SpeechRecognitionListConstraint do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognitionListConstraintFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithTag (commands, HStr_tag, m_ComRetVal'Access);
            Retval.m_ISpeechRecognitionListConstraint := new Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint;
            Retval.m_ISpeechRecognitionListConstraint.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_tag);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionListConstraint

   function get_Commands
   (
      this : in out SpeechRecognitionListConstraint
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ISpeechRecognitionListConstraint.all.get_Commands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsEnabled
   (
      this : in out SpeechRecognitionListConstraint
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionListConstraint.all);
      Hr := m_Interface.get_IsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out SpeechRecognitionListConstraint;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionListConstraint.all);
      Hr := m_Interface.put_IsEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Tag
   (
      this : in out SpeechRecognitionListConstraint
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionListConstraint.all);
      Hr := m_Interface.get_Tag (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Tag
   (
      this : in out SpeechRecognitionListConstraint;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionListConstraint.all);
      Hr := m_Interface.put_Tag (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Type
   (
      this : in out SpeechRecognitionListConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionListConstraint.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Probability
   (
      this : in out SpeechRecognitionListConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionListConstraint.all);
      Hr := m_Interface.get_Probability (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Probability
   (
      this : in out SpeechRecognitionListConstraint;
      value : Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionListConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionListConstraint.all);
      Hr := m_Interface.put_Probability (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionQualityDegradingEventArgs

   procedure Initialize (this : in out SpeechRecognitionQualityDegradingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionQualityDegradingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionQualityDegradingEventArgs, ISpeechRecognitionQualityDegradingEventArgs_Ptr);
   begin
      if this.m_ISpeechRecognitionQualityDegradingEventArgs /= null then
         if this.m_ISpeechRecognitionQualityDegradingEventArgs.all /= null then
            RefCount := this.m_ISpeechRecognitionQualityDegradingEventArgs.all.Release;
            Free (this.m_ISpeechRecognitionQualityDegradingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionQualityDegradingEventArgs

   function get_Problem
   (
      this : in out SpeechRecognitionQualityDegradingEventArgs
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionAudioProblem is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionAudioProblem;
   begin
      Hr := this.m_ISpeechRecognitionQualityDegradingEventArgs.all.get_Problem (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionResult

   procedure Initialize (this : in out SpeechRecognitionResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionResult, ISpeechRecognitionResult_Ptr);
   begin
      if this.m_ISpeechRecognitionResult /= null then
         if this.m_ISpeechRecognitionResult.all /= null then
            RefCount := this.m_ISpeechRecognitionResult.all.Release;
            Free (this.m_ISpeechRecognitionResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionResult

   function get_Status
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus;
   begin
      Hr := this.m_ISpeechRecognitionResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeechRecognitionResult.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Confidence
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConfidence is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConfidence;
   begin
      Hr := this.m_ISpeechRecognitionResult.all.get_Confidence (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SemanticInterpretation
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionSemanticInterpretation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionSemanticInterpretation;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionSemanticInterpretation do
         Hr := this.m_ISpeechRecognitionResult.all.get_SemanticInterpretation (m_ComRetVal'Access);
         Retval.m_ISpeechRecognitionSemanticInterpretation := new Windows.Media.SpeechRecognition.ISpeechRecognitionSemanticInterpretation;
         Retval.m_ISpeechRecognitionSemanticInterpretation.all := m_ComRetVal;
      end return;
   end;

   function GetAlternates
   (
      this : in out SpeechRecognitionResult;
      maxAlternates : WinRt.UInt32
   )
   return IVectorView_ISpeechRecognitionResult.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ISpeechRecognitionResult.Kind;
   begin
      Hr := this.m_ISpeechRecognitionResult.all.GetAlternates (maxAlternates, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ISpeechRecognitionResult (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Constraint
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint;
   begin
      Hr := this.m_ISpeechRecognitionResult.all.get_Constraint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RulePath
   (
      this : in out SpeechRecognitionResult
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ISpeechRecognitionResult.all.get_RulePath (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RawConfidence
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISpeechRecognitionResult.all.get_RawConfidence (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhraseStartTime
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult2, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionResult.all);
      Hr := m_Interface.get_PhraseStartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PhraseDuration
   (
      this : in out SpeechRecognitionResult
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult2, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionResult.all);
      Hr := m_Interface.get_PhraseDuration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionSemanticInterpretation

   procedure Initialize (this : in out SpeechRecognitionSemanticInterpretation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionSemanticInterpretation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionSemanticInterpretation, ISpeechRecognitionSemanticInterpretation_Ptr);
   begin
      if this.m_ISpeechRecognitionSemanticInterpretation /= null then
         if this.m_ISpeechRecognitionSemanticInterpretation.all /= null then
            RefCount := this.m_ISpeechRecognitionSemanticInterpretation.all.Release;
            Free (this.m_ISpeechRecognitionSemanticInterpretation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionSemanticInterpretation

   function get_Properties
   (
      this : in out SpeechRecognitionSemanticInterpretation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ISpeechRecognitionSemanticInterpretation.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionTopicConstraint

   procedure Initialize (this : in out SpeechRecognitionTopicConstraint) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionTopicConstraint) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionTopicConstraint, ISpeechRecognitionTopicConstraint_Ptr);
   begin
      if this.m_ISpeechRecognitionTopicConstraint /= null then
         if this.m_ISpeechRecognitionTopicConstraint.all /= null then
            RefCount := this.m_ISpeechRecognitionTopicConstraint.all.Release;
            Free (this.m_ISpeechRecognitionTopicConstraint);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpeechRecognitionTopicConstraint

   function Constructor
   (
      scenario : Windows.Media.SpeechRecognition.SpeechRecognitionScenario;
      topicHint : WinRt.WString
   )
   return SpeechRecognitionTopicConstraint is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognitionTopicConstraint");
      m_Factory    : access ISpeechRecognitionTopicConstraintFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint;
      HStr_topicHint : WinRt.HString := To_HString (topicHint);
   begin
      return RetVal : SpeechRecognitionTopicConstraint do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognitionTopicConstraintFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (scenario, HStr_topicHint, m_ComRetVal'Access);
            Retval.m_ISpeechRecognitionTopicConstraint := new Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint;
            Retval.m_ISpeechRecognitionTopicConstraint.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_topicHint);
      end return;
   end;

   function Constructor
   (
      scenario : Windows.Media.SpeechRecognition.SpeechRecognitionScenario;
      topicHint : WinRt.WString;
      tag : WinRt.WString
   )
   return SpeechRecognitionTopicConstraint is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognitionTopicConstraint");
      m_Factory    : access ISpeechRecognitionTopicConstraintFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint;
      HStr_topicHint : WinRt.HString := To_HString (topicHint);
      HStr_tag : WinRt.HString := To_HString (tag);
   begin
      return RetVal : SpeechRecognitionTopicConstraint do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognitionTopicConstraintFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithTag (scenario, HStr_topicHint, HStr_tag, m_ComRetVal'Access);
            Retval.m_ISpeechRecognitionTopicConstraint := new Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint;
            Retval.m_ISpeechRecognitionTopicConstraint.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_topicHint);
         Hr := WindowsDeleteString (HStr_tag);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionTopicConstraint

   function get_Scenario
   (
      this : in out SpeechRecognitionTopicConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionScenario is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionScenario;
   begin
      Hr := this.m_ISpeechRecognitionTopicConstraint.all.get_Scenario (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TopicHint
   (
      this : in out SpeechRecognitionTopicConstraint
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeechRecognitionTopicConstraint.all.get_TopicHint (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsEnabled
   (
      this : in out SpeechRecognitionTopicConstraint
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionTopicConstraint.all);
      Hr := m_Interface.get_IsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out SpeechRecognitionTopicConstraint;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionTopicConstraint.all);
      Hr := m_Interface.put_IsEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Tag
   (
      this : in out SpeechRecognitionTopicConstraint
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionTopicConstraint.all);
      Hr := m_Interface.get_Tag (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Tag
   (
      this : in out SpeechRecognitionTopicConstraint;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionTopicConstraint.all);
      Hr := m_Interface.put_Tag (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Type
   (
      this : in out SpeechRecognitionTopicConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionTopicConstraint.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Probability
   (
      this : in out SpeechRecognitionTopicConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionTopicConstraint.all);
      Hr := m_Interface.get_Probability (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Probability
   (
      this : in out SpeechRecognitionTopicConstraint;
      value : Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionTopicConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionTopicConstraint.all);
      Hr := m_Interface.put_Probability (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognitionVoiceCommandDefinitionConstraint

   procedure Initialize (this : in out SpeechRecognitionVoiceCommandDefinitionConstraint) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognitionVoiceCommandDefinitionConstraint) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognitionVoiceCommandDefinitionConstraint, ISpeechRecognitionVoiceCommandDefinitionConstraint_Ptr);
   begin
      if this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint /= null then
         if this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all /= null then
            RefCount := this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all.Release;
            Free (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognitionVoiceCommandDefinitionConstraint

   function get_IsEnabled
   (
      this : in out SpeechRecognitionVoiceCommandDefinitionConstraint
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionVoiceCommandDefinitionConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all);
      Hr := m_Interface.get_IsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out SpeechRecognitionVoiceCommandDefinitionConstraint;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionVoiceCommandDefinitionConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all);
      Hr := m_Interface.put_IsEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Tag
   (
      this : in out SpeechRecognitionVoiceCommandDefinitionConstraint
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionVoiceCommandDefinitionConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all);
      Hr := m_Interface.get_Tag (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Tag
   (
      this : in out SpeechRecognitionVoiceCommandDefinitionConstraint;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionVoiceCommandDefinitionConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all);
      Hr := m_Interface.put_Tag (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Type
   (
      this : in out SpeechRecognitionVoiceCommandDefinitionConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionVoiceCommandDefinitionConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Probability
   (
      this : in out SpeechRecognitionVoiceCommandDefinitionConstraint
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionVoiceCommandDefinitionConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all);
      Hr := m_Interface.get_Probability (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Probability
   (
      this : in out SpeechRecognitionVoiceCommandDefinitionConstraint;
      value : Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionVoiceCommandDefinitionConstraint_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionConstraint, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognitionConstraint'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognitionVoiceCommandDefinitionConstraint.all);
      Hr := m_Interface.put_Probability (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognizer

   procedure Initialize (this : in out SpeechRecognizer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognizer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognizer, ISpeechRecognizer_Ptr);
   begin
      if this.m_ISpeechRecognizer /= null then
         if this.m_ISpeechRecognizer.all /= null then
            RefCount := this.m_ISpeechRecognizer.all.Release;
            Free (this.m_ISpeechRecognizer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpeechRecognizer

   function Constructor return SpeechRecognizer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognizer");
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognizer;
   begin
      return RetVal : SpeechRecognizer do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISpeechRecognizer := new Windows.Media.SpeechRecognition.ISpeechRecognizer;
            Retval.m_ISpeechRecognizer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      language : Windows.Globalization.Language'Class
   )
   return SpeechRecognizer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognizer");
      m_Factory    : access ISpeechRecognizerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.SpeechRecognition.ISpeechRecognizer;
   begin
      return RetVal : SpeechRecognizer do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognizerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (language.m_ILanguage.all, m_ComRetVal'Access);
            Retval.m_ISpeechRecognizer := new Windows.Media.SpeechRecognition.ISpeechRecognizer;
            Retval.m_ISpeechRecognizer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpeechRecognizer

   function get_SystemSpeechLanguage
   return WinRt.Windows.Globalization.Language is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognizer");
      m_Factory        : access WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognizerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SystemSpeechLanguage (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILanguage := new Windows.Globalization.ILanguage;
            Retval.m_ILanguage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SupportedTopicLanguages
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognizer");
      m_Factory        : access WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognizerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SupportedTopicLanguages (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SupportedGrammarLanguages
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognizer");
      m_Factory        : access WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognizerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SupportedGrammarLanguages (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function TrySetSystemSpeechLanguageAsync
   (
      speechLanguage : Windows.Globalization.Language'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.SpeechRecognizer");
      m_Factory        : access WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISpeechRecognizerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TrySetSystemSpeechLanguageAsync (speechLanguage.m_ILanguage.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognizer

   function get_CurrentLanguage
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Globalization.Language'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         Hr := this.m_ISpeechRecognizer.all.get_CurrentLanguage (m_ComRetVal'Access);
         Retval.m_ILanguage := new Windows.Globalization.ILanguage;
         Retval.m_ILanguage.all := m_ComRetVal;
      end return;
   end;

   function get_Constraints
   (
      this : in out SpeechRecognizer
   )
   return IVector_ISpeechRecognitionConstraint.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ISpeechRecognitionConstraint.Kind;
   begin
      Hr := this.m_ISpeechRecognizer.all.get_Constraints (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_ISpeechRecognitionConstraint (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Timeouts
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognizerTimeouts'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognizerTimeouts;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognizerTimeouts do
         Hr := this.m_ISpeechRecognizer.all.get_Timeouts (m_ComRetVal'Access);
         Retval.m_ISpeechRecognizerTimeouts := new Windows.Media.SpeechRecognition.ISpeechRecognizerTimeouts;
         Retval.m_ISpeechRecognizerTimeouts.all := m_ComRetVal;
      end return;
   end;

   function get_UIOptions
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognizerUIOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognizerUIOptions;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognizerUIOptions do
         Hr := this.m_ISpeechRecognizer.all.get_UIOptions (m_ComRetVal'Access);
         Retval.m_ISpeechRecognizerUIOptions := new Windows.Media.SpeechRecognition.ISpeechRecognizerUIOptions;
         Retval.m_ISpeechRecognizerUIOptions.all := m_ComRetVal;
      end return;
   end;

   function CompileConstraintsAsync
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpeechRecognitionCompilationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpeechRecognitionCompilationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionCompilationResult;
      m_IID            : aliased WinRt.IID := (2744263834, 57994, 22090, (158, 115, 29, 218, 99, 202, 100, 60 )); -- Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult;
      m_HandlerIID     : aliased WinRt.IID := (2026396093, 5332, 23616, (171, 255, 73, 6, 22, 213, 233, 45 ));
      m_Handler        : AsyncOperationCompletedHandler_SpeechRecognitionCompilationResult.Kind := new AsyncOperationCompletedHandler_SpeechRecognitionCompilationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpeechRecognitionCompilationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpeechRecognitionCompilationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpeechRecognitionCompilationResult.Kind_Delegate, AsyncOperationCompletedHandler_SpeechRecognitionCompilationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult do
         Hr := this.m_ISpeechRecognizer.all.CompileConstraintsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpeechRecognitionCompilationResult := new Windows.Media.SpeechRecognition.ISpeechRecognitionCompilationResult;
                  Retval.m_ISpeechRecognitionCompilationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RecognizeAsync
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpeechRecognitionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpeechRecognitionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
      m_IID            : aliased WinRt.IID := (3124685800, 36220, 20978, (158, 212, 235, 175, 227, 103, 77, 180 )); -- Windows.Media.SpeechRecognition.SpeechRecognitionResult;
      m_HandlerIID     : aliased WinRt.IID := (3256441981, 56514, 23661, (145, 98, 200, 223, 102, 82, 135, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind := new AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpeechRecognitionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind_Delegate, AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult do
         Hr := this.m_ISpeechRecognizer.all.RecognizeAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpeechRecognitionResult := new Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
                  Retval.m_ISpeechRecognitionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RecognizeWithUIAsync
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpeechRecognitionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpeechRecognitionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
      m_IID            : aliased WinRt.IID := (3124685800, 36220, 20978, (158, 212, 235, 175, 227, 103, 77, 180 )); -- Windows.Media.SpeechRecognition.SpeechRecognitionResult;
      m_HandlerIID     : aliased WinRt.IID := (3256441981, 56514, 23661, (145, 98, 200, 223, 102, 82, 135, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind := new AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpeechRecognitionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind_Delegate, AsyncOperationCompletedHandler_SpeechRecognitionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult do
         Hr := this.m_ISpeechRecognizer.all.RecognizeWithUIAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpeechRecognitionResult := new Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
                  Retval.m_ISpeechRecognitionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_RecognitionQualityDegrading
   (
      this : in out SpeechRecognizer;
      speechRecognitionQualityDegradingHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpeechRecognizer.all.add_RecognitionQualityDegrading (speechRecognitionQualityDegradingHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RecognitionQualityDegrading
   (
      this : in out SpeechRecognizer;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechRecognizer.all.remove_RecognitionQualityDegrading (cookie);
   end;

   function add_StateChanged
   (
      this : in out SpeechRecognizer;
      stateChangedHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpeechRecognizer.all.add_StateChanged (stateChangedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out SpeechRecognizer;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechRecognizer.all.remove_StateChanged (cookie);
   end;

   procedure Close
   (
      this : in out SpeechRecognizer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognizer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_ContinuousRecognitionSession
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechContinuousRecognitionSession;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognizer2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession do
         m_Interface := QInterface (this.m_ISpeechRecognizer.all);
         Hr := m_Interface.get_ContinuousRecognitionSession (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpeechContinuousRecognitionSession := new Windows.Media.SpeechRecognition.ISpeechContinuousRecognitionSession;
         Retval.m_ISpeechContinuousRecognitionSession.all := m_ComRetVal;
      end return;
   end;

   function get_State
   (
      this : in out SpeechRecognizer
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognizerState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognizerState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognizer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognizer.all);
      Hr := m_Interface.get_State (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure StopRecognitionAsync
   (
      this : in out SpeechRecognizer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognizer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognizer.all);
      Hr := m_Interface.StopRecognitionAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_HypothesisGenerated
   (
      this : in out SpeechRecognizer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognizer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognizer.all);
      Hr := m_Interface.add_HypothesisGenerated (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_HypothesisGenerated
   (
      this : in out SpeechRecognizer;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer_Interface, WinRt.Windows.Media.SpeechRecognition.ISpeechRecognizer2, WinRt.Windows.Media.SpeechRecognition.IID_ISpeechRecognizer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechRecognizer.all);
      Hr := m_Interface.remove_HypothesisGenerated (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognizerStateChangedEventArgs

   procedure Initialize (this : in out SpeechRecognizerStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognizerStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognizerStateChangedEventArgs, ISpeechRecognizerStateChangedEventArgs_Ptr);
   begin
      if this.m_ISpeechRecognizerStateChangedEventArgs /= null then
         if this.m_ISpeechRecognizerStateChangedEventArgs.all /= null then
            RefCount := this.m_ISpeechRecognizerStateChangedEventArgs.all.Release;
            Free (this.m_ISpeechRecognizerStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognizerStateChangedEventArgs

   function get_State
   (
      this : in out SpeechRecognizerStateChangedEventArgs
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognizerState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.SpeechRecognizerState;
   begin
      Hr := this.m_ISpeechRecognizerStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognizerTimeouts

   procedure Initialize (this : in out SpeechRecognizerTimeouts) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognizerTimeouts) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognizerTimeouts, ISpeechRecognizerTimeouts_Ptr);
   begin
      if this.m_ISpeechRecognizerTimeouts /= null then
         if this.m_ISpeechRecognizerTimeouts.all /= null then
            RefCount := this.m_ISpeechRecognizerTimeouts.all.Release;
            Free (this.m_ISpeechRecognizerTimeouts);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognizerTimeouts

   function get_InitialSilenceTimeout
   (
      this : in out SpeechRecognizerTimeouts
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISpeechRecognizerTimeouts.all.get_InitialSilenceTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InitialSilenceTimeout
   (
      this : in out SpeechRecognizerTimeouts;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechRecognizerTimeouts.all.put_InitialSilenceTimeout (value);
   end;

   function get_EndSilenceTimeout
   (
      this : in out SpeechRecognizerTimeouts
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISpeechRecognizerTimeouts.all.get_EndSilenceTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EndSilenceTimeout
   (
      this : in out SpeechRecognizerTimeouts;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechRecognizerTimeouts.all.put_EndSilenceTimeout (value);
   end;

   function get_BabbleTimeout
   (
      this : in out SpeechRecognizerTimeouts
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISpeechRecognizerTimeouts.all.get_BabbleTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BabbleTimeout
   (
      this : in out SpeechRecognizerTimeouts;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechRecognizerTimeouts.all.put_BabbleTimeout (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechRecognizerUIOptions

   procedure Initialize (this : in out SpeechRecognizerUIOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechRecognizerUIOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechRecognizerUIOptions, ISpeechRecognizerUIOptions_Ptr);
   begin
      if this.m_ISpeechRecognizerUIOptions /= null then
         if this.m_ISpeechRecognizerUIOptions.all /= null then
            RefCount := this.m_ISpeechRecognizerUIOptions.all.Release;
            Free (this.m_ISpeechRecognizerUIOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechRecognizerUIOptions

   function get_ExampleText
   (
      this : in out SpeechRecognizerUIOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.get_ExampleText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ExampleText
   (
      this : in out SpeechRecognizerUIOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.put_ExampleText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AudiblePrompt
   (
      this : in out SpeechRecognizerUIOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.get_AudiblePrompt (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AudiblePrompt
   (
      this : in out SpeechRecognizerUIOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.put_AudiblePrompt (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsReadBackEnabled
   (
      this : in out SpeechRecognizerUIOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.get_IsReadBackEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsReadBackEnabled
   (
      this : in out SpeechRecognizerUIOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.put_IsReadBackEnabled (value);
   end;

   function get_ShowConfirmation
   (
      this : in out SpeechRecognizerUIOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.get_ShowConfirmation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShowConfirmation
   (
      this : in out SpeechRecognizerUIOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechRecognizerUIOptions.all.put_ShowConfirmation (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body VoiceCommandManager is

      procedure InstallCommandSetsFromStorageFileAsync
      (
         file : Windows.Storage.StorageFile'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.VoiceCommandManager");
         m_Factory        : access WinRt.Windows.Media.SpeechRecognition.IVoiceCommandManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.InstallCommandSetsFromStorageFileAsync (file.m_IStorageFile.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_InstalledCommandSets
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechRecognition.VoiceCommandManager");
         m_Factory        : access WinRt.Windows.Media.SpeechRecognition.IVoiceCommandManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InstalledCommandSets (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end VoiceCommandManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandSet

   procedure Initialize (this : in out VoiceCommandSet) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandSet) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandSet, IVoiceCommandSet_Ptr);
   begin
      if this.m_IVoiceCommandSet /= null then
         if this.m_IVoiceCommandSet.all /= null then
            RefCount := this.m_IVoiceCommandSet.all.Release;
            Free (this.m_IVoiceCommandSet);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandSet

   function get_Language
   (
      this : in out VoiceCommandSet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandSet.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out VoiceCommandSet
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandSet.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetPhraseListAsync
   (
      this : in out VoiceCommandSet;
      phraseListName : WinRt.WString;
      phraseList : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_phraseListName : WinRt.HString := To_HString (phraseListName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IVoiceCommandSet.all.SetPhraseListAsync (HStr_phraseListName, phraseList, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_phraseListName);
   end;

end;

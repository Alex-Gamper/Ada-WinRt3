--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.DataTransfer;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with WinRt.Windows.Web.Http;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Web.UI is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlContentLoadingEventArgs

   procedure Initialize (this : in out WebViewControlContentLoadingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlContentLoadingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlContentLoadingEventArgs, IWebViewControlContentLoadingEventArgs_Ptr);
   begin
      if this.m_IWebViewControlContentLoadingEventArgs /= null then
         if this.m_IWebViewControlContentLoadingEventArgs.all /= null then
            RefCount := this.m_IWebViewControlContentLoadingEventArgs.all.Release;
            Free (this.m_IWebViewControlContentLoadingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlContentLoadingEventArgs

   function get_Uri
   (
      this : in out WebViewControlContentLoadingEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlContentLoadingEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlDOMContentLoadedEventArgs

   procedure Initialize (this : in out WebViewControlDOMContentLoadedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlDOMContentLoadedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlDOMContentLoadedEventArgs, IWebViewControlDOMContentLoadedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlDOMContentLoadedEventArgs /= null then
         if this.m_IWebViewControlDOMContentLoadedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlDOMContentLoadedEventArgs.all.Release;
            Free (this.m_IWebViewControlDOMContentLoadedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlDOMContentLoadedEventArgs

   function get_Uri
   (
      this : in out WebViewControlDOMContentLoadedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlDOMContentLoadedEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlDeferredPermissionRequest

   procedure Initialize (this : in out WebViewControlDeferredPermissionRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlDeferredPermissionRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlDeferredPermissionRequest, IWebViewControlDeferredPermissionRequest_Ptr);
   begin
      if this.m_IWebViewControlDeferredPermissionRequest /= null then
         if this.m_IWebViewControlDeferredPermissionRequest.all /= null then
            RefCount := this.m_IWebViewControlDeferredPermissionRequest.all.Release;
            Free (this.m_IWebViewControlDeferredPermissionRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlDeferredPermissionRequest

   function get_Id
   (
      this : in out WebViewControlDeferredPermissionRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWebViewControlDeferredPermissionRequest.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Uri
   (
      this : in out WebViewControlDeferredPermissionRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlDeferredPermissionRequest.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_PermissionType
   (
      this : in out WebViewControlDeferredPermissionRequest
   )
   return WinRt.Windows.Web.UI.WebViewControlPermissionType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.WebViewControlPermissionType;
   begin
      Hr := this.m_IWebViewControlDeferredPermissionRequest.all.get_PermissionType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Allow
   (
      this : in out WebViewControlDeferredPermissionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlDeferredPermissionRequest.all.Allow;
   end;

   procedure Deny
   (
      this : in out WebViewControlDeferredPermissionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlDeferredPermissionRequest.all.Deny;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlLongRunningScriptDetectedEventArgs

   procedure Initialize (this : in out WebViewControlLongRunningScriptDetectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlLongRunningScriptDetectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlLongRunningScriptDetectedEventArgs, IWebViewControlLongRunningScriptDetectedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlLongRunningScriptDetectedEventArgs /= null then
         if this.m_IWebViewControlLongRunningScriptDetectedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlLongRunningScriptDetectedEventArgs.all.Release;
            Free (this.m_IWebViewControlLongRunningScriptDetectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlLongRunningScriptDetectedEventArgs

   function get_ExecutionTime
   (
      this : in out WebViewControlLongRunningScriptDetectedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IWebViewControlLongRunningScriptDetectedEventArgs.all.get_ExecutionTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StopPageScriptExecution
   (
      this : in out WebViewControlLongRunningScriptDetectedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlLongRunningScriptDetectedEventArgs.all.get_StopPageScriptExecution (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StopPageScriptExecution
   (
      this : in out WebViewControlLongRunningScriptDetectedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlLongRunningScriptDetectedEventArgs.all.put_StopPageScriptExecution (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlNavigationCompletedEventArgs

   procedure Initialize (this : in out WebViewControlNavigationCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlNavigationCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlNavigationCompletedEventArgs, IWebViewControlNavigationCompletedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlNavigationCompletedEventArgs /= null then
         if this.m_IWebViewControlNavigationCompletedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlNavigationCompletedEventArgs.all.Release;
            Free (this.m_IWebViewControlNavigationCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlNavigationCompletedEventArgs

   function get_Uri
   (
      this : in out WebViewControlNavigationCompletedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlNavigationCompletedEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_IsSuccess
   (
      this : in out WebViewControlNavigationCompletedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlNavigationCompletedEventArgs.all.get_IsSuccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WebErrorStatus
   (
      this : in out WebViewControlNavigationCompletedEventArgs
   )
   return WinRt.Windows.Web.WebErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.WebErrorStatus;
   begin
      Hr := this.m_IWebViewControlNavigationCompletedEventArgs.all.get_WebErrorStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlNavigationStartingEventArgs

   procedure Initialize (this : in out WebViewControlNavigationStartingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlNavigationStartingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlNavigationStartingEventArgs, IWebViewControlNavigationStartingEventArgs_Ptr);
   begin
      if this.m_IWebViewControlNavigationStartingEventArgs /= null then
         if this.m_IWebViewControlNavigationStartingEventArgs.all /= null then
            RefCount := this.m_IWebViewControlNavigationStartingEventArgs.all.Release;
            Free (this.m_IWebViewControlNavigationStartingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlNavigationStartingEventArgs

   function get_Uri
   (
      this : in out WebViewControlNavigationStartingEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlNavigationStartingEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Cancel
   (
      this : in out WebViewControlNavigationStartingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlNavigationStartingEventArgs.all.get_Cancel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Cancel
   (
      this : in out WebViewControlNavigationStartingEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlNavigationStartingEventArgs.all.put_Cancel (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlNewWindowRequestedEventArgs

   procedure Initialize (this : in out WebViewControlNewWindowRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlNewWindowRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlNewWindowRequestedEventArgs, IWebViewControlNewWindowRequestedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlNewWindowRequestedEventArgs /= null then
         if this.m_IWebViewControlNewWindowRequestedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlNewWindowRequestedEventArgs.all.Release;
            Free (this.m_IWebViewControlNewWindowRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlNewWindowRequestedEventArgs

   function get_Uri
   (
      this : in out WebViewControlNewWindowRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlNewWindowRequestedEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Referrer
   (
      this : in out WebViewControlNewWindowRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlNewWindowRequestedEventArgs.all.get_Referrer (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Handled
   (
      this : in out WebViewControlNewWindowRequestedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlNewWindowRequestedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out WebViewControlNewWindowRequestedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlNewWindowRequestedEventArgs.all.put_Handled (value);
   end;

   function get_NewWindow
   (
      this : in out WebViewControlNewWindowRequestedEventArgs
   )
   return WinRt.Windows.Web.UI.IWebViewControl is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.IWebViewControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs_Interface, WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs2, WinRt.Windows.Web.UI.IID_IWebViewControlNewWindowRequestedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControlNewWindowRequestedEventArgs.all);
      Hr := m_Interface.get_NewWindow (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NewWindow
   (
      this : in out WebViewControlNewWindowRequestedEventArgs;
      value : Windows.Web.UI.IWebViewControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs_Interface, WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs2, WinRt.Windows.Web.UI.IID_IWebViewControlNewWindowRequestedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControlNewWindowRequestedEventArgs.all);
      Hr := m_Interface.put_NewWindow (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetDeferral
   (
      this : in out WebViewControlNewWindowRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs_Interface, WinRt.Windows.Web.UI.IWebViewControlNewWindowRequestedEventArgs2, WinRt.Windows.Web.UI.IID_IWebViewControlNewWindowRequestedEventArgs2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         m_Interface := QInterface (this.m_IWebViewControlNewWindowRequestedEventArgs.all);
         Hr := m_Interface.GetDeferral (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlPermissionRequest

   procedure Initialize (this : in out WebViewControlPermissionRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlPermissionRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlPermissionRequest, IWebViewControlPermissionRequest_Ptr);
   begin
      if this.m_IWebViewControlPermissionRequest /= null then
         if this.m_IWebViewControlPermissionRequest.all /= null then
            RefCount := this.m_IWebViewControlPermissionRequest.all.Release;
            Free (this.m_IWebViewControlPermissionRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlPermissionRequest

   function get_Id
   (
      this : in out WebViewControlPermissionRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWebViewControlPermissionRequest.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Uri
   (
      this : in out WebViewControlPermissionRequest
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlPermissionRequest.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_PermissionType
   (
      this : in out WebViewControlPermissionRequest
   )
   return WinRt.Windows.Web.UI.WebViewControlPermissionType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.WebViewControlPermissionType;
   begin
      Hr := this.m_IWebViewControlPermissionRequest.all.get_PermissionType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_State
   (
      this : in out WebViewControlPermissionRequest
   )
   return WinRt.Windows.Web.UI.WebViewControlPermissionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.WebViewControlPermissionState;
   begin
      Hr := this.m_IWebViewControlPermissionRequest.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Defer
   (
      this : in out WebViewControlPermissionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlPermissionRequest.all.Defer;
   end;

   procedure Allow
   (
      this : in out WebViewControlPermissionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlPermissionRequest.all.Allow;
   end;

   procedure Deny
   (
      this : in out WebViewControlPermissionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlPermissionRequest.all.Deny;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlPermissionRequestedEventArgs

   procedure Initialize (this : in out WebViewControlPermissionRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlPermissionRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlPermissionRequestedEventArgs, IWebViewControlPermissionRequestedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlPermissionRequestedEventArgs /= null then
         if this.m_IWebViewControlPermissionRequestedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlPermissionRequestedEventArgs.all.Release;
            Free (this.m_IWebViewControlPermissionRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlPermissionRequestedEventArgs

   function get_PermissionRequest
   (
      this : in out WebViewControlPermissionRequestedEventArgs
   )
   return WinRt.Windows.Web.UI.WebViewControlPermissionRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.IWebViewControlPermissionRequest;
   begin
      return RetVal : WinRt.Windows.Web.UI.WebViewControlPermissionRequest do
         Hr := this.m_IWebViewControlPermissionRequestedEventArgs.all.get_PermissionRequest (m_ComRetVal'Access);
         Retval.m_IWebViewControlPermissionRequest := new Windows.Web.UI.IWebViewControlPermissionRequest;
         Retval.m_IWebViewControlPermissionRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlScriptNotifyEventArgs

   procedure Initialize (this : in out WebViewControlScriptNotifyEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlScriptNotifyEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlScriptNotifyEventArgs, IWebViewControlScriptNotifyEventArgs_Ptr);
   begin
      if this.m_IWebViewControlScriptNotifyEventArgs /= null then
         if this.m_IWebViewControlScriptNotifyEventArgs.all /= null then
            RefCount := this.m_IWebViewControlScriptNotifyEventArgs.all.Release;
            Free (this.m_IWebViewControlScriptNotifyEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlScriptNotifyEventArgs

   function get_Uri
   (
      this : in out WebViewControlScriptNotifyEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlScriptNotifyEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Value
   (
      this : in out WebViewControlScriptNotifyEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebViewControlScriptNotifyEventArgs.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlSettings

   procedure Initialize (this : in out WebViewControlSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlSettings, IWebViewControlSettings_Ptr);
   begin
      if this.m_IWebViewControlSettings /= null then
         if this.m_IWebViewControlSettings.all /= null then
            RefCount := this.m_IWebViewControlSettings.all.Release;
            Free (this.m_IWebViewControlSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlSettings

   procedure put_IsJavaScriptEnabled
   (
      this : in out WebViewControlSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlSettings.all.put_IsJavaScriptEnabled (value);
   end;

   function get_IsJavaScriptEnabled
   (
      this : in out WebViewControlSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlSettings.all.get_IsJavaScriptEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsIndexedDBEnabled
   (
      this : in out WebViewControlSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlSettings.all.put_IsIndexedDBEnabled (value);
   end;

   function get_IsIndexedDBEnabled
   (
      this : in out WebViewControlSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlSettings.all.get_IsIndexedDBEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsScriptNotifyAllowed
   (
      this : in out WebViewControlSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlSettings.all.put_IsScriptNotifyAllowed (value);
   end;

   function get_IsScriptNotifyAllowed
   (
      this : in out WebViewControlSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlSettings.all.get_IsScriptNotifyAllowed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlUnsupportedUriSchemeIdentifiedEventArgs

   procedure Initialize (this : in out WebViewControlUnsupportedUriSchemeIdentifiedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlUnsupportedUriSchemeIdentifiedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs, IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs /= null then
         if this.m_IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs.all.Release;
            Free (this.m_IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlUnsupportedUriSchemeIdentifiedEventArgs

   function get_Uri
   (
      this : in out WebViewControlUnsupportedUriSchemeIdentifiedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Handled
   (
      this : in out WebViewControlUnsupportedUriSchemeIdentifiedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out WebViewControlUnsupportedUriSchemeIdentifiedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs.all.put_Handled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlUnviewableContentIdentifiedEventArgs

   procedure Initialize (this : in out WebViewControlUnviewableContentIdentifiedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlUnviewableContentIdentifiedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlUnviewableContentIdentifiedEventArgs, IWebViewControlUnviewableContentIdentifiedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlUnviewableContentIdentifiedEventArgs /= null then
         if this.m_IWebViewControlUnviewableContentIdentifiedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlUnviewableContentIdentifiedEventArgs.all.Release;
            Free (this.m_IWebViewControlUnviewableContentIdentifiedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlUnviewableContentIdentifiedEventArgs

   function get_Uri
   (
      this : in out WebViewControlUnviewableContentIdentifiedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlUnviewableContentIdentifiedEventArgs.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Referrer
   (
      this : in out WebViewControlUnviewableContentIdentifiedEventArgs
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControlUnviewableContentIdentifiedEventArgs.all.get_Referrer (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_MediaType
   (
      this : in out WebViewControlUnviewableContentIdentifiedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebViewControlUnviewableContentIdentifiedEventArgs.all.get_MediaType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlWebResourceRequestedEventArgs

   procedure Initialize (this : in out WebViewControlWebResourceRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlWebResourceRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlWebResourceRequestedEventArgs, IWebViewControlWebResourceRequestedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlWebResourceRequestedEventArgs /= null then
         if this.m_IWebViewControlWebResourceRequestedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlWebResourceRequestedEventArgs.all.Release;
            Free (this.m_IWebViewControlWebResourceRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlWebResourceRequestedEventArgs

   function GetDeferral
   (
      this : in out WebViewControlWebResourceRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IWebViewControlWebResourceRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_Request
   (
      this : in out WebViewControlWebResourceRequestedEventArgs
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IWebViewControlWebResourceRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   procedure put_Response
   (
      this : in out WebViewControlWebResourceRequestedEventArgs;
      value : Windows.Web.Http.HttpResponseMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlWebResourceRequestedEventArgs.all.put_Response (value.m_IHttpResponseMessage.all);
   end;

   function get_Response
   (
      this : in out WebViewControlWebResourceRequestedEventArgs
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpResponseMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         Hr := this.m_IWebViewControlWebResourceRequestedEventArgs.all.get_Response (m_ComRetVal'Access);
         Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
         Retval.m_IHttpResponseMessage.all := m_ComRetVal;
      end return;
   end;

end;

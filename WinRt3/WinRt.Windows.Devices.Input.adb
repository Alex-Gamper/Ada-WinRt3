--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Input is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyboardCapabilities

   procedure Initialize (this : in out KeyboardCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out KeyboardCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IKeyboardCapabilities, IKeyboardCapabilities_Ptr);
   begin
      if this.m_IKeyboardCapabilities /= null then
         if this.m_IKeyboardCapabilities.all /= null then
            RefCount := this.m_IKeyboardCapabilities.all.Release;
            Free (this.m_IKeyboardCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for KeyboardCapabilities

   function Constructor return KeyboardCapabilities is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Input.KeyboardCapabilities");
      m_ComRetVal  : aliased Windows.Devices.Input.IKeyboardCapabilities;
   begin
      return RetVal : KeyboardCapabilities do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IKeyboardCapabilities := new Windows.Devices.Input.IKeyboardCapabilities;
            Retval.m_IKeyboardCapabilities.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyboardCapabilities

   function get_KeyboardPresent
   (
      this : in out KeyboardCapabilities
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IKeyboardCapabilities.all.get_KeyboardPresent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MouseCapabilities

   procedure Initialize (this : in out MouseCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out MouseCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMouseCapabilities, IMouseCapabilities_Ptr);
   begin
      if this.m_IMouseCapabilities /= null then
         if this.m_IMouseCapabilities.all /= null then
            RefCount := this.m_IMouseCapabilities.all.Release;
            Free (this.m_IMouseCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MouseCapabilities

   function Constructor return MouseCapabilities is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Input.MouseCapabilities");
      m_ComRetVal  : aliased Windows.Devices.Input.IMouseCapabilities;
   begin
      return RetVal : MouseCapabilities do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMouseCapabilities := new Windows.Devices.Input.IMouseCapabilities;
            Retval.m_IMouseCapabilities.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MouseCapabilities

   function get_MousePresent
   (
      this : in out MouseCapabilities
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMouseCapabilities.all.get_MousePresent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VerticalWheelPresent
   (
      this : in out MouseCapabilities
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMouseCapabilities.all.get_VerticalWheelPresent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HorizontalWheelPresent
   (
      this : in out MouseCapabilities
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMouseCapabilities.all.get_HorizontalWheelPresent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SwapButtons
   (
      this : in out MouseCapabilities
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMouseCapabilities.all.get_SwapButtons (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfButtons
   (
      this : in out MouseCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMouseCapabilities.all.get_NumberOfButtons (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MouseDevice

   procedure Initialize (this : in out MouseDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out MouseDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMouseDevice, IMouseDevice_Ptr);
   begin
      if this.m_IMouseDevice /= null then
         if this.m_IMouseDevice.all /= null then
            RefCount := this.m_IMouseDevice.all.Release;
            Free (this.m_IMouseDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MouseDevice

   function GetForCurrentView
   return WinRt.Windows.Devices.Input.MouseDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Input.MouseDevice");
      m_Factory        : access WinRt.Windows.Devices.Input.IMouseDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Input.IMouseDevice;
   begin
      return RetVal : WinRt.Windows.Devices.Input.MouseDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IMouseDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMouseDevice := new Windows.Devices.Input.IMouseDevice;
            Retval.m_IMouseDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MouseDevice

   function add_MouseMoved
   (
      this : in out MouseDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMouseDevice.all.add_MouseMoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MouseMoved
   (
      this : in out MouseDevice;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMouseDevice.all.remove_MouseMoved (cookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MouseEventArgs

   procedure Initialize (this : in out MouseEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MouseEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMouseEventArgs, IMouseEventArgs_Ptr);
   begin
      if this.m_IMouseEventArgs /= null then
         if this.m_IMouseEventArgs.all /= null then
            RefCount := this.m_IMouseEventArgs.all.Release;
            Free (this.m_IMouseEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MouseEventArgs

   function get_MouseDelta
   (
      this : in out MouseEventArgs
   )
   return WinRt.Windows.Devices.Input.MouseDelta is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Input.MouseDelta;
   begin
      Hr := this.m_IMouseEventArgs.all.get_MouseDelta (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenButtonListener

   procedure Initialize (this : in out PenButtonListener) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenButtonListener) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenButtonListener, IPenButtonListener_Ptr);
   begin
      if this.m_IPenButtonListener /= null then
         if this.m_IPenButtonListener.all /= null then
            RefCount := this.m_IPenButtonListener.all.Release;
            Free (this.m_IPenButtonListener);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PenButtonListener

   function GetDefault
   return WinRt.Windows.Devices.Input.PenButtonListener is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Input.PenButtonListener");
      m_Factory        : access WinRt.Windows.Devices.Input.IPenButtonListenerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Input.IPenButtonListener;
   begin
      return RetVal : WinRt.Windows.Devices.Input.PenButtonListener do
         Hr := RoGetActivationFactory (m_hString, IID_IPenButtonListenerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPenButtonListener := new Windows.Devices.Input.IPenButtonListener;
            Retval.m_IPenButtonListener.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenButtonListener

   function IsSupported
   (
      this : in out PenButtonListener
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPenButtonListener.all.IsSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_IsSupportedChanged
   (
      this : in out PenButtonListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPenButtonListener.all.add_IsSupportedChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsSupportedChanged
   (
      this : in out PenButtonListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPenButtonListener.all.remove_IsSupportedChanged (token);
   end;

   function add_TailButtonClicked
   (
      this : in out PenButtonListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPenButtonListener.all.add_TailButtonClicked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TailButtonClicked
   (
      this : in out PenButtonListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPenButtonListener.all.remove_TailButtonClicked (token);
   end;

   function add_TailButtonDoubleClicked
   (
      this : in out PenButtonListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPenButtonListener.all.add_TailButtonDoubleClicked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TailButtonDoubleClicked
   (
      this : in out PenButtonListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPenButtonListener.all.remove_TailButtonDoubleClicked (token);
   end;

   function add_TailButtonLongPressed
   (
      this : in out PenButtonListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPenButtonListener.all.add_TailButtonLongPressed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TailButtonLongPressed
   (
      this : in out PenButtonListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPenButtonListener.all.remove_TailButtonLongPressed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenDevice

   procedure Initialize (this : in out PenDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenDevice, IPenDevice_Ptr);
   begin
      if this.m_IPenDevice /= null then
         if this.m_IPenDevice.all /= null then
            RefCount := this.m_IPenDevice.all.Release;
            Free (this.m_IPenDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PenDevice

   function GetFromPointerId
   (
      pointerId : WinRt.UInt32
   )
   return WinRt.Windows.Devices.Input.PenDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Input.PenDevice");
      m_Factory        : access WinRt.Windows.Devices.Input.IPenDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Input.IPenDevice;
   begin
      return RetVal : WinRt.Windows.Devices.Input.PenDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IPenDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFromPointerId (pointerId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPenDevice := new Windows.Devices.Input.IPenDevice;
            Retval.m_IPenDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenDevice

   function get_PenId
   (
      this : in out PenDevice
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPenDevice.all.get_PenId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenDockListener

   procedure Initialize (this : in out PenDockListener) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenDockListener) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenDockListener, IPenDockListener_Ptr);
   begin
      if this.m_IPenDockListener /= null then
         if this.m_IPenDockListener.all /= null then
            RefCount := this.m_IPenDockListener.all.Release;
            Free (this.m_IPenDockListener);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PenDockListener

   function GetDefault
   return WinRt.Windows.Devices.Input.PenDockListener is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Input.PenDockListener");
      m_Factory        : access WinRt.Windows.Devices.Input.IPenDockListenerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Input.IPenDockListener;
   begin
      return RetVal : WinRt.Windows.Devices.Input.PenDockListener do
         Hr := RoGetActivationFactory (m_hString, IID_IPenDockListenerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPenDockListener := new Windows.Devices.Input.IPenDockListener;
            Retval.m_IPenDockListener.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenDockListener

   function IsSupported
   (
      this : in out PenDockListener
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPenDockListener.all.IsSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_IsSupportedChanged
   (
      this : in out PenDockListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPenDockListener.all.add_IsSupportedChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsSupportedChanged
   (
      this : in out PenDockListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPenDockListener.all.remove_IsSupportedChanged (token);
   end;

   function add_Docked
   (
      this : in out PenDockListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPenDockListener.all.add_Docked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Docked
   (
      this : in out PenDockListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPenDockListener.all.remove_Docked (token);
   end;

   function add_Undocked
   (
      this : in out PenDockListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPenDockListener.all.add_Undocked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Undocked
   (
      this : in out PenDockListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPenDockListener.all.remove_Undocked (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenDockedEventArgs

   procedure Initialize (this : in out PenDockedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenDockedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenDockedEventArgs, IPenDockedEventArgs_Ptr);
   begin
      if this.m_IPenDockedEventArgs /= null then
         if this.m_IPenDockedEventArgs.all /= null then
            RefCount := this.m_IPenDockedEventArgs.all.Release;
            Free (this.m_IPenDockedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenDockedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenTailButtonClickedEventArgs

   procedure Initialize (this : in out PenTailButtonClickedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenTailButtonClickedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenTailButtonClickedEventArgs, IPenTailButtonClickedEventArgs_Ptr);
   begin
      if this.m_IPenTailButtonClickedEventArgs /= null then
         if this.m_IPenTailButtonClickedEventArgs.all /= null then
            RefCount := this.m_IPenTailButtonClickedEventArgs.all.Release;
            Free (this.m_IPenTailButtonClickedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenTailButtonClickedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenTailButtonDoubleClickedEventArgs

   procedure Initialize (this : in out PenTailButtonDoubleClickedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenTailButtonDoubleClickedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenTailButtonDoubleClickedEventArgs, IPenTailButtonDoubleClickedEventArgs_Ptr);
   begin
      if this.m_IPenTailButtonDoubleClickedEventArgs /= null then
         if this.m_IPenTailButtonDoubleClickedEventArgs.all /= null then
            RefCount := this.m_IPenTailButtonDoubleClickedEventArgs.all.Release;
            Free (this.m_IPenTailButtonDoubleClickedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenTailButtonDoubleClickedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenTailButtonLongPressedEventArgs

   procedure Initialize (this : in out PenTailButtonLongPressedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenTailButtonLongPressedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenTailButtonLongPressedEventArgs, IPenTailButtonLongPressedEventArgs_Ptr);
   begin
      if this.m_IPenTailButtonLongPressedEventArgs /= null then
         if this.m_IPenTailButtonLongPressedEventArgs.all /= null then
            RefCount := this.m_IPenTailButtonLongPressedEventArgs.all.Release;
            Free (this.m_IPenTailButtonLongPressedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenTailButtonLongPressedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PenUndockedEventArgs

   procedure Initialize (this : in out PenUndockedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PenUndockedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPenUndockedEventArgs, IPenUndockedEventArgs_Ptr);
   begin
      if this.m_IPenUndockedEventArgs /= null then
         if this.m_IPenUndockedEventArgs.all /= null then
            RefCount := this.m_IPenUndockedEventArgs.all.Release;
            Free (this.m_IPenUndockedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PenUndockedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PointerDevice

   procedure Initialize (this : in out PointerDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out PointerDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPointerDevice, IPointerDevice_Ptr);
   begin
      if this.m_IPointerDevice /= null then
         if this.m_IPointerDevice.all /= null then
            RefCount := this.m_IPointerDevice.all.Release;
            Free (this.m_IPointerDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PointerDevice

   function GetPointerDevice
   (
      pointerId : WinRt.UInt32
   )
   return WinRt.Windows.Devices.Input.PointerDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Input.PointerDevice");
      m_Factory        : access WinRt.Windows.Devices.Input.IPointerDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Input.IPointerDevice;
   begin
      return RetVal : WinRt.Windows.Devices.Input.PointerDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IPointerDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetPointerDevice (pointerId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPointerDevice := new Windows.Devices.Input.IPointerDevice;
            Retval.m_IPointerDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetPointerDevices
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Input.PointerDevice");
      m_Factory        : access WinRt.Windows.Devices.Input.IPointerDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPointerDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetPointerDevices (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PointerDevice

   function get_PointerDeviceType
   (
      this : in out PointerDevice
   )
   return WinRt.Windows.Devices.Input.PointerDeviceType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Input.PointerDeviceType;
   begin
      Hr := this.m_IPointerDevice.all.get_PointerDeviceType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsIntegrated
   (
      this : in out PointerDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPointerDevice.all.get_IsIntegrated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxContacts
   (
      this : in out PointerDevice
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPointerDevice.all.get_MaxContacts (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhysicalDeviceRect
   (
      this : in out PointerDevice
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPointerDevice.all.get_PhysicalDeviceRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScreenRect
   (
      this : in out PointerDevice
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IPointerDevice.all.get_ScreenRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedUsages
   (
      this : in out PointerDevice
   )
   return IVectorView_PointerDeviceUsage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_PointerDeviceUsage.Kind;
   begin
      Hr := this.m_IPointerDevice.all.get_SupportedUsages (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_PointerDeviceUsage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaxPointersWithZDistance
   (
      this : in out PointerDevice
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Input.IPointerDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Input.IPointerDevice_Interface, WinRt.Windows.Devices.Input.IPointerDevice2, WinRt.Windows.Devices.Input.IID_IPointerDevice2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPointerDevice.all);
      Hr := m_Interface.get_MaxPointersWithZDistance (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TouchCapabilities

   procedure Initialize (this : in out TouchCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out TouchCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITouchCapabilities, ITouchCapabilities_Ptr);
   begin
      if this.m_ITouchCapabilities /= null then
         if this.m_ITouchCapabilities.all /= null then
            RefCount := this.m_ITouchCapabilities.all.Release;
            Free (this.m_ITouchCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TouchCapabilities

   function Constructor return TouchCapabilities is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Input.TouchCapabilities");
      m_ComRetVal  : aliased Windows.Devices.Input.ITouchCapabilities;
   begin
      return RetVal : TouchCapabilities do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITouchCapabilities := new Windows.Devices.Input.ITouchCapabilities;
            Retval.m_ITouchCapabilities.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TouchCapabilities

   function get_TouchPresent
   (
      this : in out TouchCapabilities
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITouchCapabilities.all.get_TouchPresent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Contacts
   (
      this : in out TouchCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ITouchCapabilities.all.get_Contacts (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

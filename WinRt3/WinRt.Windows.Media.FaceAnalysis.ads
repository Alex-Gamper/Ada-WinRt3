--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
limited with WinRt.Windows.Graphics.Imaging;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Media.FaceAnalysis is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IDetectedFace_Interface is interface and WinRt.IInspectable_Interface;
   type IDetectedFace is access all IDetectedFace_Interface'Class;
   type IDetectedFace_Ptr is access all IDetectedFace;

   type IFaceDetector_Interface is interface and WinRt.IInspectable_Interface;
   type IFaceDetector is access all IFaceDetector_Interface'Class;
   type IFaceDetector_Ptr is access all IFaceDetector;

   type IFaceDetectorStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IFaceDetectorStatics is access all IFaceDetectorStatics_Interface'Class;

   type IFaceTracker_Interface is interface and WinRt.IInspectable_Interface;
   type IFaceTracker is access all IFaceTracker_Interface'Class;
   type IFaceTracker_Ptr is access all IFaceTracker;

   type IFaceTrackerStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IFaceTrackerStatics is access all IFaceTrackerStatics_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type DetectedFace is new Ada.Finalization.Limited_Controlled with
      record
         m_IDetectedFace : access Windows.Media.FaceAnalysis.IDetectedFace;
      end record;
   type DetectedFace_Ptr is access all DetectedFace;

   type FaceDetector is new Ada.Finalization.Limited_Controlled with
      record
         m_IFaceDetector : access Windows.Media.FaceAnalysis.IFaceDetector;
      end record;
   type FaceDetector_Ptr is access all FaceDetector;

   type FaceTracker is new Ada.Finalization.Limited_Controlled with
      record
         m_IFaceTracker : access Windows.Media.FaceAnalysis.IFaceTracker;
      end record;
   type FaceTracker_Ptr is access all FaceTracker;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IDetectedFace is interface and WinRt.IInspectable;

      function get_FaceBox
      (
         this : access IDetectedFace_Interface;
         RetVal : access Windows.Graphics.Imaging.BitmapBounds
      )
      return WinRt.Hresult is abstract;

      IID_IDetectedFace : aliased WinRt.IID := (2181092436, 26300, 13535, (148, 16, 232, 148, 0, 25, 84, 20 ));

   -----------------------------------------------------------------------------
   -- type IFaceDetector is interface and WinRt.IInspectable;

      function DetectFacesAsync
      (
         this : access IFaceDetector_Interface;
         image : Windows.Graphics.Imaging.ISoftwareBitmap;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function DetectFacesAsync
      (
         this : access IFaceDetector_Interface;
         image : Windows.Graphics.Imaging.ISoftwareBitmap;
         searchArea : Windows.Graphics.Imaging.BitmapBounds;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function get_MinDetectableFaceSize
      (
         this : access IFaceDetector_Interface;
         RetVal : access Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      function put_MinDetectableFaceSize
      (
         this : access IFaceDetector_Interface;
         value : Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      function get_MaxDetectableFaceSize
      (
         this : access IFaceDetector_Interface;
         RetVal : access Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      function put_MaxDetectableFaceSize
      (
         this : access IFaceDetector_Interface;
         value : Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      IID_IFaceDetector : aliased WinRt.IID := (381055708, 65135, 12567, (141, 149, 195, 240, 77, 81, 99, 12 ));

   -----------------------------------------------------------------------------
   -- type IFaceDetectorStatics is interface and WinRt.IInspectable;

      function CreateAsync
      (
         this : access IFaceDetectorStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function GetSupportedBitmapPixelFormats
      (
         this : access IFaceDetectorStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function IsBitmapPixelFormatSupported
      (
         this : access IFaceDetectorStatics_Interface;
         bitmapPixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_IsSupported
      (
         this : access IFaceDetectorStatics_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      IID_IFaceDetectorStatics : aliased WinRt.IID := (3154390375, 36935, 13302, (136, 27, 103, 70, 193, 178, 24, 184 ));

   -----------------------------------------------------------------------------
   -- type IFaceTracker is interface and WinRt.IInspectable;

      function ProcessNextFrameAsync
      (
         this : access IFaceTracker_Interface;
         videoFrame : Windows.Media.IVideoFrame;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function get_MinDetectableFaceSize
      (
         this : access IFaceTracker_Interface;
         RetVal : access Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      function put_MinDetectableFaceSize
      (
         this : access IFaceTracker_Interface;
         value : Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      function get_MaxDetectableFaceSize
      (
         this : access IFaceTracker_Interface;
         RetVal : access Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      function put_MaxDetectableFaceSize
      (
         this : access IFaceTracker_Interface;
         value : Windows.Graphics.Imaging.BitmapSize
      )
      return WinRt.Hresult is abstract;

      IID_IFaceTracker : aliased WinRt.IID := (1806073228, 43073, 17440, (147, 230, 36, 32, 161, 136, 79, 207 ));

   -----------------------------------------------------------------------------
   -- type IFaceTrackerStatics is interface and WinRt.IInspectable;

      function CreateAsync
      (
         this : access IFaceTrackerStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function GetSupportedBitmapPixelFormats
      (
         this : access IFaceTrackerStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function IsBitmapPixelFormatSupported
      (
         this : access IFaceTrackerStatics_Interface;
         bitmapPixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_IsSupported
      (
         this : access IFaceTrackerStatics_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      IID_IFaceTrackerStatics : aliased WinRt.IID := (3915551128, 6145, 16293, (147, 46, 49, 215, 103, 175, 108, 77 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DetectedFace

   overriding procedure Initialize (this : in out DetectedFace);
   overriding procedure Finalize (this : in out DetectedFace);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DetectedFace

   function get_FaceBox
   (
      this : in out DetectedFace
   )
   return WinRt.Windows.Graphics.Imaging.BitmapBounds;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceDetector

   overriding procedure Initialize (this : in out FaceDetector);
   overriding procedure Finalize (this : in out FaceDetector);

   -----------------------------------------------------------------------------
   -- Static Interfaces for FaceDetector

   function CreateAsync
   return WinRt.Windows.Media.FaceAnalysis.FaceDetector;

   function GetSupportedBitmapPixelFormats
   return WinRt.GenericObject;

   function IsBitmapPixelFormatSupported
   (
      bitmapPixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat
   )
   return WinRt.Boolean;

   function get_IsSupported
   return WinRt.Boolean;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceDetector

   function DetectFacesAsync
   (
      this : in out FaceDetector;
      image : Windows.Graphics.Imaging.SoftwareBitmap'Class
   )
   return WinRt.GenericObject;

   function DetectFacesAsync
   (
      this : in out FaceDetector;
      image : Windows.Graphics.Imaging.SoftwareBitmap'Class;
      searchArea : Windows.Graphics.Imaging.BitmapBounds
   )
   return WinRt.GenericObject;

   function get_MinDetectableFaceSize
   (
      this : in out FaceDetector
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize;

   procedure put_MinDetectableFaceSize
   (
      this : in out FaceDetector;
      value : Windows.Graphics.Imaging.BitmapSize
   );

   function get_MaxDetectableFaceSize
   (
      this : in out FaceDetector
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize;

   procedure put_MaxDetectableFaceSize
   (
      this : in out FaceDetector;
      value : Windows.Graphics.Imaging.BitmapSize
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceTracker

   overriding procedure Initialize (this : in out FaceTracker);
   overriding procedure Finalize (this : in out FaceTracker);

   -----------------------------------------------------------------------------
   -- Static Interfaces for FaceTracker

   function CreateAsync_FaceTracker
   return WinRt.Windows.Media.FaceAnalysis.FaceTracker;

   function GetSupportedBitmapPixelFormats_FaceTracker
   return WinRt.GenericObject;

   function IsBitmapPixelFormatSupported_FaceTracker
   (
      bitmapPixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat
   )
   return WinRt.Boolean;

   function get_IsSupported_FaceTracker
   return WinRt.Boolean;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceTracker

   function ProcessNextFrameAsync
   (
      this : in out FaceTracker;
      videoFrame : Windows.Media.VideoFrame'Class
   )
   return WinRt.GenericObject;

   function get_MinDetectableFaceSize
   (
      this : in out FaceTracker
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize;

   procedure put_MinDetectableFaceSize
   (
      this : in out FaceTracker;
      value : Windows.Graphics.Imaging.BitmapSize
   );

   function get_MaxDetectableFaceSize
   (
      this : in out FaceTracker
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize;

   procedure put_MaxDetectableFaceSize
   (
      this : in out FaceTracker;
      value : Windows.Graphics.Imaging.BitmapSize
   );

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Graphics;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Display is

   package IAsyncOperation_DisplayMonitor is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Display.IDisplayMonitor);
   package AsyncOperationCompletedHandler_DisplayMonitor is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Display.IDisplayMonitor);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DisplayMonitor

   procedure Initialize (this : in out DisplayMonitor) is
   begin
      null;
   end;

   procedure Finalize (this : in out DisplayMonitor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDisplayMonitor, IDisplayMonitor_Ptr);
   begin
      if this.m_IDisplayMonitor /= null then
         if this.m_IDisplayMonitor.all /= null then
            RefCount := this.m_IDisplayMonitor.all.Release;
            Free (this.m_IDisplayMonitor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DisplayMonitor

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Display.DisplayMonitor");
      m_Factory        : access WinRt.Windows.Devices.Display.IDisplayMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDisplayMonitorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Display.DisplayMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Display.DisplayMonitor");
      m_Factory        : access WinRt.Windows.Devices.Display.IDisplayMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DisplayMonitor.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DisplayMonitor.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Display.IDisplayMonitor;
      m_IID            : aliased WinRt.IID := (683730467, 20038, 22723, (173, 130, 80, 43, 222, 204, 67, 69 )); -- Windows.Devices.Display.DisplayMonitor;
      m_HandlerIID     : aliased WinRt.IID := (1645163688, 23994, 23007, (183, 25, 153, 183, 121, 112, 52, 76 ));
      m_Handler        : AsyncOperationCompletedHandler_DisplayMonitor.Kind := new AsyncOperationCompletedHandler_DisplayMonitor.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DisplayMonitor.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DisplayMonitor.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DisplayMonitor.Kind_Delegate, AsyncOperationCompletedHandler_DisplayMonitor.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Display.DisplayMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IDisplayMonitor := new Windows.Devices.Display.IDisplayMonitor;
                     Retval.m_IDisplayMonitor.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function FromInterfaceIdAsync
   (
      deviceInterfaceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Display.DisplayMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Display.DisplayMonitor");
      m_Factory        : access WinRt.Windows.Devices.Display.IDisplayMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceInterfaceId : WinRt.HString := To_HString (deviceInterfaceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DisplayMonitor.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DisplayMonitor.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Display.IDisplayMonitor;
      m_IID            : aliased WinRt.IID := (683730467, 20038, 22723, (173, 130, 80, 43, 222, 204, 67, 69 )); -- Windows.Devices.Display.DisplayMonitor;
      m_HandlerIID     : aliased WinRt.IID := (1645163688, 23994, 23007, (183, 25, 153, 183, 121, 112, 52, 76 ));
      m_Handler        : AsyncOperationCompletedHandler_DisplayMonitor.Kind := new AsyncOperationCompletedHandler_DisplayMonitor.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DisplayMonitor.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DisplayMonitor.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DisplayMonitor.Kind_Delegate, AsyncOperationCompletedHandler_DisplayMonitor.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Display.DisplayMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IDisplayMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromInterfaceIdAsync (HStr_deviceInterfaceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IDisplayMonitor := new Windows.Devices.Display.IDisplayMonitor;
                     Retval.m_IDisplayMonitor.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceInterfaceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DisplayMonitor

   function get_DeviceId
   (
      this : in out DisplayMonitor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDisplayMonitor.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out DisplayMonitor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDisplayMonitor.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ConnectionKind
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Devices.Display.DisplayMonitorConnectionKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Display.DisplayMonitorConnectionKind;
   begin
      Hr := this.m_IDisplayMonitor.all.get_ConnectionKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhysicalConnector
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Devices.Display.DisplayMonitorPhysicalConnectorKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Display.DisplayMonitorPhysicalConnectorKind;
   begin
      Hr := this.m_IDisplayMonitor.all.get_PhysicalConnector (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayAdapterDeviceId
   (
      this : in out DisplayMonitor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDisplayMonitor.all.get_DisplayAdapterDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayAdapterId
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Graphics.DisplayAdapterId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DisplayAdapterId;
   begin
      Hr := this.m_IDisplayMonitor.all.get_DisplayAdapterId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayAdapterTargetId
   (
      this : in out DisplayMonitor
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IDisplayMonitor.all.get_DisplayAdapterTargetId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsageKind
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Devices.Display.DisplayMonitorUsageKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Display.DisplayMonitorUsageKind;
   begin
      Hr := this.m_IDisplayMonitor.all.get_UsageKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NativeResolutionInRawPixels
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
   begin
      Hr := this.m_IDisplayMonitor.all.get_NativeResolutionInRawPixels (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhysicalSizeInInches
   (
      this : in out DisplayMonitor
   )
   return IReference_Size.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Size.Kind;
   begin
      Hr := this.m_IDisplayMonitor.all.get_PhysicalSizeInInches (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Size (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RawDpiX
   (
      this : in out DisplayMonitor
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayMonitor.all.get_RawDpiX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawDpiY
   (
      this : in out DisplayMonitor
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayMonitor.all.get_RawDpiY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RedPrimary
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IDisplayMonitor.all.get_RedPrimary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_GreenPrimary
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IDisplayMonitor.all.get_GreenPrimary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BluePrimary
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IDisplayMonitor.all.get_BluePrimary (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WhitePoint
   (
      this : in out DisplayMonitor
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IDisplayMonitor.all.get_WhitePoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxLuminanceInNits
   (
      this : in out DisplayMonitor
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayMonitor.all.get_MaxLuminanceInNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinLuminanceInNits
   (
      this : in out DisplayMonitor
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayMonitor.all.get_MinLuminanceInNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxAverageFullFrameLuminanceInNits
   (
      this : in out DisplayMonitor
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDisplayMonitor.all.get_MaxAverageFullFrameLuminanceInNits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDescriptor
   (
      this : in out DisplayMonitor;
      descriptorKind : Windows.Devices.Display.DisplayMonitorDescriptorKind
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDisplayMonitor.all.GetDescriptor (descriptorKind, m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_IsDolbyVisionSupportedInHdrMode
   (
      this : in out DisplayMonitor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Display.IDisplayMonitor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Display.IDisplayMonitor_Interface, WinRt.Windows.Devices.Display.IDisplayMonitor2, WinRt.Windows.Devices.Display.IID_IDisplayMonitor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDisplayMonitor.all);
      Hr := m_Interface.get_IsDolbyVisionSupportedInHdrMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.Imaging;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.FaceAnalysis is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_FaceDetector is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.FaceAnalysis.IFaceDetector);
   package AsyncOperationCompletedHandler_FaceDetector is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.FaceAnalysis.IFaceDetector);

   package IAsyncOperation_FaceTracker is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.FaceAnalysis.IFaceTracker);
   package AsyncOperationCompletedHandler_FaceTracker is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.FaceAnalysis.IFaceTracker);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DetectedFace

   procedure Initialize (this : in out DetectedFace) is
   begin
      null;
   end;

   procedure Finalize (this : in out DetectedFace) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDetectedFace, IDetectedFace_Ptr);
   begin
      if this.m_IDetectedFace /= null then
         if this.m_IDetectedFace.all /= null then
            RefCount := this.m_IDetectedFace.all.Release;
            Free (this.m_IDetectedFace);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DetectedFace

   function get_FaceBox
   (
      this : in out DetectedFace
   )
   return WinRt.Windows.Graphics.Imaging.BitmapBounds is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapBounds;
   begin
      Hr := this.m_IDetectedFace.all.get_FaceBox (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceDetector

   procedure Initialize (this : in out FaceDetector) is
   begin
      null;
   end;

   procedure Finalize (this : in out FaceDetector) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFaceDetector, IFaceDetector_Ptr);
   begin
      if this.m_IFaceDetector /= null then
         if this.m_IFaceDetector.all /= null then
            RefCount := this.m_IFaceDetector.all.Release;
            Free (this.m_IFaceDetector);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FaceDetector

   function CreateAsync
   return WinRt.Windows.Media.FaceAnalysis.FaceDetector is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceDetector");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceDetectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_FaceDetector.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_FaceDetector.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.FaceAnalysis.IFaceDetector;
      m_IID            : aliased WinRt.IID := (3222543570, 31333, 20812, (191, 196, 180, 158, 153, 31, 3, 235 )); -- Windows.Media.FaceAnalysis.FaceDetector;
      m_HandlerIID     : aliased WinRt.IID := (841264838, 59269, 20582, (151, 111, 121, 221, 8, 27, 117, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_FaceDetector.Kind := new AsyncOperationCompletedHandler_FaceDetector.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FaceDetector.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FaceDetector.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FaceDetector.Kind_Delegate, AsyncOperationCompletedHandler_FaceDetector.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.FaceAnalysis.FaceDetector do
         Hr := RoGetActivationFactory (m_hString, IID_IFaceDetectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IFaceDetector := new Windows.Media.FaceAnalysis.IFaceDetector;
                     Retval.m_IFaceDetector.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetSupportedBitmapPixelFormats
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceDetector");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceDetectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFaceDetectorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetSupportedBitmapPixelFormats (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function IsBitmapPixelFormatSupported
   (
      bitmapPixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceDetector");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceDetectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFaceDetectorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsBitmapPixelFormatSupported (bitmapPixelFormat, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceDetector");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceDetectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFaceDetectorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceDetector

   function DetectFacesAsync
   (
      this : in out FaceDetector;
      image : Windows.Graphics.Imaging.SoftwareBitmap'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (938596316, 41380, 23188, (179, 59, 116, 32, 90, 101, 161, 237 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2963616083, 8213, 22707, (157, 208, 189, 242, 145, 184, 86, 178 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFaceDetector.all.DetectFacesAsync (image.m_ISoftwareBitmap.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DetectFacesAsync
   (
      this : in out FaceDetector;
      image : Windows.Graphics.Imaging.SoftwareBitmap'Class;
      searchArea : Windows.Graphics.Imaging.BitmapBounds
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (938596316, 41380, 23188, (179, 59, 116, 32, 90, 101, 161, 237 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2963616083, 8213, 22707, (157, 208, 189, 242, 145, 184, 86, 178 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFaceDetector.all.DetectFacesAsync (image.m_ISoftwareBitmap.all, searchArea, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_MinDetectableFaceSize
   (
      this : in out FaceDetector
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapSize;
   begin
      Hr := this.m_IFaceDetector.all.get_MinDetectableFaceSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinDetectableFaceSize
   (
      this : in out FaceDetector;
      value : Windows.Graphics.Imaging.BitmapSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFaceDetector.all.put_MinDetectableFaceSize (value);
   end;

   function get_MaxDetectableFaceSize
   (
      this : in out FaceDetector
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapSize;
   begin
      Hr := this.m_IFaceDetector.all.get_MaxDetectableFaceSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxDetectableFaceSize
   (
      this : in out FaceDetector;
      value : Windows.Graphics.Imaging.BitmapSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFaceDetector.all.put_MaxDetectableFaceSize (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FaceTracker

   procedure Initialize (this : in out FaceTracker) is
   begin
      null;
   end;

   procedure Finalize (this : in out FaceTracker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFaceTracker, IFaceTracker_Ptr);
   begin
      if this.m_IFaceTracker /= null then
         if this.m_IFaceTracker.all /= null then
            RefCount := this.m_IFaceTracker.all.Release;
            Free (this.m_IFaceTracker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FaceTracker

   function CreateAsync_FaceTracker
   return WinRt.Windows.Media.FaceAnalysis.FaceTracker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceTracker");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceTrackerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_FaceTracker.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_FaceTracker.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.FaceAnalysis.IFaceTracker;
      m_IID            : aliased WinRt.IID := (2134034048, 58238, 21402, (137, 147, 42, 187, 234, 113, 175, 218 )); -- Windows.Media.FaceAnalysis.FaceTracker;
      m_HandlerIID     : aliased WinRt.IID := (1473582653, 40576, 22994, (147, 102, 210, 181, 36, 139, 39, 36 ));
      m_Handler        : AsyncOperationCompletedHandler_FaceTracker.Kind := new AsyncOperationCompletedHandler_FaceTracker.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FaceTracker.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FaceTracker.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FaceTracker.Kind_Delegate, AsyncOperationCompletedHandler_FaceTracker.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.FaceAnalysis.FaceTracker do
         Hr := RoGetActivationFactory (m_hString, IID_IFaceTrackerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IFaceTracker := new Windows.Media.FaceAnalysis.IFaceTracker;
                     Retval.m_IFaceTracker.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetSupportedBitmapPixelFormats_FaceTracker
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceTracker");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceTrackerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFaceTrackerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetSupportedBitmapPixelFormats (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function IsBitmapPixelFormatSupported_FaceTracker
   (
      bitmapPixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceTracker");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceTrackerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFaceTrackerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsBitmapPixelFormatSupported (bitmapPixelFormat, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_IsSupported_FaceTracker
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.FaceAnalysis.FaceTracker");
      m_Factory        : access WinRt.Windows.Media.FaceAnalysis.IFaceTrackerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFaceTrackerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FaceTracker

   function ProcessNextFrameAsync
   (
      this : in out FaceTracker;
      videoFrame : Windows.Media.VideoFrame'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (938596316, 41380, 23188, (179, 59, 116, 32, 90, 101, 161, 237 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2963616083, 8213, 22707, (157, 208, 189, 242, 145, 184, 86, 178 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFaceTracker.all.ProcessNextFrameAsync (videoFrame.m_IVideoFrame.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_MinDetectableFaceSize
   (
      this : in out FaceTracker
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapSize;
   begin
      Hr := this.m_IFaceTracker.all.get_MinDetectableFaceSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinDetectableFaceSize
   (
      this : in out FaceTracker;
      value : Windows.Graphics.Imaging.BitmapSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFaceTracker.all.put_MinDetectableFaceSize (value);
   end;

   function get_MaxDetectableFaceSize
   (
      this : in out FaceTracker
   )
   return WinRt.Windows.Graphics.Imaging.BitmapSize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapSize;
   begin
      Hr := this.m_IFaceTracker.all.get_MaxDetectableFaceSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxDetectableFaceSize
   (
      this : in out FaceTracker;
      value : Windows.Graphics.Imaging.BitmapSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFaceTracker.all.put_MaxDetectableFaceSize (value);
   end;

end;

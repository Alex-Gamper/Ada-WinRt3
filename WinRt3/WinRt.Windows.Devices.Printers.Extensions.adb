--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Printers.Extensions is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DWorkflow

   procedure Initialize (this : in out Print3DWorkflow) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DWorkflow) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DWorkflow, IPrint3DWorkflow_Ptr);
   begin
      if this.m_IPrint3DWorkflow /= null then
         if this.m_IPrint3DWorkflow.all /= null then
            RefCount := this.m_IPrint3DWorkflow.all.Release;
            Free (this.m_IPrint3DWorkflow);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DWorkflow

   function get_DeviceID
   (
      this : in out Print3DWorkflow
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrint3DWorkflow.all.get_DeviceID (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetPrintModelPackage
   (
      this : in out Print3DWorkflow
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IPrint3DWorkflow.all.GetPrintModelPackage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPrintReady
   (
      this : in out Print3DWorkflow
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPrint3DWorkflow.all.get_IsPrintReady (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPrintReady
   (
      this : in out Print3DWorkflow;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DWorkflow.all.put_IsPrintReady (value);
   end;

   function add_PrintRequested
   (
      this : in out Print3DWorkflow;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrint3DWorkflow.all.add_PrintRequested (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PrintRequested
   (
      this : in out Print3DWorkflow;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DWorkflow.all.remove_PrintRequested (eventCookie);
   end;

   function add_PrinterChanged
   (
      this : in out Print3DWorkflow;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Printers.Extensions.IPrint3DWorkflow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Printers.Extensions.IPrint3DWorkflow_Interface, WinRt.Windows.Devices.Printers.Extensions.IPrint3DWorkflow2, WinRt.Windows.Devices.Printers.Extensions.IID_IPrint3DWorkflow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrint3DWorkflow.all);
      Hr := m_Interface.add_PrinterChanged (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PrinterChanged
   (
      this : in out Print3DWorkflow;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Printers.Extensions.IPrint3DWorkflow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Printers.Extensions.IPrint3DWorkflow_Interface, WinRt.Windows.Devices.Printers.Extensions.IPrint3DWorkflow2, WinRt.Windows.Devices.Printers.Extensions.IID_IPrint3DWorkflow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrint3DWorkflow.all);
      Hr := m_Interface.remove_PrinterChanged (eventCookie);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DWorkflowPrintRequestedEventArgs

   procedure Initialize (this : in out Print3DWorkflowPrintRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DWorkflowPrintRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DWorkflowPrintRequestedEventArgs, IPrint3DWorkflowPrintRequestedEventArgs_Ptr);
   begin
      if this.m_IPrint3DWorkflowPrintRequestedEventArgs /= null then
         if this.m_IPrint3DWorkflowPrintRequestedEventArgs.all /= null then
            RefCount := this.m_IPrint3DWorkflowPrintRequestedEventArgs.all.Release;
            Free (this.m_IPrint3DWorkflowPrintRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DWorkflowPrintRequestedEventArgs

   function get_Status
   (
      this : in out Print3DWorkflowPrintRequestedEventArgs
   )
   return WinRt.Windows.Devices.Printers.Extensions.Print3DWorkflowStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Printers.Extensions.Print3DWorkflowStatus;
   begin
      Hr := this.m_IPrint3DWorkflowPrintRequestedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetExtendedStatus
   (
      this : in out Print3DWorkflowPrintRequestedEventArgs;
      value : Windows.Devices.Printers.Extensions.Print3DWorkflowDetail
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DWorkflowPrintRequestedEventArgs.all.SetExtendedStatus (value);
   end;

   procedure SetSource
   (
      this : in out Print3DWorkflowPrintRequestedEventArgs;
      source : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DWorkflowPrintRequestedEventArgs.all.SetSource (source);
   end;

   procedure SetSourceChanged
   (
      this : in out Print3DWorkflowPrintRequestedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DWorkflowPrintRequestedEventArgs.all.SetSourceChanged (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DWorkflowPrinterChangedEventArgs

   procedure Initialize (this : in out Print3DWorkflowPrinterChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DWorkflowPrinterChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DWorkflowPrinterChangedEventArgs, IPrint3DWorkflowPrinterChangedEventArgs_Ptr);
   begin
      if this.m_IPrint3DWorkflowPrinterChangedEventArgs /= null then
         if this.m_IPrint3DWorkflowPrinterChangedEventArgs.all /= null then
            RefCount := this.m_IPrint3DWorkflowPrinterChangedEventArgs.all.Release;
            Free (this.m_IPrint3DWorkflowPrinterChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DWorkflowPrinterChangedEventArgs

   function get_NewDeviceId
   (
      this : in out Print3DWorkflowPrinterChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrint3DWorkflowPrinterChangedEventArgs.all.get_NewDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PrintExtensionContext is

      function FromDeviceId
      (
         deviceId : WinRt.WString
      )
      return WinRt.IInspectable is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Printers.Extensions.PrintExtensionContext");
         m_Factory        : access WinRt.Windows.Devices.Printers.Extensions.IPrintExtensionContextStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.IInspectable;
         HStr_deviceId : WinRt.HString := To_HString (deviceId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPrintExtensionContextStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromDeviceId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
         return m_ComRetVal;
      end;

   end PrintExtensionContext;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintNotificationEventDetails

   procedure Initialize (this : in out PrintNotificationEventDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintNotificationEventDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintNotificationEventDetails, IPrintNotificationEventDetails_Ptr);
   begin
      if this.m_IPrintNotificationEventDetails /= null then
         if this.m_IPrintNotificationEventDetails.all /= null then
            RefCount := this.m_IPrintNotificationEventDetails.all.Release;
            Free (this.m_IPrintNotificationEventDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintNotificationEventDetails

   function get_PrinterName
   (
      this : in out PrintNotificationEventDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrintNotificationEventDetails.all.get_PrinterName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EventData
   (
      this : in out PrintNotificationEventDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrintNotificationEventDetails.all.get_EventData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_EventData
   (
      this : in out PrintNotificationEventDetails;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPrintNotificationEventDetails.all.put_EventData (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskConfiguration

   procedure Initialize (this : in out PrintTaskConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskConfiguration, IPrintTaskConfiguration_Ptr);
   begin
      if this.m_IPrintTaskConfiguration /= null then
         if this.m_IPrintTaskConfiguration.all /= null then
            RefCount := this.m_IPrintTaskConfiguration.all.Release;
            Free (this.m_IPrintTaskConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskConfiguration

   function get_PrinterExtensionContext
   (
      this : in out PrintTaskConfiguration
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IPrintTaskConfiguration.all.get_PrinterExtensionContext (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SaveRequested
   (
      this : in out PrintTaskConfiguration;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintTaskConfiguration.all.add_SaveRequested (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SaveRequested
   (
      this : in out PrintTaskConfiguration;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTaskConfiguration.all.remove_SaveRequested (eventCookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskConfigurationSaveRequest

   procedure Initialize (this : in out PrintTaskConfigurationSaveRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskConfigurationSaveRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskConfigurationSaveRequest, IPrintTaskConfigurationSaveRequest_Ptr);
   begin
      if this.m_IPrintTaskConfigurationSaveRequest /= null then
         if this.m_IPrintTaskConfigurationSaveRequest.all /= null then
            RefCount := this.m_IPrintTaskConfigurationSaveRequest.all.Release;
            Free (this.m_IPrintTaskConfigurationSaveRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskConfigurationSaveRequest

   procedure Cancel
   (
      this : in out PrintTaskConfigurationSaveRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTaskConfigurationSaveRequest.all.Cancel;
   end;

   procedure Save
   (
      this : in out PrintTaskConfigurationSaveRequest;
      printerExtensionContext : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTaskConfigurationSaveRequest.all.Save (printerExtensionContext);
   end;

   function GetDeferral
   (
      this : in out PrintTaskConfigurationSaveRequest
   )
   return WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Printers.Extensions.IPrintTaskConfigurationSaveRequestedDeferral;
   begin
      return RetVal : WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedDeferral do
         Hr := this.m_IPrintTaskConfigurationSaveRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IPrintTaskConfigurationSaveRequestedDeferral := new Windows.Devices.Printers.Extensions.IPrintTaskConfigurationSaveRequestedDeferral;
         Retval.m_IPrintTaskConfigurationSaveRequestedDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_Deadline
   (
      this : in out PrintTaskConfigurationSaveRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPrintTaskConfigurationSaveRequest.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskConfigurationSaveRequestedDeferral

   procedure Initialize (this : in out PrintTaskConfigurationSaveRequestedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskConfigurationSaveRequestedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskConfigurationSaveRequestedDeferral, IPrintTaskConfigurationSaveRequestedDeferral_Ptr);
   begin
      if this.m_IPrintTaskConfigurationSaveRequestedDeferral /= null then
         if this.m_IPrintTaskConfigurationSaveRequestedDeferral.all /= null then
            RefCount := this.m_IPrintTaskConfigurationSaveRequestedDeferral.all.Release;
            Free (this.m_IPrintTaskConfigurationSaveRequestedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskConfigurationSaveRequestedDeferral

   procedure Complete
   (
      this : in out PrintTaskConfigurationSaveRequestedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintTaskConfigurationSaveRequestedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintTaskConfigurationSaveRequestedEventArgs

   procedure Initialize (this : in out PrintTaskConfigurationSaveRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintTaskConfigurationSaveRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintTaskConfigurationSaveRequestedEventArgs, IPrintTaskConfigurationSaveRequestedEventArgs_Ptr);
   begin
      if this.m_IPrintTaskConfigurationSaveRequestedEventArgs /= null then
         if this.m_IPrintTaskConfigurationSaveRequestedEventArgs.all /= null then
            RefCount := this.m_IPrintTaskConfigurationSaveRequestedEventArgs.all.Release;
            Free (this.m_IPrintTaskConfigurationSaveRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintTaskConfigurationSaveRequestedEventArgs

   function get_Request
   (
      this : in out PrintTaskConfigurationSaveRequestedEventArgs
   )
   return WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Printers.Extensions.IPrintTaskConfigurationSaveRequest;
   begin
      return RetVal : WinRt.Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequest do
         Hr := this.m_IPrintTaskConfigurationSaveRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IPrintTaskConfigurationSaveRequest := new Windows.Devices.Printers.Extensions.IPrintTaskConfigurationSaveRequest;
         Retval.m_IPrintTaskConfigurationSaveRequest.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.I2c.Provider;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.I2c is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_I2cController is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.I2c.II2cController);
   package AsyncOperationCompletedHandler_I2cController is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.I2c.II2cController);

   package IAsyncOperation_I2cDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.I2c.II2cDevice);
   package AsyncOperationCompletedHandler_I2cDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.I2c.II2cDevice);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for I2cConnectionSettings

   procedure Initialize (this : in out I2cConnectionSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out I2cConnectionSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (II2cConnectionSettings, II2cConnectionSettings_Ptr);
   begin
      if this.m_II2cConnectionSettings /= null then
         if this.m_II2cConnectionSettings.all /= null then
            RefCount := this.m_II2cConnectionSettings.all.Release;
            Free (this.m_II2cConnectionSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for I2cConnectionSettings

   function Constructor
   (
      slaveAddress : WinRt.Int32
   )
   return I2cConnectionSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.I2c.I2cConnectionSettings");
      m_Factory    : access II2cConnectionSettingsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.I2c.II2cConnectionSettings;
   begin
      return RetVal : I2cConnectionSettings do
         Hr := RoGetActivationFactory (m_hString, IID_II2cConnectionSettingsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (slaveAddress, m_ComRetVal'Access);
            Retval.m_II2cConnectionSettings := new Windows.Devices.I2c.II2cConnectionSettings;
            Retval.m_II2cConnectionSettings.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for I2cConnectionSettings

   function get_SlaveAddress
   (
      this : in out I2cConnectionSettings
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_II2cConnectionSettings.all.get_SlaveAddress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SlaveAddress
   (
      this : in out I2cConnectionSettings;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_II2cConnectionSettings.all.put_SlaveAddress (value);
   end;

   function get_BusSpeed
   (
      this : in out I2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.I2cBusSpeed is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.I2cBusSpeed;
   begin
      Hr := this.m_II2cConnectionSettings.all.get_BusSpeed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BusSpeed
   (
      this : in out I2cConnectionSettings;
      value : Windows.Devices.I2c.I2cBusSpeed
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_II2cConnectionSettings.all.put_BusSpeed (value);
   end;

   function get_SharingMode
   (
      this : in out I2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.I2cSharingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.I2cSharingMode;
   begin
      Hr := this.m_II2cConnectionSettings.all.get_SharingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SharingMode
   (
      this : in out I2cConnectionSettings;
      value : Windows.Devices.I2c.I2cSharingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_II2cConnectionSettings.all.put_SharingMode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for I2cController

   procedure Initialize (this : in out I2cController) is
   begin
      null;
   end;

   procedure Finalize (this : in out I2cController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (II2cController, II2cController_Ptr);
   begin
      if this.m_II2cController /= null then
         if this.m_II2cController.all /= null then
            RefCount := this.m_II2cController.all.Release;
            Free (this.m_II2cController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for I2cController

   function GetControllersAsync
   (
      provider : Windows.Devices.I2c.Provider.II2cProvider
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.I2c.I2cController");
      m_Factory        : access WinRt.Windows.Devices.I2c.II2cControllerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2012557303, 43936, 21691, (137, 26, 73, 53, 26, 131, 142, 51 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1000176817, 44555, 22191, (142, 213, 104, 86, 177, 231, 205, 91 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_II2cControllerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetControllersAsync (provider, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetDefaultAsync
   return WinRt.Windows.Devices.I2c.I2cController is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.I2c.I2cController");
      m_Factory        : access WinRt.Windows.Devices.I2c.II2cControllerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_I2cController.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_I2cController.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.I2c.II2cController;
      m_IID            : aliased WinRt.IID := (2767920596, 32969, 23137, (174, 141, 200, 167, 175, 192, 50, 117 )); -- Windows.Devices.I2c.I2cController;
      m_HandlerIID     : aliased WinRt.IID := (1878412146, 42410, 22918, (181, 99, 39, 97, 42, 251, 55, 60 ));
      m_Handler        : AsyncOperationCompletedHandler_I2cController.Kind := new AsyncOperationCompletedHandler_I2cController.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_I2cController.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_I2cController.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_I2cController.Kind_Delegate, AsyncOperationCompletedHandler_I2cController.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.I2c.I2cController do
         Hr := RoGetActivationFactory (m_hString, IID_II2cControllerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_II2cController := new Windows.Devices.I2c.II2cController;
                     Retval.m_II2cController.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for I2cController

   function GetDevice
   (
      this : in out I2cController;
      settings : Windows.Devices.I2c.I2cConnectionSettings'Class
   )
   return WinRt.Windows.Devices.I2c.I2cDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.II2cDevice;
   begin
      return RetVal : WinRt.Windows.Devices.I2c.I2cDevice do
         Hr := this.m_II2cController.all.GetDevice (settings.m_II2cConnectionSettings.all, m_ComRetVal'Access);
         Retval.m_II2cDevice := new Windows.Devices.I2c.II2cDevice;
         Retval.m_II2cDevice.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for I2cDevice

   procedure Initialize (this : in out I2cDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out I2cDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (II2cDevice, II2cDevice_Ptr);
   begin
      if this.m_II2cDevice /= null then
         if this.m_II2cDevice.all /= null then
            RefCount := this.m_II2cDevice.all.Release;
            Free (this.m_II2cDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for I2cDevice

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.I2c.I2cDevice");
      m_Factory        : access WinRt.Windows.Devices.I2c.II2cDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_II2cDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector
   (
      friendlyName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.I2c.I2cDevice");
      m_Factory        : access WinRt.Windows.Devices.I2c.II2cDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_friendlyName : WinRt.HString := To_HString (friendlyName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_II2cDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (HStr_friendlyName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_friendlyName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString;
      settings : Windows.Devices.I2c.I2cConnectionSettings'Class
   )
   return WinRt.Windows.Devices.I2c.I2cDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.I2c.I2cDevice");
      m_Factory        : access WinRt.Windows.Devices.I2c.II2cDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_I2cDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_I2cDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.I2c.II2cDevice;
      m_IID            : aliased WinRt.IID := (512392408, 58395, 23105, (130, 177, 128, 5, 80, 18, 174, 0 )); -- Windows.Devices.I2c.I2cDevice;
      m_HandlerIID     : aliased WinRt.IID := (771079018, 24179, 23267, (160, 178, 34, 225, 201, 216, 239, 77 ));
      m_Handler        : AsyncOperationCompletedHandler_I2cDevice.Kind := new AsyncOperationCompletedHandler_I2cDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_I2cDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_I2cDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_I2cDevice.Kind_Delegate, AsyncOperationCompletedHandler_I2cDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.I2c.I2cDevice do
         Hr := RoGetActivationFactory (m_hString, IID_II2cDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, settings.m_II2cConnectionSettings.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_II2cDevice := new Windows.Devices.I2c.II2cDevice;
                     Retval.m_II2cDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for I2cDevice

   function get_DeviceId
   (
      this : in out I2cDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_II2cDevice.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ConnectionSettings
   (
      this : in out I2cDevice
   )
   return WinRt.Windows.Devices.I2c.I2cConnectionSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.II2cConnectionSettings;
   begin
      return RetVal : WinRt.Windows.Devices.I2c.I2cConnectionSettings do
         Hr := this.m_II2cDevice.all.get_ConnectionSettings (m_ComRetVal'Access);
         Retval.m_II2cConnectionSettings := new Windows.Devices.I2c.II2cConnectionSettings;
         Retval.m_II2cConnectionSettings.all := m_ComRetVal;
      end return;
   end;

   procedure Write
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_buffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_II2cDevice.all.Write (WinRt.UInt32(buffer'Length), Convert_buffer (buffer (buffer'First)'Address));
   end;

   function WritePartial
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   )
   return WinRt.Windows.Devices.I2c.I2cTransferResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.I2cTransferResult;
      function Convert_buffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_II2cDevice.all.WritePartial (WinRt.UInt32(buffer'Length), Convert_buffer (buffer (buffer'First)'Address), m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Read
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_buffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_II2cDevice.all.Read (WinRt.UInt32(buffer'Length), Convert_buffer (buffer (buffer'First)'Address));
   end;

   function ReadPartial
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   )
   return WinRt.Windows.Devices.I2c.I2cTransferResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.I2cTransferResult;
      function Convert_buffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_II2cDevice.all.ReadPartial (WinRt.UInt32(buffer'Length), Convert_buffer (buffer (buffer'First)'Address), m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure WriteRead
   (
      this : in out I2cDevice;
      writeBuffer : WinRt.Byte_Array;
      readBuffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_writeBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_readBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_II2cDevice.all.WriteRead (WinRt.UInt32(writeBuffer'Length), Convert_writeBuffer (writeBuffer (writeBuffer'First)'Address), WinRt.UInt32(readBuffer'Length), Convert_readBuffer (readBuffer (readBuffer'First)'Address));
   end;

   function WriteReadPartial
   (
      this : in out I2cDevice;
      writeBuffer : WinRt.Byte_Array;
      readBuffer : WinRt.Byte_Array
   )
   return WinRt.Windows.Devices.I2c.I2cTransferResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.I2cTransferResult;
      function Convert_writeBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_readBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_II2cDevice.all.WriteReadPartial (WinRt.UInt32(writeBuffer'Length), Convert_writeBuffer (writeBuffer (writeBuffer'First)'Address), WinRt.UInt32(readBuffer'Length), Convert_readBuffer (readBuffer (readBuffer'First)'Address), m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out I2cDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.I2c.II2cDevice_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_II2cDevice.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Media.Capture;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Media.Devices;
with WinRt.Windows.Media.Effects;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Media.Render;
with WinRt.Windows.Media.Transcoding;
with WinRt.Windows.Storage;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Audio is

   package IAsyncOperation_TranscodeFailureReason is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Transcoding.TranscodeFailureReason);
   package AsyncOperationCompletedHandler_TranscodeFailureReason is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Transcoding.TranscodeFailureReason);

   package IAsyncOperation_CreateAudioDeviceInputNodeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult);
   package AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult);

   package IAsyncOperation_CreateAudioDeviceOutputNodeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult);
   package AsyncOperationCompletedHandler_CreateAudioDeviceOutputNodeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult);

   package IAsyncOperation_CreateAudioFileInputNodeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.ICreateAudioFileInputNodeResult);
   package AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.ICreateAudioFileInputNodeResult);

   package IAsyncOperation_CreateAudioFileOutputNodeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.ICreateAudioFileOutputNodeResult);
   package AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.ICreateAudioFileOutputNodeResult);

   package IAsyncOperation_CreateMediaSourceAudioInputNodeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult);
   package AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult);

   package IAsyncOperation_CreateAudioGraphResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.ICreateAudioGraphResult);
   package AsyncOperationCompletedHandler_CreateAudioGraphResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.ICreateAudioGraphResult);

   package IAsyncOperation_AudioPlaybackConnectionOpenResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.IAudioPlaybackConnectionOpenResult);
   package AsyncOperationCompletedHandler_AudioPlaybackConnectionOpenResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.IAudioPlaybackConnectionOpenResult);

   package IAsyncOperation_SetDefaultSpatialAudioFormatResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.ISetDefaultSpatialAudioFormatResult);
   package AsyncOperationCompletedHandler_SetDefaultSpatialAudioFormatResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.ISetDefaultSpatialAudioFormatResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioDeviceInputNode

   procedure Initialize (this : in out AudioDeviceInputNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioDeviceInputNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioDeviceInputNode, IAudioDeviceInputNode_Ptr);
   begin
      if this.m_IAudioDeviceInputNode /= null then
         if this.m_IAudioDeviceInputNode.all /= null then
            RefCount := this.m_IAudioDeviceInputNode.all.Release;
            Free (this.m_IAudioDeviceInputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioDeviceInputNode

   function get_Device
   (
      this : in out AudioDeviceInputNode
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IAudioDeviceInputNode.all.get_Device (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_OutgoingConnections
   (
      this : in out AudioDeviceInputNode
   )
   return IVectorView_IAudioGraphConnection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioGraphConnection.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.get_OutgoingConnections (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAudioGraphConnection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioDeviceInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioDeviceInputNode;
      destination : Windows.Media.Audio.IAudioNode;
      gain : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination, gain);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveOutgoingConnection
   (
      this : in out AudioDeviceInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.RemoveOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   function get_EffectDefinitions
   (
      this : in out AudioDeviceInputNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out AudioDeviceInputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out AudioDeviceInputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioDeviceInputNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out AudioDeviceInputNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out AudioDeviceInputNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out AudioDeviceInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out AudioDeviceInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out AudioDeviceInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out AudioDeviceInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out AudioDeviceInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AudioDeviceInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Emitter
   (
      this : in out AudioDeviceInputNode
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitter;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode2, WinRt.Windows.Media.Audio.IID_IAudioInputNode2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitter do
         m_Interface := QInterface (this.m_IAudioDeviceInputNode.all);
         Hr := m_Interface.get_Emitter (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioNodeEmitter := new Windows.Media.Audio.IAudioNodeEmitter;
         Retval.m_IAudioNodeEmitter.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioDeviceOutputNode

   procedure Initialize (this : in out AudioDeviceOutputNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioDeviceOutputNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioDeviceOutputNode, IAudioDeviceOutputNode_Ptr);
   begin
      if this.m_IAudioDeviceOutputNode /= null then
         if this.m_IAudioDeviceOutputNode.all /= null then
            RefCount := this.m_IAudioDeviceOutputNode.all.Release;
            Free (this.m_IAudioDeviceOutputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioDeviceOutputNode

   function get_Device
   (
      this : in out AudioDeviceOutputNode
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IAudioDeviceOutputNode.all.get_Device (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_EffectDefinitions
   (
      this : in out AudioDeviceOutputNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out AudioDeviceOutputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out AudioDeviceOutputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioDeviceOutputNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out AudioDeviceOutputNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out AudioDeviceOutputNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out AudioDeviceOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out AudioDeviceOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out AudioDeviceOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out AudioDeviceOutputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out AudioDeviceOutputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AudioDeviceOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Listener
   (
      this : in out AudioDeviceOutputNode;
      value : Windows.Media.Audio.AudioNodeListener'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNodeWithListener := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNodeWithListener, WinRt.Windows.Media.Audio.IID_IAudioNodeWithListener'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
      Hr := m_Interface.put_Listener (value.m_IAudioNodeListener.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_Listener
   (
      this : in out AudioDeviceOutputNode
   )
   return WinRt.Windows.Media.Audio.AudioNodeListener'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNodeWithListener := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeListener;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioDeviceOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNodeWithListener, WinRt.Windows.Media.Audio.IID_IAudioNodeWithListener'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeListener do
         m_Interface := QInterface (this.m_IAudioDeviceOutputNode.all);
         Hr := m_Interface.get_Listener (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioNodeListener := new Windows.Media.Audio.IAudioNodeListener;
         Retval.m_IAudioNodeListener.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioFileInputNode

   procedure Initialize (this : in out AudioFileInputNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioFileInputNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioFileInputNode, IAudioFileInputNode_Ptr);
   begin
      if this.m_IAudioFileInputNode /= null then
         if this.m_IAudioFileInputNode.all /= null then
            RefCount := this.m_IAudioFileInputNode.all.Release;
            Free (this.m_IAudioFileInputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioFileInputNode

   procedure put_PlaybackSpeedFactor
   (
      this : in out AudioFileInputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFileInputNode.all.put_PlaybackSpeedFactor (value);
   end;

   function get_PlaybackSpeedFactor
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioFileInputNode.all.get_PlaybackSpeedFactor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAudioFileInputNode.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out AudioFileInputNode;
      position : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFileInputNode.all.Seek (position);
   end;

   function get_StartTime
   (
      this : in out AudioFileInputNode
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAudioFileInputNode.all.get_StartTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_StartTime
   (
      this : in out AudioFileInputNode;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFileInputNode.all.put_StartTime (value);
   end;

   function get_EndTime
   (
      this : in out AudioFileInputNode
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAudioFileInputNode.all.get_EndTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_EndTime
   (
      this : in out AudioFileInputNode;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFileInputNode.all.put_EndTime (value);
   end;

   function get_LoopCount
   (
      this : in out AudioFileInputNode
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IAudioFileInputNode.all.get_LoopCount (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_LoopCount
   (
      this : in out AudioFileInputNode;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFileInputNode.all.put_LoopCount (value);
   end;

   function get_Duration
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAudioFileInputNode.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SourceFile
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IAudioFileInputNode.all.get_SourceFile (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function add_FileCompleted
   (
      this : in out AudioFileInputNode;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioFileInputNode.all.add_FileCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FileCompleted
   (
      this : in out AudioFileInputNode;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFileInputNode.all.remove_FileCompleted (token);
   end;

   function get_OutgoingConnections
   (
      this : in out AudioFileInputNode
   )
   return IVectorView_IAudioGraphConnection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioGraphConnection.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.get_OutgoingConnections (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAudioGraphConnection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioFileInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioFileInputNode;
      destination : Windows.Media.Audio.IAudioNode;
      gain : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination, gain);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveOutgoingConnection
   (
      this : in out AudioFileInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.RemoveOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   function get_EffectDefinitions
   (
      this : in out AudioFileInputNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out AudioFileInputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioFileInputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out AudioFileInputNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out AudioFileInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out AudioFileInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out AudioFileInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out AudioFileInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out AudioFileInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AudioFileInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileInputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Emitter
   (
      this : in out AudioFileInputNode
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitter;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode2, WinRt.Windows.Media.Audio.IID_IAudioInputNode2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitter do
         m_Interface := QInterface (this.m_IAudioFileInputNode.all);
         Hr := m_Interface.get_Emitter (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioNodeEmitter := new Windows.Media.Audio.IAudioNodeEmitter;
         Retval.m_IAudioNodeEmitter.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioFileOutputNode

   procedure Initialize (this : in out AudioFileOutputNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioFileOutputNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioFileOutputNode, IAudioFileOutputNode_Ptr);
   begin
      if this.m_IAudioFileOutputNode /= null then
         if this.m_IAudioFileOutputNode.all /= null then
            RefCount := this.m_IAudioFileOutputNode.all.Release;
            Free (this.m_IAudioFileOutputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioFileOutputNode

   function get_File
   (
      this : in out AudioFileOutputNode
   )
   return WinRt.Windows.Storage.IStorageFile is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      Hr := this.m_IAudioFileOutputNode.all.get_File (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FileEncodingProfile
   (
      this : in out AudioFileOutputNode
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := this.m_IAudioFileOutputNode.all.get_FileEncodingProfile (m_ComRetVal'Access);
         Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
         Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
      end return;
   end;

   function FinalizeAsync
   (
      this : in out AudioFileOutputNode
   )
   return WinRt.Windows.Media.Transcoding.TranscodeFailureReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_TranscodeFailureReason.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_TranscodeFailureReason.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Transcoding.TranscodeFailureReason;
      m_IID            : aliased WinRt.IID := (34809104, 14489, 21079, (190, 217, 164, 62, 81, 73, 210, 140 )); -- Windows.Media.Transcoding.TranscodeFailureReason;
      m_HandlerIID     : aliased WinRt.IID := (3291144895, 57748, 20857, (184, 173, 3, 181, 28, 4, 225, 218 ));
      m_Handler        : AsyncOperationCompletedHandler_TranscodeFailureReason.Kind := new AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_TranscodeFailureReason.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_TranscodeFailureReason.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAudioFileOutputNode.all.FinalizeAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_EffectDefinitions
   (
      this : in out AudioFileOutputNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out AudioFileOutputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out AudioFileOutputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioFileOutputNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out AudioFileOutputNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out AudioFileOutputNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out AudioFileOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out AudioFileOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out AudioFileOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out AudioFileOutputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out AudioFileOutputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AudioFileOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFileOutputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFileOutputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioFrameCompletedEventArgs

   procedure Initialize (this : in out AudioFrameCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioFrameCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioFrameCompletedEventArgs, IAudioFrameCompletedEventArgs_Ptr);
   begin
      if this.m_IAudioFrameCompletedEventArgs /= null then
         if this.m_IAudioFrameCompletedEventArgs.all /= null then
            RefCount := this.m_IAudioFrameCompletedEventArgs.all.Release;
            Free (this.m_IAudioFrameCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioFrameCompletedEventArgs

   function get_Frame
   (
      this : in out AudioFrameCompletedEventArgs
   )
   return WinRt.Windows.Media.AudioFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IAudioFrame;
   begin
      return RetVal : WinRt.Windows.Media.AudioFrame do
         Hr := this.m_IAudioFrameCompletedEventArgs.all.get_Frame (m_ComRetVal'Access);
         Retval.m_IAudioFrame := new Windows.Media.IAudioFrame;
         Retval.m_IAudioFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioFrameInputNode

   procedure Initialize (this : in out AudioFrameInputNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioFrameInputNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioFrameInputNode, IAudioFrameInputNode_Ptr);
   begin
      if this.m_IAudioFrameInputNode /= null then
         if this.m_IAudioFrameInputNode.all /= null then
            RefCount := this.m_IAudioFrameInputNode.all.Release;
            Free (this.m_IAudioFrameInputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioFrameInputNode

   procedure put_PlaybackSpeedFactor
   (
      this : in out AudioFrameInputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFrameInputNode.all.put_PlaybackSpeedFactor (value);
   end;

   function get_PlaybackSpeedFactor
   (
      this : in out AudioFrameInputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioFrameInputNode.all.get_PlaybackSpeedFactor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AddFrame
   (
      this : in out AudioFrameInputNode;
      frame : Windows.Media.AudioFrame'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFrameInputNode.all.AddFrame (frame.m_IAudioFrame.all);
   end;

   procedure DiscardQueuedFrames
   (
      this : in out AudioFrameInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFrameInputNode.all.DiscardQueuedFrames;
   end;

   function get_QueuedSampleCount
   (
      this : in out AudioFrameInputNode
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAudioFrameInputNode.all.get_QueuedSampleCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_AudioFrameCompleted
   (
      this : in out AudioFrameInputNode;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioFrameInputNode.all.add_AudioFrameCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AudioFrameCompleted
   (
      this : in out AudioFrameInputNode;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFrameInputNode.all.remove_AudioFrameCompleted (token);
   end;

   function add_QuantumStarted
   (
      this : in out AudioFrameInputNode;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioFrameInputNode.all.add_QuantumStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_QuantumStarted
   (
      this : in out AudioFrameInputNode;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioFrameInputNode.all.remove_QuantumStarted (token);
   end;

   function get_OutgoingConnections
   (
      this : in out AudioFrameInputNode
   )
   return IVectorView_IAudioGraphConnection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioGraphConnection.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.get_OutgoingConnections (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAudioGraphConnection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioFrameInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioFrameInputNode;
      destination : Windows.Media.Audio.IAudioNode;
      gain : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination, gain);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveOutgoingConnection
   (
      this : in out AudioFrameInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.RemoveOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   function get_EffectDefinitions
   (
      this : in out AudioFrameInputNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out AudioFrameInputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out AudioFrameInputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioFrameInputNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out AudioFrameInputNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out AudioFrameInputNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out AudioFrameInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out AudioFrameInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out AudioFrameInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out AudioFrameInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out AudioFrameInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AudioFrameInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Emitter
   (
      this : in out AudioFrameInputNode
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitter;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode2, WinRt.Windows.Media.Audio.IID_IAudioInputNode2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitter do
         m_Interface := QInterface (this.m_IAudioFrameInputNode.all);
         Hr := m_Interface.get_Emitter (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioNodeEmitter := new Windows.Media.Audio.IAudioNodeEmitter;
         Retval.m_IAudioNodeEmitter.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioFrameOutputNode

   procedure Initialize (this : in out AudioFrameOutputNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioFrameOutputNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioFrameOutputNode, IAudioFrameOutputNode_Ptr);
   begin
      if this.m_IAudioFrameOutputNode /= null then
         if this.m_IAudioFrameOutputNode.all /= null then
            RefCount := this.m_IAudioFrameOutputNode.all.Release;
            Free (this.m_IAudioFrameOutputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioFrameOutputNode

   function GetFrame
   (
      this : in out AudioFrameOutputNode
   )
   return WinRt.Windows.Media.AudioFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IAudioFrame;
   begin
      return RetVal : WinRt.Windows.Media.AudioFrame do
         Hr := this.m_IAudioFrameOutputNode.all.GetFrame (m_ComRetVal'Access);
         Retval.m_IAudioFrame := new Windows.Media.IAudioFrame;
         Retval.m_IAudioFrame.all := m_ComRetVal;
      end return;
   end;

   function get_EffectDefinitions
   (
      this : in out AudioFrameOutputNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out AudioFrameOutputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out AudioFrameOutputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioFrameOutputNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out AudioFrameOutputNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out AudioFrameOutputNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out AudioFrameOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out AudioFrameOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out AudioFrameOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out AudioFrameOutputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out AudioFrameOutputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AudioFrameOutputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioFrameOutputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrameOutputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioGraph

   procedure Initialize (this : in out AudioGraph) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioGraph) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioGraph, IAudioGraph_Ptr);
   begin
      if this.m_IAudioGraph /= null then
         if this.m_IAudioGraph.all /= null then
            RefCount := this.m_IAudioGraph.all.Release;
            Free (this.m_IAudioGraph);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AudioGraph

   function CreateAsync
   (
      settings : Windows.Media.Audio.AudioGraphSettings'Class
   )
   return WinRt.Windows.Media.Audio.CreateAudioGraphResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioGraph");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioGraphStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioGraphResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioGraphResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioGraphResult;
      m_IID            : aliased WinRt.IID := (1041478705, 26062, 23547, (176, 170, 250, 200, 223, 149, 139, 149 )); -- Windows.Media.Audio.CreateAudioGraphResult;
      m_HandlerIID     : aliased WinRt.IID := (1315310554, 54328, 22337, (139, 102, 133, 254, 114, 87, 74, 171 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioGraphResult.Kind := new AsyncOperationCompletedHandler_CreateAudioGraphResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioGraphResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioGraphResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioGraphResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioGraphResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioGraphResult do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioGraphStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (settings.m_IAudioGraphSettings.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ICreateAudioGraphResult := new Windows.Media.Audio.ICreateAudioGraphResult;
                     Retval.m_ICreateAudioGraphResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioGraph

   function CreateFrameInputNode
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Media.Audio.AudioFrameInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioFrameInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioFrameInputNode do
         Hr := this.m_IAudioGraph.all.CreateFrameInputNode (m_ComRetVal'Access);
         Retval.m_IAudioFrameInputNode := new Windows.Media.Audio.IAudioFrameInputNode;
         Retval.m_IAudioFrameInputNode.all := m_ComRetVal;
      end return;
   end;

   function CreateFrameInputNode
   (
      this : in out AudioGraph;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class
   )
   return WinRt.Windows.Media.Audio.AudioFrameInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioFrameInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioFrameInputNode do
         Hr := this.m_IAudioGraph.all.CreateFrameInputNode (encodingProperties.m_IAudioEncodingProperties.all, m_ComRetVal'Access);
         Retval.m_IAudioFrameInputNode := new Windows.Media.Audio.IAudioFrameInputNode;
         Retval.m_IAudioFrameInputNode.all := m_ComRetVal;
      end return;
   end;

   function CreateDeviceInputNodeAsync
   (
      this : in out AudioGraph;
      category : Windows.Media.Capture.MediaCategory
   )
   return WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
      m_IID            : aliased WinRt.IID := (1907049601, 60490, 24297, (163, 66, 58, 49, 116, 120, 41, 184 )); -- Windows.Media.Audio.CreateAudioDeviceInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (1824875600, 58600, 22985, (131, 216, 99, 228, 110, 172, 178, 11 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult do
         Hr := this.m_IAudioGraph.all.CreateDeviceInputNodeAsync (category, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioDeviceInputNodeResult := new Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
                  Retval.m_ICreateAudioDeviceInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateDeviceInputNodeAsync
   (
      this : in out AudioGraph;
      category : Windows.Media.Capture.MediaCategory;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class
   )
   return WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
      m_IID            : aliased WinRt.IID := (1907049601, 60490, 24297, (163, 66, 58, 49, 116, 120, 41, 184 )); -- Windows.Media.Audio.CreateAudioDeviceInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (1824875600, 58600, 22985, (131, 216, 99, 228, 110, 172, 178, 11 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult do
         Hr := this.m_IAudioGraph.all.CreateDeviceInputNodeAsync (category, encodingProperties.m_IAudioEncodingProperties.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioDeviceInputNodeResult := new Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
                  Retval.m_ICreateAudioDeviceInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateDeviceInputNodeAsync
   (
      this : in out AudioGraph;
      category : Windows.Media.Capture.MediaCategory;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class;
      device : Windows.Devices.Enumeration.DeviceInformation'Class
   )
   return WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
      m_IID            : aliased WinRt.IID := (1907049601, 60490, 24297, (163, 66, 58, 49, 116, 120, 41, 184 )); -- Windows.Media.Audio.CreateAudioDeviceInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (1824875600, 58600, 22985, (131, 216, 99, 228, 110, 172, 178, 11 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult do
         Hr := this.m_IAudioGraph.all.CreateDeviceInputNodeAsync (category, encodingProperties.m_IAudioEncodingProperties.all, device.m_IDeviceInformation.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioDeviceInputNodeResult := new Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
                  Retval.m_ICreateAudioDeviceInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFrameOutputNode
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Media.Audio.AudioFrameOutputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioFrameOutputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioFrameOutputNode do
         Hr := this.m_IAudioGraph.all.CreateFrameOutputNode (m_ComRetVal'Access);
         Retval.m_IAudioFrameOutputNode := new Windows.Media.Audio.IAudioFrameOutputNode;
         Retval.m_IAudioFrameOutputNode.all := m_ComRetVal;
      end return;
   end;

   function CreateFrameOutputNode
   (
      this : in out AudioGraph;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class
   )
   return WinRt.Windows.Media.Audio.AudioFrameOutputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioFrameOutputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioFrameOutputNode do
         Hr := this.m_IAudioGraph.all.CreateFrameOutputNode (encodingProperties.m_IAudioEncodingProperties.all, m_ComRetVal'Access);
         Retval.m_IAudioFrameOutputNode := new Windows.Media.Audio.IAudioFrameOutputNode;
         Retval.m_IAudioFrameOutputNode.all := m_ComRetVal;
      end return;
   end;

   function CreateDeviceOutputNodeAsync
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Media.Audio.CreateAudioDeviceOutputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioDeviceOutputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioDeviceOutputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult;
      m_IID            : aliased WinRt.IID := (4161853232, 56853, 22752, (165, 244, 193, 89, 247, 54, 105, 237 )); -- Windows.Media.Audio.CreateAudioDeviceOutputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (3988560729, 31918, 20799, (176, 220, 23, 102, 109, 55, 186, 119 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioDeviceOutputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioDeviceOutputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioDeviceOutputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioDeviceOutputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioDeviceOutputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioDeviceOutputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioDeviceOutputNodeResult do
         Hr := this.m_IAudioGraph.all.CreateDeviceOutputNodeAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioDeviceOutputNodeResult := new Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult;
                  Retval.m_ICreateAudioDeviceOutputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFileInputNodeAsync
   (
      this : in out AudioGraph;
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.Audio.CreateAudioFileInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioFileInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioFileInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioFileInputNodeResult;
      m_IID            : aliased WinRt.IID := (1195050687, 14459, 22218, (190, 225, 82, 116, 128, 39, 43, 15 )); -- Windows.Media.Audio.CreateAudioFileInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (1347231485, 49436, 20590, (184, 201, 175, 23, 199, 113, 239, 181 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioFileInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioFileInputNodeResult do
         Hr := this.m_IAudioGraph.all.CreateFileInputNodeAsync (file, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioFileInputNodeResult := new Windows.Media.Audio.ICreateAudioFileInputNodeResult;
                  Retval.m_ICreateAudioFileInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFileOutputNodeAsync
   (
      this : in out AudioGraph;
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.Audio.CreateAudioFileOutputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioFileOutputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioFileOutputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioFileOutputNodeResult;
      m_IID            : aliased WinRt.IID := (291787133, 59731, 21525, (165, 179, 66, 73, 169, 105, 190, 123 )); -- Windows.Media.Audio.CreateAudioFileOutputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (2812892947, 41103, 24543, (137, 198, 150, 39, 188, 245, 216, 10 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioFileOutputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioFileOutputNodeResult do
         Hr := this.m_IAudioGraph.all.CreateFileOutputNodeAsync (file, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioFileOutputNodeResult := new Windows.Media.Audio.ICreateAudioFileOutputNodeResult;
                  Retval.m_ICreateAudioFileOutputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFileOutputNodeAsync
   (
      this : in out AudioGraph;
      file : Windows.Storage.IStorageFile;
      fileEncodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class
   )
   return WinRt.Windows.Media.Audio.CreateAudioFileOutputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioFileOutputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioFileOutputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioFileOutputNodeResult;
      m_IID            : aliased WinRt.IID := (291787133, 59731, 21525, (165, 179, 66, 73, 169, 105, 190, 123 )); -- Windows.Media.Audio.CreateAudioFileOutputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (2812892947, 41103, 24543, (137, 198, 150, 39, 188, 245, 216, 10 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioFileOutputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioFileOutputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioFileOutputNodeResult do
         Hr := this.m_IAudioGraph.all.CreateFileOutputNodeAsync (file, fileEncodingProfile.m_IMediaEncodingProfile.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioFileOutputNodeResult := new Windows.Media.Audio.ICreateAudioFileOutputNodeResult;
                  Retval.m_ICreateAudioFileOutputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateSubmixNode
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Media.Audio.AudioSubmixNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioSubmixNode do
         Hr := this.m_IAudioGraph.all.CreateSubmixNode (m_ComRetVal'Access);
         Retval.m_IAudioInputNode := new Windows.Media.Audio.IAudioInputNode;
         Retval.m_IAudioInputNode.all := m_ComRetVal;
      end return;
   end;

   function CreateSubmixNode
   (
      this : in out AudioGraph;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class
   )
   return WinRt.Windows.Media.Audio.AudioSubmixNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioSubmixNode do
         Hr := this.m_IAudioGraph.all.CreateSubmixNode (encodingProperties.m_IAudioEncodingProperties.all, m_ComRetVal'Access);
         Retval.m_IAudioInputNode := new Windows.Media.Audio.IAudioInputNode;
         Retval.m_IAudioInputNode.all := m_ComRetVal;
      end return;
   end;

   procedure Start
   (
      this : in out AudioGraph
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraph.all.Start;
   end;

   procedure Stop
   (
      this : in out AudioGraph
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraph.all.Stop;
   end;

   procedure ResetAllNodes
   (
      this : in out AudioGraph
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraph.all.ResetAllNodes;
   end;

   function add_QuantumStarted
   (
      this : in out AudioGraph;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioGraph.all.add_QuantumStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_QuantumStarted
   (
      this : in out AudioGraph;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraph.all.remove_QuantumStarted (token);
   end;

   function add_QuantumProcessed
   (
      this : in out AudioGraph;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioGraph.all.add_QuantumProcessed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_QuantumProcessed
   (
      this : in out AudioGraph;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraph.all.remove_QuantumProcessed (token);
   end;

   function add_UnrecoverableErrorOccurred
   (
      this : in out AudioGraph;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioGraph.all.add_UnrecoverableErrorOccurred (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UnrecoverableErrorOccurred
   (
      this : in out AudioGraph;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraph.all.remove_UnrecoverableErrorOccurred (token);
   end;

   function get_CompletedQuantumCount
   (
      this : in out AudioGraph
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAudioGraph.all.get_CompletedQuantumCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := this.m_IAudioGraph.all.get_EncodingProperties (m_ComRetVal'Access);
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_LatencyInSamples
   (
      this : in out AudioGraph
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAudioGraph.all.get_LatencyInSamples (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PrimaryRenderDevice
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IAudioGraph.all.get_PrimaryRenderDevice (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_RenderDeviceAudioProcessing
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Media.AudioProcessing is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AudioProcessing;
   begin
      Hr := this.m_IAudioGraph.all.get_RenderDeviceAudioProcessing (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SamplesPerQuantum
   (
      this : in out AudioGraph
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAudioGraph.all.get_SamplesPerQuantum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out AudioGraph
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioGraph.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function CreateFrameInputNode
   (
      this : in out AudioGraph;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class;
      emitter : Windows.Media.Audio.AudioNodeEmitter'Class
   )
   return WinRt.Windows.Media.Audio.AudioFrameInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraph2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioFrameInputNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Media.Audio.IAudioGraph2, WinRt.Windows.Media.Audio.IID_IAudioGraph2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioFrameInputNode do
         m_Interface := QInterface (this.m_IAudioGraph.all);
         Hr := m_Interface.CreateFrameInputNode (encodingProperties.m_IAudioEncodingProperties.all, emitter.m_IAudioNodeEmitter.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioFrameInputNode := new Windows.Media.Audio.IAudioFrameInputNode;
         Retval.m_IAudioFrameInputNode.all := m_ComRetVal;
      end return;
   end;

   function CreateDeviceInputNodeAsync
   (
      this : in out AudioGraph;
      category : Windows.Media.Capture.MediaCategory;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class;
      device : Windows.Devices.Enumeration.DeviceInformation'Class;
      emitter : Windows.Media.Audio.AudioNodeEmitter'Class
   )
   return WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraph2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
      m_IID            : aliased WinRt.IID := (1907049601, 60490, 24297, (163, 66, 58, 49, 116, 120, 41, 184 )); -- Windows.Media.Audio.CreateAudioDeviceInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (1824875600, 58600, 22985, (131, 216, 99, 228, 110, 172, 178, 11 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioDeviceInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioDeviceInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Media.Audio.IAudioGraph2, WinRt.Windows.Media.Audio.IID_IAudioGraph2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioDeviceInputNodeResult do
         m_Interface := QInterface (this.m_IAudioGraph.all);
         Hr := m_Interface.CreateDeviceInputNodeAsync (category, encodingProperties.m_IAudioEncodingProperties.all, device.m_IDeviceInformation.all, emitter.m_IAudioNodeEmitter.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioDeviceInputNodeResult := new Windows.Media.Audio.ICreateAudioDeviceInputNodeResult;
                  Retval.m_ICreateAudioDeviceInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFileInputNodeAsync
   (
      this : in out AudioGraph;
      file : Windows.Storage.IStorageFile;
      emitter : Windows.Media.Audio.AudioNodeEmitter'Class
   )
   return WinRt.Windows.Media.Audio.CreateAudioFileInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraph2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateAudioFileInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateAudioFileInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateAudioFileInputNodeResult;
      m_IID            : aliased WinRt.IID := (1195050687, 14459, 22218, (190, 225, 82, 116, 128, 39, 43, 15 )); -- Windows.Media.Audio.CreateAudioFileInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (1347231485, 49436, 20590, (184, 201, 175, 23, 199, 113, 239, 181 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateAudioFileInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateAudioFileInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Media.Audio.IAudioGraph2, WinRt.Windows.Media.Audio.IID_IAudioGraph2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateAudioFileInputNodeResult do
         m_Interface := QInterface (this.m_IAudioGraph.all);
         Hr := m_Interface.CreateFileInputNodeAsync (file, emitter.m_IAudioNodeEmitter.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateAudioFileInputNodeResult := new Windows.Media.Audio.ICreateAudioFileInputNodeResult;
                  Retval.m_ICreateAudioFileInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateSubmixNode
   (
      this : in out AudioGraph;
      encodingProperties : Windows.Media.MediaProperties.AudioEncodingProperties'Class;
      emitter : Windows.Media.Audio.AudioNodeEmitter'Class
   )
   return WinRt.Windows.Media.Audio.AudioSubmixNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraph2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioInputNode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Media.Audio.IAudioGraph2, WinRt.Windows.Media.Audio.IID_IAudioGraph2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioSubmixNode do
         m_Interface := QInterface (this.m_IAudioGraph.all);
         Hr := m_Interface.CreateSubmixNode (encodingProperties.m_IAudioEncodingProperties.all, emitter.m_IAudioNodeEmitter.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioInputNode := new Windows.Media.Audio.IAudioInputNode;
         Retval.m_IAudioInputNode.all := m_ComRetVal;
      end return;
   end;

   function CreateBatchUpdater
   (
      this : in out AudioGraph
   )
   return WinRt.Windows.Media.Audio.AudioGraphBatchUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraph2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IClosable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Media.Audio.IAudioGraph2, WinRt.Windows.Media.Audio.IID_IAudioGraph2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioGraphBatchUpdater do
         m_Interface := QInterface (this.m_IAudioGraph.all);
         Hr := m_Interface.CreateBatchUpdater (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IClosable := new Windows.Foundation.IClosable;
         Retval.m_IClosable.all := m_ComRetVal;
      end return;
   end;

   function CreateMediaSourceAudioInputNodeAsync
   (
      this : in out AudioGraph;
      mediaSource : Windows.Media.Core.MediaSource'Class
   )
   return WinRt.Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraph3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateMediaSourceAudioInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateMediaSourceAudioInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult;
      m_IID            : aliased WinRt.IID := (3332120819, 35068, 24378, (149, 208, 40, 22, 234, 228, 89, 104 )); -- Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (3832656966, 14849, 20880, (137, 201, 21, 231, 64, 55, 76, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateMediaSourceAudioInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Media.Audio.IAudioGraph3, WinRt.Windows.Media.Audio.IID_IAudioGraph3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult do
         m_Interface := QInterface (this.m_IAudioGraph.all);
         Hr := m_Interface.CreateMediaSourceAudioInputNodeAsync (mediaSource.m_IMediaSource2.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateMediaSourceAudioInputNodeResult := new Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult;
                  Retval.m_ICreateMediaSourceAudioInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateMediaSourceAudioInputNodeAsync
   (
      this : in out AudioGraph;
      mediaSource : Windows.Media.Core.MediaSource'Class;
      emitter : Windows.Media.Audio.AudioNodeEmitter'Class
   )
   return WinRt.Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraph3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CreateMediaSourceAudioInputNodeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CreateMediaSourceAudioInputNodeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult;
      m_IID            : aliased WinRt.IID := (3332120819, 35068, 24378, (149, 208, 40, 22, 234, 228, 89, 104 )); -- Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult;
      m_HandlerIID     : aliased WinRt.IID := (3832656966, 14849, 20880, (137, 201, 21, 231, 64, 55, 76, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind := new AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CreateMediaSourceAudioInputNodeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind_Delegate, AsyncOperationCompletedHandler_CreateMediaSourceAudioInputNodeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraph_Interface, WinRt.Windows.Media.Audio.IAudioGraph3, WinRt.Windows.Media.Audio.IID_IAudioGraph3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult do
         m_Interface := QInterface (this.m_IAudioGraph.all);
         Hr := m_Interface.CreateMediaSourceAudioInputNodeAsync (mediaSource.m_IMediaSource2.all, emitter.m_IAudioNodeEmitter.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICreateMediaSourceAudioInputNodeResult := new Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult;
                  Retval.m_ICreateMediaSourceAudioInputNodeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioGraphBatchUpdater

   procedure Initialize (this : in out AudioGraphBatchUpdater) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioGraphBatchUpdater) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Foundation.IClosable;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IClosable_Ptr);
   begin
      if this.m_IClosable /= null then
         if this.m_IClosable.all /= null then
            RefCount := this.m_IClosable.all.Release;
            Free (this.m_IClosable);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioGraphBatchUpdater

   procedure Close
   (
      this : in out AudioGraphBatchUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IClosable.all.Close;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioGraphConnection

   procedure Initialize (this : in out AudioGraphConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioGraphConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioGraphConnection, IAudioGraphConnection_Ptr);
   begin
      if this.m_IAudioGraphConnection /= null then
         if this.m_IAudioGraphConnection.all /= null then
            RefCount := this.m_IAudioGraphConnection.all.Release;
            Free (this.m_IAudioGraphConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioGraphConnection

   function get_Destination
   (
      this : in out AudioGraphConnection
   )
   return WinRt.Windows.Media.Audio.IAudioNode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNode;
   begin
      Hr := this.m_IAudioGraphConnection.all.get_Destination (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gain
   (
      this : in out AudioGraphConnection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraphConnection.all.put_Gain (value);
   end;

   function get_Gain
   (
      this : in out AudioGraphConnection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioGraphConnection.all.get_Gain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioGraphSettings

   procedure Initialize (this : in out AudioGraphSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioGraphSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioGraphSettings, IAudioGraphSettings_Ptr);
   begin
      if this.m_IAudioGraphSettings /= null then
         if this.m_IAudioGraphSettings.all /= null then
            RefCount := this.m_IAudioGraphSettings.all.Release;
            Free (this.m_IAudioGraphSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioGraphSettings

   function Constructor
   (
      audioRenderCategory : Windows.Media.Render.AudioRenderCategory
   )
   return AudioGraphSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.AudioGraphSettings");
      m_Factory    : access IAudioGraphSettingsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Audio.IAudioGraphSettings;
   begin
      return RetVal : AudioGraphSettings do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioGraphSettingsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (audioRenderCategory, m_ComRetVal'Access);
            Retval.m_IAudioGraphSettings := new Windows.Media.Audio.IAudioGraphSettings;
            Retval.m_IAudioGraphSettings.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioGraphSettings

   function get_EncodingProperties
   (
      this : in out AudioGraphSettings
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := this.m_IAudioGraphSettings.all.get_EncodingProperties (m_ComRetVal'Access);
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   procedure put_EncodingProperties
   (
      this : in out AudioGraphSettings;
      value : Windows.Media.MediaProperties.AudioEncodingProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraphSettings.all.put_EncodingProperties (value.m_IAudioEncodingProperties.all);
   end;

   function get_PrimaryRenderDevice
   (
      this : in out AudioGraphSettings
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IAudioGraphSettings.all.get_PrimaryRenderDevice (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   procedure put_PrimaryRenderDevice
   (
      this : in out AudioGraphSettings;
      value : Windows.Devices.Enumeration.DeviceInformation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraphSettings.all.put_PrimaryRenderDevice (value.m_IDeviceInformation.all);
   end;

   function get_QuantumSizeSelectionMode
   (
      this : in out AudioGraphSettings
   )
   return WinRt.Windows.Media.Audio.QuantumSizeSelectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.QuantumSizeSelectionMode;
   begin
      Hr := this.m_IAudioGraphSettings.all.get_QuantumSizeSelectionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_QuantumSizeSelectionMode
   (
      this : in out AudioGraphSettings;
      value : Windows.Media.Audio.QuantumSizeSelectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraphSettings.all.put_QuantumSizeSelectionMode (value);
   end;

   function get_DesiredSamplesPerQuantum
   (
      this : in out AudioGraphSettings
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IAudioGraphSettings.all.get_DesiredSamplesPerQuantum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredSamplesPerQuantum
   (
      this : in out AudioGraphSettings;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraphSettings.all.put_DesiredSamplesPerQuantum (value);
   end;

   function get_AudioRenderCategory
   (
      this : in out AudioGraphSettings
   )
   return WinRt.Windows.Media.Render.AudioRenderCategory is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Render.AudioRenderCategory;
   begin
      Hr := this.m_IAudioGraphSettings.all.get_AudioRenderCategory (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AudioRenderCategory
   (
      this : in out AudioGraphSettings;
      value : Windows.Media.Render.AudioRenderCategory
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraphSettings.all.put_AudioRenderCategory (value);
   end;

   function get_DesiredRenderDeviceAudioProcessing
   (
      this : in out AudioGraphSettings
   )
   return WinRt.Windows.Media.AudioProcessing is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AudioProcessing;
   begin
      Hr := this.m_IAudioGraphSettings.all.get_DesiredRenderDeviceAudioProcessing (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredRenderDeviceAudioProcessing
   (
      this : in out AudioGraphSettings;
      value : Windows.Media.AudioProcessing
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioGraphSettings.all.put_DesiredRenderDeviceAudioProcessing (value);
   end;

   procedure put_MaxPlaybackSpeedFactor
   (
      this : in out AudioGraphSettings;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraphSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraphSettings_Interface, WinRt.Windows.Media.Audio.IAudioGraphSettings2, WinRt.Windows.Media.Audio.IID_IAudioGraphSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioGraphSettings.all);
      Hr := m_Interface.put_MaxPlaybackSpeedFactor (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MaxPlaybackSpeedFactor
   (
      this : in out AudioGraphSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioGraphSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioGraphSettings_Interface, WinRt.Windows.Media.Audio.IAudioGraphSettings2, WinRt.Windows.Media.Audio.IID_IAudioGraphSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioGraphSettings.all);
      Hr := m_Interface.get_MaxPlaybackSpeedFactor (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioGraphUnrecoverableErrorOccurredEventArgs

   procedure Initialize (this : in out AudioGraphUnrecoverableErrorOccurredEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioGraphUnrecoverableErrorOccurredEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioGraphUnrecoverableErrorOccurredEventArgs, IAudioGraphUnrecoverableErrorOccurredEventArgs_Ptr);
   begin
      if this.m_IAudioGraphUnrecoverableErrorOccurredEventArgs /= null then
         if this.m_IAudioGraphUnrecoverableErrorOccurredEventArgs.all /= null then
            RefCount := this.m_IAudioGraphUnrecoverableErrorOccurredEventArgs.all.Release;
            Free (this.m_IAudioGraphUnrecoverableErrorOccurredEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioGraphUnrecoverableErrorOccurredEventArgs

   function get_Error
   (
      this : in out AudioGraphUnrecoverableErrorOccurredEventArgs
   )
   return WinRt.Windows.Media.Audio.AudioGraphUnrecoverableError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioGraphUnrecoverableError;
   begin
      Hr := this.m_IAudioGraphUnrecoverableErrorOccurredEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioNodeEmitter

   procedure Initialize (this : in out AudioNodeEmitter) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioNodeEmitter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioNodeEmitter, IAudioNodeEmitter_Ptr);
   begin
      if this.m_IAudioNodeEmitter /= null then
         if this.m_IAudioNodeEmitter.all /= null then
            RefCount := this.m_IAudioNodeEmitter.all.Release;
            Free (this.m_IAudioNodeEmitter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioNodeEmitter

   function Constructor
   (
      shape : Windows.Media.Audio.AudioNodeEmitterShape'Class;
      decayModel : Windows.Media.Audio.AudioNodeEmitterDecayModel'Class;
      settings : Windows.Media.Audio.AudioNodeEmitterSettings
   )
   return AudioNodeEmitter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.AudioNodeEmitter");
      m_Factory    : access IAudioNodeEmitterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Audio.IAudioNodeEmitter;
   begin
      return RetVal : AudioNodeEmitter do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioNodeEmitterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAudioNodeEmitter (shape.m_IAudioNodeEmitterShape.all, decayModel.m_IAudioNodeEmitterDecayModel.all, settings, m_ComRetVal'Access);
            Retval.m_IAudioNodeEmitter := new Windows.Media.Audio.IAudioNodeEmitter;
            Retval.m_IAudioNodeEmitter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return AudioNodeEmitter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.AudioNodeEmitter");
      m_ComRetVal  : aliased Windows.Media.Audio.IAudioNodeEmitter;
   begin
      return RetVal : AudioNodeEmitter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAudioNodeEmitter := new Windows.Media.Audio.IAudioNodeEmitter;
            Retval.m_IAudioNodeEmitter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioNodeEmitter

   function get_Position
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IAudioNodeEmitter.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out AudioNodeEmitter;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeEmitter.all.put_Position (value);
   end;

   function get_Direction
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IAudioNodeEmitter.all.get_Direction (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Direction
   (
      this : in out AudioNodeEmitter;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeEmitter.all.put_Direction (value);
   end;

   function get_Shape
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterShape'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterShape;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterShape do
         Hr := this.m_IAudioNodeEmitter.all.get_Shape (m_ComRetVal'Access);
         Retval.m_IAudioNodeEmitterShape := new Windows.Media.Audio.IAudioNodeEmitterShape;
         Retval.m_IAudioNodeEmitterShape.all := m_ComRetVal;
      end return;
   end;

   function get_DecayModel
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterDecayModel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterDecayModel;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterDecayModel do
         Hr := this.m_IAudioNodeEmitter.all.get_DecayModel (m_ComRetVal'Access);
         Retval.m_IAudioNodeEmitterDecayModel := new Windows.Media.Audio.IAudioNodeEmitterDecayModel;
         Retval.m_IAudioNodeEmitterDecayModel.all := m_ComRetVal;
      end return;
   end;

   function get_Gain
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitter.all.get_Gain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gain
   (
      this : in out AudioNodeEmitter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeEmitter.all.put_Gain (value);
   end;

   function get_DistanceScale
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitter.all.get_DistanceScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DistanceScale
   (
      this : in out AudioNodeEmitter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeEmitter.all.put_DistanceScale (value);
   end;

   function get_DopplerScale
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitter.all.get_DopplerScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DopplerScale
   (
      this : in out AudioNodeEmitter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeEmitter.all.put_DopplerScale (value);
   end;

   function get_DopplerVelocity
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IAudioNodeEmitter.all.get_DopplerVelocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DopplerVelocity
   (
      this : in out AudioNodeEmitter;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeEmitter.all.put_DopplerVelocity (value);
   end;

   function get_IsDopplerDisabled
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAudioNodeEmitter.all.get_IsDopplerDisabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SpatialAudioModel
   (
      this : in out AudioNodeEmitter
   )
   return WinRt.Windows.Media.Audio.SpatialAudioModel is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNodeEmitter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.SpatialAudioModel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioNodeEmitter_Interface, WinRt.Windows.Media.Audio.IAudioNodeEmitter2, WinRt.Windows.Media.Audio.IID_IAudioNodeEmitter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioNodeEmitter.all);
      Hr := m_Interface.get_SpatialAudioModel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SpatialAudioModel
   (
      this : in out AudioNodeEmitter;
      value : Windows.Media.Audio.SpatialAudioModel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNodeEmitter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioNodeEmitter_Interface, WinRt.Windows.Media.Audio.IAudioNodeEmitter2, WinRt.Windows.Media.Audio.IID_IAudioNodeEmitter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioNodeEmitter.all);
      Hr := m_Interface.put_SpatialAudioModel (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioNodeEmitterConeProperties

   procedure Initialize (this : in out AudioNodeEmitterConeProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioNodeEmitterConeProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioNodeEmitterConeProperties, IAudioNodeEmitterConeProperties_Ptr);
   begin
      if this.m_IAudioNodeEmitterConeProperties /= null then
         if this.m_IAudioNodeEmitterConeProperties.all /= null then
            RefCount := this.m_IAudioNodeEmitterConeProperties.all.Release;
            Free (this.m_IAudioNodeEmitterConeProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioNodeEmitterConeProperties

   function get_InnerAngle
   (
      this : in out AudioNodeEmitterConeProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitterConeProperties.all.get_InnerAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OuterAngle
   (
      this : in out AudioNodeEmitterConeProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitterConeProperties.all.get_OuterAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OuterAngleGain
   (
      this : in out AudioNodeEmitterConeProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitterConeProperties.all.get_OuterAngleGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioNodeEmitterDecayModel

   procedure Initialize (this : in out AudioNodeEmitterDecayModel) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioNodeEmitterDecayModel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioNodeEmitterDecayModel, IAudioNodeEmitterDecayModel_Ptr);
   begin
      if this.m_IAudioNodeEmitterDecayModel /= null then
         if this.m_IAudioNodeEmitterDecayModel.all /= null then
            RefCount := this.m_IAudioNodeEmitterDecayModel.all.Release;
            Free (this.m_IAudioNodeEmitterDecayModel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AudioNodeEmitterDecayModel

   function CreateNatural
   (
      minGain : WinRt.Double;
      maxGain : WinRt.Double;
      unityGainDistance : WinRt.Double;
      cutoffDistance : WinRt.Double
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterDecayModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioNodeEmitterDecayModel");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioNodeEmitterDecayModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterDecayModel;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterDecayModel do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioNodeEmitterDecayModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateNatural (minGain, maxGain, unityGainDistance, cutoffDistance, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioNodeEmitterDecayModel := new Windows.Media.Audio.IAudioNodeEmitterDecayModel;
            Retval.m_IAudioNodeEmitterDecayModel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateCustom
   (
      minGain : WinRt.Double;
      maxGain : WinRt.Double
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterDecayModel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioNodeEmitterDecayModel");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioNodeEmitterDecayModelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterDecayModel;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterDecayModel do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioNodeEmitterDecayModelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCustom (minGain, maxGain, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioNodeEmitterDecayModel := new Windows.Media.Audio.IAudioNodeEmitterDecayModel;
            Retval.m_IAudioNodeEmitterDecayModel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioNodeEmitterDecayModel

   function get_Kind
   (
      this : in out AudioNodeEmitterDecayModel
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterDecayKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioNodeEmitterDecayKind;
   begin
      Hr := this.m_IAudioNodeEmitterDecayModel.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinGain
   (
      this : in out AudioNodeEmitterDecayModel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitterDecayModel.all.get_MinGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxGain
   (
      this : in out AudioNodeEmitterDecayModel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitterDecayModel.all.get_MaxGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NaturalProperties
   (
      this : in out AudioNodeEmitterDecayModel
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterNaturalDecayModelProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterNaturalDecayModelProperties;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterNaturalDecayModelProperties do
         Hr := this.m_IAudioNodeEmitterDecayModel.all.get_NaturalProperties (m_ComRetVal'Access);
         Retval.m_IAudioNodeEmitterNaturalDecayModelProperties := new Windows.Media.Audio.IAudioNodeEmitterNaturalDecayModelProperties;
         Retval.m_IAudioNodeEmitterNaturalDecayModelProperties.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioNodeEmitterNaturalDecayModelProperties

   procedure Initialize (this : in out AudioNodeEmitterNaturalDecayModelProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioNodeEmitterNaturalDecayModelProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioNodeEmitterNaturalDecayModelProperties, IAudioNodeEmitterNaturalDecayModelProperties_Ptr);
   begin
      if this.m_IAudioNodeEmitterNaturalDecayModelProperties /= null then
         if this.m_IAudioNodeEmitterNaturalDecayModelProperties.all /= null then
            RefCount := this.m_IAudioNodeEmitterNaturalDecayModelProperties.all.Release;
            Free (this.m_IAudioNodeEmitterNaturalDecayModelProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioNodeEmitterNaturalDecayModelProperties

   function get_UnityGainDistance
   (
      this : in out AudioNodeEmitterNaturalDecayModelProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitterNaturalDecayModelProperties.all.get_UnityGainDistance (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CutoffDistance
   (
      this : in out AudioNodeEmitterNaturalDecayModelProperties
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeEmitterNaturalDecayModelProperties.all.get_CutoffDistance (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioNodeEmitterShape

   procedure Initialize (this : in out AudioNodeEmitterShape) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioNodeEmitterShape) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioNodeEmitterShape, IAudioNodeEmitterShape_Ptr);
   begin
      if this.m_IAudioNodeEmitterShape /= null then
         if this.m_IAudioNodeEmitterShape.all /= null then
            RefCount := this.m_IAudioNodeEmitterShape.all.Release;
            Free (this.m_IAudioNodeEmitterShape);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AudioNodeEmitterShape

   function CreateCone
   (
      innerAngle : WinRt.Double;
      outerAngle : WinRt.Double;
      outerAngleGain : WinRt.Double
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterShape is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioNodeEmitterShape");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioNodeEmitterShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterShape;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterShape do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioNodeEmitterShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCone (innerAngle, outerAngle, outerAngleGain, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioNodeEmitterShape := new Windows.Media.Audio.IAudioNodeEmitterShape;
            Retval.m_IAudioNodeEmitterShape.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateOmnidirectional
   return WinRt.Windows.Media.Audio.AudioNodeEmitterShape is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioNodeEmitterShape");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioNodeEmitterShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterShape;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterShape do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioNodeEmitterShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateOmnidirectional (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioNodeEmitterShape := new Windows.Media.Audio.IAudioNodeEmitterShape;
            Retval.m_IAudioNodeEmitterShape.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioNodeEmitterShape

   function get_Kind
   (
      this : in out AudioNodeEmitterShape
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterShapeKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioNodeEmitterShapeKind;
   begin
      Hr := this.m_IAudioNodeEmitterShape.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConeProperties
   (
      this : in out AudioNodeEmitterShape
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitterConeProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitterConeProperties;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitterConeProperties do
         Hr := this.m_IAudioNodeEmitterShape.all.get_ConeProperties (m_ComRetVal'Access);
         Retval.m_IAudioNodeEmitterConeProperties := new Windows.Media.Audio.IAudioNodeEmitterConeProperties;
         Retval.m_IAudioNodeEmitterConeProperties.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioNodeListener

   procedure Initialize (this : in out AudioNodeListener) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioNodeListener) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioNodeListener, IAudioNodeListener_Ptr);
   begin
      if this.m_IAudioNodeListener /= null then
         if this.m_IAudioNodeListener.all /= null then
            RefCount := this.m_IAudioNodeListener.all.Release;
            Free (this.m_IAudioNodeListener);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioNodeListener

   function Constructor return AudioNodeListener is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.AudioNodeListener");
      m_ComRetVal  : aliased Windows.Media.Audio.IAudioNodeListener;
   begin
      return RetVal : AudioNodeListener do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAudioNodeListener := new Windows.Media.Audio.IAudioNodeListener;
            Retval.m_IAudioNodeListener.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioNodeListener

   function get_Position
   (
      this : in out AudioNodeListener
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IAudioNodeListener.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out AudioNodeListener;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeListener.all.put_Position (value);
   end;

   function get_Orientation
   (
      this : in out AudioNodeListener
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_IAudioNodeListener.all.get_Orientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Orientation
   (
      this : in out AudioNodeListener;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeListener.all.put_Orientation (value);
   end;

   function get_SpeedOfSound
   (
      this : in out AudioNodeListener
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAudioNodeListener.all.get_SpeedOfSound (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SpeedOfSound
   (
      this : in out AudioNodeListener;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeListener.all.put_SpeedOfSound (value);
   end;

   function get_DopplerVelocity
   (
      this : in out AudioNodeListener
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IAudioNodeListener.all.get_DopplerVelocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DopplerVelocity
   (
      this : in out AudioNodeListener;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioNodeListener.all.put_DopplerVelocity (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioPlaybackConnection

   procedure Initialize (this : in out AudioPlaybackConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioPlaybackConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioPlaybackConnection, IAudioPlaybackConnection_Ptr);
   begin
      if this.m_IAudioPlaybackConnection /= null then
         if this.m_IAudioPlaybackConnection.all /= null then
            RefCount := this.m_IAudioPlaybackConnection.all.Release;
            Free (this.m_IAudioPlaybackConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AudioPlaybackConnection

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioPlaybackConnection");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioPlaybackConnectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAudioPlaybackConnectionStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function TryCreateFromId
   (
      id : WinRt.WString
   )
   return WinRt.Windows.Media.Audio.AudioPlaybackConnection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioPlaybackConnection");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioPlaybackConnectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioPlaybackConnection;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioPlaybackConnection do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioPlaybackConnectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryCreateFromId (HStr_id, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioPlaybackConnection := new Windows.Media.Audio.IAudioPlaybackConnection;
            Retval.m_IAudioPlaybackConnection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioPlaybackConnection

   procedure Start
   (
      this : in out AudioPlaybackConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioPlaybackConnection.all.Start;
   end;

   procedure StartAsync
   (
      this : in out AudioPlaybackConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAudioPlaybackConnection.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_DeviceId
   (
      this : in out AudioPlaybackConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAudioPlaybackConnection.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out AudioPlaybackConnection
   )
   return WinRt.Windows.Media.Audio.AudioPlaybackConnectionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioPlaybackConnectionState;
   begin
      Hr := this.m_IAudioPlaybackConnection.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Open
   (
      this : in out AudioPlaybackConnection
   )
   return WinRt.Windows.Media.Audio.AudioPlaybackConnectionOpenResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioPlaybackConnectionOpenResult;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioPlaybackConnectionOpenResult do
         Hr := this.m_IAudioPlaybackConnection.all.Open (m_ComRetVal'Access);
         Retval.m_IAudioPlaybackConnectionOpenResult := new Windows.Media.Audio.IAudioPlaybackConnectionOpenResult;
         Retval.m_IAudioPlaybackConnectionOpenResult.all := m_ComRetVal;
      end return;
   end;

   function OpenAsync
   (
      this : in out AudioPlaybackConnection
   )
   return WinRt.Windows.Media.Audio.AudioPlaybackConnectionOpenResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AudioPlaybackConnectionOpenResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AudioPlaybackConnectionOpenResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.IAudioPlaybackConnectionOpenResult;
      m_IID            : aliased WinRt.IID := (4112801674, 15825, 22194, (130, 155, 152, 136, 37, 29, 104, 156 )); -- Windows.Media.Audio.AudioPlaybackConnectionOpenResult;
      m_HandlerIID     : aliased WinRt.IID := (1457370445, 60301, 24571, (165, 75, 143, 175, 145, 140, 128, 49 ));
      m_Handler        : AsyncOperationCompletedHandler_AudioPlaybackConnectionOpenResult.Kind := new AsyncOperationCompletedHandler_AudioPlaybackConnectionOpenResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AudioPlaybackConnectionOpenResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AudioPlaybackConnectionOpenResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AudioPlaybackConnectionOpenResult.Kind_Delegate, AsyncOperationCompletedHandler_AudioPlaybackConnectionOpenResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioPlaybackConnectionOpenResult do
         Hr := this.m_IAudioPlaybackConnection.all.OpenAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAudioPlaybackConnectionOpenResult := new Windows.Media.Audio.IAudioPlaybackConnectionOpenResult;
                  Retval.m_IAudioPlaybackConnectionOpenResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_StateChanged
   (
      this : in out AudioPlaybackConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioPlaybackConnection.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out AudioPlaybackConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioPlaybackConnection.all.remove_StateChanged (token);
   end;

   procedure Close
   (
      this : in out AudioPlaybackConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioPlaybackConnection_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioPlaybackConnection.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioPlaybackConnectionOpenResult

   procedure Initialize (this : in out AudioPlaybackConnectionOpenResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioPlaybackConnectionOpenResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioPlaybackConnectionOpenResult, IAudioPlaybackConnectionOpenResult_Ptr);
   begin
      if this.m_IAudioPlaybackConnectionOpenResult /= null then
         if this.m_IAudioPlaybackConnectionOpenResult.all /= null then
            RefCount := this.m_IAudioPlaybackConnectionOpenResult.all.Release;
            Free (this.m_IAudioPlaybackConnectionOpenResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioPlaybackConnectionOpenResult

   function get_Status
   (
      this : in out AudioPlaybackConnectionOpenResult
   )
   return WinRt.Windows.Media.Audio.AudioPlaybackConnectionOpenResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioPlaybackConnectionOpenResultStatus;
   begin
      Hr := this.m_IAudioPlaybackConnectionOpenResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out AudioPlaybackConnectionOpenResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IAudioPlaybackConnectionOpenResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioStateMonitor

   procedure Initialize (this : in out AudioStateMonitor) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioStateMonitor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioStateMonitor, IAudioStateMonitor_Ptr);
   begin
      if this.m_IAudioStateMonitor /= null then
         if this.m_IAudioStateMonitor.all /= null then
            RefCount := this.m_IAudioStateMonitor.all.Release;
            Free (this.m_IAudioStateMonitor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AudioStateMonitor

   function CreateForRenderMonitoring
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForRenderMonitoring (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForRenderMonitoring
   (
      category : Windows.Media.Render.AudioRenderCategory
   )
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForRenderMonitoring (category, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForRenderMonitoring
   (
      category : Windows.Media.Render.AudioRenderCategory;
      role : Windows.Media.Devices.AudioDeviceRole
   )
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForRenderMonitoring (category, role, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForRenderMonitoringWithCategoryAndDeviceId
   (
      category : Windows.Media.Render.AudioRenderCategory;
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForRenderMonitoringWithCategoryAndDeviceId (category, HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function CreateForCaptureMonitoring
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForCaptureMonitoring (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForCaptureMonitoring
   (
      category : Windows.Media.Capture.MediaCategory
   )
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForCaptureMonitoring (category, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForCaptureMonitoring
   (
      category : Windows.Media.Capture.MediaCategory;
      role : Windows.Media.Devices.AudioDeviceRole
   )
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForCaptureMonitoring (category, role, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForCaptureMonitoringWithCategoryAndDeviceId
   (
      category : Windows.Media.Capture.MediaCategory;
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Media.Audio.AudioStateMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.AudioStateMonitor");
      m_Factory        : access WinRt.Windows.Media.Audio.IAudioStateMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioStateMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForCaptureMonitoringWithCategoryAndDeviceId (category, HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
            Retval.m_IAudioStateMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioStateMonitor

   function add_SoundLevelChanged
   (
      this : in out AudioStateMonitor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAudioStateMonitor.all.add_SoundLevelChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SoundLevelChanged
   (
      this : in out AudioStateMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioStateMonitor.all.remove_SoundLevelChanged (token);
   end;

   function get_SoundLevel
   (
      this : in out AudioStateMonitor
   )
   return WinRt.Windows.Media.SoundLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SoundLevel;
   begin
      Hr := this.m_IAudioStateMonitor.all.get_SoundLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioSubmixNode

   procedure Initialize (this : in out AudioSubmixNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioSubmixNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioInputNode, IAudioInputNode_Ptr);
   begin
      if this.m_IAudioInputNode /= null then
         if this.m_IAudioInputNode.all /= null then
            RefCount := this.m_IAudioInputNode.all.Release;
            Free (this.m_IAudioInputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioSubmixNode

   function get_OutgoingConnections
   (
      this : in out AudioSubmixNode
   )
   return IVectorView_IAudioGraphConnection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioGraphConnection.Kind;
   begin
      Hr := this.m_IAudioInputNode.all.get_OutgoingConnections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAudioGraphConnection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioSubmixNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioInputNode.all.AddOutgoingConnection (destination);
   end;

   procedure AddOutgoingConnection
   (
      this : in out AudioSubmixNode;
      destination : Windows.Media.Audio.IAudioNode;
      gain : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioInputNode.all.AddOutgoingConnection (destination, gain);
   end;

   procedure RemoveOutgoingConnection
   (
      this : in out AudioSubmixNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioInputNode.all.RemoveOutgoingConnection (destination);
   end;

   function get_EffectDefinitions
   (
      this : in out AudioSubmixNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out AudioSubmixNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out AudioSubmixNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out AudioSubmixNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioInputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out AudioSubmixNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out AudioSubmixNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out AudioSubmixNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out AudioSubmixNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out AudioSubmixNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out AudioSubmixNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out AudioSubmixNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out AudioSubmixNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioInputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Emitter
   (
      this : in out AudioSubmixNode
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitter;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode2, WinRt.Windows.Media.Audio.IID_IAudioInputNode2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitter do
         m_Interface := QInterface (this.m_IAudioInputNode.all);
         Hr := m_Interface.get_Emitter (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioNodeEmitter := new Windows.Media.Audio.IAudioNodeEmitter;
         Retval.m_IAudioNodeEmitter.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CreateAudioDeviceInputNodeResult

   procedure Initialize (this : in out CreateAudioDeviceInputNodeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out CreateAudioDeviceInputNodeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICreateAudioDeviceInputNodeResult, ICreateAudioDeviceInputNodeResult_Ptr);
   begin
      if this.m_ICreateAudioDeviceInputNodeResult /= null then
         if this.m_ICreateAudioDeviceInputNodeResult.all /= null then
            RefCount := this.m_ICreateAudioDeviceInputNodeResult.all.Release;
            Free (this.m_ICreateAudioDeviceInputNodeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CreateAudioDeviceInputNodeResult

   function get_Status
   (
      this : in out CreateAudioDeviceInputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioDeviceNodeCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioDeviceNodeCreationStatus;
   begin
      Hr := this.m_ICreateAudioDeviceInputNodeResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceInputNode
   (
      this : in out CreateAudioDeviceInputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioDeviceInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioDeviceInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioDeviceInputNode do
         Hr := this.m_ICreateAudioDeviceInputNodeResult.all.get_DeviceInputNode (m_ComRetVal'Access);
         Retval.m_IAudioDeviceInputNode := new Windows.Media.Audio.IAudioDeviceInputNode;
         Retval.m_IAudioDeviceInputNode.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out CreateAudioDeviceInputNodeResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult_Interface, WinRt.Windows.Media.Audio.ICreateAudioDeviceInputNodeResult2, WinRt.Windows.Media.Audio.IID_ICreateAudioDeviceInputNodeResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICreateAudioDeviceInputNodeResult.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CreateAudioDeviceOutputNodeResult

   procedure Initialize (this : in out CreateAudioDeviceOutputNodeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out CreateAudioDeviceOutputNodeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICreateAudioDeviceOutputNodeResult, ICreateAudioDeviceOutputNodeResult_Ptr);
   begin
      if this.m_ICreateAudioDeviceOutputNodeResult /= null then
         if this.m_ICreateAudioDeviceOutputNodeResult.all /= null then
            RefCount := this.m_ICreateAudioDeviceOutputNodeResult.all.Release;
            Free (this.m_ICreateAudioDeviceOutputNodeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CreateAudioDeviceOutputNodeResult

   function get_Status
   (
      this : in out CreateAudioDeviceOutputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioDeviceNodeCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioDeviceNodeCreationStatus;
   begin
      Hr := this.m_ICreateAudioDeviceOutputNodeResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceOutputNode
   (
      this : in out CreateAudioDeviceOutputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioDeviceOutputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioDeviceOutputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioDeviceOutputNode do
         Hr := this.m_ICreateAudioDeviceOutputNodeResult.all.get_DeviceOutputNode (m_ComRetVal'Access);
         Retval.m_IAudioDeviceOutputNode := new Windows.Media.Audio.IAudioDeviceOutputNode;
         Retval.m_IAudioDeviceOutputNode.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out CreateAudioDeviceOutputNodeResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult_Interface, WinRt.Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult2, WinRt.Windows.Media.Audio.IID_ICreateAudioDeviceOutputNodeResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICreateAudioDeviceOutputNodeResult.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CreateAudioFileInputNodeResult

   procedure Initialize (this : in out CreateAudioFileInputNodeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out CreateAudioFileInputNodeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICreateAudioFileInputNodeResult, ICreateAudioFileInputNodeResult_Ptr);
   begin
      if this.m_ICreateAudioFileInputNodeResult /= null then
         if this.m_ICreateAudioFileInputNodeResult.all /= null then
            RefCount := this.m_ICreateAudioFileInputNodeResult.all.Release;
            Free (this.m_ICreateAudioFileInputNodeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CreateAudioFileInputNodeResult

   function get_Status
   (
      this : in out CreateAudioFileInputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioFileNodeCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioFileNodeCreationStatus;
   begin
      Hr := this.m_ICreateAudioFileInputNodeResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FileInputNode
   (
      this : in out CreateAudioFileInputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioFileInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioFileInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioFileInputNode do
         Hr := this.m_ICreateAudioFileInputNodeResult.all.get_FileInputNode (m_ComRetVal'Access);
         Retval.m_IAudioFileInputNode := new Windows.Media.Audio.IAudioFileInputNode;
         Retval.m_IAudioFileInputNode.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out CreateAudioFileInputNodeResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.ICreateAudioFileInputNodeResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ICreateAudioFileInputNodeResult_Interface, WinRt.Windows.Media.Audio.ICreateAudioFileInputNodeResult2, WinRt.Windows.Media.Audio.IID_ICreateAudioFileInputNodeResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICreateAudioFileInputNodeResult.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CreateAudioFileOutputNodeResult

   procedure Initialize (this : in out CreateAudioFileOutputNodeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out CreateAudioFileOutputNodeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICreateAudioFileOutputNodeResult, ICreateAudioFileOutputNodeResult_Ptr);
   begin
      if this.m_ICreateAudioFileOutputNodeResult /= null then
         if this.m_ICreateAudioFileOutputNodeResult.all /= null then
            RefCount := this.m_ICreateAudioFileOutputNodeResult.all.Release;
            Free (this.m_ICreateAudioFileOutputNodeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CreateAudioFileOutputNodeResult

   function get_Status
   (
      this : in out CreateAudioFileOutputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioFileNodeCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioFileNodeCreationStatus;
   begin
      Hr := this.m_ICreateAudioFileOutputNodeResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FileOutputNode
   (
      this : in out CreateAudioFileOutputNodeResult
   )
   return WinRt.Windows.Media.Audio.AudioFileOutputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioFileOutputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioFileOutputNode do
         Hr := this.m_ICreateAudioFileOutputNodeResult.all.get_FileOutputNode (m_ComRetVal'Access);
         Retval.m_IAudioFileOutputNode := new Windows.Media.Audio.IAudioFileOutputNode;
         Retval.m_IAudioFileOutputNode.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out CreateAudioFileOutputNodeResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.ICreateAudioFileOutputNodeResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ICreateAudioFileOutputNodeResult_Interface, WinRt.Windows.Media.Audio.ICreateAudioFileOutputNodeResult2, WinRt.Windows.Media.Audio.IID_ICreateAudioFileOutputNodeResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICreateAudioFileOutputNodeResult.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CreateAudioGraphResult

   procedure Initialize (this : in out CreateAudioGraphResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out CreateAudioGraphResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICreateAudioGraphResult, ICreateAudioGraphResult_Ptr);
   begin
      if this.m_ICreateAudioGraphResult /= null then
         if this.m_ICreateAudioGraphResult.all /= null then
            RefCount := this.m_ICreateAudioGraphResult.all.Release;
            Free (this.m_ICreateAudioGraphResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CreateAudioGraphResult

   function get_Status
   (
      this : in out CreateAudioGraphResult
   )
   return WinRt.Windows.Media.Audio.AudioGraphCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.AudioGraphCreationStatus;
   begin
      Hr := this.m_ICreateAudioGraphResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Graph
   (
      this : in out CreateAudioGraphResult
   )
   return WinRt.Windows.Media.Audio.AudioGraph'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioGraph;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioGraph do
         Hr := this.m_ICreateAudioGraphResult.all.get_Graph (m_ComRetVal'Access);
         Retval.m_IAudioGraph := new Windows.Media.Audio.IAudioGraph;
         Retval.m_IAudioGraph.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out CreateAudioGraphResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.ICreateAudioGraphResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ICreateAudioGraphResult_Interface, WinRt.Windows.Media.Audio.ICreateAudioGraphResult2, WinRt.Windows.Media.Audio.IID_ICreateAudioGraphResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICreateAudioGraphResult.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CreateMediaSourceAudioInputNodeResult

   procedure Initialize (this : in out CreateMediaSourceAudioInputNodeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out CreateMediaSourceAudioInputNodeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICreateMediaSourceAudioInputNodeResult, ICreateMediaSourceAudioInputNodeResult_Ptr);
   begin
      if this.m_ICreateMediaSourceAudioInputNodeResult /= null then
         if this.m_ICreateMediaSourceAudioInputNodeResult.all /= null then
            RefCount := this.m_ICreateMediaSourceAudioInputNodeResult.all.Release;
            Free (this.m_ICreateMediaSourceAudioInputNodeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CreateMediaSourceAudioInputNodeResult

   function get_Status
   (
      this : in out CreateMediaSourceAudioInputNodeResult
   )
   return WinRt.Windows.Media.Audio.MediaSourceAudioInputNodeCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.MediaSourceAudioInputNodeCreationStatus;
   begin
      Hr := this.m_ICreateMediaSourceAudioInputNodeResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Node
   (
      this : in out CreateMediaSourceAudioInputNodeResult
   )
   return WinRt.Windows.Media.Audio.MediaSourceAudioInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IMediaSourceAudioInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.MediaSourceAudioInputNode do
         Hr := this.m_ICreateMediaSourceAudioInputNodeResult.all.get_Node (m_ComRetVal'Access);
         Retval.m_IMediaSourceAudioInputNode := new Windows.Media.Audio.IMediaSourceAudioInputNode;
         Retval.m_IMediaSourceAudioInputNode.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out CreateMediaSourceAudioInputNodeResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult_Interface, WinRt.Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult2, WinRt.Windows.Media.Audio.IID_ICreateMediaSourceAudioInputNodeResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICreateMediaSourceAudioInputNodeResult.all);
      Hr := m_Interface.get_ExtendedError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EchoEffectDefinition

   procedure Initialize (this : in out EchoEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out EchoEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEchoEffectDefinition, IEchoEffectDefinition_Ptr);
   begin
      if this.m_IEchoEffectDefinition /= null then
         if this.m_IEchoEffectDefinition.all /= null then
            RefCount := this.m_IEchoEffectDefinition.all.Release;
            Free (this.m_IEchoEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EchoEffectDefinition

   function Constructor
   (
      audioGraph_p : Windows.Media.Audio.AudioGraph'Class
   )
   return EchoEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.EchoEffectDefinition");
      m_Factory    : access IEchoEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Audio.IEchoEffectDefinition;
   begin
      return RetVal : EchoEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IEchoEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (audioGraph_p.m_IAudioGraph.all, m_ComRetVal'Access);
            Retval.m_IEchoEffectDefinition := new Windows.Media.Audio.IEchoEffectDefinition;
            Retval.m_IEchoEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EchoEffectDefinition

   procedure put_WetDryMix
   (
      this : in out EchoEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEchoEffectDefinition.all.put_WetDryMix (value);
   end;

   function get_WetDryMix
   (
      this : in out EchoEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEchoEffectDefinition.all.get_WetDryMix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Feedback
   (
      this : in out EchoEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEchoEffectDefinition.all.put_Feedback (value);
   end;

   function get_Feedback
   (
      this : in out EchoEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEchoEffectDefinition.all.get_Feedback (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Delay
   (
      this : in out EchoEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEchoEffectDefinition.all.put_Delay (value);
   end;

   function get_Delay
   (
      this : in out EchoEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEchoEffectDefinition.all.get_Delay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActivatableClassId
   (
      this : in out EchoEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IEchoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEchoEffectDefinition.all);
      Hr := m_Interface.get_ActivatableClassId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out EchoEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IEchoEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEchoEffectDefinition.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EqualizerBand

   procedure Initialize (this : in out EqualizerBand) is
   begin
      null;
   end;

   procedure Finalize (this : in out EqualizerBand) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEqualizerBand, IEqualizerBand_Ptr);
   begin
      if this.m_IEqualizerBand /= null then
         if this.m_IEqualizerBand.all /= null then
            RefCount := this.m_IEqualizerBand.all.Release;
            Free (this.m_IEqualizerBand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EqualizerBand

   function get_Bandwidth
   (
      this : in out EqualizerBand
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEqualizerBand.all.get_Bandwidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Bandwidth
   (
      this : in out EqualizerBand;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEqualizerBand.all.put_Bandwidth (value);
   end;

   function get_FrequencyCenter
   (
      this : in out EqualizerBand
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEqualizerBand.all.get_FrequencyCenter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FrequencyCenter
   (
      this : in out EqualizerBand;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEqualizerBand.all.put_FrequencyCenter (value);
   end;

   function get_Gain
   (
      this : in out EqualizerBand
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IEqualizerBand.all.get_Gain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gain
   (
      this : in out EqualizerBand;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEqualizerBand.all.put_Gain (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EqualizerEffectDefinition

   procedure Initialize (this : in out EqualizerEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out EqualizerEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEqualizerEffectDefinition, IEqualizerEffectDefinition_Ptr);
   begin
      if this.m_IEqualizerEffectDefinition /= null then
         if this.m_IEqualizerEffectDefinition.all /= null then
            RefCount := this.m_IEqualizerEffectDefinition.all.Release;
            Free (this.m_IEqualizerEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EqualizerEffectDefinition

   function Constructor
   (
      audioGraph_p : Windows.Media.Audio.AudioGraph'Class
   )
   return EqualizerEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.EqualizerEffectDefinition");
      m_Factory    : access IEqualizerEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Audio.IEqualizerEffectDefinition;
   begin
      return RetVal : EqualizerEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IEqualizerEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (audioGraph_p.m_IAudioGraph.all, m_ComRetVal'Access);
            Retval.m_IEqualizerEffectDefinition := new Windows.Media.Audio.IEqualizerEffectDefinition;
            Retval.m_IEqualizerEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EqualizerEffectDefinition

   function get_Bands
   (
      this : in out EqualizerEffectDefinition
   )
   return IVectorView_IEqualizerBand.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IEqualizerBand.Kind;
   begin
      Hr := this.m_IEqualizerEffectDefinition.all.get_Bands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IEqualizerBand (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ActivatableClassId
   (
      this : in out EqualizerEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IEqualizerEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEqualizerEffectDefinition.all);
      Hr := m_Interface.get_ActivatableClassId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out EqualizerEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IEqualizerEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEqualizerEffectDefinition.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameInputNodeQuantumStartedEventArgs

   procedure Initialize (this : in out FrameInputNodeQuantumStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameInputNodeQuantumStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameInputNodeQuantumStartedEventArgs, IFrameInputNodeQuantumStartedEventArgs_Ptr);
   begin
      if this.m_IFrameInputNodeQuantumStartedEventArgs /= null then
         if this.m_IFrameInputNodeQuantumStartedEventArgs.all /= null then
            RefCount := this.m_IFrameInputNodeQuantumStartedEventArgs.all.Release;
            Free (this.m_IFrameInputNodeQuantumStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameInputNodeQuantumStartedEventArgs

   function get_RequiredSamples
   (
      this : in out FrameInputNodeQuantumStartedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IFrameInputNodeQuantumStartedEventArgs.all.get_RequiredSamples (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LimiterEffectDefinition

   procedure Initialize (this : in out LimiterEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out LimiterEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILimiterEffectDefinition, ILimiterEffectDefinition_Ptr);
   begin
      if this.m_ILimiterEffectDefinition /= null then
         if this.m_ILimiterEffectDefinition.all /= null then
            RefCount := this.m_ILimiterEffectDefinition.all.Release;
            Free (this.m_ILimiterEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LimiterEffectDefinition

   function Constructor
   (
      audioGraph_p : Windows.Media.Audio.AudioGraph'Class
   )
   return LimiterEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.LimiterEffectDefinition");
      m_Factory    : access ILimiterEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Audio.ILimiterEffectDefinition;
   begin
      return RetVal : LimiterEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_ILimiterEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (audioGraph_p.m_IAudioGraph.all, m_ComRetVal'Access);
            Retval.m_ILimiterEffectDefinition := new Windows.Media.Audio.ILimiterEffectDefinition;
            Retval.m_ILimiterEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LimiterEffectDefinition

   procedure put_Release
   (
      this : in out LimiterEffectDefinition;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILimiterEffectDefinition.all.put_Release (value);
   end;

   function get_Release
   (
      this : in out LimiterEffectDefinition
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILimiterEffectDefinition.all.get_Release (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Loudness
   (
      this : in out LimiterEffectDefinition;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILimiterEffectDefinition.all.put_Loudness (value);
   end;

   function get_Loudness
   (
      this : in out LimiterEffectDefinition
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ILimiterEffectDefinition.all.get_Loudness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActivatableClassId
   (
      this : in out LimiterEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ILimiterEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILimiterEffectDefinition.all);
      Hr := m_Interface.get_ActivatableClassId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out LimiterEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.ILimiterEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILimiterEffectDefinition.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaSourceAudioInputNode

   procedure Initialize (this : in out MediaSourceAudioInputNode) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaSourceAudioInputNode) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaSourceAudioInputNode, IMediaSourceAudioInputNode_Ptr);
   begin
      if this.m_IMediaSourceAudioInputNode /= null then
         if this.m_IMediaSourceAudioInputNode.all /= null then
            RefCount := this.m_IMediaSourceAudioInputNode.all.Release;
            Free (this.m_IMediaSourceAudioInputNode);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaSourceAudioInputNode

   procedure put_PlaybackSpeedFactor
   (
      this : in out MediaSourceAudioInputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.put_PlaybackSpeedFactor (value);
   end;

   function get_PlaybackSpeedFactor
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.get_PlaybackSpeedFactor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out MediaSourceAudioInputNode;
      position : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.Seek (position);
   end;

   function get_StartTime
   (
      this : in out MediaSourceAudioInputNode
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.get_StartTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_StartTime
   (
      this : in out MediaSourceAudioInputNode;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.put_StartTime (value);
   end;

   function get_EndTime
   (
      this : in out MediaSourceAudioInputNode
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.get_EndTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_EndTime
   (
      this : in out MediaSourceAudioInputNode;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.put_EndTime (value);
   end;

   function get_LoopCount
   (
      this : in out MediaSourceAudioInputNode
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.get_LoopCount (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_LoopCount
   (
      this : in out MediaSourceAudioInputNode;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.put_LoopCount (value);
   end;

   function get_Duration
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MediaSource
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Windows.Media.Core.MediaSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := this.m_IMediaSourceAudioInputNode.all.get_MediaSource (m_ComRetVal'Access);
         Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
         Retval.m_IMediaSource2.all := m_ComRetVal;
      end return;
   end;

   function add_MediaSourceCompleted
   (
      this : in out MediaSourceAudioInputNode;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.add_MediaSourceCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MediaSourceCompleted
   (
      this : in out MediaSourceAudioInputNode;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaSourceAudioInputNode.all.remove_MediaSourceCompleted (token);
   end;

   function get_Emitter
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Windows.Media.Audio.AudioNodeEmitter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioNodeEmitter;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode2, WinRt.Windows.Media.Audio.IID_IAudioInputNode2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioNodeEmitter do
         m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
         Hr := m_Interface.get_Emitter (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioNodeEmitter := new Windows.Media.Audio.IAudioNodeEmitter;
         Retval.m_IAudioNodeEmitter.all := m_ComRetVal;
      end return;
   end;

   function get_OutgoingConnections
   (
      this : in out MediaSourceAudioInputNode
   )
   return IVectorView_IAudioGraphConnection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAudioGraphConnection.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.get_OutgoingConnections (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAudioGraphConnection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure AddOutgoingConnection
   (
      this : in out MediaSourceAudioInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddOutgoingConnection
   (
      this : in out MediaSourceAudioInputNode;
      destination : Windows.Media.Audio.IAudioNode;
      gain : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.AddOutgoingConnection (destination, gain);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveOutgoingConnection
   (
      this : in out MediaSourceAudioInputNode;
      destination : Windows.Media.Audio.IAudioNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioInputNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioInputNode, WinRt.Windows.Media.Audio.IID_IAudioInputNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.RemoveOutgoingConnection (destination);
      m_RefCount := m_Interface.Release;
   end;

   function get_EffectDefinitions
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.get_EffectDefinitions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutgoingGain
   (
      this : in out MediaSourceAudioInputNode;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.put_OutgoingGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutgoingGain
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.get_OutgoingGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EncodingProperties
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
         Hr := m_Interface.get_EncodingProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ConsumeInput
   (
      this : in out MediaSourceAudioInputNode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.get_ConsumeInput (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ConsumeInput
   (
      this : in out MediaSourceAudioInputNode;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.put_ConsumeInput (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out MediaSourceAudioInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out MediaSourceAudioInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   procedure Reset
   (
      this : in out MediaSourceAudioInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.Reset;
      m_RefCount := m_Interface.Release;
   end;

   procedure DisableEffectsByDefinition
   (
      this : in out MediaSourceAudioInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.DisableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableEffectsByDefinition
   (
      this : in out MediaSourceAudioInputNode;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Audio.IAudioNode := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Media.Audio.IAudioNode, WinRt.Windows.Media.Audio.IID_IAudioNode'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.EnableEffectsByDefinition (definition);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out MediaSourceAudioInputNode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IMediaSourceAudioInputNode_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaSourceAudioInputNode.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ReverbEffectDefinition

   procedure Initialize (this : in out ReverbEffectDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out ReverbEffectDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IReverbEffectDefinition, IReverbEffectDefinition_Ptr);
   begin
      if this.m_IReverbEffectDefinition /= null then
         if this.m_IReverbEffectDefinition.all /= null then
            RefCount := this.m_IReverbEffectDefinition.all.Release;
            Free (this.m_IReverbEffectDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ReverbEffectDefinition

   function Constructor
   (
      audioGraph_p : Windows.Media.Audio.AudioGraph'Class
   )
   return ReverbEffectDefinition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Audio.ReverbEffectDefinition");
      m_Factory    : access IReverbEffectDefinitionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Audio.IReverbEffectDefinition;
   begin
      return RetVal : ReverbEffectDefinition do
         Hr := RoGetActivationFactory (m_hString, IID_IReverbEffectDefinitionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (audioGraph_p.m_IAudioGraph.all, m_ComRetVal'Access);
            Retval.m_IReverbEffectDefinition := new Windows.Media.Audio.IReverbEffectDefinition;
            Retval.m_IReverbEffectDefinition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ReverbEffectDefinition

   procedure put_WetDryMix
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_WetDryMix (value);
   end;

   function get_WetDryMix
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_WetDryMix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReflectionsDelay
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_ReflectionsDelay (value);
   end;

   function get_ReflectionsDelay
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_ReflectionsDelay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReverbDelay
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_ReverbDelay (value);
   end;

   function get_ReverbDelay
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_ReverbDelay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RearDelay
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_RearDelay (value);
   end;

   function get_RearDelay
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_RearDelay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionLeft
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_PositionLeft (value);
   end;

   function get_PositionLeft
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_PositionLeft (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionRight
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_PositionRight (value);
   end;

   function get_PositionRight
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_PositionRight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionMatrixLeft
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_PositionMatrixLeft (value);
   end;

   function get_PositionMatrixLeft
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_PositionMatrixLeft (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PositionMatrixRight
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_PositionMatrixRight (value);
   end;

   function get_PositionMatrixRight
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_PositionMatrixRight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EarlyDiffusion
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_EarlyDiffusion (value);
   end;

   function get_EarlyDiffusion
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_EarlyDiffusion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LateDiffusion
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_LateDiffusion (value);
   end;

   function get_LateDiffusion
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_LateDiffusion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LowEQGain
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_LowEQGain (value);
   end;

   function get_LowEQGain
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_LowEQGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LowEQCutoff
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_LowEQCutoff (value);
   end;

   function get_LowEQCutoff
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_LowEQCutoff (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HighEQGain
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_HighEQGain (value);
   end;

   function get_HighEQGain
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_HighEQGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HighEQCutoff
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_HighEQCutoff (value);
   end;

   function get_HighEQCutoff
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_HighEQCutoff (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RoomFilterFreq
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_RoomFilterFreq (value);
   end;

   function get_RoomFilterFreq
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_RoomFilterFreq (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RoomFilterMain
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_RoomFilterMain (value);
   end;

   function get_RoomFilterMain
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_RoomFilterMain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RoomFilterHF
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_RoomFilterHF (value);
   end;

   function get_RoomFilterHF
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_RoomFilterHF (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReflectionsGain
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_ReflectionsGain (value);
   end;

   function get_ReflectionsGain
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_ReflectionsGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReverbGain
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_ReverbGain (value);
   end;

   function get_ReverbGain
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_ReverbGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DecayTime
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_DecayTime (value);
   end;

   function get_DecayTime
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_DecayTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Density
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_Density (value);
   end;

   function get_Density
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_Density (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RoomSize
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_RoomSize (value);
   end;

   function get_RoomSize
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_RoomSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisableLateField
   (
      this : in out ReverbEffectDefinition;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReverbEffectDefinition.all.put_DisableLateField (value);
   end;

   function get_DisableLateField
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IReverbEffectDefinition.all.get_DisableLateField (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActivatableClassId
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IReverbEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReverbEffectDefinition.all);
      Hr := m_Interface.get_ActivatableClassId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out ReverbEffectDefinition
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Effects.IAudioEffectDefinition := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Audio.IReverbEffectDefinition_Interface, WinRt.Windows.Media.Effects.IAudioEffectDefinition, WinRt.Windows.Media.Effects.IID_IAudioEffectDefinition'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IReverbEffectDefinition.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SetDefaultSpatialAudioFormatResult

   procedure Initialize (this : in out SetDefaultSpatialAudioFormatResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SetDefaultSpatialAudioFormatResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISetDefaultSpatialAudioFormatResult, ISetDefaultSpatialAudioFormatResult_Ptr);
   begin
      if this.m_ISetDefaultSpatialAudioFormatResult /= null then
         if this.m_ISetDefaultSpatialAudioFormatResult.all /= null then
            RefCount := this.m_ISetDefaultSpatialAudioFormatResult.all.Release;
            Free (this.m_ISetDefaultSpatialAudioFormatResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SetDefaultSpatialAudioFormatResult

   function get_Status
   (
      this : in out SetDefaultSpatialAudioFormatResult
   )
   return WinRt.Windows.Media.Audio.SetDefaultSpatialAudioFormatStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.SetDefaultSpatialAudioFormatStatus;
   begin
      Hr := this.m_ISetDefaultSpatialAudioFormatResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialAudioDeviceConfiguration

   procedure Initialize (this : in out SpatialAudioDeviceConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialAudioDeviceConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialAudioDeviceConfiguration, ISpatialAudioDeviceConfiguration_Ptr);
   begin
      if this.m_ISpatialAudioDeviceConfiguration /= null then
         if this.m_ISpatialAudioDeviceConfiguration.all /= null then
            RefCount := this.m_ISpatialAudioDeviceConfiguration.all.Release;
            Free (this.m_ISpatialAudioDeviceConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialAudioDeviceConfiguration

   function GetForDeviceId
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Media.Audio.SpatialAudioDeviceConfiguration is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioDeviceConfiguration");
      m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioDeviceConfigurationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.ISpatialAudioDeviceConfiguration;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Media.Audio.SpatialAudioDeviceConfiguration do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioDeviceConfigurationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForDeviceId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialAudioDeviceConfiguration := new Windows.Media.Audio.ISpatialAudioDeviceConfiguration;
            Retval.m_ISpatialAudioDeviceConfiguration.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialAudioDeviceConfiguration

   function get_DeviceId
   (
      this : in out SpatialAudioDeviceConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpatialAudioDeviceConfiguration.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsSpatialAudioSupported
   (
      this : in out SpatialAudioDeviceConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpatialAudioDeviceConfiguration.all.get_IsSpatialAudioSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsSpatialAudioFormatSupported
   (
      this : in out SpatialAudioDeviceConfiguration;
      subtype_x : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_subtype_x : WinRt.HString := To_HString (subtype_x);
   begin
      Hr := this.m_ISpatialAudioDeviceConfiguration.all.IsSpatialAudioFormatSupported (HStr_subtype_x, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_subtype_x);
      return m_ComRetVal;
   end;

   function get_ActiveSpatialAudioFormat
   (
      this : in out SpatialAudioDeviceConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpatialAudioDeviceConfiguration.all.get_ActiveSpatialAudioFormat (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DefaultSpatialAudioFormat
   (
      this : in out SpatialAudioDeviceConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISpatialAudioDeviceConfiguration.all.get_DefaultSpatialAudioFormat (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function SetDefaultSpatialAudioFormatAsync
   (
      this : in out SpatialAudioDeviceConfiguration;
      subtype_x : WinRt.WString
   )
   return WinRt.Windows.Media.Audio.SetDefaultSpatialAudioFormatResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subtype_x : WinRt.HString := To_HString (subtype_x);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SetDefaultSpatialAudioFormatResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SetDefaultSpatialAudioFormatResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.ISetDefaultSpatialAudioFormatResult;
      m_IID            : aliased WinRt.IID := (1239659810, 17113, 22793, (128, 241, 51, 249, 218, 230, 155, 193 )); -- Windows.Media.Audio.SetDefaultSpatialAudioFormatResult;
      m_HandlerIID     : aliased WinRt.IID := (2958678349, 3091, 24171, (156, 218, 179, 207, 161, 91, 91, 232 ));
      m_Handler        : AsyncOperationCompletedHandler_SetDefaultSpatialAudioFormatResult.Kind := new AsyncOperationCompletedHandler_SetDefaultSpatialAudioFormatResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SetDefaultSpatialAudioFormatResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SetDefaultSpatialAudioFormatResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SetDefaultSpatialAudioFormatResult.Kind_Delegate, AsyncOperationCompletedHandler_SetDefaultSpatialAudioFormatResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.SetDefaultSpatialAudioFormatResult do
         Hr := this.m_ISpatialAudioDeviceConfiguration.all.SetDefaultSpatialAudioFormatAsync (HStr_subtype_x, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISetDefaultSpatialAudioFormatResult := new Windows.Media.Audio.ISetDefaultSpatialAudioFormatResult;
                  Retval.m_ISetDefaultSpatialAudioFormatResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_subtype_x);
      end return;
   end;

   function add_ConfigurationChanged
   (
      this : in out SpatialAudioDeviceConfiguration;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISpatialAudioDeviceConfiguration.all.add_ConfigurationChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ConfigurationChanged
   (
      this : in out SpatialAudioDeviceConfiguration;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialAudioDeviceConfiguration.all.remove_ConfigurationChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpatialAudioFormatConfiguration

   procedure Initialize (this : in out SpatialAudioFormatConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpatialAudioFormatConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpatialAudioFormatConfiguration, ISpatialAudioFormatConfiguration_Ptr);
   begin
      if this.m_ISpatialAudioFormatConfiguration /= null then
         if this.m_ISpatialAudioFormatConfiguration.all /= null then
            RefCount := this.m_ISpatialAudioFormatConfiguration.all.Release;
            Free (this.m_ISpatialAudioFormatConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpatialAudioFormatConfiguration

   function GetDefault
   return WinRt.Windows.Media.Audio.SpatialAudioFormatConfiguration is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioFormatConfiguration");
      m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioFormatConfigurationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.ISpatialAudioFormatConfiguration;
   begin
      return RetVal : WinRt.Windows.Media.Audio.SpatialAudioFormatConfiguration do
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioFormatConfigurationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISpatialAudioFormatConfiguration := new Windows.Media.Audio.ISpatialAudioFormatConfiguration;
            Retval.m_ISpatialAudioFormatConfiguration.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpatialAudioFormatConfiguration

   procedure ReportLicenseChangedAsync
   (
      this : in out SpatialAudioFormatConfiguration;
      subtype_x : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subtype_x : WinRt.HString := To_HString (subtype_x);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpatialAudioFormatConfiguration.all.ReportLicenseChangedAsync (HStr_subtype_x, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_subtype_x);
   end;

   procedure ReportConfigurationChangedAsync
   (
      this : in out SpatialAudioFormatConfiguration;
      subtype_x : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subtype_x : WinRt.HString := To_HString (subtype_x);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISpatialAudioFormatConfiguration.all.ReportConfigurationChangedAsync (HStr_subtype_x, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_subtype_x);
   end;

   function get_MixedRealityExclusiveModePolicy
   (
      this : in out SpatialAudioFormatConfiguration
   )
   return WinRt.Windows.Media.Audio.MixedRealitySpatialAudioFormatPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.MixedRealitySpatialAudioFormatPolicy;
   begin
      Hr := this.m_ISpatialAudioFormatConfiguration.all.get_MixedRealityExclusiveModePolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MixedRealityExclusiveModePolicy
   (
      this : in out SpatialAudioFormatConfiguration;
      value : Windows.Media.Audio.MixedRealitySpatialAudioFormatPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpatialAudioFormatConfiguration.all.put_MixedRealityExclusiveModePolicy (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SpatialAudioFormatSubtype is

      function get_WindowsSonic
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioFormatSubtype");
         m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioFormatSubtypeStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioFormatSubtypeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_WindowsSonic (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DolbyAtmosForHeadphones
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioFormatSubtype");
         m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioFormatSubtypeStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioFormatSubtypeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DolbyAtmosForHeadphones (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DolbyAtmosForHomeTheater
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioFormatSubtype");
         m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioFormatSubtypeStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioFormatSubtypeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DolbyAtmosForHomeTheater (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DolbyAtmosForSpeakers
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioFormatSubtype");
         m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioFormatSubtypeStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioFormatSubtypeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DolbyAtmosForSpeakers (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DTSHeadphoneX
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioFormatSubtype");
         m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioFormatSubtypeStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioFormatSubtypeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DTSHeadphoneX (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DTSXUltra
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Audio.SpatialAudioFormatSubtype");
         m_Factory        : access WinRt.Windows.Media.Audio.ISpatialAudioFormatSubtypeStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISpatialAudioFormatSubtypeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DTSXUltra (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end SpatialAudioFormatSubtype;

end;

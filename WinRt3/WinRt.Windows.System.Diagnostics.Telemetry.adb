--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System.Diagnostics.Telemetry is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PlatformTelemetryClient is

      function Register
      (
         id : WinRt.WString
      )
      return WinRt.Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.Telemetry.PlatformTelemetryClient");
         m_Factory        : access WinRt.Windows.System.Diagnostics.Telemetry.IPlatformTelemetryClientStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Diagnostics.Telemetry.IPlatformTelemetryRegistrationResult;
         HStr_id : WinRt.HString := To_HString (id);
      begin
         return RetVal : WinRt.Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationResult do
            Hr := RoGetActivationFactory (m_hString, IID_IPlatformTelemetryClientStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.Register (HStr_id, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPlatformTelemetryRegistrationResult := new Windows.System.Diagnostics.Telemetry.IPlatformTelemetryRegistrationResult;
               Retval.m_IPlatformTelemetryRegistrationResult.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_id);
         end return;
      end;

      function Register
      (
         id : WinRt.WString;
         settings : Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationSettings'Class
      )
      return WinRt.Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Diagnostics.Telemetry.PlatformTelemetryClient");
         m_Factory        : access WinRt.Windows.System.Diagnostics.Telemetry.IPlatformTelemetryClientStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Diagnostics.Telemetry.IPlatformTelemetryRegistrationResult;
         HStr_id : WinRt.HString := To_HString (id);
      begin
         return RetVal : WinRt.Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationResult do
            Hr := RoGetActivationFactory (m_hString, IID_IPlatformTelemetryClientStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.Register (HStr_id, settings.m_IPlatformTelemetryRegistrationSettings.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPlatformTelemetryRegistrationResult := new Windows.System.Diagnostics.Telemetry.IPlatformTelemetryRegistrationResult;
               Retval.m_IPlatformTelemetryRegistrationResult.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_id);
         end return;
      end;

   end PlatformTelemetryClient;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlatformTelemetryRegistrationResult

   procedure Initialize (this : in out PlatformTelemetryRegistrationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlatformTelemetryRegistrationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlatformTelemetryRegistrationResult, IPlatformTelemetryRegistrationResult_Ptr);
   begin
      if this.m_IPlatformTelemetryRegistrationResult /= null then
         if this.m_IPlatformTelemetryRegistrationResult.all /= null then
            RefCount := this.m_IPlatformTelemetryRegistrationResult.all.Release;
            Free (this.m_IPlatformTelemetryRegistrationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlatformTelemetryRegistrationResult

   function get_Status
   (
      this : in out PlatformTelemetryRegistrationResult
   )
   return WinRt.Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationStatus;
   begin
      Hr := this.m_IPlatformTelemetryRegistrationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlatformTelemetryRegistrationSettings

   procedure Initialize (this : in out PlatformTelemetryRegistrationSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlatformTelemetryRegistrationSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlatformTelemetryRegistrationSettings, IPlatformTelemetryRegistrationSettings_Ptr);
   begin
      if this.m_IPlatformTelemetryRegistrationSettings /= null then
         if this.m_IPlatformTelemetryRegistrationSettings.all /= null then
            RefCount := this.m_IPlatformTelemetryRegistrationSettings.all.Release;
            Free (this.m_IPlatformTelemetryRegistrationSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlatformTelemetryRegistrationSettings

   function Constructor return PlatformTelemetryRegistrationSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.Diagnostics.Telemetry.PlatformTelemetryRegistrationSettings");
      m_ComRetVal  : aliased Windows.System.Diagnostics.Telemetry.IPlatformTelemetryRegistrationSettings;
   begin
      return RetVal : PlatformTelemetryRegistrationSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlatformTelemetryRegistrationSettings := new Windows.System.Diagnostics.Telemetry.IPlatformTelemetryRegistrationSettings;
            Retval.m_IPlatformTelemetryRegistrationSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlatformTelemetryRegistrationSettings

   function get_StorageSize
   (
      this : in out PlatformTelemetryRegistrationSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPlatformTelemetryRegistrationSettings.all.get_StorageSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StorageSize
   (
      this : in out PlatformTelemetryRegistrationSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlatformTelemetryRegistrationSettings.all.put_StorageSize (value);
   end;

   function get_UploadQuotaSize
   (
      this : in out PlatformTelemetryRegistrationSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPlatformTelemetryRegistrationSettings.all.get_UploadQuotaSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UploadQuotaSize
   (
      this : in out PlatformTelemetryRegistrationSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlatformTelemetryRegistrationSettings.all.put_UploadQuotaSize (value);
   end;

end;

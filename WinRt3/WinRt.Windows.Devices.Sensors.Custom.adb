--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Sensors.Custom is

   package IAsyncOperation_CustomSensor is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Sensors.Custom.ICustomSensor);
   package AsyncOperationCompletedHandler_CustomSensor is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Sensors.Custom.ICustomSensor);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CustomSensor

   procedure Initialize (this : in out CustomSensor) is
   begin
      null;
   end;

   procedure Finalize (this : in out CustomSensor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICustomSensor, ICustomSensor_Ptr);
   begin
      if this.m_ICustomSensor /= null then
         if this.m_ICustomSensor.all /= null then
            RefCount := this.m_ICustomSensor.all.Release;
            Free (this.m_ICustomSensor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CustomSensor

   function GetDeviceSelector
   (
      interfaceId : WinRt.Guid
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sensors.Custom.CustomSensor");
      m_Factory        : access WinRt.Windows.Devices.Sensors.Custom.ICustomSensorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICustomSensorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (interfaceId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      sensorId : WinRt.WString
   )
   return WinRt.Windows.Devices.Sensors.Custom.CustomSensor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Sensors.Custom.CustomSensor");
      m_Factory        : access WinRt.Windows.Devices.Sensors.Custom.ICustomSensorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sensorId : WinRt.HString := To_HString (sensorId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CustomSensor.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CustomSensor.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Sensors.Custom.ICustomSensor;
      m_IID            : aliased WinRt.IID := (2143272533, 38516, 21731, (162, 105, 156, 170, 130, 14, 210, 60 )); -- Windows.Devices.Sensors.Custom.CustomSensor;
      m_HandlerIID     : aliased WinRt.IID := (2156618455, 28162, 22144, (165, 158, 17, 138, 152, 164, 231, 15 ));
      m_Handler        : AsyncOperationCompletedHandler_CustomSensor.Kind := new AsyncOperationCompletedHandler_CustomSensor.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CustomSensor.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CustomSensor.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CustomSensor.Kind_Delegate, AsyncOperationCompletedHandler_CustomSensor.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Sensors.Custom.CustomSensor do
         Hr := RoGetActivationFactory (m_hString, IID_ICustomSensorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_sensorId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ICustomSensor := new Windows.Devices.Sensors.Custom.ICustomSensor;
                     Retval.m_ICustomSensor.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_sensorId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CustomSensor

   function GetCurrentReading
   (
      this : in out CustomSensor
   )
   return WinRt.Windows.Devices.Sensors.Custom.CustomSensorReading'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sensors.Custom.ICustomSensorReading;
   begin
      return RetVal : WinRt.Windows.Devices.Sensors.Custom.CustomSensorReading do
         Hr := this.m_ICustomSensor.all.GetCurrentReading (m_ComRetVal'Access);
         Retval.m_ICustomSensorReading := new Windows.Devices.Sensors.Custom.ICustomSensorReading;
         Retval.m_ICustomSensorReading.all := m_ComRetVal;
      end return;
   end;

   function get_MinimumReportInterval
   (
      this : in out CustomSensor
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICustomSensor.all.get_MinimumReportInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReportInterval
   (
      this : in out CustomSensor;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICustomSensor.all.put_ReportInterval (value);
   end;

   function get_ReportInterval
   (
      this : in out CustomSensor
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICustomSensor.all.get_ReportInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out CustomSensor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICustomSensor.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_ReadingChanged
   (
      this : in out CustomSensor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICustomSensor.all.add_ReadingChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReadingChanged
   (
      this : in out CustomSensor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICustomSensor.all.remove_ReadingChanged (token);
   end;

   procedure put_ReportLatency
   (
      this : in out CustomSensor;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sensors.Custom.ICustomSensor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sensors.Custom.ICustomSensor_Interface, WinRt.Windows.Devices.Sensors.Custom.ICustomSensor2, WinRt.Windows.Devices.Sensors.Custom.IID_ICustomSensor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICustomSensor.all);
      Hr := m_Interface.put_ReportLatency (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ReportLatency
   (
      this : in out CustomSensor
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sensors.Custom.ICustomSensor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sensors.Custom.ICustomSensor_Interface, WinRt.Windows.Devices.Sensors.Custom.ICustomSensor2, WinRt.Windows.Devices.Sensors.Custom.IID_ICustomSensor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICustomSensor.all);
      Hr := m_Interface.get_ReportLatency (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxBatchSize
   (
      this : in out CustomSensor
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sensors.Custom.ICustomSensor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sensors.Custom.ICustomSensor_Interface, WinRt.Windows.Devices.Sensors.Custom.ICustomSensor2, WinRt.Windows.Devices.Sensors.Custom.IID_ICustomSensor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICustomSensor.all);
      Hr := m_Interface.get_MaxBatchSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CustomSensorReading

   procedure Initialize (this : in out CustomSensorReading) is
   begin
      null;
   end;

   procedure Finalize (this : in out CustomSensorReading) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICustomSensorReading, ICustomSensorReading_Ptr);
   begin
      if this.m_ICustomSensorReading /= null then
         if this.m_ICustomSensorReading.all /= null then
            RefCount := this.m_ICustomSensorReading.all.Release;
            Free (this.m_ICustomSensorReading);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CustomSensorReading

   function get_Timestamp
   (
      this : in out CustomSensorReading
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ICustomSensorReading.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out CustomSensorReading
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_ICustomSensorReading.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PerformanceCount
   (
      this : in out CustomSensorReading
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Sensors.Custom.ICustomSensorReading2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Sensors.Custom.ICustomSensorReading_Interface, WinRt.Windows.Devices.Sensors.Custom.ICustomSensorReading2, WinRt.Windows.Devices.Sensors.Custom.IID_ICustomSensorReading2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICustomSensorReading.all);
      Hr := m_Interface.get_PerformanceCount (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CustomSensorReadingChangedEventArgs

   procedure Initialize (this : in out CustomSensorReadingChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CustomSensorReadingChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICustomSensorReadingChangedEventArgs, ICustomSensorReadingChangedEventArgs_Ptr);
   begin
      if this.m_ICustomSensorReadingChangedEventArgs /= null then
         if this.m_ICustomSensorReadingChangedEventArgs.all /= null then
            RefCount := this.m_ICustomSensorReadingChangedEventArgs.all.Release;
            Free (this.m_ICustomSensorReadingChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CustomSensorReadingChangedEventArgs

   function get_Reading
   (
      this : in out CustomSensorReadingChangedEventArgs
   )
   return WinRt.Windows.Devices.Sensors.Custom.CustomSensorReading'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sensors.Custom.ICustomSensorReading;
   begin
      return RetVal : WinRt.Windows.Devices.Sensors.Custom.CustomSensorReading do
         Hr := this.m_ICustomSensorReadingChangedEventArgs.all.get_Reading (m_ComRetVal'Access);
         Retval.m_ICustomSensorReading := new Windows.Devices.Sensors.Custom.ICustomSensorReading;
         Retval.m_ICustomSensorReading.all := m_ComRetVal;
      end return;
   end;

end;

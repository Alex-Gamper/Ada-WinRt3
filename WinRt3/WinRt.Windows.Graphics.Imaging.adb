--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Graphics.Imaging is

   package IAsyncOperation_ImageStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_ImageStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_BitmapFrame is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Imaging.IBitmapFrame);
   package AsyncOperationCompletedHandler_BitmapFrame is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Imaging.IBitmapFrame);

   package IAsyncOperation_PixelDataProvider is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Imaging.IPixelDataProvider);
   package AsyncOperationCompletedHandler_PixelDataProvider is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Imaging.IPixelDataProvider);

   package IAsyncOperation_SoftwareBitmap is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Imaging.ISoftwareBitmap);
   package AsyncOperationCompletedHandler_SoftwareBitmap is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Imaging.ISoftwareBitmap);

   package IAsyncOperation_BitmapDecoder is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Imaging.IBitmapDecoder);
   package AsyncOperationCompletedHandler_BitmapDecoder is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Imaging.IBitmapDecoder);

   package IAsyncOperation_BitmapEncoder is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Imaging.IBitmapEncoder);
   package AsyncOperationCompletedHandler_BitmapEncoder is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Imaging.IBitmapEncoder);

   package IAsyncOperation_BitmapPropertySet is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_BitmapPropertySet is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IMap_HString_IBitmapTypedValue is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.Windows.Graphics.Imaging.IBitmapTypedValue);
   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.UInt32, GenericObject);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.UInt32, GenericObject);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapBuffer

   procedure Initialize (this : in out BitmapBuffer) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapBuffer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapBuffer, IBitmapBuffer_Ptr);
   begin
      if this.m_IBitmapBuffer /= null then
         if this.m_IBitmapBuffer.all /= null then
            RefCount := this.m_IBitmapBuffer.all.Release;
            Free (this.m_IBitmapBuffer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapBuffer

   function GetPlaneCount
   (
      this : in out BitmapBuffer
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IBitmapBuffer.all.GetPlaneCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetPlaneDescription
   (
      this : in out BitmapBuffer;
      index : WinRt.Int32
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPlaneDescription is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPlaneDescription;
   begin
      Hr := this.m_IBitmapBuffer.all.GetPlaneDescription (index, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateReference
   (
      this : in out BitmapBuffer
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapBuffer_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapBuffer.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out BitmapBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapBuffer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapBuffer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapCodecInformation

   procedure Initialize (this : in out BitmapCodecInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapCodecInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapCodecInformation, IBitmapCodecInformation_Ptr);
   begin
      if this.m_IBitmapCodecInformation /= null then
         if this.m_IBitmapCodecInformation.all /= null then
            RefCount := this.m_IBitmapCodecInformation.all.Release;
            Free (this.m_IBitmapCodecInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapCodecInformation

   function get_CodecId
   (
      this : in out BitmapCodecInformation
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IBitmapCodecInformation.all.get_CodecId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FileExtensions
   (
      this : in out BitmapCodecInformation
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IBitmapCodecInformation.all.get_FileExtensions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FriendlyName
   (
      this : in out BitmapCodecInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBitmapCodecInformation.all.get_FriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MimeTypes
   (
      this : in out BitmapCodecInformation
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IBitmapCodecInformation.all.get_MimeTypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapDecoder

   procedure Initialize (this : in out BitmapDecoder) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapDecoder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapDecoder, IBitmapDecoder_Ptr);
   begin
      if this.m_IBitmapDecoder /= null then
         if this.m_IBitmapDecoder.all /= null then
            RefCount := this.m_IBitmapDecoder.all.Release;
            Free (this.m_IBitmapDecoder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BitmapDecoder

   function get_BmpDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_BmpDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_JpegDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_JpegDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PngDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PngDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_TiffDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_TiffDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_GifDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_GifDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_JpegXRDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_JpegXRDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_IcoDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IcoDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetDecoderInformationEnumerator
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDecoderInformationEnumerator (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function CreateAsync
   (
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Graphics.Imaging.BitmapDecoder is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapDecoder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapDecoder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IBitmapDecoder;
      m_IID            : aliased WinRt.IID := (2861881577, 51951, 21494, (130, 61, 145, 182, 232, 52, 5, 16 )); -- Windows.Graphics.Imaging.BitmapDecoder;
      m_HandlerIID     : aliased WinRt.IID := (3143963890, 15611, 22127, (130, 188, 96, 170, 189, 48, 45, 83 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapDecoder.Kind := new AsyncOperationCompletedHandler_BitmapDecoder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapDecoder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapDecoder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapDecoder.Kind_Delegate, AsyncOperationCompletedHandler_BitmapDecoder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapDecoder do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBitmapDecoder := new Windows.Graphics.Imaging.IBitmapDecoder;
                     Retval.m_IBitmapDecoder.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAsync
   (
      decoderId : WinRt.Guid;
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Graphics.Imaging.BitmapDecoder is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapDecoder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapDecoder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IBitmapDecoder;
      m_IID            : aliased WinRt.IID := (2861881577, 51951, 21494, (130, 61, 145, 182, 232, 52, 5, 16 )); -- Windows.Graphics.Imaging.BitmapDecoder;
      m_HandlerIID     : aliased WinRt.IID := (3143963890, 15611, 22127, (130, 188, 96, 170, 189, 48, 45, 83 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapDecoder.Kind := new AsyncOperationCompletedHandler_BitmapDecoder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapDecoder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapDecoder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapDecoder.Kind_Delegate, AsyncOperationCompletedHandler_BitmapDecoder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapDecoder do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (decoderId, stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBitmapDecoder := new Windows.Graphics.Imaging.IBitmapDecoder;
                     Retval.m_IBitmapDecoder.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_HeifDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_HeifDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_WebpDecoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapDecoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapDecoderStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapDecoderStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_WebpDecoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapDecoder

   function get_BitmapContainerProperties
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPropertiesView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapPropertiesView;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapPropertiesView do
         Hr := this.m_IBitmapDecoder.all.get_BitmapContainerProperties (m_ComRetVal'Access);
         Retval.m_IBitmapPropertiesView := new Windows.Graphics.Imaging.IBitmapPropertiesView;
         Retval.m_IBitmapPropertiesView.all := m_ComRetVal;
      end return;
   end;

   function get_DecoderInformation
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapCodecInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapCodecInformation;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapCodecInformation do
         Hr := this.m_IBitmapDecoder.all.get_DecoderInformation (m_ComRetVal'Access);
         Retval.m_IBitmapCodecInformation := new Windows.Graphics.Imaging.IBitmapCodecInformation;
         Retval.m_IBitmapCodecInformation.all := m_ComRetVal;
      end return;
   end;

   function get_FrameCount
   (
      this : in out BitmapDecoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapDecoder.all.get_FrameCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetPreviewAsync
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.ImageStream'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ImageStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ImageStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (1749116350, 17, 22230, (190, 191, 67, 0, 22, 213, 27, 122 )); -- Windows.Graphics.Imaging.ImageStream;
      m_HandlerIID     : aliased WinRt.IID := (700154504, 17506, 20846, (166, 117, 140, 146, 53, 196, 41, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_ImageStream.Kind := new AsyncOperationCompletedHandler_ImageStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ImageStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ImageStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ImageStream.Kind_Delegate, AsyncOperationCompletedHandler_ImageStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.ImageStream do
         Hr := this.m_IBitmapDecoder.all.GetPreviewAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetFrameAsync
   (
      this : in out BitmapDecoder;
      frameIndex : WinRt.UInt32
   )
   return WinRt.Windows.Graphics.Imaging.BitmapFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapFrame.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapFrame.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IBitmapFrame;
      m_IID            : aliased WinRt.IID := (3407119313, 5220, 23545, (147, 70, 213, 55, 115, 93, 251, 214 )); -- Windows.Graphics.Imaging.BitmapFrame;
      m_HandlerIID     : aliased WinRt.IID := (672613722, 38975, 23046, (159, 228, 251, 150, 55, 104, 67, 32 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapFrame.Kind := new AsyncOperationCompletedHandler_BitmapFrame.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapFrame.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapFrame.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapFrame.Kind_Delegate, AsyncOperationCompletedHandler_BitmapFrame.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapFrame do
         Hr := this.m_IBitmapDecoder.all.GetFrameAsync (frameIndex, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBitmapFrame := new Windows.Graphics.Imaging.IBitmapFrame;
                  Retval.m_IBitmapFrame.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetThumbnailAsync
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.ImageStream'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ImageStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ImageStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (1749116350, 17, 22230, (190, 191, 67, 0, 22, 213, 27, 122 )); -- Windows.Graphics.Imaging.ImageStream;
      m_HandlerIID     : aliased WinRt.IID := (700154504, 17506, 20846, (166, 117, 140, 146, 53, 196, 41, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_ImageStream.Kind := new AsyncOperationCompletedHandler_ImageStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ImageStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ImageStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ImageStream.Kind_Delegate, AsyncOperationCompletedHandler_ImageStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.ImageStream do
         m_Interface := QInterface (this.m_IBitmapDecoder.all);
         Hr := m_Interface.GetThumbnailAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_BitmapProperties
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPropertiesView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapPropertiesView;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapPropertiesView do
         m_Interface := QInterface (this.m_IBitmapDecoder.all);
         Hr := m_Interface.get_BitmapProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBitmapPropertiesView := new Windows.Graphics.Imaging.IBitmapPropertiesView;
         Retval.m_IBitmapPropertiesView.all := m_ComRetVal;
      end return;
   end;

   function get_BitmapPixelFormat
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_BitmapPixelFormat (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BitmapAlphaMode
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapAlphaMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_BitmapAlphaMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DpiX
   (
      this : in out BitmapDecoder
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_DpiX (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DpiY
   (
      this : in out BitmapDecoder
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_DpiY (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PixelWidth
   (
      this : in out BitmapDecoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_PixelWidth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PixelHeight
   (
      this : in out BitmapDecoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_PixelHeight (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OrientedPixelWidth
   (
      this : in out BitmapDecoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_OrientedPixelWidth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OrientedPixelHeight
   (
      this : in out BitmapDecoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapDecoder.all);
      Hr := m_Interface.get_OrientedPixelHeight (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetPixelDataAsync
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.PixelDataProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PixelDataProvider.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PixelDataProvider.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IPixelDataProvider;
      m_IID            : aliased WinRt.IID := (2351824560, 27682, 22627, (136, 216, 133, 193, 251, 199, 86, 151 )); -- Windows.Graphics.Imaging.PixelDataProvider;
      m_HandlerIID     : aliased WinRt.IID := (935195838, 12089, 22828, (164, 247, 209, 106, 9, 210, 178, 219 ));
      m_Handler        : AsyncOperationCompletedHandler_PixelDataProvider.Kind := new AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PixelDataProvider.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PixelDataProvider.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate, AsyncOperationCompletedHandler_PixelDataProvider.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.PixelDataProvider do
         m_Interface := QInterface (this.m_IBitmapDecoder.all);
         Hr := m_Interface.GetPixelDataAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPixelDataProvider := new Windows.Graphics.Imaging.IPixelDataProvider;
                  Retval.m_IPixelDataProvider.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetPixelDataAsync
   (
      this : in out BitmapDecoder;
      pixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      alphaMode : Windows.Graphics.Imaging.BitmapAlphaMode;
      transform : Windows.Graphics.Imaging.BitmapTransform'Class;
      exifOrientationMode : Windows.Graphics.Imaging.ExifOrientationMode;
      colorManagementMode : Windows.Graphics.Imaging.ColorManagementMode
   )
   return WinRt.Windows.Graphics.Imaging.PixelDataProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PixelDataProvider.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PixelDataProvider.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IPixelDataProvider;
      m_IID            : aliased WinRt.IID := (2351824560, 27682, 22627, (136, 216, 133, 193, 251, 199, 86, 151 )); -- Windows.Graphics.Imaging.PixelDataProvider;
      m_HandlerIID     : aliased WinRt.IID := (935195838, 12089, 22828, (164, 247, 209, 106, 9, 210, 178, 219 ));
      m_Handler        : AsyncOperationCompletedHandler_PixelDataProvider.Kind := new AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PixelDataProvider.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PixelDataProvider.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate, AsyncOperationCompletedHandler_PixelDataProvider.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrame, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrame'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.PixelDataProvider do
         m_Interface := QInterface (this.m_IBitmapDecoder.all);
         Hr := m_Interface.GetPixelDataAsync (pixelFormat, alphaMode, transform.m_IBitmapTransform.all, exifOrientationMode, colorManagementMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPixelDataProvider := new Windows.Graphics.Imaging.IPixelDataProvider;
                  Retval.m_IPixelDataProvider.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSoftwareBitmapAsync
   (
      this : in out BitmapDecoder
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrameWithSoftwareBitmap'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         m_Interface := QInterface (this.m_IBitmapDecoder.all);
         Hr := m_Interface.GetSoftwareBitmapAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                  Retval.m_ISoftwareBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSoftwareBitmapAsync
   (
      this : in out BitmapDecoder;
      pixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      alphaMode : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrameWithSoftwareBitmap'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         m_Interface := QInterface (this.m_IBitmapDecoder.all);
         Hr := m_Interface.GetSoftwareBitmapAsync (pixelFormat, alphaMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                  Retval.m_ISoftwareBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSoftwareBitmapAsync
   (
      this : in out BitmapDecoder;
      pixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      alphaMode : Windows.Graphics.Imaging.BitmapAlphaMode;
      transform : Windows.Graphics.Imaging.BitmapTransform'Class;
      exifOrientationMode : Windows.Graphics.Imaging.ExifOrientationMode;
      colorManagementMode : Windows.Graphics.Imaging.ColorManagementMode
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapDecoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrameWithSoftwareBitmap'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         m_Interface := QInterface (this.m_IBitmapDecoder.all);
         Hr := m_Interface.GetSoftwareBitmapAsync (pixelFormat, alphaMode, transform.m_IBitmapTransform.all, exifOrientationMode, colorManagementMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                  Retval.m_ISoftwareBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapEncoder

   procedure Initialize (this : in out BitmapEncoder) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapEncoder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapEncoder, IBitmapEncoder_Ptr);
   begin
      if this.m_IBitmapEncoder /= null then
         if this.m_IBitmapEncoder.all /= null then
            RefCount := this.m_IBitmapEncoder.all.Release;
            Free (this.m_IBitmapEncoder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BitmapEncoder

   function get_BmpEncoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_BmpEncoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_JpegEncoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_JpegEncoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PngEncoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PngEncoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_TiffEncoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_TiffEncoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_GifEncoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_GifEncoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_JpegXREncoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_JpegXREncoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetEncoderInformationEnumerator
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEncoderInformationEnumerator (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function CreateAsync_BitmapEncoder
   (
      encoderId : WinRt.Guid;
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Graphics.Imaging.BitmapEncoder is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapEncoder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapEncoder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IBitmapEncoder;
      m_IID            : aliased WinRt.IID := (354144709, 18037, 23285, (162, 137, 0, 30, 220, 102, 184, 106 )); -- Windows.Graphics.Imaging.BitmapEncoder;
      m_HandlerIID     : aliased WinRt.IID := (1576120261, 18317, 21981, (179, 23, 2, 66, 116, 6, 42, 13 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapEncoder.Kind := new AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapEncoder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapEncoder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate, AsyncOperationCompletedHandler_BitmapEncoder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapEncoder do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (encoderId, stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBitmapEncoder := new Windows.Graphics.Imaging.IBitmapEncoder;
                     Retval.m_IBitmapEncoder.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAsync
   (
      encoderId : WinRt.Guid;
      stream : Windows.Storage.Streams.IRandomAccessStream;
      encodingOptions : GenericObject
   )
   return WinRt.Windows.Graphics.Imaging.BitmapEncoder is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapEncoder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapEncoder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IBitmapEncoder;
      m_IID            : aliased WinRt.IID := (354144709, 18037, 23285, (162, 137, 0, 30, 220, 102, 184, 106 )); -- Windows.Graphics.Imaging.BitmapEncoder;
      m_HandlerIID     : aliased WinRt.IID := (1576120261, 18317, 21981, (179, 23, 2, 66, 116, 6, 42, 13 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapEncoder.Kind := new AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapEncoder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapEncoder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate, AsyncOperationCompletedHandler_BitmapEncoder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapEncoder do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (encoderId, stream, encodingOptions, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBitmapEncoder := new Windows.Graphics.Imaging.IBitmapEncoder;
                     Retval.m_IBitmapEncoder.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForTranscodingAsync
   (
      stream : Windows.Storage.Streams.IRandomAccessStream;
      bitmapDecoder_p : Windows.Graphics.Imaging.BitmapDecoder'Class
   )
   return WinRt.Windows.Graphics.Imaging.BitmapEncoder is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapEncoder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapEncoder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IBitmapEncoder;
      m_IID            : aliased WinRt.IID := (354144709, 18037, 23285, (162, 137, 0, 30, 220, 102, 184, 106 )); -- Windows.Graphics.Imaging.BitmapEncoder;
      m_HandlerIID     : aliased WinRt.IID := (1576120261, 18317, 21981, (179, 23, 2, 66, 116, 6, 42, 13 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapEncoder.Kind := new AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapEncoder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapEncoder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate, AsyncOperationCompletedHandler_BitmapEncoder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapEncoder do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForTranscodingAsync (stream, bitmapDecoder_p.m_IBitmapDecoder.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBitmapEncoder := new Windows.Graphics.Imaging.IBitmapEncoder;
                     Retval.m_IBitmapEncoder.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForInPlacePropertyEncodingAsync
   (
      bitmapDecoder_p : Windows.Graphics.Imaging.BitmapDecoder'Class
   )
   return WinRt.Windows.Graphics.Imaging.BitmapEncoder is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapEncoder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapEncoder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IBitmapEncoder;
      m_IID            : aliased WinRt.IID := (354144709, 18037, 23285, (162, 137, 0, 30, 220, 102, 184, 106 )); -- Windows.Graphics.Imaging.BitmapEncoder;
      m_HandlerIID     : aliased WinRt.IID := (1576120261, 18317, 21981, (179, 23, 2, 66, 116, 6, 42, 13 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapEncoder.Kind := new AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapEncoder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapEncoder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapEncoder.Kind_Delegate, AsyncOperationCompletedHandler_BitmapEncoder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapEncoder do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForInPlacePropertyEncodingAsync (bitmapDecoder_p.m_IBitmapDecoder.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBitmapEncoder := new Windows.Graphics.Imaging.IBitmapEncoder;
                     Retval.m_IBitmapEncoder.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_HeifEncoderId
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapEncoder");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.IBitmapEncoderStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBitmapEncoderStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_HeifEncoderId (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapEncoder

   function get_EncoderInformation
   (
      this : in out BitmapEncoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapCodecInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapCodecInformation;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapCodecInformation do
         Hr := this.m_IBitmapEncoder.all.get_EncoderInformation (m_ComRetVal'Access);
         Retval.m_IBitmapCodecInformation := new Windows.Graphics.Imaging.IBitmapCodecInformation;
         Retval.m_IBitmapCodecInformation.all := m_ComRetVal;
      end return;
   end;

   function get_BitmapProperties
   (
      this : in out BitmapEncoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapProperties;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapProperties do
         Hr := this.m_IBitmapEncoder.all.get_BitmapProperties (m_ComRetVal'Access);
         Retval.m_IBitmapProperties := new Windows.Graphics.Imaging.IBitmapProperties;
         Retval.m_IBitmapProperties.all := m_ComRetVal;
      end return;
   end;

   function get_BitmapContainerProperties
   (
      this : in out BitmapEncoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapProperties;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapProperties do
         Hr := this.m_IBitmapEncoder.all.get_BitmapContainerProperties (m_ComRetVal'Access);
         Retval.m_IBitmapProperties := new Windows.Graphics.Imaging.IBitmapProperties;
         Retval.m_IBitmapProperties.all := m_ComRetVal;
      end return;
   end;

   function get_IsThumbnailGenerated
   (
      this : in out BitmapEncoder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBitmapEncoder.all.get_IsThumbnailGenerated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsThumbnailGenerated
   (
      this : in out BitmapEncoder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapEncoder.all.put_IsThumbnailGenerated (value);
   end;

   function get_GeneratedThumbnailWidth
   (
      this : in out BitmapEncoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapEncoder.all.get_GeneratedThumbnailWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GeneratedThumbnailWidth
   (
      this : in out BitmapEncoder;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapEncoder.all.put_GeneratedThumbnailWidth (value);
   end;

   function get_GeneratedThumbnailHeight
   (
      this : in out BitmapEncoder
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapEncoder.all.get_GeneratedThumbnailHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GeneratedThumbnailHeight
   (
      this : in out BitmapEncoder;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapEncoder.all.put_GeneratedThumbnailHeight (value);
   end;

   function get_BitmapTransform
   (
      this : in out BitmapEncoder
   )
   return WinRt.Windows.Graphics.Imaging.BitmapTransform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapTransform;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapTransform do
         Hr := this.m_IBitmapEncoder.all.get_BitmapTransform (m_ComRetVal'Access);
         Retval.m_IBitmapTransform := new Windows.Graphics.Imaging.IBitmapTransform;
         Retval.m_IBitmapTransform.all := m_ComRetVal;
      end return;
   end;

   procedure SetPixelData
   (
      this : in out BitmapEncoder;
      pixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      alphaMode : Windows.Graphics.Imaging.BitmapAlphaMode;
      width : WinRt.UInt32;
      height : WinRt.UInt32;
      dpiX : WinRt.Double;
      dpiY : WinRt.Double;
      pixels : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_pixels is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IBitmapEncoder.all.SetPixelData (pixelFormat, alphaMode, width, height, dpiX, dpiY, WinRt.UInt32(pixels'Length), Convert_pixels (pixels (pixels'First)'Address));
   end;

   procedure GoToNextFrameAsync
   (
      this : in out BitmapEncoder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBitmapEncoder.all.GoToNextFrameAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure GoToNextFrameAsync
   (
      this : in out BitmapEncoder;
      encodingOptions : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBitmapEncoder.all.GoToNextFrameAsync (encodingOptions, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure FlushAsync
   (
      this : in out BitmapEncoder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBitmapEncoder.all.FlushAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetSoftwareBitmap
   (
      this : in out BitmapEncoder;
      bitmap : Windows.Graphics.Imaging.SoftwareBitmap'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapEncoderWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapEncoder_Interface, WinRt.Windows.Graphics.Imaging.IBitmapEncoderWithSoftwareBitmap, WinRt.Windows.Graphics.Imaging.IID_IBitmapEncoderWithSoftwareBitmap'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapEncoder.all);
      Hr := m_Interface.SetSoftwareBitmap (bitmap.m_ISoftwareBitmap.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapFrame

   procedure Initialize (this : in out BitmapFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapFrame, IBitmapFrame_Ptr);
   begin
      if this.m_IBitmapFrame /= null then
         if this.m_IBitmapFrame.all /= null then
            RefCount := this.m_IBitmapFrame.all.Release;
            Free (this.m_IBitmapFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapFrame

   function GetThumbnailAsync
   (
      this : in out BitmapFrame
   )
   return WinRt.Windows.Graphics.Imaging.ImageStream'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ImageStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ImageStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (1749116350, 17, 22230, (190, 191, 67, 0, 22, 213, 27, 122 )); -- Windows.Graphics.Imaging.ImageStream;
      m_HandlerIID     : aliased WinRt.IID := (700154504, 17506, 20846, (166, 117, 140, 146, 53, 196, 41, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_ImageStream.Kind := new AsyncOperationCompletedHandler_ImageStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ImageStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ImageStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ImageStream.Kind_Delegate, AsyncOperationCompletedHandler_ImageStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.ImageStream do
         Hr := this.m_IBitmapFrame.all.GetThumbnailAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_BitmapProperties
   (
      this : in out BitmapFrame
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPropertiesView'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapPropertiesView;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapPropertiesView do
         Hr := this.m_IBitmapFrame.all.get_BitmapProperties (m_ComRetVal'Access);
         Retval.m_IBitmapPropertiesView := new Windows.Graphics.Imaging.IBitmapPropertiesView;
         Retval.m_IBitmapPropertiesView.all := m_ComRetVal;
      end return;
   end;

   function get_BitmapPixelFormat
   (
      this : in out BitmapFrame
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
   begin
      Hr := this.m_IBitmapFrame.all.get_BitmapPixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BitmapAlphaMode
   (
      this : in out BitmapFrame
   )
   return WinRt.Windows.Graphics.Imaging.BitmapAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapAlphaMode;
   begin
      Hr := this.m_IBitmapFrame.all.get_BitmapAlphaMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DpiX
   (
      this : in out BitmapFrame
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBitmapFrame.all.get_DpiX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DpiY
   (
      this : in out BitmapFrame
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBitmapFrame.all.get_DpiY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelWidth
   (
      this : in out BitmapFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapFrame.all.get_PixelWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelHeight
   (
      this : in out BitmapFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapFrame.all.get_PixelHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OrientedPixelWidth
   (
      this : in out BitmapFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapFrame.all.get_OrientedPixelWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OrientedPixelHeight
   (
      this : in out BitmapFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapFrame.all.get_OrientedPixelHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetPixelDataAsync
   (
      this : in out BitmapFrame
   )
   return WinRt.Windows.Graphics.Imaging.PixelDataProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PixelDataProvider.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PixelDataProvider.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IPixelDataProvider;
      m_IID            : aliased WinRt.IID := (2351824560, 27682, 22627, (136, 216, 133, 193, 251, 199, 86, 151 )); -- Windows.Graphics.Imaging.PixelDataProvider;
      m_HandlerIID     : aliased WinRt.IID := (935195838, 12089, 22828, (164, 247, 209, 106, 9, 210, 178, 219 ));
      m_Handler        : AsyncOperationCompletedHandler_PixelDataProvider.Kind := new AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PixelDataProvider.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PixelDataProvider.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate, AsyncOperationCompletedHandler_PixelDataProvider.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.PixelDataProvider do
         Hr := this.m_IBitmapFrame.all.GetPixelDataAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPixelDataProvider := new Windows.Graphics.Imaging.IPixelDataProvider;
                  Retval.m_IPixelDataProvider.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetPixelDataAsync
   (
      this : in out BitmapFrame;
      pixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      alphaMode : Windows.Graphics.Imaging.BitmapAlphaMode;
      transform : Windows.Graphics.Imaging.BitmapTransform'Class;
      exifOrientationMode : Windows.Graphics.Imaging.ExifOrientationMode;
      colorManagementMode : Windows.Graphics.Imaging.ColorManagementMode
   )
   return WinRt.Windows.Graphics.Imaging.PixelDataProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PixelDataProvider.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PixelDataProvider.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.IPixelDataProvider;
      m_IID            : aliased WinRt.IID := (2351824560, 27682, 22627, (136, 216, 133, 193, 251, 199, 86, 151 )); -- Windows.Graphics.Imaging.PixelDataProvider;
      m_HandlerIID     : aliased WinRt.IID := (935195838, 12089, 22828, (164, 247, 209, 106, 9, 210, 178, 219 ));
      m_Handler        : AsyncOperationCompletedHandler_PixelDataProvider.Kind := new AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PixelDataProvider.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PixelDataProvider.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PixelDataProvider.Kind_Delegate, AsyncOperationCompletedHandler_PixelDataProvider.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.PixelDataProvider do
         Hr := this.m_IBitmapFrame.all.GetPixelDataAsync (pixelFormat, alphaMode, transform.m_IBitmapTransform.all, exifOrientationMode, colorManagementMode, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPixelDataProvider := new Windows.Graphics.Imaging.IPixelDataProvider;
                  Retval.m_IPixelDataProvider.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSoftwareBitmapAsync
   (
      this : in out BitmapFrame
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapFrame_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrameWithSoftwareBitmap'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         m_Interface := QInterface (this.m_IBitmapFrame.all);
         Hr := m_Interface.GetSoftwareBitmapAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                  Retval.m_ISoftwareBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSoftwareBitmapAsync
   (
      this : in out BitmapFrame;
      pixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      alphaMode : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapFrame_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrameWithSoftwareBitmap'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         m_Interface := QInterface (this.m_IBitmapFrame.all);
         Hr := m_Interface.GetSoftwareBitmapAsync (pixelFormat, alphaMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                  Retval.m_ISoftwareBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetSoftwareBitmapAsync
   (
      this : in out BitmapFrame;
      pixelFormat : Windows.Graphics.Imaging.BitmapPixelFormat;
      alphaMode : Windows.Graphics.Imaging.BitmapAlphaMode;
      transform : Windows.Graphics.Imaging.BitmapTransform'Class;
      exifOrientationMode : Windows.Graphics.Imaging.ExifOrientationMode;
      colorManagementMode : Windows.Graphics.Imaging.ColorManagementMode
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapFrame_Interface, WinRt.Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap, WinRt.Windows.Graphics.Imaging.IID_IBitmapFrameWithSoftwareBitmap'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         m_Interface := QInterface (this.m_IBitmapFrame.all);
         Hr := m_Interface.GetSoftwareBitmapAsync (pixelFormat, alphaMode, transform.m_IBitmapTransform.all, exifOrientationMode, colorManagementMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                  Retval.m_ISoftwareBitmap.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapProperties

   procedure Initialize (this : in out BitmapProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapProperties, IBitmapProperties_Ptr);
   begin
      if this.m_IBitmapProperties /= null then
         if this.m_IBitmapProperties.all /= null then
            RefCount := this.m_IBitmapProperties.all.Release;
            Free (this.m_IBitmapProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapProperties

   procedure SetPropertiesAsync
   (
      this : in out BitmapProperties;
      propertiesToSet : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBitmapProperties.all.SetPropertiesAsync (propertiesToSet, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetPropertiesAsync
   (
      this : in out BitmapProperties;
      propertiesToRetrieve : GenericObject
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Imaging.IBitmapPropertiesView := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapPropertySet.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapPropertySet.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1179303936, 45553, 21062, (130, 104, 145, 42, 37, 147, 216, 137 )); -- Windows.Graphics.Imaging.BitmapPropertySet;
      m_HandlerIID     : aliased WinRt.IID := (2821872599, 41918, 22657, (159, 167, 4, 206, 239, 185, 220, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapPropertySet.Kind := new AsyncOperationCompletedHandler_BitmapPropertySet.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapPropertySet.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapPropertySet.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapPropertySet.Kind_Delegate, AsyncOperationCompletedHandler_BitmapPropertySet.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.IBitmapProperties_Interface, WinRt.Windows.Graphics.Imaging.IBitmapPropertiesView, WinRt.Windows.Graphics.Imaging.IID_IBitmapPropertiesView'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapPropertySet do
         m_Interface := QInterface (this.m_IBitmapProperties.all);
         Hr := m_Interface.GetPropertiesAsync (propertiesToRetrieve, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_GenericObject := new GenericObject;
                  Retval.m_GenericObject.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapPropertiesView

   procedure Initialize (this : in out BitmapPropertiesView) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapPropertiesView) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapPropertiesView, IBitmapPropertiesView_Ptr);
   begin
      if this.m_IBitmapPropertiesView /= null then
         if this.m_IBitmapPropertiesView.all /= null then
            RefCount := this.m_IBitmapPropertiesView.all.Release;
            Free (this.m_IBitmapPropertiesView);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapPropertiesView

   function GetPropertiesAsync
   (
      this : in out BitmapPropertiesView;
      propertiesToRetrieve : GenericObject
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BitmapPropertySet.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BitmapPropertySet.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1179303936, 45553, 21062, (130, 104, 145, 42, 37, 147, 216, 137 )); -- Windows.Graphics.Imaging.BitmapPropertySet;
      m_HandlerIID     : aliased WinRt.IID := (2821872599, 41918, 22657, (159, 167, 4, 206, 239, 185, 220, 47 ));
      m_Handler        : AsyncOperationCompletedHandler_BitmapPropertySet.Kind := new AsyncOperationCompletedHandler_BitmapPropertySet.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BitmapPropertySet.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BitmapPropertySet.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BitmapPropertySet.Kind_Delegate, AsyncOperationCompletedHandler_BitmapPropertySet.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapPropertySet do
         Hr := this.m_IBitmapPropertiesView.all.GetPropertiesAsync (propertiesToRetrieve, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_GenericObject := new GenericObject;
                  Retval.m_GenericObject.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapPropertySet

   procedure Initialize (this : in out BitmapPropertySet) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapPropertySet) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BitmapPropertySet

   function Constructor return BitmapPropertySet is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapPropertySet");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : BitmapPropertySet do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapPropertySet

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,Windows.Graphics.Imaging.BitmapTypedValue>
   function Lookup
   (
      this : in out BitmapPropertySet;
      key : WinRt.WString
   )
   return WinRt.Windows.Graphics.Imaging.BitmapTypedValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IBitmapTypedValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapTypedValue;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (745598861, 23884, 20869, (141, 183, 254, 216, 119, 40, 22, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_IBitmapTypedValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapTypedValue do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBitmapTypedValue := new Windows.Graphics.Imaging.IBitmapTypedValue;
         Retval.m_IBitmapTypedValue.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_key);
      end return;
   end;

   function get_Size
   (
      this : in out BitmapPropertySet
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IBitmapTypedValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (745598861, 23884, 20869, (141, 183, 254, 216, 119, 40, 22, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_IBitmapTypedValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out BitmapPropertySet;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IBitmapTypedValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (745598861, 23884, 20869, (141, 183, 254, 216, 119, 40, 22, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_IBitmapTypedValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out BitmapPropertySet
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IBitmapTypedValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (745598861, 23884, 20869, (141, 183, 254, 216, 119, 40, 22, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_IBitmapTypedValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out BitmapPropertySet;
      key : WinRt.WString;
      value : Windows.Graphics.Imaging.BitmapTypedValue'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IBitmapTypedValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (745598861, 23884, 20869, (141, 183, 254, 216, 119, 40, 22, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_IBitmapTypedValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Insert (HStr_key, value.m_IBitmapTypedValue.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out BitmapPropertySet;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IBitmapTypedValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (745598861, 23884, 20869, (141, 183, 254, 216, 119, 40, 22, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_IBitmapTypedValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out BitmapPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IBitmapTypedValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (745598861, 23884, 20869, (141, 183, 254, 216, 119, 40, 22, 93 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_IBitmapTypedValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapTransform

   procedure Initialize (this : in out BitmapTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapTransform, IBitmapTransform_Ptr);
   begin
      if this.m_IBitmapTransform /= null then
         if this.m_IBitmapTransform.all /= null then
            RefCount := this.m_IBitmapTransform.all.Release;
            Free (this.m_IBitmapTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BitmapTransform

   function Constructor return BitmapTransform is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapTransform");
      m_ComRetVal  : aliased Windows.Graphics.Imaging.IBitmapTransform;
   begin
      return RetVal : BitmapTransform do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBitmapTransform := new Windows.Graphics.Imaging.IBitmapTransform;
            Retval.m_IBitmapTransform.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapTransform

   function get_ScaledWidth
   (
      this : in out BitmapTransform
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapTransform.all.get_ScaledWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaledWidth
   (
      this : in out BitmapTransform;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapTransform.all.put_ScaledWidth (value);
   end;

   function get_ScaledHeight
   (
      this : in out BitmapTransform
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBitmapTransform.all.get_ScaledHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaledHeight
   (
      this : in out BitmapTransform;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapTransform.all.put_ScaledHeight (value);
   end;

   function get_InterpolationMode
   (
      this : in out BitmapTransform
   )
   return WinRt.Windows.Graphics.Imaging.BitmapInterpolationMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapInterpolationMode;
   begin
      Hr := this.m_IBitmapTransform.all.get_InterpolationMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InterpolationMode
   (
      this : in out BitmapTransform;
      value : Windows.Graphics.Imaging.BitmapInterpolationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapTransform.all.put_InterpolationMode (value);
   end;

   function get_Flip
   (
      this : in out BitmapTransform
   )
   return WinRt.Windows.Graphics.Imaging.BitmapFlip is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapFlip;
   begin
      Hr := this.m_IBitmapTransform.all.get_Flip (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Flip
   (
      this : in out BitmapTransform;
      value : Windows.Graphics.Imaging.BitmapFlip
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapTransform.all.put_Flip (value);
   end;

   function get_Rotation
   (
      this : in out BitmapTransform
   )
   return WinRt.Windows.Graphics.Imaging.BitmapRotation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapRotation;
   begin
      Hr := this.m_IBitmapTransform.all.get_Rotation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Rotation
   (
      this : in out BitmapTransform;
      value : Windows.Graphics.Imaging.BitmapRotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapTransform.all.put_Rotation (value);
   end;

   function get_Bounds
   (
      this : in out BitmapTransform
   )
   return WinRt.Windows.Graphics.Imaging.BitmapBounds is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapBounds;
   begin
      Hr := this.m_IBitmapTransform.all.get_Bounds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Bounds
   (
      this : in out BitmapTransform;
      value : Windows.Graphics.Imaging.BitmapBounds
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapTransform.all.put_Bounds (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapTypedValue

   procedure Initialize (this : in out BitmapTypedValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapTypedValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapTypedValue, IBitmapTypedValue_Ptr);
   begin
      if this.m_IBitmapTypedValue /= null then
         if this.m_IBitmapTypedValue.all /= null then
            RefCount := this.m_IBitmapTypedValue.all.Release;
            Free (this.m_IBitmapTypedValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BitmapTypedValue

   function Constructor
   (
      value : WinRt.IInspectable;
      type_x : Windows.Foundation.PropertyType
   )
   return BitmapTypedValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Imaging.BitmapTypedValue");
      m_Factory    : access IBitmapTypedValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Imaging.IBitmapTypedValue;
   begin
      return RetVal : BitmapTypedValue do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapTypedValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (value, type_x, m_ComRetVal'Access);
            Retval.m_IBitmapTypedValue := new Windows.Graphics.Imaging.IBitmapTypedValue;
            Retval.m_IBitmapTypedValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapTypedValue

   function get_Value
   (
      this : in out BitmapTypedValue
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IBitmapTypedValue.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out BitmapTypedValue
   )
   return WinRt.Windows.Foundation.PropertyType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.PropertyType;
   begin
      Hr := this.m_IBitmapTypedValue.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageStream

   procedure Initialize (this : in out ImageStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageStream) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType, WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Ptr);
   begin
      if this.m_IRandomAccessStreamWithContentType /= null then
         if this.m_IRandomAccessStreamWithContentType.all /= null then
            RefCount := this.m_IRandomAccessStreamWithContentType.all.Release;
            Free (this.m_IRandomAccessStreamWithContentType);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageStream

   function get_ContentType
   (
      this : in out ImageStream
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IContentTypeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IContentTypeProvider, WinRt.Windows.Storage.Streams.IID_IContentTypeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_ContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out ImageStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out ImageStream;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.put_Size (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetInputStreamAt
   (
      this : in out ImageStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.GetInputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetOutputStreamAt
   (
      this : in out ImageStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.GetOutputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out ImageStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out ImageStream;
      position : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.Seek (position);
      m_RefCount := m_Interface.Release;
   end;

   function CloneStream
   (
      this : in out ImageStream
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.CloneStream (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanRead
   (
      this : in out ImageStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_CanRead (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanWrite
   (
      this : in out ImageStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_CanWrite (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function WriteAsync
   (
      this : in out ImageStream;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.WriteAsync (buffer, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out ImageStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.FlushAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out ImageStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ReadAsync
   (
      this : in out ImageStream;
      buffer : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IInputStream, WinRt.Windows.Storage.Streams.IID_IInputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.ReadAsync (buffer, count, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PixelDataProvider

   procedure Initialize (this : in out PixelDataProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out PixelDataProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPixelDataProvider, IPixelDataProvider_Ptr);
   begin
      if this.m_IPixelDataProvider /= null then
         if this.m_IPixelDataProvider.all /= null then
            RefCount := this.m_IPixelDataProvider.all.Release;
            Free (this.m_IPixelDataProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PixelDataProvider

   function DetachPixelData
   (
      this : in out PixelDataProvider
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPixelDataProvider.all.DetachPixelData (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SoftwareBitmap

   procedure Initialize (this : in out SoftwareBitmap) is
   begin
      null;
   end;

   procedure Finalize (this : in out SoftwareBitmap) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISoftwareBitmap, ISoftwareBitmap_Ptr);
   begin
      if this.m_ISoftwareBitmap /= null then
         if this.m_ISoftwareBitmap.all /= null then
            RefCount := this.m_ISoftwareBitmap.all.Release;
            Free (this.m_ISoftwareBitmap);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SoftwareBitmap

   function Constructor
   (
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32
   )
   return SoftwareBitmap is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory    : access ISoftwareBitmapFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (format, width, height, m_ComRetVal'Access);
            Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
            Retval.m_ISoftwareBitmap.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32;
      alpha : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return SoftwareBitmap is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory    : access ISoftwareBitmapFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithAlpha (format, width, height, alpha, m_ComRetVal'Access);
            Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
            Retval.m_ISoftwareBitmap.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SoftwareBitmap

   function Copy
   (
      source : Windows.Graphics.Imaging.SoftwareBitmap'Class
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.ISoftwareBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Copy (source.m_ISoftwareBitmap.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
            Retval.m_ISoftwareBitmap.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Convert
   (
      source : Windows.Graphics.Imaging.SoftwareBitmap'Class;
      format : Windows.Graphics.Imaging.BitmapPixelFormat
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.ISoftwareBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Convert (source.m_ISoftwareBitmap.all, format, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
            Retval.m_ISoftwareBitmap.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Convert
   (
      source : Windows.Graphics.Imaging.SoftwareBitmap'Class;
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      alpha : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.ISoftwareBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Convert (source.m_ISoftwareBitmap.all, format, alpha, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
            Retval.m_ISoftwareBitmap.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateCopyFromBuffer
   (
      source : Windows.Storage.Streams.IBuffer;
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.ISoftwareBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCopyFromBuffer (source, format, width, height, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
            Retval.m_ISoftwareBitmap.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateCopyFromBuffer
   (
      source : Windows.Storage.Streams.IBuffer;
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32;
      alpha : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.ISoftwareBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCopyFromBuffer (source, format, width, height, alpha, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
            Retval.m_ISoftwareBitmap.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateCopyFromSurfaceAsync
   (
      surface : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.ISoftwareBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCopyFromSurfaceAsync (surface, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                     Retval.m_ISoftwareBitmap.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateCopyFromSurfaceAsync
   (
      surface : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      alpha : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Imaging.SoftwareBitmap");
      m_Factory        : access WinRt.Windows.Graphics.Imaging.ISoftwareBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SoftwareBitmap.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SoftwareBitmap.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Imaging.ISoftwareBitmap;
      m_IID            : aliased WinRt.IID := (3298888064, 29003, 21761, (141, 162, 219, 218, 204, 231, 15, 115 )); -- Windows.Graphics.Imaging.SoftwareBitmap;
      m_HandlerIID     : aliased WinRt.IID := (3063526995, 13293, 24109, (167, 95, 2, 191, 144, 227, 38, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_SoftwareBitmap.Kind := new AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SoftwareBitmap.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SoftwareBitmap.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SoftwareBitmap.Kind_Delegate, AsyncOperationCompletedHandler_SoftwareBitmap.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_ISoftwareBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCopyFromSurfaceAsync (surface, alpha, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
                     Retval.m_ISoftwareBitmap.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SoftwareBitmap

   function get_BitmapPixelFormat
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
   begin
      Hr := this.m_ISoftwareBitmap.all.get_BitmapPixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BitmapAlphaMode
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Windows.Graphics.Imaging.BitmapAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapAlphaMode;
   begin
      Hr := this.m_ISoftwareBitmap.all.get_BitmapAlphaMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelWidth
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISoftwareBitmap.all.get_PixelWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelHeight
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISoftwareBitmap.all.get_PixelHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsReadOnly
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISoftwareBitmap.all.get_IsReadOnly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DpiX
   (
      this : in out SoftwareBitmap;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISoftwareBitmap.all.put_DpiX (value);
   end;

   function get_DpiX
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISoftwareBitmap.all.get_DpiX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DpiY
   (
      this : in out SoftwareBitmap;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISoftwareBitmap.all.put_DpiY (value);
   end;

   function get_DpiY
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISoftwareBitmap.all.get_DpiY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function LockBuffer
   (
      this : in out SoftwareBitmap;
      mode : Windows.Graphics.Imaging.BitmapBufferAccessMode
   )
   return WinRt.Windows.Graphics.Imaging.BitmapBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.IBitmapBuffer;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapBuffer do
         Hr := this.m_ISoftwareBitmap.all.LockBuffer (mode, m_ComRetVal'Access);
         Retval.m_IBitmapBuffer := new Windows.Graphics.Imaging.IBitmapBuffer;
         Retval.m_IBitmapBuffer.all := m_ComRetVal;
      end return;
   end;

   procedure CopyTo
   (
      this : in out SoftwareBitmap;
      bitmap : Windows.Graphics.Imaging.SoftwareBitmap'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISoftwareBitmap.all.CopyTo (bitmap.m_ISoftwareBitmap.all);
   end;

   procedure CopyFromBuffer
   (
      this : in out SoftwareBitmap;
      buffer : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISoftwareBitmap.all.CopyFromBuffer (buffer);
   end;

   procedure CopyToBuffer
   (
      this : in out SoftwareBitmap;
      buffer : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISoftwareBitmap.all.CopyToBuffer (buffer);
   end;

   function GetReadOnlyView
   (
      this : in out SoftwareBitmap
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := this.m_ISoftwareBitmap.all.GetReadOnlyView (m_ComRetVal'Access);
         Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
         Retval.m_ISoftwareBitmap.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out SoftwareBitmap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Imaging.ISoftwareBitmap_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISoftwareBitmap.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

end;

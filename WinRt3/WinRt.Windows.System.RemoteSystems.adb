--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.AppService;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking;
with WinRt.Windows.Security.Credentials;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System.RemoteSystems is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_RemoteSystem is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.RemoteSystems.IRemoteSystem);
   package AsyncOperationCompletedHandler_RemoteSystem is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.RemoteSystems.IRemoteSystem);

   package IAsyncOperation_RemoteSystemAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.RemoteSystems.RemoteSystemAccessStatus);
   package AsyncOperationCompletedHandler_RemoteSystemAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.RemoteSystems.RemoteSystemAccessStatus);

   package IAsyncOperation_RemoteSystemSessionCreationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.RemoteSystems.IRemoteSystemSessionCreationResult);
   package AsyncOperationCompletedHandler_RemoteSystemSessionCreationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.RemoteSystems.IRemoteSystemSessionCreationResult);

   package IAsyncOperation_RemoteSystemSessionJoinResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.System.RemoteSystems.IRemoteSystemSessionJoinResult);
   package AsyncOperationCompletedHandler_RemoteSystemSessionJoinResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.System.RemoteSystems.IRemoteSystemSessionJoinResult);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownRemoteSystemCapabilities is

      function get_AppService
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.KnownRemoteSystemCapabilities");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IKnownRemoteSystemCapabilitiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRemoteSystemCapabilitiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AppService (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LaunchUri
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.KnownRemoteSystemCapabilities");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IKnownRemoteSystemCapabilitiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRemoteSystemCapabilitiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LaunchUri (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RemoteSession
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.KnownRemoteSystemCapabilities");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IKnownRemoteSystemCapabilitiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRemoteSystemCapabilitiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RemoteSession (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SpatialEntity
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.KnownRemoteSystemCapabilities");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IKnownRemoteSystemCapabilitiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRemoteSystemCapabilitiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SpatialEntity (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownRemoteSystemCapabilities;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystem

   procedure Initialize (this : in out RemoteSystem) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystem, IRemoteSystem_Ptr);
   begin
      if this.m_IRemoteSystem /= null then
         if this.m_IRemoteSystem.all /= null then
            RefCount := this.m_IRemoteSystem.all.Release;
            Free (this.m_IRemoteSystem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RemoteSystem

   function IsAuthorizationKindEnabled
   (
      kind : Windows.System.RemoteSystems.RemoteSystemAuthorizationKind
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystem");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsAuthorizationKindEnabled (kind, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function CreateWatcherForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystem");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemWatcher;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcherForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemWatcher := new Windows.System.RemoteSystems.IRemoteSystemWatcher;
            Retval.m_IRemoteSystemWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWatcherForUser
   (
      user : Windows.System.User'Class;
      filters : GenericObject
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystem");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemWatcher;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcherForUser (user.m_IUser.all, filters, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemWatcher := new Windows.System.RemoteSystems.IRemoteSystemWatcher;
            Retval.m_IRemoteSystemWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindByHostNameAsync
   (
      hostName : Windows.Networking.HostName'Class
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystem is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystem");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RemoteSystem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RemoteSystem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.RemoteSystems.IRemoteSystem;
      m_IID            : aliased WinRt.IID := (221902150, 3786, 21046, (165, 202, 126, 54, 96, 101, 132, 98 )); -- Windows.System.RemoteSystems.RemoteSystem;
      m_HandlerIID     : aliased WinRt.IID := (973820461, 39120, 23860, (172, 230, 44, 115, 70, 97, 63, 29 ));
      m_Handler        : AsyncOperationCompletedHandler_RemoteSystem.Kind := new AsyncOperationCompletedHandler_RemoteSystem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RemoteSystem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RemoteSystem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RemoteSystem.Kind_Delegate, AsyncOperationCompletedHandler_RemoteSystem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystem do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindByHostNameAsync (hostName.m_IHostName.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IRemoteSystem := new Windows.System.RemoteSystems.IRemoteSystem;
                     Retval.m_IRemoteSystem.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWatcher
   return WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystem");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemWatcher;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemWatcher := new Windows.System.RemoteSystems.IRemoteSystemWatcher;
            Retval.m_IRemoteSystemWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWatcher
   (
      filters : GenericObject
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystem");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemWatcher;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (filters, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemWatcher := new Windows.System.RemoteSystems.IRemoteSystemWatcher;
            Retval.m_IRemoteSystemWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function RequestAccessAsync
   return WinRt.Windows.System.RemoteSystems.RemoteSystemAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystem");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RemoteSystemAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RemoteSystemAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.RemoteSystems.RemoteSystemAccessStatus;
      m_IID            : aliased WinRt.IID := (3614287480, 56694, 21600, (135, 69, 145, 91, 68, 16, 201, 5 )); -- Windows.System.RemoteSystems.RemoteSystemAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1413095965, 61241, 22517, (151, 65, 176, 82, 219, 194, 146, 73 ));
      m_Handler        : AsyncOperationCompletedHandler_RemoteSystemAccessStatus.Kind := new AsyncOperationCompletedHandler_RemoteSystemAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RemoteSystemAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RemoteSystemAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RemoteSystemAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_RemoteSystemAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystem

   function get_DisplayName
   (
      this : in out RemoteSystem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystem.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out RemoteSystem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystem.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out RemoteSystem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystem.all.get_Kind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Status
   (
      this : in out RemoteSystem
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemStatus;
   begin
      Hr := this.m_IRemoteSystem.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAvailableByProximity
   (
      this : in out RemoteSystem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRemoteSystem.all.get_IsAvailableByProximity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAvailableBySpatialProximity
   (
      this : in out RemoteSystem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystem_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystem2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystem.all);
      Hr := m_Interface.get_IsAvailableBySpatialProximity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetCapabilitySupportedAsync
   (
      this : in out RemoteSystem;
      capabilityName : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_capabilityName : WinRt.HString := To_HString (capabilityName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystem_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystem2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystem.all);
      Hr := m_Interface.GetCapabilitySupportedAsync (HStr_capabilityName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_capabilityName);
      return m_RetVal;
   end;

   function get_ManufacturerDisplayName
   (
      this : in out RemoteSystem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystem_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystem3, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystem.all);
      Hr := m_Interface.get_ManufacturerDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelDisplayName
   (
      this : in out RemoteSystem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystem_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystem3, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystem.all);
      Hr := m_Interface.get_ModelDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Platform
   (
      this : in out RemoteSystem
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemPlatform is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystem4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemPlatform;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystem_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystem4, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystem4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystem.all);
      Hr := m_Interface.get_Platform (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Apps
   (
      this : in out RemoteSystem
   )
   return IVectorView_IRemoteSystemApp.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IRemoteSystemApp.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystem_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystem5, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystem.all);
      Hr := m_Interface.get_Apps (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IRemoteSystemApp (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_User
   (
      this : in out RemoteSystem
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystem6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystem_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystem6, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystem6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IRemoteSystem.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemAddedEventArgs

   procedure Initialize (this : in out RemoteSystemAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemAddedEventArgs, IRemoteSystemAddedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemAddedEventArgs /= null then
         if this.m_IRemoteSystemAddedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemAddedEventArgs.all.Release;
            Free (this.m_IRemoteSystemAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemAddedEventArgs

   function get_RemoteSystem
   (
      this : in out RemoteSystemAddedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystem;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystem do
         Hr := this.m_IRemoteSystemAddedEventArgs.all.get_RemoteSystem (m_ComRetVal'Access);
         Retval.m_IRemoteSystem := new Windows.System.RemoteSystems.IRemoteSystem;
         Retval.m_IRemoteSystem.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemApp

   procedure Initialize (this : in out RemoteSystemApp) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemApp) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemApp, IRemoteSystemApp_Ptr);
   begin
      if this.m_IRemoteSystemApp /= null then
         if this.m_IRemoteSystemApp.all /= null then
            RefCount := this.m_IRemoteSystemApp.all.Release;
            Free (this.m_IRemoteSystemApp);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemApp

   function get_Id
   (
      this : in out RemoteSystemApp
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemApp.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out RemoteSystemApp
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemApp.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsAvailableByProximity
   (
      this : in out RemoteSystemApp
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRemoteSystemApp.all.get_IsAvailableByProximity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAvailableBySpatialProximity
   (
      this : in out RemoteSystemApp
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRemoteSystemApp.all.get_IsAvailableBySpatialProximity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Attributes
   (
      this : in out RemoteSystemApp
   )
   return IMapView_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_HString.Kind;
   begin
      Hr := this.m_IRemoteSystemApp.all.get_Attributes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_User
   (
      this : in out RemoteSystemApp
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemApp2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemApp_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemApp2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemApp2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IRemoteSystemApp.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_ConnectionToken
   (
      this : in out RemoteSystemApp
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemApp2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemApp_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemApp2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemApp2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystemApp.all);
      Hr := m_Interface.get_ConnectionToken (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemAppRegistration

   procedure Initialize (this : in out RemoteSystemAppRegistration) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemAppRegistration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemAppRegistration, IRemoteSystemAppRegistration_Ptr);
   begin
      if this.m_IRemoteSystemAppRegistration /= null then
         if this.m_IRemoteSystemAppRegistration.all /= null then
            RefCount := this.m_IRemoteSystemAppRegistration.all.Release;
            Free (this.m_IRemoteSystemAppRegistration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RemoteSystemAppRegistration

   function GetDefault
   return WinRt.Windows.System.RemoteSystems.RemoteSystemAppRegistration is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemAppRegistration");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemAppRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemAppRegistration;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemAppRegistration do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemAppRegistrationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemAppRegistration := new Windows.System.RemoteSystems.IRemoteSystemAppRegistration;
            Retval.m_IRemoteSystemAppRegistration.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemAppRegistration is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemAppRegistration");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemAppRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemAppRegistration;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemAppRegistration do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemAppRegistrationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemAppRegistration := new Windows.System.RemoteSystems.IRemoteSystemAppRegistration;
            Retval.m_IRemoteSystemAppRegistration.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemAppRegistration

   function get_User
   (
      this : in out RemoteSystemAppRegistration
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IRemoteSystemAppRegistration.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_Attributes
   (
      this : in out RemoteSystemAppRegistration
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IRemoteSystemAppRegistration.all.get_Attributes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function SaveAsync
   (
      this : in out RemoteSystemAppRegistration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRemoteSystemAppRegistration.all.SaveAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemAuthorizationKindFilter

   procedure Initialize (this : in out RemoteSystemAuthorizationKindFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemAuthorizationKindFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemAuthorizationKindFilter, IRemoteSystemAuthorizationKindFilter_Ptr);
   begin
      if this.m_IRemoteSystemAuthorizationKindFilter /= null then
         if this.m_IRemoteSystemAuthorizationKindFilter.all /= null then
            RefCount := this.m_IRemoteSystemAuthorizationKindFilter.all.Release;
            Free (this.m_IRemoteSystemAuthorizationKindFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemAuthorizationKindFilter

   function Constructor
   (
      remoteSystemAuthorizationKind : Windows.System.RemoteSystems.RemoteSystemAuthorizationKind
   )
   return RemoteSystemAuthorizationKindFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemAuthorizationKindFilter");
      m_Factory    : access IRemoteSystemAuthorizationKindFilterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemAuthorizationKindFilter;
   begin
      return RetVal : RemoteSystemAuthorizationKindFilter do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemAuthorizationKindFilterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (remoteSystemAuthorizationKind, m_ComRetVal'Access);
            Retval.m_IRemoteSystemAuthorizationKindFilter := new Windows.System.RemoteSystems.IRemoteSystemAuthorizationKindFilter;
            Retval.m_IRemoteSystemAuthorizationKindFilter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemAuthorizationKindFilter

   function get_RemoteSystemAuthorizationKind
   (
      this : in out RemoteSystemAuthorizationKindFilter
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemAuthorizationKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemAuthorizationKind;
   begin
      Hr := this.m_IRemoteSystemAuthorizationKindFilter.all.get_RemoteSystemAuthorizationKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemConnectionInfo

   procedure Initialize (this : in out RemoteSystemConnectionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemConnectionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemConnectionInfo, IRemoteSystemConnectionInfo_Ptr);
   begin
      if this.m_IRemoteSystemConnectionInfo /= null then
         if this.m_IRemoteSystemConnectionInfo.all /= null then
            RefCount := this.m_IRemoteSystemConnectionInfo.all.Release;
            Free (this.m_IRemoteSystemConnectionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RemoteSystemConnectionInfo

   function TryCreateFromAppServiceConnection
   (
      connection : Windows.ApplicationModel.AppService.AppServiceConnection'Class
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemConnectionInfo");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemConnectionInfo;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemConnectionInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryCreateFromAppServiceConnection (connection.m_IAppServiceConnection.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemConnectionInfo := new Windows.System.RemoteSystems.IRemoteSystemConnectionInfo;
            Retval.m_IRemoteSystemConnectionInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemConnectionInfo

   function get_IsProximal
   (
      this : in out RemoteSystemConnectionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRemoteSystemConnectionInfo.all.get_IsProximal (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemConnectionRequest

   procedure Initialize (this : in out RemoteSystemConnectionRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemConnectionRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemConnectionRequest, IRemoteSystemConnectionRequest_Ptr);
   begin
      if this.m_IRemoteSystemConnectionRequest /= null then
         if this.m_IRemoteSystemConnectionRequest.all /= null then
            RefCount := this.m_IRemoteSystemConnectionRequest.all.Release;
            Free (this.m_IRemoteSystemConnectionRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemConnectionRequest

   function Constructor
   (
      remoteSystem_p : Windows.System.RemoteSystems.RemoteSystem'Class
   )
   return RemoteSystemConnectionRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemConnectionRequest");
      m_Factory    : access IRemoteSystemConnectionRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
   begin
      return RetVal : RemoteSystemConnectionRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemConnectionRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (remoteSystem_p.m_IRemoteSystem.all, m_ComRetVal'Access);
            Retval.m_IRemoteSystemConnectionRequest := new Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
            Retval.m_IRemoteSystemConnectionRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RemoteSystemConnectionRequest

   function CreateFromConnectionToken
   (
      connectionToken : WinRt.WString
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionRequest is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemConnectionRequest");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequestStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
      HStr_connectionToken : WinRt.HString := To_HString (connectionToken);
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemConnectionRequestStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromConnectionToken (HStr_connectionToken, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemConnectionRequest := new Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
            Retval.m_IRemoteSystemConnectionRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_connectionToken);
      end return;
   end;

   function CreateFromConnectionTokenForUser
   (
      user : Windows.System.User'Class;
      connectionToken : WinRt.WString
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionRequest is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemConnectionRequest");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequestStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
      HStr_connectionToken : WinRt.HString := To_HString (connectionToken);
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemConnectionRequestStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromConnectionTokenForUser (user.m_IUser.all, HStr_connectionToken, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemConnectionRequest := new Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
            Retval.m_IRemoteSystemConnectionRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_connectionToken);
      end return;
   end;

   function CreateForApp
   (
      remoteSystemApp_p : Windows.System.RemoteSystems.RemoteSystemApp'Class
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionRequest is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemConnectionRequest");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequestStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemConnectionRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemConnectionRequestStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForApp (remoteSystemApp_p.m_IRemoteSystemApp.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemConnectionRequest := new Windows.System.RemoteSystems.IRemoteSystemConnectionRequest;
            Retval.m_IRemoteSystemConnectionRequest.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemConnectionRequest

   function get_RemoteSystem
   (
      this : in out RemoteSystemConnectionRequest
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystem;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystem do
         Hr := this.m_IRemoteSystemConnectionRequest.all.get_RemoteSystem (m_ComRetVal'Access);
         Retval.m_IRemoteSystem := new Windows.System.RemoteSystems.IRemoteSystem;
         Retval.m_IRemoteSystem.all := m_ComRetVal;
      end return;
   end;

   function get_RemoteSystemApp
   (
      this : in out RemoteSystemConnectionRequest
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemApp'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemApp;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequest_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequest2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemConnectionRequest2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemApp do
         m_Interface := QInterface (this.m_IRemoteSystemConnectionRequest.all);
         Hr := m_Interface.get_RemoteSystemApp (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IRemoteSystemApp := new Windows.System.RemoteSystems.IRemoteSystemApp;
         Retval.m_IRemoteSystemApp.all := m_ComRetVal;
      end return;
   end;

   function get_ConnectionToken
   (
      this : in out RemoteSystemConnectionRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequest3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequest_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemConnectionRequest3, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemConnectionRequest3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystemConnectionRequest.all);
      Hr := m_Interface.get_ConnectionToken (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemDiscoveryTypeFilter

   procedure Initialize (this : in out RemoteSystemDiscoveryTypeFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemDiscoveryTypeFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemDiscoveryTypeFilter, IRemoteSystemDiscoveryTypeFilter_Ptr);
   begin
      if this.m_IRemoteSystemDiscoveryTypeFilter /= null then
         if this.m_IRemoteSystemDiscoveryTypeFilter.all /= null then
            RefCount := this.m_IRemoteSystemDiscoveryTypeFilter.all.Release;
            Free (this.m_IRemoteSystemDiscoveryTypeFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemDiscoveryTypeFilter

   function Constructor
   (
      discoveryType : Windows.System.RemoteSystems.RemoteSystemDiscoveryType
   )
   return RemoteSystemDiscoveryTypeFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemDiscoveryTypeFilter");
      m_Factory    : access IRemoteSystemDiscoveryTypeFilterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemDiscoveryTypeFilter;
   begin
      return RetVal : RemoteSystemDiscoveryTypeFilter do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemDiscoveryTypeFilterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (discoveryType, m_ComRetVal'Access);
            Retval.m_IRemoteSystemDiscoveryTypeFilter := new Windows.System.RemoteSystems.IRemoteSystemDiscoveryTypeFilter;
            Retval.m_IRemoteSystemDiscoveryTypeFilter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemDiscoveryTypeFilter

   function get_RemoteSystemDiscoveryType
   (
      this : in out RemoteSystemDiscoveryTypeFilter
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemDiscoveryType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemDiscoveryType;
   begin
      Hr := this.m_IRemoteSystemDiscoveryTypeFilter.all.get_RemoteSystemDiscoveryType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemEnumerationCompletedEventArgs

   procedure Initialize (this : in out RemoteSystemEnumerationCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemEnumerationCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemEnumerationCompletedEventArgs, IRemoteSystemEnumerationCompletedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemEnumerationCompletedEventArgs /= null then
         if this.m_IRemoteSystemEnumerationCompletedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemEnumerationCompletedEventArgs.all.Release;
            Free (this.m_IRemoteSystemEnumerationCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemEnumerationCompletedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemKindFilter

   procedure Initialize (this : in out RemoteSystemKindFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemKindFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemKindFilter, IRemoteSystemKindFilter_Ptr);
   begin
      if this.m_IRemoteSystemKindFilter /= null then
         if this.m_IRemoteSystemKindFilter.all /= null then
            RefCount := this.m_IRemoteSystemKindFilter.all.Release;
            Free (this.m_IRemoteSystemKindFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemKindFilter

   function Constructor
   (
      remoteSystemKinds_p : GenericObject
   )
   return RemoteSystemKindFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKindFilter");
      m_Factory    : access IRemoteSystemKindFilterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemKindFilter;
   begin
      return RetVal : RemoteSystemKindFilter do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindFilterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (remoteSystemKinds_p, m_ComRetVal'Access);
            Retval.m_IRemoteSystemKindFilter := new Windows.System.RemoteSystems.IRemoteSystemKindFilter;
            Retval.m_IRemoteSystemKindFilter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemKindFilter

   function get_RemoteSystemKinds
   (
      this : in out RemoteSystemKindFilter
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IRemoteSystemKindFilter.all.get_RemoteSystemKinds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body RemoteSystemKinds is

      function get_Phone
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Phone (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Hub
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Hub (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Holographic
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Holographic (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Desktop
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Desktop (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Xbox
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Xbox (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Iot
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Iot (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Tablet
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Tablet (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Laptop
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemKinds");
         m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemKindStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemKindStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Laptop (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end RemoteSystemKinds;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemRemovedEventArgs

   procedure Initialize (this : in out RemoteSystemRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemRemovedEventArgs, IRemoteSystemRemovedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemRemovedEventArgs /= null then
         if this.m_IRemoteSystemRemovedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemRemovedEventArgs.all.Release;
            Free (this.m_IRemoteSystemRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemRemovedEventArgs

   function get_RemoteSystemId
   (
      this : in out RemoteSystemRemovedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemRemovedEventArgs.all.get_RemoteSystemId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSession

   procedure Initialize (this : in out RemoteSystemSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSession, IRemoteSystemSession_Ptr);
   begin
      if this.m_IRemoteSystemSession /= null then
         if this.m_IRemoteSystemSession.all /= null then
            RefCount := this.m_IRemoteSystemSession.all.Release;
            Free (this.m_IRemoteSystemSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RemoteSystemSession

   function CreateWatcher
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemSession");
      m_Factory        : access WinRt.Windows.System.RemoteSystems.IRemoteSystemSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionWatcher;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRemoteSystemSessionWatcher := new Windows.System.RemoteSystems.IRemoteSystemSessionWatcher;
            Retval.m_IRemoteSystemSessionWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSession

   function get_Id
   (
      this : in out RemoteSystemSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemSession.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out RemoteSystemSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemSession.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ControllerDisplayName
   (
      this : in out RemoteSystemSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemSession.all.get_ControllerDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_Disconnected
   (
      this : in out RemoteSystemSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSession.all.add_Disconnected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Disconnected
   (
      this : in out RemoteSystemSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSession.all.remove_Disconnected (token);
   end;

   function CreateParticipantWatcher
   (
      this : in out RemoteSystemSession
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionParticipantWatcher;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcher do
         Hr := this.m_IRemoteSystemSession.all.CreateParticipantWatcher (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionParticipantWatcher := new Windows.System.RemoteSystems.IRemoteSystemSessionParticipantWatcher;
         Retval.m_IRemoteSystemSessionParticipantWatcher.all := m_ComRetVal;
      end return;
   end;

   function SendInvitationAsync
   (
      this : in out RemoteSystemSession;
      invitee : Windows.System.RemoteSystems.RemoteSystem'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRemoteSystemSession.all.SendInvitationAsync (invitee.m_IRemoteSystem.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out RemoteSystemSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystemSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionAddedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionAddedEventArgs, IRemoteSystemSessionAddedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionAddedEventArgs /= null then
         if this.m_IRemoteSystemSessionAddedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionAddedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionAddedEventArgs

   function get_SessionInfo
   (
      this : in out RemoteSystemSessionAddedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo do
         Hr := this.m_IRemoteSystemSessionAddedEventArgs.all.get_SessionInfo (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionInfo := new Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
         Retval.m_IRemoteSystemSessionInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionController

   procedure Initialize (this : in out RemoteSystemSessionController) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionController, IRemoteSystemSessionController_Ptr);
   begin
      if this.m_IRemoteSystemSessionController /= null then
         if this.m_IRemoteSystemSessionController.all /= null then
            RefCount := this.m_IRemoteSystemSessionController.all.Release;
            Free (this.m_IRemoteSystemSessionController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemSessionController

   function Constructor
   (
      displayName : WinRt.WString
   )
   return RemoteSystemSessionController is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemSessionController");
      m_Factory    : access IRemoteSystemSessionControllerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemSessionController;
      HStr_displayName : WinRt.HString := To_HString (displayName);
   begin
      return RetVal : RemoteSystemSessionController do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemSessionControllerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateController (HStr_displayName, m_ComRetVal'Access);
            Retval.m_IRemoteSystemSessionController := new Windows.System.RemoteSystems.IRemoteSystemSessionController;
            Retval.m_IRemoteSystemSessionController.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   function Constructor
   (
      displayName : WinRt.WString;
      options : Windows.System.RemoteSystems.RemoteSystemSessionOptions'Class
   )
   return RemoteSystemSessionController is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemSessionController");
      m_Factory    : access IRemoteSystemSessionControllerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemSessionController;
      HStr_displayName : WinRt.HString := To_HString (displayName);
   begin
      return RetVal : RemoteSystemSessionController do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemSessionControllerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateController (HStr_displayName, options.m_IRemoteSystemSessionOptions.all, m_ComRetVal'Access);
            Retval.m_IRemoteSystemSessionController := new Windows.System.RemoteSystems.IRemoteSystemSessionController;
            Retval.m_IRemoteSystemSessionController.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionController

   function add_JoinRequested
   (
      this : in out RemoteSystemSessionController;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionController.all.add_JoinRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_JoinRequested
   (
      this : in out RemoteSystemSessionController;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionController.all.remove_JoinRequested (token);
   end;

   function RemoveParticipantAsync
   (
      this : in out RemoteSystemSessionController;
      pParticipant : Windows.System.RemoteSystems.RemoteSystemSessionParticipant'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRemoteSystemSessionController.all.RemoveParticipantAsync (pParticipant.m_IRemoteSystemSessionParticipant.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function CreateSessionAsync
   (
      this : in out RemoteSystemSessionController
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionCreationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RemoteSystemSessionCreationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RemoteSystemSessionCreationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.RemoteSystems.IRemoteSystemSessionCreationResult;
      m_IID            : aliased WinRt.IID := (2419477493, 53380, 24400, (151, 41, 130, 2, 83, 38, 171, 239 )); -- Windows.System.RemoteSystems.RemoteSystemSessionCreationResult;
      m_HandlerIID     : aliased WinRt.IID := (1853015369, 29610, 20840, (133, 96, 199, 35, 100, 147, 181, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_RemoteSystemSessionCreationResult.Kind := new AsyncOperationCompletedHandler_RemoteSystemSessionCreationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RemoteSystemSessionCreationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RemoteSystemSessionCreationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RemoteSystemSessionCreationResult.Kind_Delegate, AsyncOperationCompletedHandler_RemoteSystemSessionCreationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionCreationResult do
         Hr := this.m_IRemoteSystemSessionController.all.CreateSessionAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRemoteSystemSessionCreationResult := new Windows.System.RemoteSystems.IRemoteSystemSessionCreationResult;
                  Retval.m_IRemoteSystemSessionCreationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionCreationResult

   procedure Initialize (this : in out RemoteSystemSessionCreationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionCreationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionCreationResult, IRemoteSystemSessionCreationResult_Ptr);
   begin
      if this.m_IRemoteSystemSessionCreationResult /= null then
         if this.m_IRemoteSystemSessionCreationResult.all /= null then
            RefCount := this.m_IRemoteSystemSessionCreationResult.all.Release;
            Free (this.m_IRemoteSystemSessionCreationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionCreationResult

   function get_Status
   (
      this : in out RemoteSystemSessionCreationResult
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionCreationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemSessionCreationStatus;
   begin
      Hr := this.m_IRemoteSystemSessionCreationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Session
   (
      this : in out RemoteSystemSessionCreationResult
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSession;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSession do
         Hr := this.m_IRemoteSystemSessionCreationResult.all.get_Session (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSession := new Windows.System.RemoteSystems.IRemoteSystemSession;
         Retval.m_IRemoteSystemSession.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionDisconnectedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionDisconnectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionDisconnectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionDisconnectedEventArgs, IRemoteSystemSessionDisconnectedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionDisconnectedEventArgs /= null then
         if this.m_IRemoteSystemSessionDisconnectedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionDisconnectedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionDisconnectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionDisconnectedEventArgs

   function get_Reason
   (
      this : in out RemoteSystemSessionDisconnectedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionDisconnectedReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemSessionDisconnectedReason;
   begin
      Hr := this.m_IRemoteSystemSessionDisconnectedEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionInfo

   procedure Initialize (this : in out RemoteSystemSessionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionInfo, IRemoteSystemSessionInfo_Ptr);
   begin
      if this.m_IRemoteSystemSessionInfo /= null then
         if this.m_IRemoteSystemSessionInfo.all /= null then
            RefCount := this.m_IRemoteSystemSessionInfo.all.Release;
            Free (this.m_IRemoteSystemSessionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionInfo

   function get_DisplayName
   (
      this : in out RemoteSystemSessionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemSessionInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ControllerDisplayName
   (
      this : in out RemoteSystemSessionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteSystemSessionInfo.all.get_ControllerDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function JoinAsync
   (
      this : in out RemoteSystemSessionInfo
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionJoinResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_RemoteSystemSessionJoinResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_RemoteSystemSessionJoinResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.System.RemoteSystems.IRemoteSystemSessionJoinResult;
      m_IID            : aliased WinRt.IID := (3314400542, 58112, 21928, (173, 165, 226, 90, 170, 168, 102, 103 )); -- Windows.System.RemoteSystems.RemoteSystemSessionJoinResult;
      m_HandlerIID     : aliased WinRt.IID := (932896565, 19636, 21039, (145, 190, 145, 59, 86, 144, 86, 143 ));
      m_Handler        : AsyncOperationCompletedHandler_RemoteSystemSessionJoinResult.Kind := new AsyncOperationCompletedHandler_RemoteSystemSessionJoinResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RemoteSystemSessionJoinResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RemoteSystemSessionJoinResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RemoteSystemSessionJoinResult.Kind_Delegate, AsyncOperationCompletedHandler_RemoteSystemSessionJoinResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionJoinResult do
         Hr := this.m_IRemoteSystemSessionInfo.all.JoinAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRemoteSystemSessionJoinResult := new Windows.System.RemoteSystems.IRemoteSystemSessionJoinResult;
                  Retval.m_IRemoteSystemSessionJoinResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionInvitation

   procedure Initialize (this : in out RemoteSystemSessionInvitation) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionInvitation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionInvitation, IRemoteSystemSessionInvitation_Ptr);
   begin
      if this.m_IRemoteSystemSessionInvitation /= null then
         if this.m_IRemoteSystemSessionInvitation.all /= null then
            RefCount := this.m_IRemoteSystemSessionInvitation.all.Release;
            Free (this.m_IRemoteSystemSessionInvitation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionInvitation

   function get_Sender
   (
      this : in out RemoteSystemSessionInvitation
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystem;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystem do
         Hr := this.m_IRemoteSystemSessionInvitation.all.get_Sender (m_ComRetVal'Access);
         Retval.m_IRemoteSystem := new Windows.System.RemoteSystems.IRemoteSystem;
         Retval.m_IRemoteSystem.all := m_ComRetVal;
      end return;
   end;

   function get_SessionInfo
   (
      this : in out RemoteSystemSessionInvitation
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo do
         Hr := this.m_IRemoteSystemSessionInvitation.all.get_SessionInfo (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionInfo := new Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
         Retval.m_IRemoteSystemSessionInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionInvitationListener

   procedure Initialize (this : in out RemoteSystemSessionInvitationListener) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionInvitationListener) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionInvitationListener, IRemoteSystemSessionInvitationListener_Ptr);
   begin
      if this.m_IRemoteSystemSessionInvitationListener /= null then
         if this.m_IRemoteSystemSessionInvitationListener.all /= null then
            RefCount := this.m_IRemoteSystemSessionInvitationListener.all.Release;
            Free (this.m_IRemoteSystemSessionInvitationListener);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemSessionInvitationListener

   function Constructor return RemoteSystemSessionInvitationListener is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener");
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemSessionInvitationListener;
   begin
      return RetVal : RemoteSystemSessionInvitationListener do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRemoteSystemSessionInvitationListener := new Windows.System.RemoteSystems.IRemoteSystemSessionInvitationListener;
            Retval.m_IRemoteSystemSessionInvitationListener.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionInvitationListener

   function add_InvitationReceived
   (
      this : in out RemoteSystemSessionInvitationListener;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionInvitationListener.all.add_InvitationReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_InvitationReceived
   (
      this : in out RemoteSystemSessionInvitationListener;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionInvitationListener.all.remove_InvitationReceived (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionInvitationReceivedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionInvitationReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionInvitationReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionInvitationReceivedEventArgs, IRemoteSystemSessionInvitationReceivedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionInvitationReceivedEventArgs /= null then
         if this.m_IRemoteSystemSessionInvitationReceivedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionInvitationReceivedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionInvitationReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionInvitationReceivedEventArgs

   function get_Invitation
   (
      this : in out RemoteSystemSessionInvitationReceivedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInvitation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionInvitation;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInvitation do
         Hr := this.m_IRemoteSystemSessionInvitationReceivedEventArgs.all.get_Invitation (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionInvitation := new Windows.System.RemoteSystems.IRemoteSystemSessionInvitation;
         Retval.m_IRemoteSystemSessionInvitation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionJoinRequest

   procedure Initialize (this : in out RemoteSystemSessionJoinRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionJoinRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionJoinRequest, IRemoteSystemSessionJoinRequest_Ptr);
   begin
      if this.m_IRemoteSystemSessionJoinRequest /= null then
         if this.m_IRemoteSystemSessionJoinRequest.all /= null then
            RefCount := this.m_IRemoteSystemSessionJoinRequest.all.Release;
            Free (this.m_IRemoteSystemSessionJoinRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionJoinRequest

   function get_Participant
   (
      this : in out RemoteSystemSessionJoinRequest
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant do
         Hr := this.m_IRemoteSystemSessionJoinRequest.all.get_Participant (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionParticipant := new Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
         Retval.m_IRemoteSystemSessionParticipant.all := m_ComRetVal;
      end return;
   end;

   procedure Accept_x
   (
      this : in out RemoteSystemSessionJoinRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionJoinRequest.all.Accept_x;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionJoinRequestedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionJoinRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionJoinRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionJoinRequestedEventArgs, IRemoteSystemSessionJoinRequestedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionJoinRequestedEventArgs /= null then
         if this.m_IRemoteSystemSessionJoinRequestedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionJoinRequestedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionJoinRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionJoinRequestedEventArgs

   function get_JoinRequest
   (
      this : in out RemoteSystemSessionJoinRequestedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionJoinRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionJoinRequest;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionJoinRequest do
         Hr := this.m_IRemoteSystemSessionJoinRequestedEventArgs.all.get_JoinRequest (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionJoinRequest := new Windows.System.RemoteSystems.IRemoteSystemSessionJoinRequest;
         Retval.m_IRemoteSystemSessionJoinRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out RemoteSystemSessionJoinRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IRemoteSystemSessionJoinRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionJoinResult

   procedure Initialize (this : in out RemoteSystemSessionJoinResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionJoinResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionJoinResult, IRemoteSystemSessionJoinResult_Ptr);
   begin
      if this.m_IRemoteSystemSessionJoinResult /= null then
         if this.m_IRemoteSystemSessionJoinResult.all /= null then
            RefCount := this.m_IRemoteSystemSessionJoinResult.all.Release;
            Free (this.m_IRemoteSystemSessionJoinResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionJoinResult

   function get_Status
   (
      this : in out RemoteSystemSessionJoinResult
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionJoinStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemSessionJoinStatus;
   begin
      Hr := this.m_IRemoteSystemSessionJoinResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Session
   (
      this : in out RemoteSystemSessionJoinResult
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSession;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSession do
         Hr := this.m_IRemoteSystemSessionJoinResult.all.get_Session (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSession := new Windows.System.RemoteSystems.IRemoteSystemSession;
         Retval.m_IRemoteSystemSession.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionMessageChannel

   procedure Initialize (this : in out RemoteSystemSessionMessageChannel) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionMessageChannel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionMessageChannel, IRemoteSystemSessionMessageChannel_Ptr);
   begin
      if this.m_IRemoteSystemSessionMessageChannel /= null then
         if this.m_IRemoteSystemSessionMessageChannel.all /= null then
            RefCount := this.m_IRemoteSystemSessionMessageChannel.all.Release;
            Free (this.m_IRemoteSystemSessionMessageChannel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemSessionMessageChannel

   function Constructor
   (
      session : Windows.System.RemoteSystems.RemoteSystemSession'Class;
      channelName : WinRt.WString
   )
   return RemoteSystemSessionMessageChannel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel");
      m_Factory    : access IRemoteSystemSessionMessageChannelFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemSessionMessageChannel;
      HStr_channelName : WinRt.HString := To_HString (channelName);
   begin
      return RetVal : RemoteSystemSessionMessageChannel do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemSessionMessageChannelFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (session.m_IRemoteSystemSession.all, HStr_channelName, m_ComRetVal'Access);
            Retval.m_IRemoteSystemSessionMessageChannel := new Windows.System.RemoteSystems.IRemoteSystemSessionMessageChannel;
            Retval.m_IRemoteSystemSessionMessageChannel.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_channelName);
      end return;
   end;

   function Constructor
   (
      session : Windows.System.RemoteSystems.RemoteSystemSession'Class;
      channelName : WinRt.WString;
      reliability : Windows.System.RemoteSystems.RemoteSystemSessionMessageChannelReliability
   )
   return RemoteSystemSessionMessageChannel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemSessionMessageChannel");
      m_Factory    : access IRemoteSystemSessionMessageChannelFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemSessionMessageChannel;
      HStr_channelName : WinRt.HString := To_HString (channelName);
   begin
      return RetVal : RemoteSystemSessionMessageChannel do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemSessionMessageChannelFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (session.m_IRemoteSystemSession.all, HStr_channelName, reliability, m_ComRetVal'Access);
            Retval.m_IRemoteSystemSessionMessageChannel := new Windows.System.RemoteSystems.IRemoteSystemSessionMessageChannel;
            Retval.m_IRemoteSystemSessionMessageChannel.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_channelName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionMessageChannel

   function get_Session
   (
      this : in out RemoteSystemSessionMessageChannel
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSession;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSession do
         Hr := this.m_IRemoteSystemSessionMessageChannel.all.get_Session (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSession := new Windows.System.RemoteSystems.IRemoteSystemSession;
         Retval.m_IRemoteSystemSession.all := m_ComRetVal;
      end return;
   end;

   function BroadcastValueSetAsync
   (
      this : in out RemoteSystemSessionMessageChannel;
      messageData : Windows.Foundation.Collections.ValueSet'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRemoteSystemSessionMessageChannel.all.BroadcastValueSetAsync (messageData.m_IPropertySet.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendValueSetAsync
   (
      this : in out RemoteSystemSessionMessageChannel;
      messageData : Windows.Foundation.Collections.ValueSet'Class;
      participant : Windows.System.RemoteSystems.RemoteSystemSessionParticipant'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRemoteSystemSessionMessageChannel.all.SendValueSetAsync (messageData.m_IPropertySet.all, participant.m_IRemoteSystemSessionParticipant.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendValueSetToParticipantsAsync
   (
      this : in out RemoteSystemSessionMessageChannel;
      messageData : Windows.Foundation.Collections.ValueSet'Class;
      participants : GenericObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRemoteSystemSessionMessageChannel.all.SendValueSetToParticipantsAsync (messageData.m_IPropertySet.all, participants, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_ValueSetReceived
   (
      this : in out RemoteSystemSessionMessageChannel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionMessageChannel.all.add_ValueSetReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ValueSetReceived
   (
      this : in out RemoteSystemSessionMessageChannel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionMessageChannel.all.remove_ValueSetReceived (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionOptions

   procedure Initialize (this : in out RemoteSystemSessionOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionOptions, IRemoteSystemSessionOptions_Ptr);
   begin
      if this.m_IRemoteSystemSessionOptions /= null then
         if this.m_IRemoteSystemSessionOptions.all /= null then
            RefCount := this.m_IRemoteSystemSessionOptions.all.Release;
            Free (this.m_IRemoteSystemSessionOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemSessionOptions

   function Constructor return RemoteSystemSessionOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemSessionOptions");
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemSessionOptions;
   begin
      return RetVal : RemoteSystemSessionOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRemoteSystemSessionOptions := new Windows.System.RemoteSystems.IRemoteSystemSessionOptions;
            Retval.m_IRemoteSystemSessionOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionOptions

   function get_IsInviteOnly
   (
      this : in out RemoteSystemSessionOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRemoteSystemSessionOptions.all.get_IsInviteOnly (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsInviteOnly
   (
      this : in out RemoteSystemSessionOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionOptions.all.put_IsInviteOnly (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionParticipant

   procedure Initialize (this : in out RemoteSystemSessionParticipant) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionParticipant) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionParticipant, IRemoteSystemSessionParticipant_Ptr);
   begin
      if this.m_IRemoteSystemSessionParticipant /= null then
         if this.m_IRemoteSystemSessionParticipant.all /= null then
            RefCount := this.m_IRemoteSystemSessionParticipant.all.Release;
            Free (this.m_IRemoteSystemSessionParticipant);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionParticipant

   function get_RemoteSystem
   (
      this : in out RemoteSystemSessionParticipant
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystem;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystem do
         Hr := this.m_IRemoteSystemSessionParticipant.all.get_RemoteSystem (m_ComRetVal'Access);
         Retval.m_IRemoteSystem := new Windows.System.RemoteSystems.IRemoteSystem;
         Retval.m_IRemoteSystem.all := m_ComRetVal;
      end return;
   end;

   function GetHostNames
   (
      this : in out RemoteSystemSessionParticipant
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IRemoteSystemSessionParticipant.all.GetHostNames (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionParticipantAddedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionParticipantAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionParticipantAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionParticipantAddedEventArgs, IRemoteSystemSessionParticipantAddedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionParticipantAddedEventArgs /= null then
         if this.m_IRemoteSystemSessionParticipantAddedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionParticipantAddedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionParticipantAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionParticipantAddedEventArgs

   function get_Participant
   (
      this : in out RemoteSystemSessionParticipantAddedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant do
         Hr := this.m_IRemoteSystemSessionParticipantAddedEventArgs.all.get_Participant (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionParticipant := new Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
         Retval.m_IRemoteSystemSessionParticipant.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionParticipantRemovedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionParticipantRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionParticipantRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionParticipantRemovedEventArgs, IRemoteSystemSessionParticipantRemovedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionParticipantRemovedEventArgs /= null then
         if this.m_IRemoteSystemSessionParticipantRemovedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionParticipantRemovedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionParticipantRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionParticipantRemovedEventArgs

   function get_Participant
   (
      this : in out RemoteSystemSessionParticipantRemovedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant do
         Hr := this.m_IRemoteSystemSessionParticipantRemovedEventArgs.all.get_Participant (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionParticipant := new Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
         Retval.m_IRemoteSystemSessionParticipant.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionParticipantWatcher

   procedure Initialize (this : in out RemoteSystemSessionParticipantWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionParticipantWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionParticipantWatcher, IRemoteSystemSessionParticipantWatcher_Ptr);
   begin
      if this.m_IRemoteSystemSessionParticipantWatcher /= null then
         if this.m_IRemoteSystemSessionParticipantWatcher.all /= null then
            RefCount := this.m_IRemoteSystemSessionParticipantWatcher.all.Release;
            Free (this.m_IRemoteSystemSessionParticipantWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionParticipantWatcher

   procedure Start
   (
      this : in out RemoteSystemSessionParticipantWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out RemoteSystemSessionParticipantWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.Stop;
   end;

   function get_Status
   (
      this : in out RemoteSystemSessionParticipantWatcher
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemSessionParticipantWatcherStatus;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Added
   (
      this : in out RemoteSystemSessionParticipantWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out RemoteSystemSessionParticipantWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.remove_Added (token);
   end;

   function add_Removed
   (
      this : in out RemoteSystemSessionParticipantWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out RemoteSystemSessionParticipantWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.remove_Removed (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out RemoteSystemSessionParticipantWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out RemoteSystemSessionParticipantWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionParticipantWatcher.all.remove_EnumerationCompleted (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionRemovedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionRemovedEventArgs, IRemoteSystemSessionRemovedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionRemovedEventArgs /= null then
         if this.m_IRemoteSystemSessionRemovedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionRemovedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionRemovedEventArgs

   function get_SessionInfo
   (
      this : in out RemoteSystemSessionRemovedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo do
         Hr := this.m_IRemoteSystemSessionRemovedEventArgs.all.get_SessionInfo (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionInfo := new Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
         Retval.m_IRemoteSystemSessionInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionUpdatedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionUpdatedEventArgs, IRemoteSystemSessionUpdatedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionUpdatedEventArgs /= null then
         if this.m_IRemoteSystemSessionUpdatedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionUpdatedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionUpdatedEventArgs

   function get_SessionInfo
   (
      this : in out RemoteSystemSessionUpdatedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionInfo do
         Hr := this.m_IRemoteSystemSessionUpdatedEventArgs.all.get_SessionInfo (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionInfo := new Windows.System.RemoteSystems.IRemoteSystemSessionInfo;
         Retval.m_IRemoteSystemSessionInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionValueSetReceivedEventArgs

   procedure Initialize (this : in out RemoteSystemSessionValueSetReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionValueSetReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionValueSetReceivedEventArgs, IRemoteSystemSessionValueSetReceivedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemSessionValueSetReceivedEventArgs /= null then
         if this.m_IRemoteSystemSessionValueSetReceivedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemSessionValueSetReceivedEventArgs.all.Release;
            Free (this.m_IRemoteSystemSessionValueSetReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionValueSetReceivedEventArgs

   function get_Sender
   (
      this : in out RemoteSystemSessionValueSetReceivedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystemSessionParticipant do
         Hr := this.m_IRemoteSystemSessionValueSetReceivedEventArgs.all.get_Sender (m_ComRetVal'Access);
         Retval.m_IRemoteSystemSessionParticipant := new Windows.System.RemoteSystems.IRemoteSystemSessionParticipant;
         Retval.m_IRemoteSystemSessionParticipant.all := m_ComRetVal;
      end return;
   end;

   function get_Message
   (
      this : in out RemoteSystemSessionValueSetReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IRemoteSystemSessionValueSetReceivedEventArgs.all.get_Message (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemSessionWatcher

   procedure Initialize (this : in out RemoteSystemSessionWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemSessionWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemSessionWatcher, IRemoteSystemSessionWatcher_Ptr);
   begin
      if this.m_IRemoteSystemSessionWatcher /= null then
         if this.m_IRemoteSystemSessionWatcher.all /= null then
            RefCount := this.m_IRemoteSystemSessionWatcher.all.Release;
            Free (this.m_IRemoteSystemSessionWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemSessionWatcher

   procedure Start
   (
      this : in out RemoteSystemSessionWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out RemoteSystemSessionWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.Stop;
   end;

   function get_Status
   (
      this : in out RemoteSystemSessionWatcher
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemSessionWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemSessionWatcherStatus;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Added
   (
      this : in out RemoteSystemSessionWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out RemoteSystemSessionWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.remove_Added (token);
   end;

   function add_Updated
   (
      this : in out RemoteSystemSessionWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out RemoteSystemSessionWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.remove_Updated (token);
   end;

   function add_Removed
   (
      this : in out RemoteSystemSessionWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out RemoteSystemSessionWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemSessionWatcher.all.remove_Removed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemStatusTypeFilter

   procedure Initialize (this : in out RemoteSystemStatusTypeFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemStatusTypeFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemStatusTypeFilter, IRemoteSystemStatusTypeFilter_Ptr);
   begin
      if this.m_IRemoteSystemStatusTypeFilter /= null then
         if this.m_IRemoteSystemStatusTypeFilter.all /= null then
            RefCount := this.m_IRemoteSystemStatusTypeFilter.all.Release;
            Free (this.m_IRemoteSystemStatusTypeFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemStatusTypeFilter

   function Constructor
   (
      remoteSystemStatusType : Windows.System.RemoteSystems.RemoteSystemStatusType
   )
   return RemoteSystemStatusTypeFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemStatusTypeFilter");
      m_Factory    : access IRemoteSystemStatusTypeFilterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemStatusTypeFilter;
   begin
      return RetVal : RemoteSystemStatusTypeFilter do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemStatusTypeFilterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (remoteSystemStatusType, m_ComRetVal'Access);
            Retval.m_IRemoteSystemStatusTypeFilter := new Windows.System.RemoteSystems.IRemoteSystemStatusTypeFilter;
            Retval.m_IRemoteSystemStatusTypeFilter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemStatusTypeFilter

   function get_RemoteSystemStatusType
   (
      this : in out RemoteSystemStatusTypeFilter
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemStatusType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemStatusType;
   begin
      Hr := this.m_IRemoteSystemStatusTypeFilter.all.get_RemoteSystemStatusType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemUpdatedEventArgs

   procedure Initialize (this : in out RemoteSystemUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemUpdatedEventArgs, IRemoteSystemUpdatedEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemUpdatedEventArgs /= null then
         if this.m_IRemoteSystemUpdatedEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemUpdatedEventArgs.all.Release;
            Free (this.m_IRemoteSystemUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemUpdatedEventArgs

   function get_RemoteSystem
   (
      this : in out RemoteSystemUpdatedEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.IRemoteSystem;
   begin
      return RetVal : WinRt.Windows.System.RemoteSystems.RemoteSystem do
         Hr := this.m_IRemoteSystemUpdatedEventArgs.all.get_RemoteSystem (m_ComRetVal'Access);
         Retval.m_IRemoteSystem := new Windows.System.RemoteSystems.IRemoteSystem;
         Retval.m_IRemoteSystem.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemWatcher

   procedure Initialize (this : in out RemoteSystemWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemWatcher, IRemoteSystemWatcher_Ptr);
   begin
      if this.m_IRemoteSystemWatcher /= null then
         if this.m_IRemoteSystemWatcher.all /= null then
            RefCount := this.m_IRemoteSystemWatcher.all.Release;
            Free (this.m_IRemoteSystemWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemWatcher

   procedure Start
   (
      this : in out RemoteSystemWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out RemoteSystemWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.Stop;
   end;

   function add_RemoteSystemAdded
   (
      this : in out RemoteSystemWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.add_RemoteSystemAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RemoteSystemAdded
   (
      this : in out RemoteSystemWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.remove_RemoteSystemAdded (token);
   end;

   function add_RemoteSystemUpdated
   (
      this : in out RemoteSystemWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.add_RemoteSystemUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RemoteSystemUpdated
   (
      this : in out RemoteSystemWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.remove_RemoteSystemUpdated (token);
   end;

   function add_RemoteSystemRemoved
   (
      this : in out RemoteSystemWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.add_RemoteSystemRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RemoteSystemRemoved
   (
      this : in out RemoteSystemWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoteSystemWatcher.all.remove_RemoteSystemRemoved (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out RemoteSystemWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemWatcher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystemWatcher.all);
      Hr := m_Interface.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out RemoteSystemWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemWatcher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystemWatcher.all);
      Hr := m_Interface.remove_EnumerationCompleted (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_ErrorOccurred
   (
      this : in out RemoteSystemWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemWatcher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystemWatcher.all);
      Hr := m_Interface.add_ErrorOccurred (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ErrorOccurred
   (
      this : in out RemoteSystemWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher2, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemWatcher2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRemoteSystemWatcher.all);
      Hr := m_Interface.remove_ErrorOccurred (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_User
   (
      this : in out RemoteSystemWatcher
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher_Interface, WinRt.Windows.System.RemoteSystems.IRemoteSystemWatcher3, WinRt.Windows.System.RemoteSystems.IID_IRemoteSystemWatcher3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IRemoteSystemWatcher.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemWatcherErrorOccurredEventArgs

   procedure Initialize (this : in out RemoteSystemWatcherErrorOccurredEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemWatcherErrorOccurredEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemWatcherErrorOccurredEventArgs, IRemoteSystemWatcherErrorOccurredEventArgs_Ptr);
   begin
      if this.m_IRemoteSystemWatcherErrorOccurredEventArgs /= null then
         if this.m_IRemoteSystemWatcherErrorOccurredEventArgs.all /= null then
            RefCount := this.m_IRemoteSystemWatcherErrorOccurredEventArgs.all.Release;
            Free (this.m_IRemoteSystemWatcherErrorOccurredEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemWatcherErrorOccurredEventArgs

   function get_Error
   (
      this : in out RemoteSystemWatcherErrorOccurredEventArgs
   )
   return WinRt.Windows.System.RemoteSystems.RemoteSystemWatcherError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.RemoteSystems.RemoteSystemWatcherError;
   begin
      Hr := this.m_IRemoteSystemWatcherErrorOccurredEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteSystemWebAccountFilter

   procedure Initialize (this : in out RemoteSystemWebAccountFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteSystemWebAccountFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteSystemWebAccountFilter, IRemoteSystemWebAccountFilter_Ptr);
   begin
      if this.m_IRemoteSystemWebAccountFilter /= null then
         if this.m_IRemoteSystemWebAccountFilter.all /= null then
            RefCount := this.m_IRemoteSystemWebAccountFilter.all.Release;
            Free (this.m_IRemoteSystemWebAccountFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RemoteSystemWebAccountFilter

   function Constructor
   (
      account : Windows.Security.Credentials.WebAccount'Class
   )
   return RemoteSystemWebAccountFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.System.RemoteSystems.RemoteSystemWebAccountFilter");
      m_Factory    : access IRemoteSystemWebAccountFilterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.System.RemoteSystems.IRemoteSystemWebAccountFilter;
   begin
      return RetVal : RemoteSystemWebAccountFilter do
         Hr := RoGetActivationFactory (m_hString, IID_IRemoteSystemWebAccountFilterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (account.m_IWebAccount.all, m_ComRetVal'Access);
            Retval.m_IRemoteSystemWebAccountFilter := new Windows.System.RemoteSystems.IRemoteSystemWebAccountFilter;
            Retval.m_IRemoteSystemWebAccountFilter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteSystemWebAccountFilter

   function get_Account
   (
      this : in out RemoteSystemWebAccountFilter
   )
   return WinRt.Windows.Security.Credentials.WebAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccount;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
         Hr := this.m_IRemoteSystemWebAccountFilter.all.get_Account (m_ComRetVal'Access);
         Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
         Retval.m_IWebAccount.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI.Xaml.Interop;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Markup is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MarkupExtension

   procedure Initialize (this : in out MarkupExtension) is
   begin
      null;
   end;

   procedure Finalize (this : in out MarkupExtension) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMarkupExtension, IMarkupExtension_Ptr);
   begin
      if this.m_IMarkupExtension /= null then
         if this.m_IMarkupExtension.all /= null then
            RefCount := this.m_IMarkupExtension.all.Release;
            Free (this.m_IMarkupExtension);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MarkupExtension

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return MarkupExtension is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.MarkupExtension");
      m_Factory    : access IMarkupExtensionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Markup.IMarkupExtension;
   begin
      return RetVal : MarkupExtension do
         Hr := RoGetActivationFactory (m_hString, IID_IMarkupExtensionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IMarkupExtension := new Windows.UI.Xaml.Markup.IMarkupExtension;
            Retval.m_IMarkupExtension.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MarkupExtension

   function ProvideValue
   (
      this : in out MarkupExtension
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Markup.IMarkupExtensionOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Markup.IMarkupExtension_Interface, WinRt.Windows.UI.Xaml.Markup.IMarkupExtensionOverrides, WinRt.Windows.UI.Xaml.Markup.IID_IMarkupExtensionOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMarkupExtension.all);
      Hr := m_Interface.ProvideValue (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlBinaryWriter

   procedure Initialize (this : in out XamlBinaryWriter) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlBinaryWriter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlBinaryWriter, IXamlBinaryWriter_Ptr);
   begin
      if this.m_IXamlBinaryWriter /= null then
         if this.m_IXamlBinaryWriter.all /= null then
            RefCount := this.m_IXamlBinaryWriter.all.Release;
            Free (this.m_IXamlBinaryWriter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XamlBinaryWriter

   function Write
   (
      inputStreams : GenericObject;
      outputStreams : GenericObject;
      xamlMetadataProvider : Windows.UI.Xaml.Markup.IXamlMetadataProvider
   )
   return WinRt.Windows.UI.Xaml.Markup.XamlBinaryWriterErrorInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBinaryWriter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBinaryWriterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Markup.XamlBinaryWriterErrorInformation;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBinaryWriterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Write (inputStreams, outputStreams, xamlMetadataProvider, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlBinaryWriter

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlBindingHelper

   procedure Initialize (this : in out XamlBindingHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlBindingHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlBindingHelper, IXamlBindingHelper_Ptr);
   begin
      if this.m_IXamlBindingHelper /= null then
         if this.m_IXamlBindingHelper.all /= null then
            RefCount := this.m_IXamlBindingHelper.all.Release;
            Free (this.m_IXamlBindingHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XamlBindingHelper

   function get_DataTemplateComponentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DataTemplateComponentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetDataTemplateComponent
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Windows.UI.Xaml.Markup.IDataTemplateComponent is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Markup.IDataTemplateComponent;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDataTemplateComponent (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetDataTemplateComponent
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : Windows.UI.Xaml.Markup.IDataTemplateComponent
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetDataTemplateComponent (element.m_IDependencyObject.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SuspendRendering
   (
      target : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SuspendRendering (target.m_IUIElement.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ResumeRendering
   (
      target : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ResumeRendering (target.m_IUIElement.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function ConvertValue
   (
      type_x : Windows.UI.Xaml.Interop.TypeName;
      value : WinRt.IInspectable
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ConvertValue (type_x, value, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure SetPropertyFromString
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromString (dependencyObject, propertyToSet.m_IDependencyProperty.all, HStr_value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure SetPropertyFromBoolean
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromBoolean (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromChar16
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.Wide_Char
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromChar16 (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromDateTime
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromDateTime (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromDouble
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromDouble (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromInt32
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromInt32 (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromUInt32
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromUInt32 (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromInt64
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromInt64 (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromUInt64
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromUInt64 (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromSingle
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromSingle (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromPoint
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : Windows.Foundation.Point
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromPoint (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromRect
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromRect (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromSize
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromSize (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromTimeSpan
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromTimeSpan (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromByte
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromByte (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromUri
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromUri (dependencyObject, propertyToSet.m_IDependencyProperty.all, value.m_IUriRuntimeClass.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure SetPropertyFromObject
   (
      dependencyObject : WinRt.IInspectable;
      propertyToSet : Windows.UI.Xaml.DependencyProperty'Class;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlBindingHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlBindingHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlBindingHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetPropertyFromObject (dependencyObject, propertyToSet.m_IDependencyProperty.all, value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlBindingHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlMarkupHelper

   procedure Initialize (this : in out XamlMarkupHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlMarkupHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlMarkupHelper, IXamlMarkupHelper_Ptr);
   begin
      if this.m_IXamlMarkupHelper /= null then
         if this.m_IXamlMarkupHelper.all /= null then
            RefCount := this.m_IXamlMarkupHelper.all.Release;
            Free (this.m_IXamlMarkupHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XamlMarkupHelper

   procedure UnloadObject
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlMarkupHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlMarkupHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlMarkupHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.UnloadObject (element.m_IDependencyObject.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlMarkupHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlReader

   procedure Initialize (this : in out XamlReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlReader, IXamlReader_Ptr);
   begin
      if this.m_IXamlReader /= null then
         if this.m_IXamlReader.all /= null then
            RefCount := this.m_IXamlReader.all.Release;
            Free (this.m_IXamlReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for XamlReader

   function Load
   (
      xaml : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlReader");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_xaml : WinRt.HString := To_HString (xaml);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlReaderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Load (HStr_xaml, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_xaml);
      return m_ComRetVal;
   end;

   function LoadWithInitialTemplateValidation
   (
      xaml : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Markup.XamlReader");
      m_Factory        : access WinRt.Windows.UI.Xaml.Markup.IXamlReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_xaml : WinRt.HString := To_HString (xaml);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IXamlReaderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.LoadWithInitialTemplateValidation (HStr_xaml, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_xaml);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlReader

end;

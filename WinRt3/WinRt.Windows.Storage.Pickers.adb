--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Storage.Pickers is

   package IIterable_HString is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.HString);
   package IAsyncOperation_StorageFile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFile);
   package AsyncOperationCompletedHandler_StorageFile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFile);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IVectorView_IStorageFile is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Storage.IStorageFile);
   package IIterable_IStorageFile is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Storage.IStorageFile);
   package IAsyncOperation_StorageFolder is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFolder);
   package AsyncOperationCompletedHandler_StorageFolder is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFolder);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileExtensionVector

   procedure Initialize (this : in out FileExtensionVector) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileExtensionVector) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileExtensionVector

   -- Generic Interface Windows.Foundation.Collections.IVector`1<System.String>
   function GetAt
   (
      this : in out FileExtensionVector;
      index : WinRt.UInt32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out FileExtensionVector
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out FileExtensionVector
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out FileExtensionVector;
      value : WinRt.WString;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (HStr_value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out FileExtensionVector;
      index : WinRt.UInt32;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure InsertAt
   (
      this : in out FileExtensionVector;
      index : WinRt.UInt32;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure RemoveAt
   (
      this : in out FileExtensionVector;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out FileExtensionVector;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure RemoveAtEnd
   (
      this : in out FileExtensionVector
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out FileExtensionVector
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out FileExtensionVector;
      startIndex : WinRt.UInt32;
      items : WinRt.HString_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out FileExtensionVector;
      items : WinRt.HString_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (2562305217, 19286, 21294, (172, 115, 3, 213, 41, 28, 202, 144 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_HString.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<System.String>
   function First
   (
      this : in out FileExtensionVector
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3808217025, 15356, 23051, (178, 176, 114, 231, 105, 209, 203, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileOpenPicker

   procedure Initialize (this : in out FileOpenPicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileOpenPicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileOpenPicker, IFileOpenPicker_Ptr);
   begin
      if this.m_IFileOpenPicker /= null then
         if this.m_IFileOpenPicker.all /= null then
            RefCount := this.m_IFileOpenPicker.all.Release;
            Free (this.m_IFileOpenPicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FileOpenPicker

   function Constructor return FileOpenPicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Pickers.FileOpenPicker");
      m_ComRetVal  : aliased Windows.Storage.Pickers.IFileOpenPicker;
   begin
      return RetVal : FileOpenPicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFileOpenPicker := new Windows.Storage.Pickers.IFileOpenPicker;
            Retval.m_IFileOpenPicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FileOpenPicker

   function ResumePickSingleFileAsync
   return WinRt.Windows.Storage.StorageFile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Pickers.FileOpenPicker");
      m_Factory        : access WinRt.Windows.Storage.Pickers.IFileOpenPickerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := RoGetActivationFactory (m_hString, IID_IFileOpenPickerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ResumePickSingleFileAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                     Retval.m_IStorageFile.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.Storage.Pickers.FileOpenPicker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Pickers.FileOpenPicker");
      m_Factory        : access WinRt.Windows.Storage.Pickers.IFileOpenPickerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.IFileOpenPicker;
   begin
      return RetVal : WinRt.Windows.Storage.Pickers.FileOpenPicker do
         Hr := RoGetActivationFactory (m_hString, IID_IFileOpenPickerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IFileOpenPicker := new Windows.Storage.Pickers.IFileOpenPicker;
            Retval.m_IFileOpenPicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileOpenPicker

   function get_ContinuationData
   (
      this : in out FileOpenPicker
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileOpenPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileOpenPicker_Interface, WinRt.Windows.Storage.Pickers.IFileOpenPicker2, WinRt.Windows.Storage.Pickers.IID_IFileOpenPicker2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFileOpenPicker.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   procedure PickSingleFileAndContinue
   (
      this : in out FileOpenPicker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileOpenPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileOpenPicker_Interface, WinRt.Windows.Storage.Pickers.IFileOpenPicker2, WinRt.Windows.Storage.Pickers.IID_IFileOpenPicker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPicker.all);
      Hr := m_Interface.PickSingleFileAndContinue;
      m_RefCount := m_Interface.Release;
   end;

   procedure PickMultipleFilesAndContinue
   (
      this : in out FileOpenPicker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileOpenPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileOpenPicker_Interface, WinRt.Windows.Storage.Pickers.IFileOpenPicker2, WinRt.Windows.Storage.Pickers.IID_IFileOpenPicker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileOpenPicker.all);
      Hr := m_Interface.PickMultipleFilesAndContinue;
      m_RefCount := m_Interface.Release;
   end;

   function PickSingleFileAsync
   (
      this : in out FileOpenPicker;
      pickerOperationId : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileOpenPickerWithOperationId := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_pickerOperationId : WinRt.HString := To_HString (pickerOperationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileOpenPicker_Interface, WinRt.Windows.Storage.Pickers.IFileOpenPickerWithOperationId, WinRt.Windows.Storage.Pickers.IID_IFileOpenPickerWithOperationId'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IFileOpenPicker.all);
         Hr := m_Interface.PickSingleFileAsync (HStr_pickerOperationId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_pickerOperationId);
      end return;
   end;

   function get_ViewMode
   (
      this : in out FileOpenPicker
   )
   return WinRt.Windows.Storage.Pickers.PickerViewMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.PickerViewMode;
   begin
      Hr := this.m_IFileOpenPicker.all.get_ViewMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewMode
   (
      this : in out FileOpenPicker;
      value : Windows.Storage.Pickers.PickerViewMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileOpenPicker.all.put_ViewMode (value);
   end;

   function get_SettingsIdentifier
   (
      this : in out FileOpenPicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileOpenPicker.all.get_SettingsIdentifier (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SettingsIdentifier
   (
      this : in out FileOpenPicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFileOpenPicker.all.put_SettingsIdentifier (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SuggestedStartLocation
   (
      this : in out FileOpenPicker
   )
   return WinRt.Windows.Storage.Pickers.PickerLocationId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.PickerLocationId;
   begin
      Hr := this.m_IFileOpenPicker.all.get_SuggestedStartLocation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SuggestedStartLocation
   (
      this : in out FileOpenPicker;
      value : Windows.Storage.Pickers.PickerLocationId
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileOpenPicker.all.put_SuggestedStartLocation (value);
   end;

   function get_CommitButtonText
   (
      this : in out FileOpenPicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileOpenPicker.all.get_CommitButtonText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CommitButtonText
   (
      this : in out FileOpenPicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFileOpenPicker.all.put_CommitButtonText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FileTypeFilter
   (
      this : in out FileOpenPicker
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IFileOpenPicker.all.get_FileTypeFilter (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function PickSingleFileAsync
   (
      this : in out FileOpenPicker
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IFileOpenPicker.all.PickSingleFileAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PickMultipleFilesAsync
   (
      this : in out FileOpenPicker
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (53882419, 58387, 24361, (151, 208, 72, 164, 120, 9, 53, 249 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3410101957, 2440, 20740, (175, 169, 37, 60, 41, 143, 134, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFileOpenPicker.all.PickMultipleFilesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_User
   (
      this : in out FileOpenPicker
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileOpenPicker3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileOpenPicker_Interface, WinRt.Windows.Storage.Pickers.IFileOpenPicker3, WinRt.Windows.Storage.Pickers.IID_IFileOpenPicker3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileOpenPicker.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FilePickerFileTypesOrderedMap

   procedure Initialize (this : in out FilePickerFileTypesOrderedMap) is
   begin
      null;
   end;

   procedure Finalize (this : in out FilePickerFileTypesOrderedMap) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FilePickerFileTypesOrderedMap

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FilePickerSelectedFilesArray

   procedure Initialize (this : in out FilePickerSelectedFilesArray) is
   begin
      null;
   end;

   procedure Finalize (this : in out FilePickerSelectedFilesArray) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FilePickerSelectedFilesArray

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Storage.StorageFile>
   function GetAt
   (
      this : in out FilePickerSelectedFilesArray;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IStorageFile.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
      m_GenericIID     : aliased WinRt.IID := (2154063129, 24106, 22877, (168, 205, 42, 36, 180, 6, 127, 27 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IStorageFile.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out FilePickerSelectedFilesArray
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IStorageFile.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2154063129, 24106, 22877, (168, 205, 42, 36, 180, 6, 127, 27 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IStorageFile.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out FilePickerSelectedFilesArray;
      value : Windows.Storage.StorageFile'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IStorageFile.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (2154063129, 24106, 22877, (168, 205, 42, 36, 180, 6, 127, 27 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IStorageFile.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IStorageFile.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out FilePickerSelectedFilesArray;
      startIndex : WinRt.UInt32;
      items : Windows.Storage.IStorageFile_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IStorageFile.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (2154063129, 24106, 22877, (168, 205, 42, 36, 180, 6, 127, 27 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IStorageFile.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Storage.StorageFile>
   function First
   (
      this : in out FilePickerSelectedFilesArray
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IStorageFile.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2596274948, 33770, 22152, (135, 182, 174, 56, 170, 182, 93, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IStorageFile.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileSavePicker

   procedure Initialize (this : in out FileSavePicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileSavePicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileSavePicker, IFileSavePicker_Ptr);
   begin
      if this.m_IFileSavePicker /= null then
         if this.m_IFileSavePicker.all /= null then
            RefCount := this.m_IFileSavePicker.all.Release;
            Free (this.m_IFileSavePicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FileSavePicker

   function Constructor return FileSavePicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Pickers.FileSavePicker");
      m_ComRetVal  : aliased Windows.Storage.Pickers.IFileSavePicker;
   begin
      return RetVal : FileSavePicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFileSavePicker := new Windows.Storage.Pickers.IFileSavePicker;
            Retval.m_IFileSavePicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FileSavePicker

   function CreateForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.Storage.Pickers.FileSavePicker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Pickers.FileSavePicker");
      m_Factory        : access WinRt.Windows.Storage.Pickers.IFileSavePickerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.IFileSavePicker;
   begin
      return RetVal : WinRt.Windows.Storage.Pickers.FileSavePicker do
         Hr := RoGetActivationFactory (m_hString, IID_IFileSavePickerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IFileSavePicker := new Windows.Storage.Pickers.IFileSavePicker;
            Retval.m_IFileSavePicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileSavePicker

   function get_ContinuationData
   (
      this : in out FileSavePicker
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileSavePicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileSavePicker_Interface, WinRt.Windows.Storage.Pickers.IFileSavePicker2, WinRt.Windows.Storage.Pickers.IID_IFileSavePicker2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFileSavePicker.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   procedure PickSaveFileAndContinue
   (
      this : in out FileSavePicker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileSavePicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileSavePicker_Interface, WinRt.Windows.Storage.Pickers.IFileSavePicker2, WinRt.Windows.Storage.Pickers.IID_IFileSavePicker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePicker.all);
      Hr := m_Interface.PickSaveFileAndContinue;
      m_RefCount := m_Interface.Release;
   end;

   function get_EnterpriseId
   (
      this : in out FileSavePicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileSavePicker3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileSavePicker_Interface, WinRt.Windows.Storage.Pickers.IFileSavePicker3, WinRt.Windows.Storage.Pickers.IID_IFileSavePicker3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePicker.all);
      Hr := m_Interface.get_EnterpriseId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_EnterpriseId
   (
      this : in out FileSavePicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileSavePicker3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileSavePicker_Interface, WinRt.Windows.Storage.Pickers.IFileSavePicker3, WinRt.Windows.Storage.Pickers.IID_IFileSavePicker3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileSavePicker.all);
      Hr := m_Interface.put_EnterpriseId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SettingsIdentifier
   (
      this : in out FileSavePicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileSavePicker.all.get_SettingsIdentifier (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SettingsIdentifier
   (
      this : in out FileSavePicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFileSavePicker.all.put_SettingsIdentifier (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SuggestedStartLocation
   (
      this : in out FileSavePicker
   )
   return WinRt.Windows.Storage.Pickers.PickerLocationId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.PickerLocationId;
   begin
      Hr := this.m_IFileSavePicker.all.get_SuggestedStartLocation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SuggestedStartLocation
   (
      this : in out FileSavePicker;
      value : Windows.Storage.Pickers.PickerLocationId
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileSavePicker.all.put_SuggestedStartLocation (value);
   end;

   function get_CommitButtonText
   (
      this : in out FileSavePicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileSavePicker.all.get_CommitButtonText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CommitButtonText
   (
      this : in out FileSavePicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFileSavePicker.all.put_CommitButtonText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FileTypeChoices
   (
      this : in out FileSavePicker
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFileSavePicker.all.get_FileTypeChoices (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DefaultFileExtension
   (
      this : in out FileSavePicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileSavePicker.all.get_DefaultFileExtension (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DefaultFileExtension
   (
      this : in out FileSavePicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFileSavePicker.all.put_DefaultFileExtension (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SuggestedSaveFile
   (
      this : in out FileSavePicker
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IFileSavePicker.all.get_SuggestedSaveFile (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   procedure put_SuggestedSaveFile
   (
      this : in out FileSavePicker;
      value : Windows.Storage.StorageFile'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileSavePicker.all.put_SuggestedSaveFile (value.m_IStorageFile.all);
   end;

   function get_SuggestedFileName
   (
      this : in out FileSavePicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileSavePicker.all.get_SuggestedFileName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SuggestedFileName
   (
      this : in out FileSavePicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFileSavePicker.all.put_SuggestedFileName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function PickSaveFileAsync
   (
      this : in out FileSavePicker
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IFileSavePicker.all.PickSaveFileAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_User
   (
      this : in out FileSavePicker
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFileSavePicker4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFileSavePicker_Interface, WinRt.Windows.Storage.Pickers.IFileSavePicker4, WinRt.Windows.Storage.Pickers.IID_IFileSavePicker4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFileSavePicker.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FolderPicker

   procedure Initialize (this : in out FolderPicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out FolderPicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFolderPicker, IFolderPicker_Ptr);
   begin
      if this.m_IFolderPicker /= null then
         if this.m_IFolderPicker.all /= null then
            RefCount := this.m_IFolderPicker.all.Release;
            Free (this.m_IFolderPicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FolderPicker

   function Constructor return FolderPicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Pickers.FolderPicker");
      m_ComRetVal  : aliased Windows.Storage.Pickers.IFolderPicker;
   begin
      return RetVal : FolderPicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFolderPicker := new Windows.Storage.Pickers.IFolderPicker;
            Retval.m_IFolderPicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FolderPicker

   function CreateForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.Storage.Pickers.FolderPicker is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Pickers.FolderPicker");
      m_Factory        : access WinRt.Windows.Storage.Pickers.IFolderPickerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.IFolderPicker;
   begin
      return RetVal : WinRt.Windows.Storage.Pickers.FolderPicker do
         Hr := RoGetActivationFactory (m_hString, IID_IFolderPickerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IFolderPicker := new Windows.Storage.Pickers.IFolderPicker;
            Retval.m_IFolderPicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FolderPicker

   function get_ContinuationData
   (
      this : in out FolderPicker
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFolderPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFolderPicker_Interface, WinRt.Windows.Storage.Pickers.IFolderPicker2, WinRt.Windows.Storage.Pickers.IID_IFolderPicker2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_IFolderPicker.all);
         Hr := m_Interface.get_ContinuationData (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   procedure PickFolderAndContinue
   (
      this : in out FolderPicker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFolderPicker2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFolderPicker_Interface, WinRt.Windows.Storage.Pickers.IFolderPicker2, WinRt.Windows.Storage.Pickers.IID_IFolderPicker2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFolderPicker.all);
      Hr := m_Interface.PickFolderAndContinue;
      m_RefCount := m_Interface.Release;
   end;

   function get_ViewMode
   (
      this : in out FolderPicker
   )
   return WinRt.Windows.Storage.Pickers.PickerViewMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.PickerViewMode;
   begin
      Hr := this.m_IFolderPicker.all.get_ViewMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewMode
   (
      this : in out FolderPicker;
      value : Windows.Storage.Pickers.PickerViewMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFolderPicker.all.put_ViewMode (value);
   end;

   function get_SettingsIdentifier
   (
      this : in out FolderPicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFolderPicker.all.get_SettingsIdentifier (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SettingsIdentifier
   (
      this : in out FolderPicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFolderPicker.all.put_SettingsIdentifier (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SuggestedStartLocation
   (
      this : in out FolderPicker
   )
   return WinRt.Windows.Storage.Pickers.PickerLocationId is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Pickers.PickerLocationId;
   begin
      Hr := this.m_IFolderPicker.all.get_SuggestedStartLocation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SuggestedStartLocation
   (
      this : in out FolderPicker;
      value : Windows.Storage.Pickers.PickerLocationId
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFolderPicker.all.put_SuggestedStartLocation (value);
   end;

   function get_CommitButtonText
   (
      this : in out FolderPicker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFolderPicker.all.get_CommitButtonText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CommitButtonText
   (
      this : in out FolderPicker;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IFolderPicker.all.put_CommitButtonText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FileTypeFilter
   (
      this : in out FolderPicker
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IFolderPicker.all.get_FileTypeFilter (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function PickSingleFolderAsync
   (
      this : in out FolderPicker
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IFolderPicker.all.PickSingleFolderAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_User
   (
      this : in out FolderPicker
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Pickers.IFolderPicker3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Pickers.IFolderPicker_Interface, WinRt.Windows.Storage.Pickers.IFolderPicker3, WinRt.Windows.Storage.Pickers.IID_IFolderPicker3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IFolderPicker.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

end;

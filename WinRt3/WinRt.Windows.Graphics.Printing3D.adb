--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Graphics.Printing3D is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IRandomAccessStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStream);
   package AsyncOperationCompletedHandler_IRandomAccessStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStream);

   package IAsyncOperation_Printing3DModel is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel);
   package AsyncOperationCompletedHandler_Printing3DModel is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel);

   package IAsyncOperation_Printing3D3MFPackage is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage);
   package AsyncOperationCompletedHandler_Printing3D3MFPackage is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage);

   package IAsyncOperation_Printing3DMeshVerificationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Graphics.Printing3D.IPrinting3DMeshVerificationResult);
   package AsyncOperationCompletedHandler_Printing3DMeshVerificationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Graphics.Printing3D.IPrinting3DMeshVerificationResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DManager

   procedure Initialize (this : in out Print3DManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DManager, IPrint3DManager_Ptr);
   begin
      if this.m_IPrint3DManager /= null then
         if this.m_IPrint3DManager.all /= null then
            RefCount := this.m_IPrint3DManager.all.Release;
            Free (this.m_IPrint3DManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Print3DManager

   function GetForCurrentView
   return WinRt.Windows.Graphics.Printing3D.Print3DManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Print3DManager");
      m_Factory        : access WinRt.Windows.Graphics.Printing3D.IPrint3DManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrint3DManager;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Print3DManager do
         Hr := RoGetActivationFactory (m_hString, IID_IPrint3DManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPrint3DManager := new Windows.Graphics.Printing3D.IPrint3DManager;
            Retval.m_IPrint3DManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function ShowPrintUIAsync
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Print3DManager");
      m_Factory        : access WinRt.Windows.Graphics.Printing3D.IPrint3DManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPrint3DManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowPrintUIAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DManager

   function add_TaskRequested
   (
      this : in out Print3DManager;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrint3DManager.all.add_TaskRequested (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TaskRequested
   (
      this : in out Print3DManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DManager.all.remove_TaskRequested (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DTask

   procedure Initialize (this : in out Print3DTask) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DTask) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DTask, IPrint3DTask_Ptr);
   begin
      if this.m_IPrint3DTask /= null then
         if this.m_IPrint3DTask.all /= null then
            RefCount := this.m_IPrint3DTask.all.Release;
            Free (this.m_IPrint3DTask);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DTask

   function get_Source
   (
      this : in out Print3DTask
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3D3MFPackage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3D3MFPackage do
         Hr := this.m_IPrint3DTask.all.get_Source (m_ComRetVal'Access);
         Retval.m_IPrinting3D3MFPackage := new Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
         Retval.m_IPrinting3D3MFPackage.all := m_ComRetVal;
      end return;
   end;

   function add_Submitting
   (
      this : in out Print3DTask;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrint3DTask.all.add_Submitting (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Submitting
   (
      this : in out Print3DTask;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DTask.all.remove_Submitting (eventCookie);
   end;

   function add_Completed
   (
      this : in out Print3DTask;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrint3DTask.all.add_Completed (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out Print3DTask;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DTask.all.remove_Completed (eventCookie);
   end;

   function add_SourceChanged
   (
      this : in out Print3DTask;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrint3DTask.all.add_SourceChanged (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceChanged
   (
      this : in out Print3DTask;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DTask.all.remove_SourceChanged (eventCookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DTaskCompletedEventArgs

   procedure Initialize (this : in out Print3DTaskCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DTaskCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DTaskCompletedEventArgs, IPrint3DTaskCompletedEventArgs_Ptr);
   begin
      if this.m_IPrint3DTaskCompletedEventArgs /= null then
         if this.m_IPrint3DTaskCompletedEventArgs.all /= null then
            RefCount := this.m_IPrint3DTaskCompletedEventArgs.all.Release;
            Free (this.m_IPrint3DTaskCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DTaskCompletedEventArgs

   function get_Completion
   (
      this : in out Print3DTaskCompletedEventArgs
   )
   return WinRt.Windows.Graphics.Printing3D.Print3DTaskCompletion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Print3DTaskCompletion;
   begin
      Hr := this.m_IPrint3DTaskCompletedEventArgs.all.get_Completion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedStatus
   (
      this : in out Print3DTaskCompletedEventArgs
   )
   return WinRt.Windows.Graphics.Printing3D.Print3DTaskDetail is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Print3DTaskDetail;
   begin
      Hr := this.m_IPrint3DTaskCompletedEventArgs.all.get_ExtendedStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DTaskRequest

   procedure Initialize (this : in out Print3DTaskRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DTaskRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DTaskRequest, IPrint3DTaskRequest_Ptr);
   begin
      if this.m_IPrint3DTaskRequest /= null then
         if this.m_IPrint3DTaskRequest.all /= null then
            RefCount := this.m_IPrint3DTaskRequest.all.Release;
            Free (this.m_IPrint3DTaskRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DTaskRequest

   function CreateTask
   (
      this : in out Print3DTaskRequest;
      title : WinRt.WString;
      printerId : WinRt.WString;
      handler : Windows.Graphics.Printing3D.Print3DTaskSourceRequestedHandler
   )
   return WinRt.Windows.Graphics.Printing3D.Print3DTask'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrint3DTask;
      HStr_title : WinRt.HString := To_HString (title);
      HStr_printerId : WinRt.HString := To_HString (printerId);
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Print3DTask do
         Hr := this.m_IPrint3DTaskRequest.all.CreateTask (HStr_title, HStr_printerId, handler, m_ComRetVal'Access);
         Retval.m_IPrint3DTask := new Windows.Graphics.Printing3D.IPrint3DTask;
         Retval.m_IPrint3DTask.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_title);
         Hr := WindowsDeleteString (HStr_printerId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DTaskRequestedEventArgs

   procedure Initialize (this : in out Print3DTaskRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DTaskRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DTaskRequestedEventArgs, IPrint3DTaskRequestedEventArgs_Ptr);
   begin
      if this.m_IPrint3DTaskRequestedEventArgs /= null then
         if this.m_IPrint3DTaskRequestedEventArgs.all /= null then
            RefCount := this.m_IPrint3DTaskRequestedEventArgs.all.Release;
            Free (this.m_IPrint3DTaskRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DTaskRequestedEventArgs

   function get_Request
   (
      this : in out Print3DTaskRequestedEventArgs
   )
   return WinRt.Windows.Graphics.Printing3D.Print3DTaskRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrint3DTaskRequest;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Print3DTaskRequest do
         Hr := this.m_IPrint3DTaskRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IPrint3DTaskRequest := new Windows.Graphics.Printing3D.IPrint3DTaskRequest;
         Retval.m_IPrint3DTaskRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DTaskSourceChangedEventArgs

   procedure Initialize (this : in out Print3DTaskSourceChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DTaskSourceChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DTaskSourceChangedEventArgs, IPrint3DTaskSourceChangedEventArgs_Ptr);
   begin
      if this.m_IPrint3DTaskSourceChangedEventArgs /= null then
         if this.m_IPrint3DTaskSourceChangedEventArgs.all /= null then
            RefCount := this.m_IPrint3DTaskSourceChangedEventArgs.all.Release;
            Free (this.m_IPrint3DTaskSourceChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DTaskSourceChangedEventArgs

   function get_Source
   (
      this : in out Print3DTaskSourceChangedEventArgs
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3D3MFPackage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3D3MFPackage do
         Hr := this.m_IPrint3DTaskSourceChangedEventArgs.all.get_Source (m_ComRetVal'Access);
         Retval.m_IPrinting3D3MFPackage := new Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
         Retval.m_IPrinting3D3MFPackage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Print3DTaskSourceRequestedArgs

   procedure Initialize (this : in out Print3DTaskSourceRequestedArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out Print3DTaskSourceRequestedArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrint3DTaskSourceRequestedArgs, IPrint3DTaskSourceRequestedArgs_Ptr);
   begin
      if this.m_IPrint3DTaskSourceRequestedArgs /= null then
         if this.m_IPrint3DTaskSourceRequestedArgs.all /= null then
            RefCount := this.m_IPrint3DTaskSourceRequestedArgs.all.Release;
            Free (this.m_IPrint3DTaskSourceRequestedArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Print3DTaskSourceRequestedArgs

   procedure SetSource
   (
      this : in out Print3DTaskSourceRequestedArgs;
      source : Windows.Graphics.Printing3D.Printing3D3MFPackage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrint3DTaskSourceRequestedArgs.all.SetSource (source.m_IPrinting3D3MFPackage.all);
   end;

   -----------------------------------------------------------------------------
   -- Delegate Print3DTaskSourceRequestedHandler

   function Invoke
   (
      this : access Print3DTaskSourceRequestedHandler_Delegate;
      args : Windows.Graphics.Printing3D.IPrint3DTaskSourceRequestedArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (args);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3D3MFPackage

   procedure Initialize (this : in out Printing3D3MFPackage) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3D3MFPackage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3D3MFPackage, IPrinting3D3MFPackage_Ptr);
   begin
      if this.m_IPrinting3D3MFPackage /= null then
         if this.m_IPrinting3D3MFPackage.all /= null then
            RefCount := this.m_IPrinting3D3MFPackage.all.Release;
            Free (this.m_IPrinting3D3MFPackage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3D3MFPackage

   function Constructor return Printing3D3MFPackage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3D3MFPackage");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
   begin
      return RetVal : Printing3D3MFPackage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3D3MFPackage := new Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
            Retval.m_IPrinting3D3MFPackage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Printing3D3MFPackage

   function LoadAsync
   (
      value : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3D3MFPackage is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3D3MFPackage");
      m_Factory        : access WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Printing3D3MFPackage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Printing3D3MFPackage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
      m_IID            : aliased WinRt.IID := (1827859256, 57448, 21848, (148, 176, 1, 97, 25, 44, 95, 25 )); -- Windows.Graphics.Printing3D.Printing3D3MFPackage;
      m_HandlerIID     : aliased WinRt.IID := (683061768, 34215, 21489, (131, 174, 87, 122, 125, 230, 106, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_Printing3D3MFPackage.Kind := new AsyncOperationCompletedHandler_Printing3D3MFPackage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Printing3D3MFPackage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Printing3D3MFPackage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Printing3D3MFPackage.Kind_Delegate, AsyncOperationCompletedHandler_Printing3D3MFPackage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3D3MFPackage do
         Hr := RoGetActivationFactory (m_hString, IID_IPrinting3D3MFPackageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadAsync (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPrinting3D3MFPackage := new Windows.Graphics.Printing3D.IPrinting3D3MFPackage;
                     Retval.m_IPrinting3D3MFPackage.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3D3MFPackage

   function SaveAsync
   (
      this : in out Printing3D3MFPackage
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPrinting3D3MFPackage.all.SaveAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_PrintTicket
   (
      this : in out Printing3D3MFPackage
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_IPrinting3D3MFPackage.all.get_PrintTicket (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PrintTicket
   (
      this : in out Printing3D3MFPackage;
      value : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3D3MFPackage.all.put_PrintTicket (value);
   end;

   function get_ModelPart
   (
      this : in out Printing3D3MFPackage
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_IPrinting3D3MFPackage.all.get_ModelPart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ModelPart
   (
      this : in out Printing3D3MFPackage;
      value : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3D3MFPackage.all.put_ModelPart (value);
   end;

   function get_Thumbnail
   (
      this : in out Printing3D3MFPackage
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DTextureResource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DTextureResource;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DTextureResource do
         Hr := this.m_IPrinting3D3MFPackage.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_IPrinting3DTextureResource := new Windows.Graphics.Printing3D.IPrinting3DTextureResource;
         Retval.m_IPrinting3DTextureResource.all := m_ComRetVal;
      end return;
   end;

   procedure put_Thumbnail
   (
      this : in out Printing3D3MFPackage;
      value : Windows.Graphics.Printing3D.Printing3DTextureResource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3D3MFPackage.all.put_Thumbnail (value.m_IPrinting3DTextureResource.all);
   end;

   function get_Textures
   (
      this : in out Printing3D3MFPackage
   )
   return IVector_IPrinting3DTextureResource.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DTextureResource.Kind;
   begin
      Hr := this.m_IPrinting3D3MFPackage.all.get_Textures (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DTextureResource (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function LoadModelFromPackageAsync
   (
      this : in out Printing3D3MFPackage;
      value : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DModel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Printing3DModel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Printing3DModel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Printing3D.IPrinting3DModel;
      m_IID            : aliased WinRt.IID := (455577611, 4309, 21503, (154, 52, 75, 49, 243, 21, 130, 176 )); -- Windows.Graphics.Printing3D.Printing3DModel;
      m_HandlerIID     : aliased WinRt.IID := (653579084, 41245, 23305, (153, 8, 173, 232, 177, 177, 53, 85 ));
      m_Handler        : AsyncOperationCompletedHandler_Printing3DModel.Kind := new AsyncOperationCompletedHandler_Printing3DModel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Printing3DModel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Printing3DModel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Printing3DModel.Kind_Delegate, AsyncOperationCompletedHandler_Printing3DModel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DModel do
         Hr := this.m_IPrinting3D3MFPackage.all.LoadModelFromPackageAsync (value, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPrinting3DModel := new Windows.Graphics.Printing3D.IPrinting3DModel;
                  Retval.m_IPrinting3DModel.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure SaveModelToPackageAsync
   (
      this : in out Printing3D3MFPackage;
      value : Windows.Graphics.Printing3D.Printing3DModel'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPrinting3D3MFPackage.all.SaveModelToPackageAsync (value.m_IPrinting3DModel.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Compression
   (
      this : in out Printing3D3MFPackage
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DPackageCompression is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DPackageCompression;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3D3MFPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3D3MFPackage.all);
      Hr := m_Interface.get_Compression (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Compression
   (
      this : in out Printing3D3MFPackage;
      value : Windows.Graphics.Printing3D.Printing3DPackageCompression
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3D3MFPackage2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3D3MFPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3D3MFPackage.all);
      Hr := m_Interface.put_Compression (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DBaseMaterial

   procedure Initialize (this : in out Printing3DBaseMaterial) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DBaseMaterial) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DBaseMaterial, IPrinting3DBaseMaterial_Ptr);
   begin
      if this.m_IPrinting3DBaseMaterial /= null then
         if this.m_IPrinting3DBaseMaterial.all /= null then
            RefCount := this.m_IPrinting3DBaseMaterial.all.Release;
            Free (this.m_IPrinting3DBaseMaterial);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DBaseMaterial

   function Constructor return Printing3DBaseMaterial is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DBaseMaterial");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DBaseMaterial;
   begin
      return RetVal : Printing3DBaseMaterial do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DBaseMaterial := new Windows.Graphics.Printing3D.IPrinting3DBaseMaterial;
            Retval.m_IPrinting3DBaseMaterial.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Printing3DBaseMaterial

   function get_Abs
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DBaseMaterial");
      m_Factory        : access WinRt.Windows.Graphics.Printing3D.IPrinting3DBaseMaterialStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPrinting3DBaseMaterialStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Abs (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Pla
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DBaseMaterial");
      m_Factory        : access WinRt.Windows.Graphics.Printing3D.IPrinting3DBaseMaterialStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPrinting3DBaseMaterialStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Pla (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DBaseMaterial

   function get_Name
   (
      this : in out Printing3DBaseMaterial
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrinting3DBaseMaterial.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out Printing3DBaseMaterial;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPrinting3DBaseMaterial.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Color
   (
      this : in out Printing3DBaseMaterial
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DColorMaterial'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DColorMaterial;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DColorMaterial do
         Hr := this.m_IPrinting3DBaseMaterial.all.get_Color (m_ComRetVal'Access);
         Retval.m_IPrinting3DColorMaterial := new Windows.Graphics.Printing3D.IPrinting3DColorMaterial;
         Retval.m_IPrinting3DColorMaterial.all := m_ComRetVal;
      end return;
   end;

   procedure put_Color
   (
      this : in out Printing3DBaseMaterial;
      value : Windows.Graphics.Printing3D.Printing3DColorMaterial'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DBaseMaterial.all.put_Color (value.m_IPrinting3DColorMaterial.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DBaseMaterialGroup

   procedure Initialize (this : in out Printing3DBaseMaterialGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DBaseMaterialGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DBaseMaterialGroup, IPrinting3DBaseMaterialGroup_Ptr);
   begin
      if this.m_IPrinting3DBaseMaterialGroup /= null then
         if this.m_IPrinting3DBaseMaterialGroup.all /= null then
            RefCount := this.m_IPrinting3DBaseMaterialGroup.all.Release;
            Free (this.m_IPrinting3DBaseMaterialGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DBaseMaterialGroup

   function Constructor
   (
      MaterialGroupId : WinRt.UInt32
   )
   return Printing3DBaseMaterialGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DBaseMaterialGroup");
      m_Factory    : access IPrinting3DBaseMaterialGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DBaseMaterialGroup;
   begin
      return RetVal : Printing3DBaseMaterialGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPrinting3DBaseMaterialGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (MaterialGroupId, m_ComRetVal'Access);
            Retval.m_IPrinting3DBaseMaterialGroup := new Windows.Graphics.Printing3D.IPrinting3DBaseMaterialGroup;
            Retval.m_IPrinting3DBaseMaterialGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DBaseMaterialGroup

   function get_Bases
   (
      this : in out Printing3DBaseMaterialGroup
   )
   return IVector_IPrinting3DBaseMaterial.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DBaseMaterial.Kind;
   begin
      Hr := this.m_IPrinting3DBaseMaterialGroup.all.get_Bases (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DBaseMaterial (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaterialGroupId
   (
      this : in out Printing3DBaseMaterialGroup
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DBaseMaterialGroup.all.get_MaterialGroupId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DColorMaterial

   procedure Initialize (this : in out Printing3DColorMaterial) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DColorMaterial) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DColorMaterial, IPrinting3DColorMaterial_Ptr);
   begin
      if this.m_IPrinting3DColorMaterial /= null then
         if this.m_IPrinting3DColorMaterial.all /= null then
            RefCount := this.m_IPrinting3DColorMaterial.all.Release;
            Free (this.m_IPrinting3DColorMaterial);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DColorMaterial

   function Constructor return Printing3DColorMaterial is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DColorMaterial");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DColorMaterial;
   begin
      return RetVal : Printing3DColorMaterial do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DColorMaterial := new Windows.Graphics.Printing3D.IPrinting3DColorMaterial;
            Retval.m_IPrinting3DColorMaterial.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DColorMaterial

   function get_Value
   (
      this : in out Printing3DColorMaterial
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DColorMaterial.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Value
   (
      this : in out Printing3DColorMaterial;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DColorMaterial.all.put_Value (value);
   end;

   function get_Color
   (
      this : in out Printing3DColorMaterial
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DColorMaterial2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DColorMaterial_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DColorMaterial2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DColorMaterial2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DColorMaterial.all);
      Hr := m_Interface.get_Color (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out Printing3DColorMaterial;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DColorMaterial2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DColorMaterial_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DColorMaterial2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DColorMaterial2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DColorMaterial.all);
      Hr := m_Interface.put_Color (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DColorMaterialGroup

   procedure Initialize (this : in out Printing3DColorMaterialGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DColorMaterialGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DColorMaterialGroup, IPrinting3DColorMaterialGroup_Ptr);
   begin
      if this.m_IPrinting3DColorMaterialGroup /= null then
         if this.m_IPrinting3DColorMaterialGroup.all /= null then
            RefCount := this.m_IPrinting3DColorMaterialGroup.all.Release;
            Free (this.m_IPrinting3DColorMaterialGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DColorMaterialGroup

   function Constructor
   (
      MaterialGroupId : WinRt.UInt32
   )
   return Printing3DColorMaterialGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DColorMaterialGroup");
      m_Factory    : access IPrinting3DColorMaterialGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DColorMaterialGroup;
   begin
      return RetVal : Printing3DColorMaterialGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPrinting3DColorMaterialGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (MaterialGroupId, m_ComRetVal'Access);
            Retval.m_IPrinting3DColorMaterialGroup := new Windows.Graphics.Printing3D.IPrinting3DColorMaterialGroup;
            Retval.m_IPrinting3DColorMaterialGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DColorMaterialGroup

   function get_Colors
   (
      this : in out Printing3DColorMaterialGroup
   )
   return IVector_IPrinting3DColorMaterial.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DColorMaterial.Kind;
   begin
      Hr := this.m_IPrinting3DColorMaterialGroup.all.get_Colors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DColorMaterial (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaterialGroupId
   (
      this : in out Printing3DColorMaterialGroup
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DColorMaterialGroup.all.get_MaterialGroupId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DComponent

   procedure Initialize (this : in out Printing3DComponent) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DComponent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DComponent, IPrinting3DComponent_Ptr);
   begin
      if this.m_IPrinting3DComponent /= null then
         if this.m_IPrinting3DComponent.all /= null then
            RefCount := this.m_IPrinting3DComponent.all.Release;
            Free (this.m_IPrinting3DComponent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DComponent

   function Constructor return Printing3DComponent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DComponent");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DComponent;
   begin
      return RetVal : Printing3DComponent do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DComponent := new Windows.Graphics.Printing3D.IPrinting3DComponent;
            Retval.m_IPrinting3DComponent.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DComponent

   function get_Mesh
   (
      this : in out Printing3DComponent
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DMesh'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DMesh;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DMesh do
         Hr := this.m_IPrinting3DComponent.all.get_Mesh (m_ComRetVal'Access);
         Retval.m_IPrinting3DMesh := new Windows.Graphics.Printing3D.IPrinting3DMesh;
         Retval.m_IPrinting3DMesh.all := m_ComRetVal;
      end return;
   end;

   procedure put_Mesh
   (
      this : in out Printing3DComponent;
      value : Windows.Graphics.Printing3D.Printing3DMesh'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DComponent.all.put_Mesh (value.m_IPrinting3DMesh.all);
   end;

   function get_Components
   (
      this : in out Printing3DComponent
   )
   return IVector_IPrinting3DComponentWithMatrix.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DComponentWithMatrix.Kind;
   begin
      Hr := this.m_IPrinting3DComponent.all.get_Components (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DComponentWithMatrix (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Thumbnail
   (
      this : in out Printing3DComponent
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DTextureResource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DTextureResource;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DTextureResource do
         Hr := this.m_IPrinting3DComponent.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_IPrinting3DTextureResource := new Windows.Graphics.Printing3D.IPrinting3DTextureResource;
         Retval.m_IPrinting3DTextureResource.all := m_ComRetVal;
      end return;
   end;

   procedure put_Thumbnail
   (
      this : in out Printing3DComponent;
      value : Windows.Graphics.Printing3D.Printing3DTextureResource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DComponent.all.put_Thumbnail (value.m_IPrinting3DTextureResource.all);
   end;

   function get_Type
   (
      this : in out Printing3DComponent
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DObjectType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DObjectType;
   begin
      Hr := this.m_IPrinting3DComponent.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Type
   (
      this : in out Printing3DComponent;
      value : Windows.Graphics.Printing3D.Printing3DObjectType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DComponent.all.put_Type (value);
   end;

   function get_Name
   (
      this : in out Printing3DComponent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrinting3DComponent.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out Printing3DComponent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPrinting3DComponent.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PartNumber
   (
      this : in out Printing3DComponent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrinting3DComponent.all.get_PartNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PartNumber
   (
      this : in out Printing3DComponent;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPrinting3DComponent.all.put_PartNumber (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DComponentWithMatrix

   procedure Initialize (this : in out Printing3DComponentWithMatrix) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DComponentWithMatrix) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DComponentWithMatrix, IPrinting3DComponentWithMatrix_Ptr);
   begin
      if this.m_IPrinting3DComponentWithMatrix /= null then
         if this.m_IPrinting3DComponentWithMatrix.all /= null then
            RefCount := this.m_IPrinting3DComponentWithMatrix.all.Release;
            Free (this.m_IPrinting3DComponentWithMatrix);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DComponentWithMatrix

   function Constructor return Printing3DComponentWithMatrix is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DComponentWithMatrix");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DComponentWithMatrix;
   begin
      return RetVal : Printing3DComponentWithMatrix do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DComponentWithMatrix := new Windows.Graphics.Printing3D.IPrinting3DComponentWithMatrix;
            Retval.m_IPrinting3DComponentWithMatrix.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DComponentWithMatrix

   function get_Component
   (
      this : in out Printing3DComponentWithMatrix
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DComponent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DComponent;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DComponent do
         Hr := this.m_IPrinting3DComponentWithMatrix.all.get_Component (m_ComRetVal'Access);
         Retval.m_IPrinting3DComponent := new Windows.Graphics.Printing3D.IPrinting3DComponent;
         Retval.m_IPrinting3DComponent.all := m_ComRetVal;
      end return;
   end;

   procedure put_Component
   (
      this : in out Printing3DComponentWithMatrix;
      value : Windows.Graphics.Printing3D.Printing3DComponent'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DComponentWithMatrix.all.put_Component (value.m_IPrinting3DComponent.all);
   end;

   function get_Matrix
   (
      this : in out Printing3DComponentWithMatrix
   )
   return WinRt.Windows.Foundation.Numerics.Matrix4x4 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix4x4;
   begin
      Hr := this.m_IPrinting3DComponentWithMatrix.all.get_Matrix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Matrix
   (
      this : in out Printing3DComponentWithMatrix;
      value : Windows.Foundation.Numerics.Matrix4x4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DComponentWithMatrix.all.put_Matrix (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DCompositeMaterial

   procedure Initialize (this : in out Printing3DCompositeMaterial) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DCompositeMaterial) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DCompositeMaterial, IPrinting3DCompositeMaterial_Ptr);
   begin
      if this.m_IPrinting3DCompositeMaterial /= null then
         if this.m_IPrinting3DCompositeMaterial.all /= null then
            RefCount := this.m_IPrinting3DCompositeMaterial.all.Release;
            Free (this.m_IPrinting3DCompositeMaterial);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DCompositeMaterial

   function Constructor return Printing3DCompositeMaterial is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DCompositeMaterial");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DCompositeMaterial;
   begin
      return RetVal : Printing3DCompositeMaterial do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DCompositeMaterial := new Windows.Graphics.Printing3D.IPrinting3DCompositeMaterial;
            Retval.m_IPrinting3DCompositeMaterial.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DCompositeMaterial

   function get_Values
   (
      this : in out Printing3DCompositeMaterial
   )
   return IVector_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_Double.Kind;
   begin
      Hr := this.m_IPrinting3DCompositeMaterial.all.get_Values (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DCompositeMaterialGroup

   procedure Initialize (this : in out Printing3DCompositeMaterialGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DCompositeMaterialGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DCompositeMaterialGroup, IPrinting3DCompositeMaterialGroup_Ptr);
   begin
      if this.m_IPrinting3DCompositeMaterialGroup /= null then
         if this.m_IPrinting3DCompositeMaterialGroup.all /= null then
            RefCount := this.m_IPrinting3DCompositeMaterialGroup.all.Release;
            Free (this.m_IPrinting3DCompositeMaterialGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DCompositeMaterialGroup

   function Constructor
   (
      MaterialGroupId : WinRt.UInt32
   )
   return Printing3DCompositeMaterialGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DCompositeMaterialGroup");
      m_Factory    : access IPrinting3DCompositeMaterialGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup;
   begin
      return RetVal : Printing3DCompositeMaterialGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPrinting3DCompositeMaterialGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (MaterialGroupId, m_ComRetVal'Access);
            Retval.m_IPrinting3DCompositeMaterialGroup := new Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup;
            Retval.m_IPrinting3DCompositeMaterialGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DCompositeMaterialGroup

   function get_Composites
   (
      this : in out Printing3DCompositeMaterialGroup
   )
   return IVector_IPrinting3DCompositeMaterial.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DCompositeMaterial.Kind;
   begin
      Hr := this.m_IPrinting3DCompositeMaterialGroup.all.get_Composites (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DCompositeMaterial (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaterialGroupId
   (
      this : in out Printing3DCompositeMaterialGroup
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DCompositeMaterialGroup.all.get_MaterialGroupId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaterialIndices
   (
      this : in out Printing3DCompositeMaterialGroup
   )
   return IVector_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_UInt32.Kind;
   begin
      Hr := this.m_IPrinting3DCompositeMaterialGroup.all.get_MaterialIndices (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BaseMaterialGroup
   (
      this : in out Printing3DCompositeMaterialGroup
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DBaseMaterialGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DBaseMaterialGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DCompositeMaterialGroup2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DBaseMaterialGroup do
         m_Interface := QInterface (this.m_IPrinting3DCompositeMaterialGroup.all);
         Hr := m_Interface.get_BaseMaterialGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPrinting3DBaseMaterialGroup := new Windows.Graphics.Printing3D.IPrinting3DBaseMaterialGroup;
         Retval.m_IPrinting3DBaseMaterialGroup.all := m_ComRetVal;
      end return;
   end;

   procedure put_BaseMaterialGroup
   (
      this : in out Printing3DCompositeMaterialGroup;
      value : Windows.Graphics.Printing3D.Printing3DBaseMaterialGroup'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DCompositeMaterialGroup2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DCompositeMaterialGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DCompositeMaterialGroup.all);
      Hr := m_Interface.put_BaseMaterialGroup (value.m_IPrinting3DBaseMaterialGroup.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DFaceReductionOptions

   procedure Initialize (this : in out Printing3DFaceReductionOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DFaceReductionOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DFaceReductionOptions, IPrinting3DFaceReductionOptions_Ptr);
   begin
      if this.m_IPrinting3DFaceReductionOptions /= null then
         if this.m_IPrinting3DFaceReductionOptions.all /= null then
            RefCount := this.m_IPrinting3DFaceReductionOptions.all.Release;
            Free (this.m_IPrinting3DFaceReductionOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DFaceReductionOptions

   function Constructor return Printing3DFaceReductionOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DFaceReductionOptions");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DFaceReductionOptions;
   begin
      return RetVal : Printing3DFaceReductionOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DFaceReductionOptions := new Windows.Graphics.Printing3D.IPrinting3DFaceReductionOptions;
            Retval.m_IPrinting3DFaceReductionOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DFaceReductionOptions

   function get_MaxReductionArea
   (
      this : in out Printing3DFaceReductionOptions
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPrinting3DFaceReductionOptions.all.get_MaxReductionArea (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxReductionArea
   (
      this : in out Printing3DFaceReductionOptions;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DFaceReductionOptions.all.put_MaxReductionArea (value);
   end;

   function get_TargetTriangleCount
   (
      this : in out Printing3DFaceReductionOptions
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DFaceReductionOptions.all.get_TargetTriangleCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TargetTriangleCount
   (
      this : in out Printing3DFaceReductionOptions;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DFaceReductionOptions.all.put_TargetTriangleCount (value);
   end;

   function get_MaxEdgeLength
   (
      this : in out Printing3DFaceReductionOptions
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPrinting3DFaceReductionOptions.all.get_MaxEdgeLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxEdgeLength
   (
      this : in out Printing3DFaceReductionOptions;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DFaceReductionOptions.all.put_MaxEdgeLength (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DMaterial

   procedure Initialize (this : in out Printing3DMaterial) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DMaterial) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DMaterial, IPrinting3DMaterial_Ptr);
   begin
      if this.m_IPrinting3DMaterial /= null then
         if this.m_IPrinting3DMaterial.all /= null then
            RefCount := this.m_IPrinting3DMaterial.all.Release;
            Free (this.m_IPrinting3DMaterial);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DMaterial

   function Constructor return Printing3DMaterial is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DMaterial");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DMaterial;
   begin
      return RetVal : Printing3DMaterial do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DMaterial := new Windows.Graphics.Printing3D.IPrinting3DMaterial;
            Retval.m_IPrinting3DMaterial.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DMaterial

   function get_BaseGroups
   (
      this : in out Printing3DMaterial
   )
   return IVector_IPrinting3DBaseMaterialGroup.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DBaseMaterialGroup.Kind;
   begin
      Hr := this.m_IPrinting3DMaterial.all.get_BaseGroups (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DBaseMaterialGroup (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ColorGroups
   (
      this : in out Printing3DMaterial
   )
   return IVector_IPrinting3DColorMaterialGroup.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DColorMaterialGroup.Kind;
   begin
      Hr := this.m_IPrinting3DMaterial.all.get_ColorGroups (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DColorMaterialGroup (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Texture2CoordGroups
   (
      this : in out Printing3DMaterial
   )
   return IVector_IPrinting3DTexture2CoordMaterialGroup.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DTexture2CoordMaterialGroup.Kind;
   begin
      Hr := this.m_IPrinting3DMaterial.all.get_Texture2CoordGroups (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DTexture2CoordMaterialGroup (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CompositeGroups
   (
      this : in out Printing3DMaterial
   )
   return IVector_IPrinting3DCompositeMaterialGroup.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DCompositeMaterialGroup.Kind;
   begin
      Hr := this.m_IPrinting3DMaterial.all.get_CompositeGroups (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DCompositeMaterialGroup (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MultiplePropertyGroups
   (
      this : in out Printing3DMaterial
   )
   return IVector_IPrinting3DMultiplePropertyMaterialGroup.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DMultiplePropertyMaterialGroup.Kind;
   begin
      Hr := this.m_IPrinting3DMaterial.all.get_MultiplePropertyGroups (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DMultiplePropertyMaterialGroup (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DMesh

   procedure Initialize (this : in out Printing3DMesh) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DMesh) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DMesh, IPrinting3DMesh_Ptr);
   begin
      if this.m_IPrinting3DMesh /= null then
         if this.m_IPrinting3DMesh.all /= null then
            RefCount := this.m_IPrinting3DMesh.all.Release;
            Free (this.m_IPrinting3DMesh);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DMesh

   function Constructor return Printing3DMesh is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DMesh");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DMesh;
   begin
      return RetVal : Printing3DMesh do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DMesh := new Windows.Graphics.Printing3D.IPrinting3DMesh;
            Retval.m_IPrinting3DMesh.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DMesh

   function get_VertexCount
   (
      this : in out Printing3DMesh
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_VertexCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VertexCount
   (
      this : in out Printing3DMesh;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.put_VertexCount (value);
   end;

   function get_IndexCount
   (
      this : in out Printing3DMesh
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_IndexCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IndexCount
   (
      this : in out Printing3DMesh;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.put_IndexCount (value);
   end;

   function get_VertexPositionsDescription
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DBufferDescription is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DBufferDescription;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_VertexPositionsDescription (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VertexPositionsDescription
   (
      this : in out Printing3DMesh;
      value : Windows.Graphics.Printing3D.Printing3DBufferDescription
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.put_VertexPositionsDescription (value);
   end;

   function get_VertexNormalsDescription
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DBufferDescription is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DBufferDescription;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_VertexNormalsDescription (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VertexNormalsDescription
   (
      this : in out Printing3DMesh;
      value : Windows.Graphics.Printing3D.Printing3DBufferDescription
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.put_VertexNormalsDescription (value);
   end;

   function get_TriangleIndicesDescription
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DBufferDescription is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DBufferDescription;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_TriangleIndicesDescription (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TriangleIndicesDescription
   (
      this : in out Printing3DMesh;
      value : Windows.Graphics.Printing3D.Printing3DBufferDescription
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.put_TriangleIndicesDescription (value);
   end;

   function get_TriangleMaterialIndicesDescription
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DBufferDescription is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DBufferDescription;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_TriangleMaterialIndicesDescription (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TriangleMaterialIndicesDescription
   (
      this : in out Printing3DMesh;
      value : Windows.Graphics.Printing3D.Printing3DBufferDescription
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.put_TriangleMaterialIndicesDescription (value);
   end;

   function GetVertexPositions
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IPrinting3DMesh.all.GetVertexPositions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure CreateVertexPositions
   (
      this : in out Printing3DMesh;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.CreateVertexPositions (value);
   end;

   function GetVertexNormals
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IPrinting3DMesh.all.GetVertexNormals (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure CreateVertexNormals
   (
      this : in out Printing3DMesh;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.CreateVertexNormals (value);
   end;

   function GetTriangleIndices
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IPrinting3DMesh.all.GetTriangleIndices (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure CreateTriangleIndices
   (
      this : in out Printing3DMesh;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.CreateTriangleIndices (value);
   end;

   function GetTriangleMaterialIndices
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IPrinting3DMesh.all.GetTriangleMaterialIndices (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure CreateTriangleMaterialIndices
   (
      this : in out Printing3DMesh;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DMesh.all.CreateTriangleMaterialIndices (value);
   end;

   function get_BufferDescriptionSet
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_BufferDescriptionSet (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BufferSet
   (
      this : in out Printing3DMesh
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IPrinting3DMesh.all.get_BufferSet (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function VerifyAsync
   (
      this : in out Printing3DMesh;
      value : Windows.Graphics.Printing3D.Printing3DMeshVerificationMode
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DMeshVerificationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Printing3DMeshVerificationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Printing3DMeshVerificationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Graphics.Printing3D.IPrinting3DMeshVerificationResult;
      m_IID            : aliased WinRt.IID := (262059716, 6645, 23529, (154, 219, 100, 242, 74, 241, 21, 216 )); -- Windows.Graphics.Printing3D.Printing3DMeshVerificationResult;
      m_HandlerIID     : aliased WinRt.IID := (409710103, 22678, 22238, (191, 244, 79, 23, 107, 62, 97, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_Printing3DMeshVerificationResult.Kind := new AsyncOperationCompletedHandler_Printing3DMeshVerificationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Printing3DMeshVerificationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Printing3DMeshVerificationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Printing3DMeshVerificationResult.Kind_Delegate, AsyncOperationCompletedHandler_Printing3DMeshVerificationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DMeshVerificationResult do
         Hr := this.m_IPrinting3DMesh.all.VerifyAsync (value, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPrinting3DMeshVerificationResult := new Windows.Graphics.Printing3D.IPrinting3DMeshVerificationResult;
                  Retval.m_IPrinting3DMeshVerificationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DMeshVerificationResult

   procedure Initialize (this : in out Printing3DMeshVerificationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DMeshVerificationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DMeshVerificationResult, IPrinting3DMeshVerificationResult_Ptr);
   begin
      if this.m_IPrinting3DMeshVerificationResult /= null then
         if this.m_IPrinting3DMeshVerificationResult.all /= null then
            RefCount := this.m_IPrinting3DMeshVerificationResult.all.Release;
            Free (this.m_IPrinting3DMeshVerificationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DMeshVerificationResult

   function get_IsValid
   (
      this : in out Printing3DMeshVerificationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPrinting3DMeshVerificationResult.all.get_IsValid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NonmanifoldTriangles
   (
      this : in out Printing3DMeshVerificationResult
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IPrinting3DMeshVerificationResult.all.get_NonmanifoldTriangles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ReversedNormalTriangles
   (
      this : in out Printing3DMeshVerificationResult
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IPrinting3DMeshVerificationResult.all.get_ReversedNormalTriangles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DModel

   procedure Initialize (this : in out Printing3DModel) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DModel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DModel, IPrinting3DModel_Ptr);
   begin
      if this.m_IPrinting3DModel /= null then
         if this.m_IPrinting3DModel.all /= null then
            RefCount := this.m_IPrinting3DModel.all.Release;
            Free (this.m_IPrinting3DModel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DModel

   function Constructor return Printing3DModel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DModel");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DModel;
   begin
      return RetVal : Printing3DModel do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DModel := new Windows.Graphics.Printing3D.IPrinting3DModel;
            Retval.m_IPrinting3DModel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DModel

   function get_Unit
   (
      this : in out Printing3DModel
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DModelUnit is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DModelUnit;
   begin
      Hr := this.m_IPrinting3DModel.all.get_Unit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Unit
   (
      this : in out Printing3DModel;
      value : Windows.Graphics.Printing3D.Printing3DModelUnit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DModel.all.put_Unit (value);
   end;

   function get_Textures
   (
      this : in out Printing3DModel
   )
   return IVector_IPrinting3DModelTexture.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DModelTexture.Kind;
   begin
      Hr := this.m_IPrinting3DModel.all.get_Textures (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DModelTexture (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Meshes
   (
      this : in out Printing3DModel
   )
   return IVector_IPrinting3DMesh.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DMesh.Kind;
   begin
      Hr := this.m_IPrinting3DModel.all.get_Meshes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DMesh (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Components
   (
      this : in out Printing3DModel
   )
   return IVector_IPrinting3DComponent.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DComponent.Kind;
   begin
      Hr := this.m_IPrinting3DModel.all.get_Components (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DComponent (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Material
   (
      this : in out Printing3DModel
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DMaterial'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DMaterial;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DMaterial do
         Hr := this.m_IPrinting3DModel.all.get_Material (m_ComRetVal'Access);
         Retval.m_IPrinting3DMaterial := new Windows.Graphics.Printing3D.IPrinting3DMaterial;
         Retval.m_IPrinting3DMaterial.all := m_ComRetVal;
      end return;
   end;

   procedure put_Material
   (
      this : in out Printing3DModel;
      value : Windows.Graphics.Printing3D.Printing3DMaterial'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DModel.all.put_Material (value.m_IPrinting3DMaterial.all);
   end;

   function get_Build
   (
      this : in out Printing3DModel
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DComponent'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DComponent;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DComponent do
         Hr := this.m_IPrinting3DModel.all.get_Build (m_ComRetVal'Access);
         Retval.m_IPrinting3DComponent := new Windows.Graphics.Printing3D.IPrinting3DComponent;
         Retval.m_IPrinting3DComponent.all := m_ComRetVal;
      end return;
   end;

   procedure put_Build
   (
      this : in out Printing3DModel;
      value : Windows.Graphics.Printing3D.Printing3DComponent'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DModel.all.put_Build (value.m_IPrinting3DComponent.all);
   end;

   function get_Version
   (
      this : in out Printing3DModel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrinting3DModel.all.get_Version (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Version
   (
      this : in out Printing3DModel;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPrinting3DModel.all.put_Version (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RequiredExtensions
   (
      this : in out Printing3DModel
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IPrinting3DModel.all.get_RequiredExtensions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Metadata
   (
      this : in out Printing3DModel
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IPrinting3DModel.all.get_Metadata (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure RepairAsync
   (
      this : in out Printing3DModel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPrinting3DModel.all.RepairAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function Clone
   (
      this : in out Printing3DModel
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DModel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DModel;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DModel do
         Hr := this.m_IPrinting3DModel.all.Clone (m_ComRetVal'Access);
         Retval.m_IPrinting3DModel := new Windows.Graphics.Printing3D.IPrinting3DModel;
         Retval.m_IPrinting3DModel.all := m_ComRetVal;
      end return;
   end;

   function TryPartialRepairAsync
   (
      this : in out Printing3DModel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DModel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DModel.all);
      Hr := m_Interface.TryPartialRepairAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryPartialRepairAsync
   (
      this : in out Printing3DModel;
      maxWaitTime : Windows.Foundation.TimeSpan
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DModel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DModel.all);
      Hr := m_Interface.TryPartialRepairAsync (maxWaitTime, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryReduceFacesAsync
   (
      this : in out Printing3DModel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (2944875622, 11760, 23189, (171, 84, 37, 99, 77, 163, 255, 169 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (247805019, 45946, 23765, (131, 215, 149, 144, 205, 244, 69, 181 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DModel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DModel.all);
      Hr := m_Interface.TryReduceFacesAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryReduceFacesAsync
   (
      this : in out Printing3DModel;
      printing3DFaceReductionOptions_p : Windows.Graphics.Printing3D.Printing3DFaceReductionOptions'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (2944875622, 11760, 23189, (171, 84, 37, 99, 77, 163, 255, 169 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (247805019, 45946, 23765, (131, 215, 149, 144, 205, 244, 69, 181 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DModel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DModel.all);
      Hr := m_Interface.TryReduceFacesAsync (printing3DFaceReductionOptions_p.m_IPrinting3DFaceReductionOptions.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryReduceFacesAsync
   (
      this : in out Printing3DModel;
      printing3DFaceReductionOptions_p : Windows.Graphics.Printing3D.Printing3DFaceReductionOptions'Class;
      maxWait : Windows.Foundation.TimeSpan
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (2944875622, 11760, 23189, (171, 84, 37, 99, 77, 163, 255, 169 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (247805019, 45946, 23765, (131, 215, 149, 144, 205, 244, 69, 181 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DModel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DModel.all);
      Hr := m_Interface.TryReduceFacesAsync (printing3DFaceReductionOptions_p.m_IPrinting3DFaceReductionOptions.all, maxWait, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RepairWithProgressAsync
   (
      this : in out Printing3DModel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (2944875622, 11760, 23189, (171, 84, 37, 99, 77, 163, 255, 169 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (247805019, 45946, 23765, (131, 215, 149, 144, 205, 244, 69, 181 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DModel_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DModel2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DModel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DModel.all);
      Hr := m_Interface.RepairWithProgressAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DModelTexture

   procedure Initialize (this : in out Printing3DModelTexture) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DModelTexture) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DModelTexture, IPrinting3DModelTexture_Ptr);
   begin
      if this.m_IPrinting3DModelTexture /= null then
         if this.m_IPrinting3DModelTexture.all /= null then
            RefCount := this.m_IPrinting3DModelTexture.all.Release;
            Free (this.m_IPrinting3DModelTexture);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DModelTexture

   function Constructor return Printing3DModelTexture is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DModelTexture");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DModelTexture;
   begin
      return RetVal : Printing3DModelTexture do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DModelTexture := new Windows.Graphics.Printing3D.IPrinting3DModelTexture;
            Retval.m_IPrinting3DModelTexture.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DModelTexture

   function get_TextureResource
   (
      this : in out Printing3DModelTexture
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DTextureResource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DTextureResource;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DTextureResource do
         Hr := this.m_IPrinting3DModelTexture.all.get_TextureResource (m_ComRetVal'Access);
         Retval.m_IPrinting3DTextureResource := new Windows.Graphics.Printing3D.IPrinting3DTextureResource;
         Retval.m_IPrinting3DTextureResource.all := m_ComRetVal;
      end return;
   end;

   procedure put_TextureResource
   (
      this : in out Printing3DModelTexture;
      value : Windows.Graphics.Printing3D.Printing3DTextureResource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DModelTexture.all.put_TextureResource (value.m_IPrinting3DTextureResource.all);
   end;

   function get_TileStyleU
   (
      this : in out Printing3DModelTexture
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DTextureEdgeBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DTextureEdgeBehavior;
   begin
      Hr := this.m_IPrinting3DModelTexture.all.get_TileStyleU (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TileStyleU
   (
      this : in out Printing3DModelTexture;
      value : Windows.Graphics.Printing3D.Printing3DTextureEdgeBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DModelTexture.all.put_TileStyleU (value);
   end;

   function get_TileStyleV
   (
      this : in out Printing3DModelTexture
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DTextureEdgeBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.Printing3DTextureEdgeBehavior;
   begin
      Hr := this.m_IPrinting3DModelTexture.all.get_TileStyleV (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TileStyleV
   (
      this : in out Printing3DModelTexture;
      value : Windows.Graphics.Printing3D.Printing3DTextureEdgeBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DModelTexture.all.put_TileStyleV (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DMultiplePropertyMaterial

   procedure Initialize (this : in out Printing3DMultiplePropertyMaterial) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DMultiplePropertyMaterial) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DMultiplePropertyMaterial, IPrinting3DMultiplePropertyMaterial_Ptr);
   begin
      if this.m_IPrinting3DMultiplePropertyMaterial /= null then
         if this.m_IPrinting3DMultiplePropertyMaterial.all /= null then
            RefCount := this.m_IPrinting3DMultiplePropertyMaterial.all.Release;
            Free (this.m_IPrinting3DMultiplePropertyMaterial);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DMultiplePropertyMaterial

   function Constructor return Printing3DMultiplePropertyMaterial is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DMultiplePropertyMaterial");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DMultiplePropertyMaterial;
   begin
      return RetVal : Printing3DMultiplePropertyMaterial do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DMultiplePropertyMaterial := new Windows.Graphics.Printing3D.IPrinting3DMultiplePropertyMaterial;
            Retval.m_IPrinting3DMultiplePropertyMaterial.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DMultiplePropertyMaterial

   function get_MaterialIndices
   (
      this : in out Printing3DMultiplePropertyMaterial
   )
   return IVector_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_UInt32.Kind;
   begin
      Hr := this.m_IPrinting3DMultiplePropertyMaterial.all.get_MaterialIndices (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DMultiplePropertyMaterialGroup

   procedure Initialize (this : in out Printing3DMultiplePropertyMaterialGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DMultiplePropertyMaterialGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DMultiplePropertyMaterialGroup, IPrinting3DMultiplePropertyMaterialGroup_Ptr);
   begin
      if this.m_IPrinting3DMultiplePropertyMaterialGroup /= null then
         if this.m_IPrinting3DMultiplePropertyMaterialGroup.all /= null then
            RefCount := this.m_IPrinting3DMultiplePropertyMaterialGroup.all.Release;
            Free (this.m_IPrinting3DMultiplePropertyMaterialGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DMultiplePropertyMaterialGroup

   function Constructor
   (
      MaterialGroupId : WinRt.UInt32
   )
   return Printing3DMultiplePropertyMaterialGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DMultiplePropertyMaterialGroup");
      m_Factory    : access IPrinting3DMultiplePropertyMaterialGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DMultiplePropertyMaterialGroup;
   begin
      return RetVal : Printing3DMultiplePropertyMaterialGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPrinting3DMultiplePropertyMaterialGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (MaterialGroupId, m_ComRetVal'Access);
            Retval.m_IPrinting3DMultiplePropertyMaterialGroup := new Windows.Graphics.Printing3D.IPrinting3DMultiplePropertyMaterialGroup;
            Retval.m_IPrinting3DMultiplePropertyMaterialGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DMultiplePropertyMaterialGroup

   function get_MultipleProperties
   (
      this : in out Printing3DMultiplePropertyMaterialGroup
   )
   return IVector_IPrinting3DMultiplePropertyMaterial.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DMultiplePropertyMaterial.Kind;
   begin
      Hr := this.m_IPrinting3DMultiplePropertyMaterialGroup.all.get_MultipleProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DMultiplePropertyMaterial (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaterialGroupIndices
   (
      this : in out Printing3DMultiplePropertyMaterialGroup
   )
   return IVector_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_UInt32.Kind;
   begin
      Hr := this.m_IPrinting3DMultiplePropertyMaterialGroup.all.get_MaterialGroupIndices (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaterialGroupId
   (
      this : in out Printing3DMultiplePropertyMaterialGroup
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DMultiplePropertyMaterialGroup.all.get_MaterialGroupId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DTexture2CoordMaterial

   procedure Initialize (this : in out Printing3DTexture2CoordMaterial) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DTexture2CoordMaterial) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DTexture2CoordMaterial, IPrinting3DTexture2CoordMaterial_Ptr);
   begin
      if this.m_IPrinting3DTexture2CoordMaterial /= null then
         if this.m_IPrinting3DTexture2CoordMaterial.all /= null then
            RefCount := this.m_IPrinting3DTexture2CoordMaterial.all.Release;
            Free (this.m_IPrinting3DTexture2CoordMaterial);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DTexture2CoordMaterial

   function Constructor return Printing3DTexture2CoordMaterial is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DTexture2CoordMaterial");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterial;
   begin
      return RetVal : Printing3DTexture2CoordMaterial do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DTexture2CoordMaterial := new Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterial;
            Retval.m_IPrinting3DTexture2CoordMaterial.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DTexture2CoordMaterial

   function get_Texture
   (
      this : in out Printing3DTexture2CoordMaterial
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DModelTexture'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DModelTexture;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DModelTexture do
         Hr := this.m_IPrinting3DTexture2CoordMaterial.all.get_Texture (m_ComRetVal'Access);
         Retval.m_IPrinting3DModelTexture := new Windows.Graphics.Printing3D.IPrinting3DModelTexture;
         Retval.m_IPrinting3DModelTexture.all := m_ComRetVal;
      end return;
   end;

   procedure put_Texture
   (
      this : in out Printing3DTexture2CoordMaterial;
      value : Windows.Graphics.Printing3D.Printing3DModelTexture'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DTexture2CoordMaterial.all.put_Texture (value.m_IPrinting3DModelTexture.all);
   end;

   function get_U
   (
      this : in out Printing3DTexture2CoordMaterial
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPrinting3DTexture2CoordMaterial.all.get_U (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_U
   (
      this : in out Printing3DTexture2CoordMaterial;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DTexture2CoordMaterial.all.put_U (value);
   end;

   function get_V
   (
      this : in out Printing3DTexture2CoordMaterial
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPrinting3DTexture2CoordMaterial.all.get_V (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_V
   (
      this : in out Printing3DTexture2CoordMaterial;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DTexture2CoordMaterial.all.put_V (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DTexture2CoordMaterialGroup

   procedure Initialize (this : in out Printing3DTexture2CoordMaterialGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DTexture2CoordMaterialGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DTexture2CoordMaterialGroup, IPrinting3DTexture2CoordMaterialGroup_Ptr);
   begin
      if this.m_IPrinting3DTexture2CoordMaterialGroup /= null then
         if this.m_IPrinting3DTexture2CoordMaterialGroup.all /= null then
            RefCount := this.m_IPrinting3DTexture2CoordMaterialGroup.all.Release;
            Free (this.m_IPrinting3DTexture2CoordMaterialGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DTexture2CoordMaterialGroup

   function Constructor
   (
      MaterialGroupId : WinRt.UInt32
   )
   return Printing3DTexture2CoordMaterialGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DTexture2CoordMaterialGroup");
      m_Factory    : access IPrinting3DTexture2CoordMaterialGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup;
   begin
      return RetVal : Printing3DTexture2CoordMaterialGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IPrinting3DTexture2CoordMaterialGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (MaterialGroupId, m_ComRetVal'Access);
            Retval.m_IPrinting3DTexture2CoordMaterialGroup := new Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup;
            Retval.m_IPrinting3DTexture2CoordMaterialGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DTexture2CoordMaterialGroup

   function get_Texture2Coords
   (
      this : in out Printing3DTexture2CoordMaterialGroup
   )
   return IVector_IPrinting3DTexture2CoordMaterial.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IPrinting3DTexture2CoordMaterial.Kind;
   begin
      Hr := this.m_IPrinting3DTexture2CoordMaterialGroup.all.get_Texture2Coords (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IPrinting3DTexture2CoordMaterial (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaterialGroupId
   (
      this : in out Printing3DTexture2CoordMaterialGroup
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPrinting3DTexture2CoordMaterialGroup.all.get_MaterialGroupId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Texture
   (
      this : in out Printing3DTexture2CoordMaterialGroup
   )
   return WinRt.Windows.Graphics.Printing3D.Printing3DModelTexture'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing3D.IPrinting3DModelTexture;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DTexture2CoordMaterialGroup2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Printing3D.Printing3DModelTexture do
         m_Interface := QInterface (this.m_IPrinting3DTexture2CoordMaterialGroup.all);
         Hr := m_Interface.get_Texture (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPrinting3DModelTexture := new Windows.Graphics.Printing3D.IPrinting3DModelTexture;
         Retval.m_IPrinting3DModelTexture.all := m_ComRetVal;
      end return;
   end;

   procedure put_Texture
   (
      this : in out Printing3DTexture2CoordMaterialGroup;
      value : Windows.Graphics.Printing3D.Printing3DModelTexture'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup_Interface, WinRt.Windows.Graphics.Printing3D.IPrinting3DTexture2CoordMaterialGroup2, WinRt.Windows.Graphics.Printing3D.IID_IPrinting3DTexture2CoordMaterialGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPrinting3DTexture2CoordMaterialGroup.all);
      Hr := m_Interface.put_Texture (value.m_IPrinting3DModelTexture.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Printing3DTextureResource

   procedure Initialize (this : in out Printing3DTextureResource) is
   begin
      null;
   end;

   procedure Finalize (this : in out Printing3DTextureResource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrinting3DTextureResource, IPrinting3DTextureResource_Ptr);
   begin
      if this.m_IPrinting3DTextureResource /= null then
         if this.m_IPrinting3DTextureResource.all /= null then
            RefCount := this.m_IPrinting3DTextureResource.all.Release;
            Free (this.m_IPrinting3DTextureResource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Printing3DTextureResource

   function Constructor return Printing3DTextureResource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Graphics.Printing3D.Printing3DTextureResource");
      m_ComRetVal  : aliased Windows.Graphics.Printing3D.IPrinting3DTextureResource;
   begin
      return RetVal : Printing3DTextureResource do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPrinting3DTextureResource := new Windows.Graphics.Printing3D.IPrinting3DTextureResource;
            Retval.m_IPrinting3DTextureResource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Printing3DTextureResource

   function get_TextureData
   (
      this : in out Printing3DTextureResource
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      Hr := this.m_IPrinting3DTextureResource.all.get_TextureData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TextureData
   (
      this : in out Printing3DTextureResource;
      value : Windows.Storage.Streams.IRandomAccessStreamWithContentType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrinting3DTextureResource.all.put_TextureData (value);
   end;

   function get_Name
   (
      this : in out Printing3DTextureResource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPrinting3DTextureResource.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out Printing3DTextureResource;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPrinting3DTextureResource.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

end;

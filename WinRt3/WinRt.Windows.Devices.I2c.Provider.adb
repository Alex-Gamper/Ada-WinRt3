--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.I2c.Provider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProviderI2cConnectionSettings

   procedure Initialize (this : in out ProviderI2cConnectionSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProviderI2cConnectionSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProviderI2cConnectionSettings, IProviderI2cConnectionSettings_Ptr);
   begin
      if this.m_IProviderI2cConnectionSettings /= null then
         if this.m_IProviderI2cConnectionSettings.all /= null then
            RefCount := this.m_IProviderI2cConnectionSettings.all.Release;
            Free (this.m_IProviderI2cConnectionSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProviderI2cConnectionSettings

   function get_SlaveAddress
   (
      this : in out ProviderI2cConnectionSettings
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IProviderI2cConnectionSettings.all.get_SlaveAddress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SlaveAddress
   (
      this : in out ProviderI2cConnectionSettings;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProviderI2cConnectionSettings.all.put_SlaveAddress (value);
   end;

   function get_BusSpeed
   (
      this : in out ProviderI2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.Provider.ProviderI2cBusSpeed is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.Provider.ProviderI2cBusSpeed;
   begin
      Hr := this.m_IProviderI2cConnectionSettings.all.get_BusSpeed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BusSpeed
   (
      this : in out ProviderI2cConnectionSettings;
      value : Windows.Devices.I2c.Provider.ProviderI2cBusSpeed
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProviderI2cConnectionSettings.all.put_BusSpeed (value);
   end;

   function get_SharingMode
   (
      this : in out ProviderI2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.Provider.ProviderI2cSharingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.I2c.Provider.ProviderI2cSharingMode;
   begin
      Hr := this.m_IProviderI2cConnectionSettings.all.get_SharingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SharingMode
   (
      this : in out ProviderI2cConnectionSettings;
      value : Windows.Devices.I2c.Provider.ProviderI2cSharingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProviderI2cConnectionSettings.all.put_SharingMode (value);
   end;

end;

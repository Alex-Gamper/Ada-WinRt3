--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Chat is

   package IAsyncOperation_ChatCapabilities is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Chat.IChatCapabilities);
   package AsyncOperationCompletedHandler_ChatCapabilities is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Chat.IChatCapabilities);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_ChatSyncManager is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Chat.IChatSyncManager);
   package AsyncOperationCompletedHandler_ChatSyncManager is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Chat.IChatSyncManager);

   package IAsyncOperation_ChatMessageStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore);
   package AsyncOperationCompletedHandler_ChatMessageStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_ChatMessageTransport is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport);
   package AsyncOperationCompletedHandler_ChatMessageTransport is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport);

   package IAsyncOperation_ChatMessage is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Chat.IChatMessage);
   package AsyncOperationCompletedHandler_ChatMessage is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Chat.IChatMessage);

   package IAsyncOperation_ChatConversation is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Chat.IChatConversation);
   package AsyncOperationCompletedHandler_ChatConversation is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Chat.IChatConversation);

   package IAsyncOperation_Int32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Int32);
   package AsyncOperationCompletedHandler_Int32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Int32);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_RcsTransport is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Chat.IRcsTransport);
   package AsyncOperationCompletedHandler_RcsTransport is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Chat.IRcsTransport);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatCapabilities

   procedure Initialize (this : in out ChatCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatCapabilities, IChatCapabilities_Ptr);
   begin
      if this.m_IChatCapabilities /= null then
         if this.m_IChatCapabilities.all /= null then
            RefCount := this.m_IChatCapabilities.all.Release;
            Free (this.m_IChatCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatCapabilities

   function get_IsOnline
   (
      this : in out ChatCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatCapabilities.all.get_IsOnline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsChatCapable
   (
      this : in out ChatCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatCapabilities.all.get_IsChatCapable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsFileTransferCapable
   (
      this : in out ChatCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatCapabilities.all.get_IsFileTransferCapable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsGeoLocationPushCapable
   (
      this : in out ChatCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatCapabilities.all.get_IsGeoLocationPushCapable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsIntegratedMessagingCapable
   (
      this : in out ChatCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatCapabilities.all.get_IsIntegratedMessagingCapable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ChatCapabilitiesManager is

      function GetCachedCapabilitiesAsync
      (
         address_x : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Chat.ChatCapabilities is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatCapabilitiesManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatCapabilitiesManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_address_x : WinRt.HString := To_HString (address_x);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ChatCapabilities.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ChatCapabilities.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatCapabilities;
         m_IID            : aliased WinRt.IID := (814256181, 50823, 22331, (134, 228, 2, 78, 56, 242, 170, 109 )); -- Windows.ApplicationModel.Chat.ChatCapabilities;
         m_HandlerIID     : aliased WinRt.IID := (3459056476, 30342, 22205, (162, 202, 25, 71, 53, 253, 134, 23 ));
         m_Handler        : AsyncOperationCompletedHandler_ChatCapabilities.Kind := new AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatCapabilities.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatCapabilities.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate, AsyncOperationCompletedHandler_ChatCapabilities.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatCapabilities do
            Hr := RoGetActivationFactory (m_hString, IID_IChatCapabilitiesManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCachedCapabilitiesAsync (HStr_address_x, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IChatCapabilities := new Windows.ApplicationModel.Chat.IChatCapabilities;
                        Retval.m_IChatCapabilities.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_address_x);
         end return;
      end;

      function GetCapabilitiesFromNetworkAsync
      (
         address_x : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Chat.ChatCapabilities is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatCapabilitiesManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatCapabilitiesManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_address_x : WinRt.HString := To_HString (address_x);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ChatCapabilities.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ChatCapabilities.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatCapabilities;
         m_IID            : aliased WinRt.IID := (814256181, 50823, 22331, (134, 228, 2, 78, 56, 242, 170, 109 )); -- Windows.ApplicationModel.Chat.ChatCapabilities;
         m_HandlerIID     : aliased WinRt.IID := (3459056476, 30342, 22205, (162, 202, 25, 71, 53, 253, 134, 23 ));
         m_Handler        : AsyncOperationCompletedHandler_ChatCapabilities.Kind := new AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatCapabilities.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatCapabilities.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate, AsyncOperationCompletedHandler_ChatCapabilities.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatCapabilities do
            Hr := RoGetActivationFactory (m_hString, IID_IChatCapabilitiesManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCapabilitiesFromNetworkAsync (HStr_address_x, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IChatCapabilities := new Windows.ApplicationModel.Chat.IChatCapabilities;
                        Retval.m_IChatCapabilities.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_address_x);
         end return;
      end;

      function GetCachedCapabilitiesAsync
      (
         address_x : WinRt.WString;
         transportId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Chat.ChatCapabilities is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatCapabilitiesManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatCapabilitiesManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_address_x : WinRt.HString := To_HString (address_x);
         HStr_transportId : WinRt.HString := To_HString (transportId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ChatCapabilities.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ChatCapabilities.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatCapabilities;
         m_IID            : aliased WinRt.IID := (814256181, 50823, 22331, (134, 228, 2, 78, 56, 242, 170, 109 )); -- Windows.ApplicationModel.Chat.ChatCapabilities;
         m_HandlerIID     : aliased WinRt.IID := (3459056476, 30342, 22205, (162, 202, 25, 71, 53, 253, 134, 23 ));
         m_Handler        : AsyncOperationCompletedHandler_ChatCapabilities.Kind := new AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatCapabilities.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatCapabilities.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate, AsyncOperationCompletedHandler_ChatCapabilities.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatCapabilities do
            Hr := RoGetActivationFactory (m_hString, IID_IChatCapabilitiesManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCachedCapabilitiesAsync (HStr_address_x, HStr_transportId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IChatCapabilities := new Windows.ApplicationModel.Chat.IChatCapabilities;
                        Retval.m_IChatCapabilities.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_address_x);
            Hr := WindowsDeleteString (HStr_transportId);
         end return;
      end;

      function GetCapabilitiesFromNetworkAsync
      (
         address_x : WinRt.WString;
         transportId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Chat.ChatCapabilities is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatCapabilitiesManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatCapabilitiesManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_address_x : WinRt.HString := To_HString (address_x);
         HStr_transportId : WinRt.HString := To_HString (transportId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ChatCapabilities.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ChatCapabilities.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatCapabilities;
         m_IID            : aliased WinRt.IID := (814256181, 50823, 22331, (134, 228, 2, 78, 56, 242, 170, 109 )); -- Windows.ApplicationModel.Chat.ChatCapabilities;
         m_HandlerIID     : aliased WinRt.IID := (3459056476, 30342, 22205, (162, 202, 25, 71, 53, 253, 134, 23 ));
         m_Handler        : AsyncOperationCompletedHandler_ChatCapabilities.Kind := new AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatCapabilities.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatCapabilities.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatCapabilities.Kind_Delegate, AsyncOperationCompletedHandler_ChatCapabilities.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatCapabilities do
            Hr := RoGetActivationFactory (m_hString, IID_IChatCapabilitiesManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCapabilitiesFromNetworkAsync (HStr_address_x, HStr_transportId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IChatCapabilities := new Windows.ApplicationModel.Chat.IChatCapabilities;
                        Retval.m_IChatCapabilities.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_address_x);
            Hr := WindowsDeleteString (HStr_transportId);
         end return;
      end;

   end ChatCapabilitiesManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatConversation

   procedure Initialize (this : in out ChatConversation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatConversation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatConversation, IChatConversation_Ptr);
   begin
      if this.m_IChatConversation /= null then
         if this.m_IChatConversation.all /= null then
            RefCount := this.m_IChatConversation.all.Release;
            Free (this.m_IChatConversation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatConversation

   function get_HasUnreadMessages
   (
      this : in out ChatConversation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatConversation.all.get_HasUnreadMessages (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out ChatConversation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatConversation.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Subject
   (
      this : in out ChatConversation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatConversation.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subject
   (
      this : in out ChatConversation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatConversation.all.put_Subject (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsConversationMuted
   (
      this : in out ChatConversation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatConversation.all.get_IsConversationMuted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsConversationMuted
   (
      this : in out ChatConversation;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatConversation.all.put_IsConversationMuted (value);
   end;

   function get_MostRecentMessageId
   (
      this : in out ChatConversation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatConversation.all.get_MostRecentMessageId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Participants
   (
      this : in out ChatConversation
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IChatConversation.all.get_Participants (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ThreadingInfo
   (
      this : in out ChatConversation
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversationThreadingInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatConversationThreadingInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatConversationThreadingInfo do
         Hr := this.m_IChatConversation.all.get_ThreadingInfo (m_ComRetVal'Access);
         Retval.m_IChatConversationThreadingInfo := new Windows.ApplicationModel.Chat.IChatConversationThreadingInfo;
         Retval.m_IChatConversationThreadingInfo.all := m_ComRetVal;
      end return;
   end;

   procedure DeleteAsync
   (
      this : in out ChatConversation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatConversation.all.DeleteAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetMessageReader
   (
      this : in out ChatConversation
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageReader do
         Hr := this.m_IChatConversation.all.GetMessageReader (m_ComRetVal'Access);
         Retval.m_IChatMessageReader := new Windows.ApplicationModel.Chat.IChatMessageReader;
         Retval.m_IChatMessageReader.all := m_ComRetVal;
      end return;
   end;

   procedure MarkMessagesAsReadAsync
   (
      this : in out ChatConversation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatConversation.all.MarkMessagesAsReadAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure MarkMessagesAsReadAsync
   (
      this : in out ChatConversation;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatConversation.all.MarkMessagesAsReadAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SaveAsync
   (
      this : in out ChatConversation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatConversation.all.SaveAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure NotifyLocalParticipantComposing
   (
      this : in out ChatConversation;
      transportId : WinRt.WString;
      participantAddress : WinRt.WString;
      isComposing : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_transportId : WinRt.HString := To_HString (transportId);
      HStr_participantAddress : WinRt.HString := To_HString (participantAddress);
   begin
      Hr := this.m_IChatConversation.all.NotifyLocalParticipantComposing (HStr_transportId, HStr_participantAddress, isComposing);
      Hr := WindowsDeleteString (HStr_transportId);
      Hr := WindowsDeleteString (HStr_participantAddress);
   end;

   procedure NotifyRemoteParticipantComposing
   (
      this : in out ChatConversation;
      transportId : WinRt.WString;
      participantAddress : WinRt.WString;
      isComposing : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_transportId : WinRt.HString := To_HString (transportId);
      HStr_participantAddress : WinRt.HString := To_HString (participantAddress);
   begin
      Hr := this.m_IChatConversation.all.NotifyRemoteParticipantComposing (HStr_transportId, HStr_participantAddress, isComposing);
      Hr := WindowsDeleteString (HStr_transportId);
      Hr := WindowsDeleteString (HStr_participantAddress);
   end;

   function add_RemoteParticipantComposingChanged
   (
      this : in out ChatConversation;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IChatConversation.all.add_RemoteParticipantComposingChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RemoteParticipantComposingChanged
   (
      this : in out ChatConversation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatConversation.all.remove_RemoteParticipantComposingChanged (token);
   end;

   function get_CanModifyParticipants
   (
      this : in out ChatConversation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatConversation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatConversation_Interface, WinRt.Windows.ApplicationModel.Chat.IChatConversation2, WinRt.Windows.ApplicationModel.Chat.IID_IChatConversation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatConversation.all);
      Hr := m_Interface.get_CanModifyParticipants (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanModifyParticipants
   (
      this : in out ChatConversation;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatConversation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatConversation_Interface, WinRt.Windows.ApplicationModel.Chat.IChatConversation2, WinRt.Windows.ApplicationModel.Chat.IID_IChatConversation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatConversation.all);
      Hr := m_Interface.put_CanModifyParticipants (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ItemKind
   (
      this : in out ChatConversation
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatItemKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatItemKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatConversation_Interface, WinRt.Windows.ApplicationModel.Chat.IChatItem, WinRt.Windows.ApplicationModel.Chat.IID_IChatItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatConversation.all);
      Hr := m_Interface.get_ItemKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatConversationReader

   procedure Initialize (this : in out ChatConversationReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatConversationReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatConversationReader, IChatConversationReader_Ptr);
   begin
      if this.m_IChatConversationReader /= null then
         if this.m_IChatConversationReader.all /= null then
            RefCount := this.m_IChatConversationReader.all.Release;
            Free (this.m_IChatConversationReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatConversationReader

   function ReadBatchAsync
   (
      this : in out ChatConversationReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3576821524, 54215, 22683, (135, 92, 191, 170, 39, 82, 36, 120 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2773145174, 33647, 23358, (174, 189, 23, 195, 233, 141, 228, 142 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IChatConversationReader.all.ReadBatchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadBatchAsync
   (
      this : in out ChatConversationReader;
      count : WinRt.Int32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3576821524, 54215, 22683, (135, 92, 191, 170, 39, 82, 36, 120 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2773145174, 33647, 23358, (174, 189, 23, 195, 233, 141, 228, 142 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IChatConversationReader.all.ReadBatchAsync (count, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatConversationThreadingInfo

   procedure Initialize (this : in out ChatConversationThreadingInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatConversationThreadingInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatConversationThreadingInfo, IChatConversationThreadingInfo_Ptr);
   begin
      if this.m_IChatConversationThreadingInfo /= null then
         if this.m_IChatConversationThreadingInfo.all /= null then
            RefCount := this.m_IChatConversationThreadingInfo.all.Release;
            Free (this.m_IChatConversationThreadingInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChatConversationThreadingInfo

   function Constructor return ChatConversationThreadingInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatConversationThreadingInfo");
      m_ComRetVal  : aliased Windows.ApplicationModel.Chat.IChatConversationThreadingInfo;
   begin
      return RetVal : ChatConversationThreadingInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IChatConversationThreadingInfo := new Windows.ApplicationModel.Chat.IChatConversationThreadingInfo;
            Retval.m_IChatConversationThreadingInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatConversationThreadingInfo

   function get_ContactId
   (
      this : in out ChatConversationThreadingInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.get_ContactId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContactId
   (
      this : in out ChatConversationThreadingInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.put_ContactId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Custom
   (
      this : in out ChatConversationThreadingInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.get_Custom (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Custom
   (
      this : in out ChatConversationThreadingInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.put_Custom (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ConversationId
   (
      this : in out ChatConversationThreadingInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.get_ConversationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ConversationId
   (
      this : in out ChatConversationThreadingInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.put_ConversationId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Participants
   (
      this : in out ChatConversationThreadingInfo
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.get_Participants (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out ChatConversationThreadingInfo
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversationThreadingKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatConversationThreadingKind;
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Kind
   (
      this : in out ChatConversationThreadingInfo;
      value : Windows.ApplicationModel.Chat.ChatConversationThreadingKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatConversationThreadingInfo.all.put_Kind (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessage

   procedure Initialize (this : in out ChatMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessage, IChatMessage_Ptr);
   begin
      if this.m_IChatMessage /= null then
         if this.m_IChatMessage.all /= null then
            RefCount := this.m_IChatMessage.all.Release;
            Free (this.m_IChatMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChatMessage

   function Constructor return ChatMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessage");
      m_ComRetVal  : aliased Windows.ApplicationModel.Chat.IChatMessage;
   begin
      return RetVal : ChatMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IChatMessage := new Windows.ApplicationModel.Chat.IChatMessage;
            Retval.m_IChatMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessage

   function get_Attachments
   (
      this : in out ChatMessage
   )
   return IVector_IChatMessageAttachment.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IChatMessageAttachment.Kind;
   begin
      Hr := this.m_IChatMessage.all.get_Attachments (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IChatMessageAttachment (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Body
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessage.all.get_Body (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Body
   (
      this : in out ChatMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatMessage.all.put_Body (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_From
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessage.all.get_From (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessage.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsForwardingDisabled
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatMessage.all.get_IsForwardingDisabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsIncoming
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatMessage.all.get_IsIncoming (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsRead
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatMessage.all.get_IsRead (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LocalTimestamp
   (
      this : in out ChatMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IChatMessage.all.get_LocalTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkTimestamp
   (
      this : in out ChatMessage
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IChatMessage.all.get_NetworkTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Recipients
   (
      this : in out ChatMessage
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IChatMessage.all.get_Recipients (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RecipientSendStatuses
   (
      this : in out ChatMessage
   )
   return IMapView_HString_ChatMessageStatus.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_ChatMessageStatus.Kind;
   begin
      Hr := this.m_IChatMessage.all.get_RecipientSendStatuses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_ChatMessageStatus (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Status
   (
      this : in out ChatMessage
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatMessageStatus;
   begin
      Hr := this.m_IChatMessage.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Subject
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessage.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TransportFriendlyName
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessage.all.get_TransportFriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TransportId
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessage.all.get_TransportId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TransportId
   (
      this : in out ChatMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatMessage.all.put_TransportId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_EstimatedDownloadSize
   (
      this : in out ChatMessage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_EstimatedDownloadSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_EstimatedDownloadSize
   (
      this : in out ChatMessage;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_EstimatedDownloadSize (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_From
   (
      this : in out ChatMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_From (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsAutoReply
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_IsAutoReply (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsAutoReply
   (
      this : in out ChatMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_IsAutoReply (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_IsForwardingDisabled
   (
      this : in out ChatMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_IsForwardingDisabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsReplyDisabled
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_IsReplyDisabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsIncoming
   (
      this : in out ChatMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_IsIncoming (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_IsRead
   (
      this : in out ChatMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_IsRead (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsSeen
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_IsSeen (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsSeen
   (
      this : in out ChatMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_IsSeen (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsSimMessage
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_IsSimMessage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LocalTimestamp
   (
      this : in out ChatMessage;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_LocalTimestamp (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MessageKind
   (
      this : in out ChatMessage
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatMessageKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_MessageKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MessageKind
   (
      this : in out ChatMessage;
      value : Windows.ApplicationModel.Chat.ChatMessageKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_MessageKind (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MessageOperatorKind
   (
      this : in out ChatMessage
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageOperatorKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatMessageOperatorKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_MessageOperatorKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MessageOperatorKind
   (
      this : in out ChatMessage;
      value : Windows.ApplicationModel.Chat.ChatMessageOperatorKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_MessageOperatorKind (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_NetworkTimestamp
   (
      this : in out ChatMessage;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_NetworkTimestamp (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsReceivedDuringQuietHours
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_IsReceivedDuringQuietHours (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsReceivedDuringQuietHours
   (
      this : in out ChatMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_IsReceivedDuringQuietHours (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_RemoteId
   (
      this : in out ChatMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_RemoteId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure put_Status
   (
      this : in out ChatMessage;
      value : Windows.ApplicationModel.Chat.ChatMessageStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_Status (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_Subject
   (
      this : in out ChatMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_Subject (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ShouldSuppressNotification
   (
      this : in out ChatMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_ShouldSuppressNotification (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ShouldSuppressNotification
   (
      this : in out ChatMessage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_ShouldSuppressNotification (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ThreadingInfo
   (
      this : in out ChatMessage
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversationThreadingInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatConversationThreadingInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatConversationThreadingInfo do
         m_Interface := QInterface (this.m_IChatMessage.all);
         Hr := m_Interface.get_ThreadingInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IChatConversationThreadingInfo := new Windows.ApplicationModel.Chat.IChatConversationThreadingInfo;
         Retval.m_IChatConversationThreadingInfo.all := m_ComRetVal;
      end return;
   end;

   procedure put_ThreadingInfo
   (
      this : in out ChatMessage;
      value : Windows.ApplicationModel.Chat.ChatConversationThreadingInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_ThreadingInfo (value.m_IChatConversationThreadingInfo.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_RecipientsDeliveryInfos
   (
      this : in out ChatMessage
   )
   return IVector_IChatRecipientDeliveryInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IChatRecipientDeliveryInfo.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_RecipientsDeliveryInfos (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IChatRecipientDeliveryInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RemoteId
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage3, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_RemoteId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SyncId
   (
      this : in out ChatMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage4, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_SyncId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SyncId
   (
      this : in out ChatMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessage4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessage4, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessage4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.put_SyncId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ItemKind
   (
      this : in out ChatMessage
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatItemKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatItemKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessage_Interface, WinRt.Windows.ApplicationModel.Chat.IChatItem, WinRt.Windows.ApplicationModel.Chat.IID_IChatItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessage.all);
      Hr := m_Interface.get_ItemKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageAttachment

   procedure Initialize (this : in out ChatMessageAttachment) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageAttachment) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageAttachment, IChatMessageAttachment_Ptr);
   begin
      if this.m_IChatMessageAttachment /= null then
         if this.m_IChatMessageAttachment.all /= null then
            RefCount := this.m_IChatMessageAttachment.all.Release;
            Free (this.m_IChatMessageAttachment);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChatMessageAttachment

   function Constructor
   (
      mimeType : WinRt.WString;
      dataStreamReference : Windows.Storage.Streams.IRandomAccessStreamReference
   )
   return ChatMessageAttachment is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageAttachment");
      m_Factory    : access IChatMessageAttachmentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Chat.IChatMessageAttachment;
      HStr_mimeType : WinRt.HString := To_HString (mimeType);
   begin
      return RetVal : ChatMessageAttachment do
         Hr := RoGetActivationFactory (m_hString, IID_IChatMessageAttachmentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateChatMessageAttachment (HStr_mimeType, dataStreamReference, m_ComRetVal'Access);
            Retval.m_IChatMessageAttachment := new Windows.ApplicationModel.Chat.IChatMessageAttachment;
            Retval.m_IChatMessageAttachment.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_mimeType);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageAttachment

   function get_DataStreamReference
   (
      this : in out ChatMessageAttachment
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IChatMessageAttachment.all.get_DataStreamReference (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DataStreamReference
   (
      this : in out ChatMessageAttachment;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageAttachment.all.put_DataStreamReference (value);
   end;

   function get_GroupId
   (
      this : in out ChatMessageAttachment
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IChatMessageAttachment.all.get_GroupId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GroupId
   (
      this : in out ChatMessageAttachment;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageAttachment.all.put_GroupId (value);
   end;

   function get_MimeType
   (
      this : in out ChatMessageAttachment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessageAttachment.all.get_MimeType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_MimeType
   (
      this : in out ChatMessageAttachment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatMessageAttachment.all.put_MimeType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Text
   (
      this : in out ChatMessageAttachment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessageAttachment.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out ChatMessageAttachment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatMessageAttachment.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Thumbnail
   (
      this : in out ChatMessageAttachment
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageAttachment.all);
      Hr := m_Interface.get_Thumbnail (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Thumbnail
   (
      this : in out ChatMessageAttachment;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageAttachment.all);
      Hr := m_Interface.put_Thumbnail (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransferProgress
   (
      this : in out ChatMessageAttachment
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageAttachment.all);
      Hr := m_Interface.get_TransferProgress (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TransferProgress
   (
      this : in out ChatMessageAttachment;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageAttachment.all);
      Hr := m_Interface.put_TransferProgress (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OriginalFileName
   (
      this : in out ChatMessageAttachment
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageAttachment.all);
      Hr := m_Interface.get_OriginalFileName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_OriginalFileName
   (
      this : in out ChatMessageAttachment;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageAttachment2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageAttachment2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageAttachment.all);
      Hr := m_Interface.put_OriginalFileName (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ChatMessageBlocking is

      procedure MarkMessageAsBlockedAsync
      (
         localChatMessageId : WinRt.WString;
         blocked : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageBlocking");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageBlockingStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IChatMessageBlockingStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.MarkMessageAsBlockedAsync (HStr_localChatMessageId, blocked, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_localChatMessageId);
      end;

   end ChatMessageBlocking;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageChange

   procedure Initialize (this : in out ChatMessageChange) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageChange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageChange, IChatMessageChange_Ptr);
   begin
      if this.m_IChatMessageChange /= null then
         if this.m_IChatMessageChange.all /= null then
            RefCount := this.m_IChatMessageChange.all.Release;
            Free (this.m_IChatMessageChange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageChange

   function get_ChangeType
   (
      this : in out ChatMessageChange
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageChangeType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatMessageChangeType;
   begin
      Hr := this.m_IChatMessageChange.all.get_ChangeType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Message
   (
      this : in out ChatMessageChange
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessage do
         Hr := this.m_IChatMessageChange.all.get_Message (m_ComRetVal'Access);
         Retval.m_IChatMessage := new Windows.ApplicationModel.Chat.IChatMessage;
         Retval.m_IChatMessage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageChangeReader

   procedure Initialize (this : in out ChatMessageChangeReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageChangeReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageChangeReader, IChatMessageChangeReader_Ptr);
   begin
      if this.m_IChatMessageChangeReader /= null then
         if this.m_IChatMessageChangeReader.all /= null then
            RefCount := this.m_IChatMessageChangeReader.all.Release;
            Free (this.m_IChatMessageChangeReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageChangeReader

   procedure AcceptChanges
   (
      this : in out ChatMessageChangeReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageChangeReader.all.AcceptChanges;
   end;

   procedure AcceptChangesThrough
   (
      this : in out ChatMessageChangeReader;
      lastChangeToAcknowledge : Windows.ApplicationModel.Chat.ChatMessageChange'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageChangeReader.all.AcceptChangesThrough (lastChangeToAcknowledge.m_IChatMessageChange.all);
   end;

   function ReadBatchAsync
   (
      this : in out ChatMessageChangeReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2199480503, 43617, 22732, (135, 19, 152, 246, 92, 173, 78, 217 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (951098304, 20521, 21726, (145, 101, 220, 216, 179, 185, 181, 73 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IChatMessageChangeReader.all.ReadBatchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageChangeTracker

   procedure Initialize (this : in out ChatMessageChangeTracker) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageChangeTracker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageChangeTracker, IChatMessageChangeTracker_Ptr);
   begin
      if this.m_IChatMessageChangeTracker /= null then
         if this.m_IChatMessageChangeTracker.all /= null then
            RefCount := this.m_IChatMessageChangeTracker.all.Release;
            Free (this.m_IChatMessageChangeTracker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageChangeTracker

   procedure Enable
   (
      this : in out ChatMessageChangeTracker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageChangeTracker.all.Enable;
   end;

   function GetChangeReader
   (
      this : in out ChatMessageChangeTracker
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageChangeReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageChangeReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageChangeReader do
         Hr := this.m_IChatMessageChangeTracker.all.GetChangeReader (m_ComRetVal'Access);
         Retval.m_IChatMessageChangeReader := new Windows.ApplicationModel.Chat.IChatMessageChangeReader;
         Retval.m_IChatMessageChangeReader.all := m_ComRetVal;
      end return;
   end;

   procedure Reset
   (
      this : in out ChatMessageChangeTracker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageChangeTracker.all.Reset;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageChangedDeferral

   procedure Initialize (this : in out ChatMessageChangedDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageChangedDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageChangedDeferral, IChatMessageChangedDeferral_Ptr);
   begin
      if this.m_IChatMessageChangedDeferral /= null then
         if this.m_IChatMessageChangedDeferral.all /= null then
            RefCount := this.m_IChatMessageChangedDeferral.all.Release;
            Free (this.m_IChatMessageChangedDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageChangedDeferral

   procedure Complete
   (
      this : in out ChatMessageChangedDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageChangedDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageChangedEventArgs

   procedure Initialize (this : in out ChatMessageChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageChangedEventArgs, IChatMessageChangedEventArgs_Ptr);
   begin
      if this.m_IChatMessageChangedEventArgs /= null then
         if this.m_IChatMessageChangedEventArgs.all /= null then
            RefCount := this.m_IChatMessageChangedEventArgs.all.Release;
            Free (this.m_IChatMessageChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageChangedEventArgs

   function GetDeferral
   (
      this : in out ChatMessageChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageChangedDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageChangedDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageChangedDeferral do
         Hr := this.m_IChatMessageChangedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IChatMessageChangedDeferral := new Windows.ApplicationModel.Chat.IChatMessageChangedDeferral;
         Retval.m_IChatMessageChangedDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ChatMessageManager is

      function RequestSyncManagerAsync
      return WinRt.Windows.ApplicationModel.Chat.ChatSyncManager is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ChatSyncManager.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ChatSyncManager.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatSyncManager;
         m_IID            : aliased WinRt.IID := (2758179434, 7268, 20982, (151, 46, 161, 5, 7, 25, 248, 234 )); -- Windows.ApplicationModel.Chat.ChatSyncManager;
         m_HandlerIID     : aliased WinRt.IID := (1530204876, 34088, 24199, (176, 97, 27, 152, 42, 100, 127, 196 ));
         m_Handler        : AsyncOperationCompletedHandler_ChatSyncManager.Kind := new AsyncOperationCompletedHandler_ChatSyncManager.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatSyncManager.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatSyncManager.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatSyncManager.Kind_Delegate, AsyncOperationCompletedHandler_ChatSyncManager.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatSyncManager do
            Hr := RoGetActivationFactory (m_hString, IID_IChatMessageManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestSyncManagerAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IChatSyncManager := new Windows.ApplicationModel.Chat.IChatSyncManager;
                        Retval.m_IChatSyncManager.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetTransportsAsync
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageManagerStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (3579345005, 38350, 24355, (158, 144, 83, 153, 2, 172, 146, 166 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (2752133946, 27286, 21143, (138, 251, 203, 180, 151, 212, 142, 21 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IChatMessageManagerStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetTransportsAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function RequestStoreAsync
      return WinRt.Windows.ApplicationModel.Chat.ChatMessageStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageManagerStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ChatMessageStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ChatMessageStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatMessageStore;
         m_IID            : aliased WinRt.IID := (425993221, 3590, 20761, (154, 197, 22, 207, 209, 6, 179, 55 )); -- Windows.ApplicationModel.Chat.ChatMessageStore;
         m_HandlerIID     : aliased WinRt.IID := (2836877190, 8135, 20724, (141, 126, 16, 61, 63, 214, 229, 163 ));
         m_Handler        : AsyncOperationCompletedHandler_ChatMessageStore.Kind := new AsyncOperationCompletedHandler_ChatMessageStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatMessageStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatMessageStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatMessageStore.Kind_Delegate, AsyncOperationCompletedHandler_ChatMessageStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageStore do
            Hr := RoGetActivationFactory (m_hString, IID_IChatMessageManagerStatic'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IChatMessageStore := new Windows.ApplicationModel.Chat.IChatMessageStore;
                        Retval.m_IChatMessageStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ShowComposeSmsMessageAsync
      (
         message : Windows.ApplicationModel.Chat.ChatMessage'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageManagerStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IChatMessageManagerStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowComposeSmsMessageAsync (message.m_IChatMessage.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure ShowSmsSettings is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageManagerStatic_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IChatMessageManagerStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowSmsSettings;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RegisterTransportAsync
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageManager2Statics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_HString.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.HString;
         AdaRetval        : WString;
         m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
         m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
         m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IChatMessageManager2Statics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterTransportAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_RetVal);
         Hr := WindowsDeleteString (m_RetVal);
         return AdaRetVal;
      end;

      function GetTransportAsync
      (
         transportId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Chat.ChatMessageTransport is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatMessageManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IChatMessageManager2Statics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_transportId : WinRt.HString := To_HString (transportId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ChatMessageTransport.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ChatMessageTransport.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport;
         m_IID            : aliased WinRt.IID := (660502677, 14990, 20853, (183, 111, 33, 210, 224, 69, 189, 47 )); -- Windows.ApplicationModel.Chat.ChatMessageTransport;
         m_HandlerIID     : aliased WinRt.IID := (1776059825, 47627, 22483, (183, 195, 97, 142, 1, 86, 248, 203 ));
         m_Handler        : AsyncOperationCompletedHandler_ChatMessageTransport.Kind := new AsyncOperationCompletedHandler_ChatMessageTransport.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatMessageTransport.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatMessageTransport.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatMessageTransport.Kind_Delegate, AsyncOperationCompletedHandler_ChatMessageTransport.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageTransport do
            Hr := RoGetActivationFactory (m_hString, IID_IChatMessageManager2Statics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTransportAsync (HStr_transportId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IChatMessageTransport := new Windows.ApplicationModel.Chat.IChatMessageTransport;
                        Retval.m_IChatMessageTransport.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_transportId);
         end return;
      end;

   end ChatMessageManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageNotificationTriggerDetails

   procedure Initialize (this : in out ChatMessageNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageNotificationTriggerDetails, IChatMessageNotificationTriggerDetails_Ptr);
   begin
      if this.m_IChatMessageNotificationTriggerDetails /= null then
         if this.m_IChatMessageNotificationTriggerDetails.all /= null then
            RefCount := this.m_IChatMessageNotificationTriggerDetails.all.Release;
            Free (this.m_IChatMessageNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageNotificationTriggerDetails

   function get_ChatMessage
   (
      this : in out ChatMessageNotificationTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessage do
         Hr := this.m_IChatMessageNotificationTriggerDetails.all.get_ChatMessage (m_ComRetVal'Access);
         Retval.m_IChatMessage := new Windows.ApplicationModel.Chat.IChatMessage;
         Retval.m_IChatMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ShouldDisplayToast
   (
      this : in out ChatMessageNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageNotificationTriggerDetails.all);
      Hr := m_Interface.get_ShouldDisplayToast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ShouldUpdateDetailText
   (
      this : in out ChatMessageNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageNotificationTriggerDetails.all);
      Hr := m_Interface.get_ShouldUpdateDetailText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ShouldUpdateBadge
   (
      this : in out ChatMessageNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageNotificationTriggerDetails.all);
      Hr := m_Interface.get_ShouldUpdateBadge (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ShouldUpdateActionCenter
   (
      this : in out ChatMessageNotificationTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageNotificationTriggerDetails2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageNotificationTriggerDetails.all);
      Hr := m_Interface.get_ShouldUpdateActionCenter (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageReader

   procedure Initialize (this : in out ChatMessageReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageReader, IChatMessageReader_Ptr);
   begin
      if this.m_IChatMessageReader /= null then
         if this.m_IChatMessageReader.all /= null then
            RefCount := this.m_IChatMessageReader.all.Release;
            Free (this.m_IChatMessageReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageReader

   function ReadBatchAsync
   (
      this : in out ChatMessageReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3656821213, 32719, 24222, (134, 199, 21, 22, 99, 219, 103, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3778461077, 7882, 23431, (178, 51, 157, 71, 214, 170, 82, 36 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IChatMessageReader.all.ReadBatchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadBatchAsync
   (
      this : in out ChatMessageReader;
      count : WinRt.Int32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageReader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3656821213, 32719, 24222, (134, 199, 21, 22, 99, 219, 103, 204 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3778461077, 7882, 23431, (178, 51, 157, 71, 214, 170, 82, 36 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageReader_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageReader2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageReader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageReader.all);
      Hr := m_Interface.ReadBatchAsync (count, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageStore

   procedure Initialize (this : in out ChatMessageStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageStore, IChatMessageStore_Ptr);
   begin
      if this.m_IChatMessageStore /= null then
         if this.m_IChatMessageStore.all /= null then
            RefCount := this.m_IChatMessageStore.all.Release;
            Free (this.m_IChatMessageStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageStore

   function get_ChangeTracker
   (
      this : in out ChatMessageStore
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageChangeTracker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageChangeTracker;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageChangeTracker do
         Hr := this.m_IChatMessageStore.all.get_ChangeTracker (m_ComRetVal'Access);
         Retval.m_IChatMessageChangeTracker := new Windows.ApplicationModel.Chat.IChatMessageChangeTracker;
         Retval.m_IChatMessageChangeTracker.all := m_ComRetVal;
      end return;
   end;

   procedure DeleteMessageAsync
   (
      this : in out ChatMessageStore;
      localMessageId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localMessageId : WinRt.HString := To_HString (localMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatMessageStore.all.DeleteMessageAsync (HStr_localMessageId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localMessageId);
   end;

   procedure DownloadMessageAsync
   (
      this : in out ChatMessageStore;
      localChatMessageId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatMessageStore.all.DownloadMessageAsync (HStr_localChatMessageId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localChatMessageId);
   end;

   function GetMessageAsync
   (
      this : in out ChatMessageStore;
      localChatMessageId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ChatMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ChatMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatMessage;
      m_IID            : aliased WinRt.IID := (3994197026, 55951, 23637, (144, 182, 167, 59, 172, 201, 215, 53 )); -- Windows.ApplicationModel.Chat.ChatMessage;
      m_HandlerIID     : aliased WinRt.IID := (654634476, 157, 23227, (167, 24, 118, 119, 24, 21, 141, 136 ));
      m_Handler        : AsyncOperationCompletedHandler_ChatMessage.Kind := new AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate, AsyncOperationCompletedHandler_ChatMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessage do
         Hr := this.m_IChatMessageStore.all.GetMessageAsync (HStr_localChatMessageId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IChatMessage := new Windows.ApplicationModel.Chat.IChatMessage;
                  Retval.m_IChatMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_localChatMessageId);
      end return;
   end;

   function GetMessageReader
   (
      this : in out ChatMessageStore
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageReader do
         Hr := this.m_IChatMessageStore.all.GetMessageReader (m_ComRetVal'Access);
         Retval.m_IChatMessageReader := new Windows.ApplicationModel.Chat.IChatMessageReader;
         Retval.m_IChatMessageReader.all := m_ComRetVal;
      end return;
   end;

   function GetMessageReader
   (
      this : in out ChatMessageStore;
      recentTimeLimit : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageReader do
         Hr := this.m_IChatMessageStore.all.GetMessageReader (recentTimeLimit, m_ComRetVal'Access);
         Retval.m_IChatMessageReader := new Windows.ApplicationModel.Chat.IChatMessageReader;
         Retval.m_IChatMessageReader.all := m_ComRetVal;
      end return;
   end;

   procedure MarkMessageReadAsync
   (
      this : in out ChatMessageStore;
      localChatMessageId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatMessageStore.all.MarkMessageReadAsync (HStr_localChatMessageId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localChatMessageId);
   end;

   procedure RetrySendMessageAsync
   (
      this : in out ChatMessageStore;
      localChatMessageId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatMessageStore.all.RetrySendMessageAsync (HStr_localChatMessageId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localChatMessageId);
   end;

   procedure SendMessageAsync
   (
      this : in out ChatMessageStore;
      chatMessage_p : Windows.ApplicationModel.Chat.ChatMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatMessageStore.all.SendMessageAsync (chatMessage_p.m_IChatMessage.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function ValidateMessage
   (
      this : in out ChatMessageStore;
      chatMessage_p : Windows.ApplicationModel.Chat.ChatMessage'Class
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageValidationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageValidationResult;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageValidationResult do
         Hr := this.m_IChatMessageStore.all.ValidateMessage (chatMessage_p.m_IChatMessage.all, m_ComRetVal'Access);
         Retval.m_IChatMessageValidationResult := new Windows.ApplicationModel.Chat.IChatMessageValidationResult;
         Retval.m_IChatMessageValidationResult.all := m_ComRetVal;
      end return;
   end;

   function add_MessageChanged
   (
      this : in out ChatMessageStore;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IChatMessageStore.all.add_MessageChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MessageChanged
   (
      this : in out ChatMessageStore;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatMessageStore.all.remove_MessageChanged (value);
   end;

   function ForwardMessageAsync
   (
      this : in out ChatMessageStore;
      localChatMessageId : WinRt.WString;
      addresses : GenericObject
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ChatMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ChatMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatMessage;
      m_IID            : aliased WinRt.IID := (3994197026, 55951, 23637, (144, 182, 167, 59, 172, 201, 215, 53 )); -- Windows.ApplicationModel.Chat.ChatMessage;
      m_HandlerIID     : aliased WinRt.IID := (654634476, 157, 23227, (167, 24, 118, 119, 24, 21, 141, 136 ));
      m_Handler        : AsyncOperationCompletedHandler_ChatMessage.Kind := new AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate, AsyncOperationCompletedHandler_ChatMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessage do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.ForwardMessageAsync (HStr_localChatMessageId, addresses, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IChatMessage := new Windows.ApplicationModel.Chat.IChatMessage;
                  Retval.m_IChatMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_localChatMessageId);
      end return;
   end;

   function GetConversationAsync
   (
      this : in out ChatMessageStore;
      conversationId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_conversationId : WinRt.HString := To_HString (conversationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ChatConversation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ChatConversation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatConversation;
      m_IID            : aliased WinRt.IID := (3302548500, 3668, 23263, (136, 195, 229, 109, 78, 136, 181, 212 )); -- Windows.ApplicationModel.Chat.ChatConversation;
      m_HandlerIID     : aliased WinRt.IID := (194778609, 6257, 20677, (134, 222, 110, 97, 77, 89, 60, 87 ));
      m_Handler        : AsyncOperationCompletedHandler_ChatConversation.Kind := new AsyncOperationCompletedHandler_ChatConversation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatConversation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatConversation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatConversation.Kind_Delegate, AsyncOperationCompletedHandler_ChatConversation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatConversation do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetConversationAsync (HStr_conversationId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IChatConversation := new Windows.ApplicationModel.Chat.IChatConversation;
                  Retval.m_IChatConversation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_conversationId);
      end return;
   end;

   function GetConversationAsync
   (
      this : in out ChatMessageStore;
      conversationId : WinRt.WString;
      transportIds : GenericObject
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_conversationId : WinRt.HString := To_HString (conversationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ChatConversation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ChatConversation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatConversation;
      m_IID            : aliased WinRt.IID := (3302548500, 3668, 23263, (136, 195, 229, 109, 78, 136, 181, 212 )); -- Windows.ApplicationModel.Chat.ChatConversation;
      m_HandlerIID     : aliased WinRt.IID := (194778609, 6257, 20677, (134, 222, 110, 97, 77, 89, 60, 87 ));
      m_Handler        : AsyncOperationCompletedHandler_ChatConversation.Kind := new AsyncOperationCompletedHandler_ChatConversation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatConversation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatConversation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatConversation.Kind_Delegate, AsyncOperationCompletedHandler_ChatConversation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatConversation do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetConversationAsync (HStr_conversationId, transportIds, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IChatConversation := new Windows.ApplicationModel.Chat.IChatConversation;
                  Retval.m_IChatConversation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_conversationId);
      end return;
   end;

   function GetConversationFromThreadingInfoAsync
   (
      this : in out ChatMessageStore;
      threadingInfo : Windows.ApplicationModel.Chat.ChatConversationThreadingInfo'Class
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ChatConversation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ChatConversation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatConversation;
      m_IID            : aliased WinRt.IID := (3302548500, 3668, 23263, (136, 195, 229, 109, 78, 136, 181, 212 )); -- Windows.ApplicationModel.Chat.ChatConversation;
      m_HandlerIID     : aliased WinRt.IID := (194778609, 6257, 20677, (134, 222, 110, 97, 77, 89, 60, 87 ));
      m_Handler        : AsyncOperationCompletedHandler_ChatConversation.Kind := new AsyncOperationCompletedHandler_ChatConversation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatConversation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatConversation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatConversation.Kind_Delegate, AsyncOperationCompletedHandler_ChatConversation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatConversation do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetConversationFromThreadingInfoAsync (threadingInfo.m_IChatConversationThreadingInfo.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IChatConversation := new Windows.ApplicationModel.Chat.IChatConversation;
                  Retval.m_IChatConversation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetConversationReader
   (
      this : in out ChatMessageStore
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversationReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatConversationReader;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatConversationReader do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetConversationReader (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IChatConversationReader := new Windows.ApplicationModel.Chat.IChatConversationReader;
         Retval.m_IChatConversationReader.all := m_ComRetVal;
      end return;
   end;

   function GetConversationReader
   (
      this : in out ChatMessageStore;
      transportIds : GenericObject
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatConversationReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatConversationReader;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatConversationReader do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetConversationReader (transportIds, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IChatConversationReader := new Windows.ApplicationModel.Chat.IChatConversationReader;
         Retval.m_IChatConversationReader.all := m_ComRetVal;
      end return;
   end;

   function GetMessageByRemoteIdAsync
   (
      this : in out ChatMessageStore;
      transportId : WinRt.WString;
      remoteId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_transportId : WinRt.HString := To_HString (transportId);
      HStr_remoteId : WinRt.HString := To_HString (remoteId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ChatMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ChatMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatMessage;
      m_IID            : aliased WinRt.IID := (3994197026, 55951, 23637, (144, 182, 167, 59, 172, 201, 215, 53 )); -- Windows.ApplicationModel.Chat.ChatMessage;
      m_HandlerIID     : aliased WinRt.IID := (654634476, 157, 23227, (167, 24, 118, 119, 24, 21, 141, 136 ));
      m_Handler        : AsyncOperationCompletedHandler_ChatMessage.Kind := new AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate, AsyncOperationCompletedHandler_ChatMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessage do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetMessageByRemoteIdAsync (HStr_transportId, HStr_remoteId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IChatMessage := new Windows.ApplicationModel.Chat.IChatMessage;
                  Retval.m_IChatMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_transportId);
         Hr := WindowsDeleteString (HStr_remoteId);
      end return;
   end;

   function GetUnseenCountAsync
   (
      this : in out ChatMessageStore
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Int32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Int32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Int32;
      m_IID            : aliased WinRt.IID := (2525730405, 1773, 22388, (143, 83, 142, 222, 171, 213, 247, 181 )); -- Int32;
      m_HandlerIID     : aliased WinRt.IID := (3591155357, 35019, 23025, (133, 118, 63, 186, 68, 121, 107, 232 ));
      m_Handler        : AsyncOperationCompletedHandler_Int32.Kind := new AsyncOperationCompletedHandler_Int32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Int32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Int32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Int32.Kind_Delegate, AsyncOperationCompletedHandler_Int32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.GetUnseenCountAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetUnseenCountAsync
   (
      this : in out ChatMessageStore;
      transportIds : GenericObject
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Int32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Int32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Int32;
      m_IID            : aliased WinRt.IID := (2525730405, 1773, 22388, (143, 83, 142, 222, 171, 213, 247, 181 )); -- Int32;
      m_HandlerIID     : aliased WinRt.IID := (3591155357, 35019, 23025, (133, 118, 63, 186, 68, 121, 107, 232 ));
      m_Handler        : AsyncOperationCompletedHandler_Int32.Kind := new AsyncOperationCompletedHandler_Int32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Int32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Int32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Int32.Kind_Delegate, AsyncOperationCompletedHandler_Int32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.GetUnseenCountAsync (transportIds, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure MarkAsSeenAsync
   (
      this : in out ChatMessageStore
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.MarkAsSeenAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure MarkAsSeenAsync
   (
      this : in out ChatMessageStore;
      transportIds : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.MarkAsSeenAsync (transportIds, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetSearchReader
   (
      this : in out ChatMessageStore;
      value : Windows.ApplicationModel.Chat.ChatQueryOptions'Class
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatSearchReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatSearchReader;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatSearchReader do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetSearchReader (value.m_IChatQueryOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IChatSearchReader := new Windows.ApplicationModel.Chat.IChatSearchReader;
         Retval.m_IChatSearchReader.all := m_ComRetVal;
      end return;
   end;

   procedure SaveMessageAsync
   (
      this : in out ChatMessageStore;
      chatMessage_p : Windows.ApplicationModel.Chat.ChatMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.SaveMessageAsync (chatMessage_p.m_IChatMessage.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function TryCancelDownloadMessageAsync
   (
      this : in out ChatMessageStore;
      localChatMessageId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.TryCancelDownloadMessageAsync (HStr_localChatMessageId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localChatMessageId);
      return m_RetVal;
   end;

   function TryCancelSendMessageAsync
   (
      this : in out ChatMessageStore;
      localChatMessageId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localChatMessageId : WinRt.HString := To_HString (localChatMessageId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.TryCancelSendMessageAsync (HStr_localChatMessageId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localChatMessageId);
      return m_RetVal;
   end;

   function add_StoreChanged
   (
      this : in out ChatMessageStore;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.add_StoreChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_StoreChanged
   (
      this : in out ChatMessageStore;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageStore.all);
      Hr := m_Interface.remove_StoreChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetMessageBySyncIdAsync
   (
      this : in out ChatMessageStore;
      syncId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageStore3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_syncId : WinRt.HString := To_HString (syncId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ChatMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ChatMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IChatMessage;
      m_IID            : aliased WinRt.IID := (3994197026, 55951, 23637, (144, 182, 167, 59, 172, 201, 215, 53 )); -- Windows.ApplicationModel.Chat.ChatMessage;
      m_HandlerIID     : aliased WinRt.IID := (654634476, 157, 23227, (167, 24, 118, 119, 24, 21, 141, 136 ));
      m_Handler        : AsyncOperationCompletedHandler_ChatMessage.Kind := new AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ChatMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ChatMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ChatMessage.Kind_Delegate, AsyncOperationCompletedHandler_ChatMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageStore_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageStore3, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageStore3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessage do
         m_Interface := QInterface (this.m_IChatMessageStore.all);
         Hr := m_Interface.GetMessageBySyncIdAsync (HStr_syncId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IChatMessage := new Windows.ApplicationModel.Chat.IChatMessage;
                  Retval.m_IChatMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_syncId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageStoreChangedEventArgs

   procedure Initialize (this : in out ChatMessageStoreChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageStoreChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageStoreChangedEventArgs, IChatMessageStoreChangedEventArgs_Ptr);
   begin
      if this.m_IChatMessageStoreChangedEventArgs /= null then
         if this.m_IChatMessageStoreChangedEventArgs.all /= null then
            RefCount := this.m_IChatMessageStoreChangedEventArgs.all.Release;
            Free (this.m_IChatMessageStoreChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageStoreChangedEventArgs

   function get_Id
   (
      this : in out ChatMessageStoreChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessageStoreChangedEventArgs.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ChatMessageStoreChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatStoreChangedEventKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatStoreChangedEventKind;
   begin
      Hr := this.m_IChatMessageStoreChangedEventArgs.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageTransport

   procedure Initialize (this : in out ChatMessageTransport) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageTransport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageTransport, IChatMessageTransport_Ptr);
   begin
      if this.m_IChatMessageTransport /= null then
         if this.m_IChatMessageTransport.all /= null then
            RefCount := this.m_IChatMessageTransport.all.Release;
            Free (this.m_IChatMessageTransport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageTransport

   function get_IsAppSetAsNotificationProvider
   (
      this : in out ChatMessageTransport
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatMessageTransport.all.get_IsAppSetAsNotificationProvider (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsActive
   (
      this : in out ChatMessageTransport
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatMessageTransport.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TransportFriendlyName
   (
      this : in out ChatMessageTransport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessageTransport.all.get_TransportFriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TransportId
   (
      this : in out ChatMessageTransport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatMessageTransport.all.get_TransportId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure RequestSetAsNotificationProviderAsync
   (
      this : in out ChatMessageTransport
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatMessageTransport.all.RequestSetAsNotificationProviderAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Configuration
   (
      this : in out ChatMessageTransport
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatMessageTransportConfiguration;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageTransport2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration do
         m_Interface := QInterface (this.m_IChatMessageTransport.all);
         Hr := m_Interface.get_Configuration (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IChatMessageTransportConfiguration := new Windows.ApplicationModel.Chat.IChatMessageTransportConfiguration;
         Retval.m_IChatMessageTransportConfiguration.all := m_ComRetVal;
      end return;
   end;

   function get_TransportKind
   (
      this : in out ChatMessageTransport
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageTransportKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatMessageTransportKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport_Interface, WinRt.Windows.ApplicationModel.Chat.IChatMessageTransport2, WinRt.Windows.ApplicationModel.Chat.IID_IChatMessageTransport2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IChatMessageTransport.all);
      Hr := m_Interface.get_TransportKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageTransportConfiguration

   procedure Initialize (this : in out ChatMessageTransportConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageTransportConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageTransportConfiguration, IChatMessageTransportConfiguration_Ptr);
   begin
      if this.m_IChatMessageTransportConfiguration /= null then
         if this.m_IChatMessageTransportConfiguration.all /= null then
            RefCount := this.m_IChatMessageTransportConfiguration.all.Release;
            Free (this.m_IChatMessageTransportConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageTransportConfiguration

   function get_MaxAttachmentCount
   (
      this : in out ChatMessageTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IChatMessageTransportConfiguration.all.get_MaxAttachmentCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxMessageSizeInKilobytes
   (
      this : in out ChatMessageTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IChatMessageTransportConfiguration.all.get_MaxMessageSizeInKilobytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxRecipientCount
   (
      this : in out ChatMessageTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IChatMessageTransportConfiguration.all.get_MaxRecipientCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedVideoFormat
   (
      this : in out ChatMessageTransportConfiguration
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := this.m_IChatMessageTransportConfiguration.all.get_SupportedVideoFormat (m_ComRetVal'Access);
         Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
         Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedProperties
   (
      this : in out ChatMessageTransportConfiguration
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IChatMessageTransportConfiguration.all.get_ExtendedProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageValidationResult

   procedure Initialize (this : in out ChatMessageValidationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageValidationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageValidationResult, IChatMessageValidationResult_Ptr);
   begin
      if this.m_IChatMessageValidationResult /= null then
         if this.m_IChatMessageValidationResult.all /= null then
            RefCount := this.m_IChatMessageValidationResult.all.Release;
            Free (this.m_IChatMessageValidationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageValidationResult

   function get_MaxPartCount
   (
      this : in out ChatMessageValidationResult
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IChatMessageValidationResult.all.get_MaxPartCount (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PartCount
   (
      this : in out ChatMessageValidationResult
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IChatMessageValidationResult.all.get_PartCount (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_RemainingCharacterCountInPart
   (
      this : in out ChatMessageValidationResult
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IChatMessageValidationResult.all.get_RemainingCharacterCountInPart (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Status
   (
      this : in out ChatMessageValidationResult
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageValidationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatMessageValidationStatus;
   begin
      Hr := this.m_IChatMessageValidationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatQueryOptions

   procedure Initialize (this : in out ChatQueryOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatQueryOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatQueryOptions, IChatQueryOptions_Ptr);
   begin
      if this.m_IChatQueryOptions /= null then
         if this.m_IChatQueryOptions.all /= null then
            RefCount := this.m_IChatQueryOptions.all.Release;
            Free (this.m_IChatQueryOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChatQueryOptions

   function Constructor return ChatQueryOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatQueryOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Chat.IChatQueryOptions;
   begin
      return RetVal : ChatQueryOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IChatQueryOptions := new Windows.ApplicationModel.Chat.IChatQueryOptions;
            Retval.m_IChatQueryOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatQueryOptions

   function get_SearchString
   (
      this : in out ChatQueryOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatQueryOptions.all.get_SearchString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SearchString
   (
      this : in out ChatQueryOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatQueryOptions.all.put_SearchString (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatRecipientDeliveryInfo

   procedure Initialize (this : in out ChatRecipientDeliveryInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatRecipientDeliveryInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatRecipientDeliveryInfo, IChatRecipientDeliveryInfo_Ptr);
   begin
      if this.m_IChatRecipientDeliveryInfo /= null then
         if this.m_IChatRecipientDeliveryInfo.all /= null then
            RefCount := this.m_IChatRecipientDeliveryInfo.all.Release;
            Free (this.m_IChatRecipientDeliveryInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChatRecipientDeliveryInfo

   function Constructor return ChatRecipientDeliveryInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo");
      m_ComRetVal  : aliased Windows.ApplicationModel.Chat.IChatRecipientDeliveryInfo;
   begin
      return RetVal : ChatRecipientDeliveryInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IChatRecipientDeliveryInfo := new Windows.ApplicationModel.Chat.IChatRecipientDeliveryInfo;
            Retval.m_IChatRecipientDeliveryInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatRecipientDeliveryInfo

   function get_TransportAddress
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_TransportAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TransportAddress
   (
      this : in out ChatRecipientDeliveryInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.put_TransportAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DeliveryTime
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_DeliveryTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DeliveryTime
   (
      this : in out ChatRecipientDeliveryInfo;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.put_DeliveryTime (value);
   end;

   function get_ReadTime
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_ReadTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ReadTime
   (
      this : in out ChatRecipientDeliveryInfo;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.put_ReadTime (value);
   end;

   function get_TransportErrorCodeCategory
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatTransportErrorCodeCategory is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatTransportErrorCodeCategory;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_TransportErrorCodeCategory (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TransportInterpretedErrorCode
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatTransportInterpretedErrorCode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatTransportInterpretedErrorCode;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_TransportInterpretedErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TransportErrorCode
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_TransportErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsErrorPermanent
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_IsErrorPermanent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out ChatRecipientDeliveryInfo
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatMessageStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatMessageStatus;
   begin
      Hr := this.m_IChatRecipientDeliveryInfo.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatSearchReader

   procedure Initialize (this : in out ChatSearchReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatSearchReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatSearchReader, IChatSearchReader_Ptr);
   begin
      if this.m_IChatSearchReader /= null then
         if this.m_IChatSearchReader.all /= null then
            RefCount := this.m_IChatSearchReader.all.Release;
            Free (this.m_IChatSearchReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatSearchReader

   function ReadBatchAsync
   (
      this : in out ChatSearchReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1706290849, 31599, 20896, (162, 235, 127, 177, 220, 71, 48, 34 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1406840094, 17639, 23190, (134, 136, 45, 183, 192, 13, 129, 67 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IChatSearchReader.all.ReadBatchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadBatchAsync
   (
      this : in out ChatSearchReader;
      count : WinRt.Int32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1706290849, 31599, 20896, (162, 235, 127, 177, 220, 71, 48, 34 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1406840094, 17639, 23190, (134, 136, 45, 183, 192, 13, 129, 67 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IChatSearchReader.all.ReadBatchAsync (count, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatSyncConfiguration

   procedure Initialize (this : in out ChatSyncConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatSyncConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatSyncConfiguration, IChatSyncConfiguration_Ptr);
   begin
      if this.m_IChatSyncConfiguration /= null then
         if this.m_IChatSyncConfiguration.all /= null then
            RefCount := this.m_IChatSyncConfiguration.all.Release;
            Free (this.m_IChatSyncConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatSyncConfiguration

   function get_IsSyncEnabled
   (
      this : in out ChatSyncConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatSyncConfiguration.all.get_IsSyncEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSyncEnabled
   (
      this : in out ChatSyncConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatSyncConfiguration.all.put_IsSyncEnabled (value);
   end;

   function get_RestoreHistorySpan
   (
      this : in out ChatSyncConfiguration
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatRestoreHistorySpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.ChatRestoreHistorySpan;
   begin
      Hr := this.m_IChatSyncConfiguration.all.get_RestoreHistorySpan (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RestoreHistorySpan
   (
      this : in out ChatSyncConfiguration;
      value : Windows.ApplicationModel.Chat.ChatRestoreHistorySpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatSyncConfiguration.all.put_RestoreHistorySpan (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatSyncManager

   procedure Initialize (this : in out ChatSyncManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatSyncManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatSyncManager, IChatSyncManager_Ptr);
   begin
      if this.m_IChatSyncManager /= null then
         if this.m_IChatSyncManager.all /= null then
            RefCount := this.m_IChatSyncManager.all.Release;
            Free (this.m_IChatSyncManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatSyncManager

   function get_Configuration
   (
      this : in out ChatSyncManager
   )
   return WinRt.Windows.ApplicationModel.Chat.ChatSyncConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IChatSyncConfiguration;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.ChatSyncConfiguration do
         Hr := this.m_IChatSyncManager.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IChatSyncConfiguration := new Windows.ApplicationModel.Chat.IChatSyncConfiguration;
         Retval.m_IChatSyncConfiguration.all := m_ComRetVal;
      end return;
   end;

   procedure AssociateAccountAsync
   (
      this : in out ChatSyncManager;
      webAccount : Windows.Security.Credentials.WebAccount'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatSyncManager.all.AssociateAccountAsync (webAccount.m_IWebAccount.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure UnassociateAccountAsync
   (
      this : in out ChatSyncManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatSyncManager.all.UnassociateAccountAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function IsAccountAssociated
   (
      this : in out ChatSyncManager;
      webAccount : Windows.Security.Credentials.WebAccount'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IChatSyncManager.all.IsAccountAssociated (webAccount.m_IWebAccount.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure StartSync
   (
      this : in out ChatSyncManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IChatSyncManager.all.StartSync;
   end;

   procedure SetConfigurationAsync
   (
      this : in out ChatSyncManager;
      configuration : Windows.ApplicationModel.Chat.ChatSyncConfiguration'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IChatSyncManager.all.SetConfigurationAsync (configuration.m_IChatSyncConfiguration.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsEndUserMessage

   procedure Initialize (this : in out RcsEndUserMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsEndUserMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsEndUserMessage, IRcsEndUserMessage_Ptr);
   begin
      if this.m_IRcsEndUserMessage /= null then
         if this.m_IRcsEndUserMessage.all /= null then
            RefCount := this.m_IRcsEndUserMessage.all.Release;
            Free (this.m_IRcsEndUserMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsEndUserMessage

   function get_TransportId
   (
      this : in out RcsEndUserMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsEndUserMessage.all.get_TransportId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Title
   (
      this : in out RcsEndUserMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsEndUserMessage.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Text
   (
      this : in out RcsEndUserMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsEndUserMessage.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsPinRequired
   (
      this : in out RcsEndUserMessage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRcsEndUserMessage.all.get_IsPinRequired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Actions
   (
      this : in out RcsEndUserMessage
   )
   return IVectorView_IRcsEndUserMessageAction.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IRcsEndUserMessageAction.Kind;
   begin
      Hr := this.m_IRcsEndUserMessage.all.get_Actions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IRcsEndUserMessageAction (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure SendResponseAsync
   (
      this : in out RcsEndUserMessage;
      action : Windows.ApplicationModel.Chat.RcsEndUserMessageAction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IRcsEndUserMessage.all.SendResponseAsync (action.m_IRcsEndUserMessageAction.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SendResponseWithPinAsync
   (
      this : in out RcsEndUserMessage;
      action : Windows.ApplicationModel.Chat.RcsEndUserMessageAction'Class;
      pin : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_pin : WinRt.HString := To_HString (pin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IRcsEndUserMessage.all.SendResponseWithPinAsync (action.m_IRcsEndUserMessageAction.all, HStr_pin, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_pin);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsEndUserMessageAction

   procedure Initialize (this : in out RcsEndUserMessageAction) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsEndUserMessageAction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsEndUserMessageAction, IRcsEndUserMessageAction_Ptr);
   begin
      if this.m_IRcsEndUserMessageAction /= null then
         if this.m_IRcsEndUserMessageAction.all /= null then
            RefCount := this.m_IRcsEndUserMessageAction.all.Release;
            Free (this.m_IRcsEndUserMessageAction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsEndUserMessageAction

   function get_Label
   (
      this : in out RcsEndUserMessageAction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsEndUserMessageAction.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsEndUserMessageAvailableEventArgs

   procedure Initialize (this : in out RcsEndUserMessageAvailableEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsEndUserMessageAvailableEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsEndUserMessageAvailableEventArgs, IRcsEndUserMessageAvailableEventArgs_Ptr);
   begin
      if this.m_IRcsEndUserMessageAvailableEventArgs /= null then
         if this.m_IRcsEndUserMessageAvailableEventArgs.all /= null then
            RefCount := this.m_IRcsEndUserMessageAvailableEventArgs.all.Release;
            Free (this.m_IRcsEndUserMessageAvailableEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsEndUserMessageAvailableEventArgs

   function get_IsMessageAvailable
   (
      this : in out RcsEndUserMessageAvailableEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRcsEndUserMessageAvailableEventArgs.all.get_IsMessageAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Message
   (
      this : in out RcsEndUserMessageAvailableEventArgs
   )
   return WinRt.Windows.ApplicationModel.Chat.RcsEndUserMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IRcsEndUserMessage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.RcsEndUserMessage do
         Hr := this.m_IRcsEndUserMessageAvailableEventArgs.all.get_Message (m_ComRetVal'Access);
         Retval.m_IRcsEndUserMessage := new Windows.ApplicationModel.Chat.IRcsEndUserMessage;
         Retval.m_IRcsEndUserMessage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsEndUserMessageAvailableTriggerDetails

   procedure Initialize (this : in out RcsEndUserMessageAvailableTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsEndUserMessageAvailableTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsEndUserMessageAvailableTriggerDetails, IRcsEndUserMessageAvailableTriggerDetails_Ptr);
   begin
      if this.m_IRcsEndUserMessageAvailableTriggerDetails /= null then
         if this.m_IRcsEndUserMessageAvailableTriggerDetails.all /= null then
            RefCount := this.m_IRcsEndUserMessageAvailableTriggerDetails.all.Release;
            Free (this.m_IRcsEndUserMessageAvailableTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsEndUserMessageAvailableTriggerDetails

   function get_Title
   (
      this : in out RcsEndUserMessageAvailableTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsEndUserMessageAvailableTriggerDetails.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Text
   (
      this : in out RcsEndUserMessageAvailableTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsEndUserMessageAvailableTriggerDetails.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsEndUserMessageManager

   procedure Initialize (this : in out RcsEndUserMessageManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsEndUserMessageManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsEndUserMessageManager, IRcsEndUserMessageManager_Ptr);
   begin
      if this.m_IRcsEndUserMessageManager /= null then
         if this.m_IRcsEndUserMessageManager.all /= null then
            RefCount := this.m_IRcsEndUserMessageManager.all.Release;
            Free (this.m_IRcsEndUserMessageManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsEndUserMessageManager

   function add_MessageAvailableChanged
   (
      this : in out RcsEndUserMessageManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRcsEndUserMessageManager.all.add_MessageAvailableChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MessageAvailableChanged
   (
      this : in out RcsEndUserMessageManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRcsEndUserMessageManager.all.remove_MessageAvailableChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body RcsManager is

      function GetEndUserMessageManager
      return WinRt.Windows.ApplicationModel.Chat.RcsEndUserMessageManager is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.RcsManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IRcsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IRcsEndUserMessageManager;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.RcsEndUserMessageManager do
            Hr := RoGetActivationFactory (m_hString, IID_IRcsManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetEndUserMessageManager (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IRcsEndUserMessageManager := new Windows.ApplicationModel.Chat.IRcsEndUserMessageManager;
               Retval.m_IRcsEndUserMessageManager.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetTransportsAsync_RcsManager
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.RcsManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IRcsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (400684072, 28256, 20819, (176, 166, 95, 175, 24, 101, 97, 193 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (4132788877, 42532, 24244, (162, 243, 245, 177, 197, 193, 160, 210 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRcsManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetTransportsAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function GetTransportAsync_RcsManager
      (
         transportId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Chat.RcsTransport is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.RcsManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IRcsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_transportId : WinRt.HString := To_HString (transportId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_RcsTransport.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_RcsTransport.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Chat.IRcsTransport;
         m_IID            : aliased WinRt.IID := (4169626856, 38500, 24053, (171, 189, 198, 69, 86, 210, 80, 98 )); -- Windows.ApplicationModel.Chat.RcsTransport;
         m_HandlerIID     : aliased WinRt.IID := (2018617797, 5223, 23677, (175, 116, 87, 236, 107, 211, 52, 23 ));
         m_Handler        : AsyncOperationCompletedHandler_RcsTransport.Kind := new AsyncOperationCompletedHandler_RcsTransport.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_RcsTransport.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_RcsTransport.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_RcsTransport.Kind_Delegate, AsyncOperationCompletedHandler_RcsTransport.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Chat.RcsTransport do
            Hr := RoGetActivationFactory (m_hString, IID_IRcsManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTransportAsync (HStr_transportId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IRcsTransport := new Windows.ApplicationModel.Chat.IRcsTransport;
                        Retval.m_IRcsTransport.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_transportId);
         end return;
      end;

      procedure LeaveConversationAsync
      (
         conversation : Windows.ApplicationModel.Chat.ChatConversation'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.RcsManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IRcsManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRcsManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LeaveConversationAsync (conversation.m_IChatConversation.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_TransportListChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.RcsManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IRcsManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRcsManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_TransportListChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_TransportListChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Chat.RcsManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Chat.IRcsManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRcsManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_TransportListChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end RcsManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsServiceKindSupportedChangedEventArgs

   procedure Initialize (this : in out RcsServiceKindSupportedChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsServiceKindSupportedChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsServiceKindSupportedChangedEventArgs, IRcsServiceKindSupportedChangedEventArgs_Ptr);
   begin
      if this.m_IRcsServiceKindSupportedChangedEventArgs /= null then
         if this.m_IRcsServiceKindSupportedChangedEventArgs.all /= null then
            RefCount := this.m_IRcsServiceKindSupportedChangedEventArgs.all.Release;
            Free (this.m_IRcsServiceKindSupportedChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsServiceKindSupportedChangedEventArgs

   function get_ServiceKind
   (
      this : in out RcsServiceKindSupportedChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Chat.RcsServiceKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.RcsServiceKind;
   begin
      Hr := this.m_IRcsServiceKindSupportedChangedEventArgs.all.get_ServiceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsTransport

   procedure Initialize (this : in out RcsTransport) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsTransport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsTransport, IRcsTransport_Ptr);
   begin
      if this.m_IRcsTransport /= null then
         if this.m_IRcsTransport.all /= null then
            RefCount := this.m_IRcsTransport.all.Release;
            Free (this.m_IRcsTransport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsTransport

   function get_ExtendedProperties
   (
      this : in out RcsTransport
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IRcsTransport.all.get_ExtendedProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsActive
   (
      this : in out RcsTransport
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRcsTransport.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TransportFriendlyName
   (
      this : in out RcsTransport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsTransport.all.get_TransportFriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TransportId
   (
      this : in out RcsTransport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRcsTransport.all.get_TransportId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Configuration
   (
      this : in out RcsTransport
   )
   return WinRt.Windows.ApplicationModel.Chat.RcsTransportConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Chat.IRcsTransportConfiguration;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Chat.RcsTransportConfiguration do
         Hr := this.m_IRcsTransport.all.get_Configuration (m_ComRetVal'Access);
         Retval.m_IRcsTransportConfiguration := new Windows.ApplicationModel.Chat.IRcsTransportConfiguration;
         Retval.m_IRcsTransportConfiguration.all := m_ComRetVal;
      end return;
   end;

   function IsStoreAndForwardEnabled
   (
      this : in out RcsTransport;
      serviceKind : Windows.ApplicationModel.Chat.RcsServiceKind
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRcsTransport.all.IsStoreAndForwardEnabled (serviceKind, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsServiceKindSupported
   (
      this : in out RcsTransport;
      serviceKind : Windows.ApplicationModel.Chat.RcsServiceKind
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRcsTransport.all.IsServiceKindSupported (serviceKind, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ServiceKindSupportedChanged
   (
      this : in out RcsTransport;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRcsTransport.all.add_ServiceKindSupportedChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ServiceKindSupportedChanged
   (
      this : in out RcsTransport;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRcsTransport.all.remove_ServiceKindSupportedChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsTransportConfiguration

   procedure Initialize (this : in out RcsTransportConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsTransportConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsTransportConfiguration, IRcsTransportConfiguration_Ptr);
   begin
      if this.m_IRcsTransportConfiguration /= null then
         if this.m_IRcsTransportConfiguration.all /= null then
            RefCount := this.m_IRcsTransportConfiguration.all.Release;
            Free (this.m_IRcsTransportConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsTransportConfiguration

   function get_MaxAttachmentCount
   (
      this : in out RcsTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRcsTransportConfiguration.all.get_MaxAttachmentCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxMessageSizeInKilobytes
   (
      this : in out RcsTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRcsTransportConfiguration.all.get_MaxMessageSizeInKilobytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxGroupMessageSizeInKilobytes
   (
      this : in out RcsTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRcsTransportConfiguration.all.get_MaxGroupMessageSizeInKilobytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxRecipientCount
   (
      this : in out RcsTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRcsTransportConfiguration.all.get_MaxRecipientCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxFileSizeInKilobytes
   (
      this : in out RcsTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRcsTransportConfiguration.all.get_MaxFileSizeInKilobytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WarningFileSizeInKilobytes
   (
      this : in out RcsTransportConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRcsTransportConfiguration.all.get_WarningFileSizeInKilobytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoteParticipantComposingChangedEventArgs

   procedure Initialize (this : in out RemoteParticipantComposingChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoteParticipantComposingChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoteParticipantComposingChangedEventArgs, IRemoteParticipantComposingChangedEventArgs_Ptr);
   begin
      if this.m_IRemoteParticipantComposingChangedEventArgs /= null then
         if this.m_IRemoteParticipantComposingChangedEventArgs.all /= null then
            RefCount := this.m_IRemoteParticipantComposingChangedEventArgs.all.Release;
            Free (this.m_IRemoteParticipantComposingChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoteParticipantComposingChangedEventArgs

   function get_TransportId
   (
      this : in out RemoteParticipantComposingChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteParticipantComposingChangedEventArgs.all.get_TransportId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParticipantAddress
   (
      this : in out RemoteParticipantComposingChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoteParticipantComposingChangedEventArgs.all.get_ParticipantAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsComposing
   (
      this : in out RemoteParticipantComposingChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRemoteParticipantComposingChangedEventArgs.all.get_IsComposing (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

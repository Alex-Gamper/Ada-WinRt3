--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.AppExtensions is

   package IAsyncOperation_IPropertySet is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Foundation.Collections.IPropertySet);
   package AsyncOperationCompletedHandler_IPropertySet is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Foundation.Collections.IPropertySet);

   package IAsyncOperation_StorageFolder is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFolder);
   package AsyncOperationCompletedHandler_StorageFolder is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFolder);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExtension

   procedure Initialize (this : in out AppExtension) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExtension) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExtension, IAppExtension_Ptr);
   begin
      if this.m_IAppExtension /= null then
         if this.m_IAppExtension.all /= null then
            RefCount := this.m_IAppExtension.all.Release;
            Free (this.m_IAppExtension);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExtension

   function get_Id
   (
      this : in out AppExtension
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtension.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out AppExtension
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtension.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out AppExtension
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtension.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Package
   (
      this : in out AppExtension
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IAppExtension.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_AppInfo
   (
      this : in out AppExtension
   )
   return WinRt.Windows.ApplicationModel.AppInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInfo do
         Hr := this.m_IAppExtension.all.get_AppInfo (m_ComRetVal'Access);
         Retval.m_IAppInfo := new Windows.ApplicationModel.IAppInfo;
         Retval.m_IAppInfo.all := m_ComRetVal;
      end return;
   end;

   function GetExtensionPropertiesAsync
   (
      this : in out AppExtension
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IPropertySet.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IPropertySet.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Foundation.Collections.IPropertySet;
      m_IID            : aliased WinRt.IID := (1225459334, 45015, 20535, (150, 71, 216, 254, 36, 143, 24, 44 )); -- Windows.Foundation.Collections.IPropertySet;
      m_HandlerIID     : aliased WinRt.IID := (1349887327, 26810, 22258, (151, 230, 155, 28, 191, 162, 197, 242 ));
      m_Handler        : AsyncOperationCompletedHandler_IPropertySet.Kind := new AsyncOperationCompletedHandler_IPropertySet.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IPropertySet.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IPropertySet.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IPropertySet.Kind_Delegate, AsyncOperationCompletedHandler_IPropertySet.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppExtension.all.GetExtensionPropertiesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetPublicFolderAsync
   (
      this : in out AppExtension
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IAppExtension.all.GetPublicFolderAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExtensionCatalog

   procedure Initialize (this : in out AppExtensionCatalog) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExtensionCatalog) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExtensionCatalog, IAppExtensionCatalog_Ptr);
   begin
      if this.m_IAppExtensionCatalog /= null then
         if this.m_IAppExtensionCatalog.all /= null then
            RefCount := this.m_IAppExtensionCatalog.all.Release;
            Free (this.m_IAppExtensionCatalog);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppExtensionCatalog

   function Open
   (
      appExtensionName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.AppExtensions.AppExtensionCatalog is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppExtensions.AppExtensionCatalog");
      m_Factory        : access WinRt.Windows.ApplicationModel.AppExtensions.IAppExtensionCatalogStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.AppExtensions.IAppExtensionCatalog;
      HStr_appExtensionName : WinRt.HString := To_HString (appExtensionName);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppExtensions.AppExtensionCatalog do
         Hr := RoGetActivationFactory (m_hString, IID_IAppExtensionCatalogStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Open (HStr_appExtensionName, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppExtensionCatalog := new Windows.ApplicationModel.AppExtensions.IAppExtensionCatalog;
            Retval.m_IAppExtensionCatalog.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appExtensionName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExtensionCatalog

   function FindAllAsync
   (
      this : in out AppExtensionCatalog
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2200525753, 4319, 21263, (160, 215, 190, 5, 186, 128, 203, 24 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3419662907, 4725, 22152, (134, 16, 10, 177, 248, 52, 66, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppExtensionCatalog.all.FindAllAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestRemovePackageAsync
   (
      this : in out AppExtensionCatalog;
      packageFullName : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppExtensionCatalog.all.RequestRemovePackageAsync (HStr_packageFullName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_packageFullName);
      return m_RetVal;
   end;

   function add_PackageInstalled
   (
      this : in out AppExtensionCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppExtensionCatalog.all.add_PackageInstalled (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageInstalled
   (
      this : in out AppExtensionCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppExtensionCatalog.all.remove_PackageInstalled (token);
   end;

   function add_PackageUpdating
   (
      this : in out AppExtensionCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppExtensionCatalog.all.add_PackageUpdating (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageUpdating
   (
      this : in out AppExtensionCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppExtensionCatalog.all.remove_PackageUpdating (token);
   end;

   function add_PackageUpdated
   (
      this : in out AppExtensionCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppExtensionCatalog.all.add_PackageUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageUpdated
   (
      this : in out AppExtensionCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppExtensionCatalog.all.remove_PackageUpdated (token);
   end;

   function add_PackageUninstalling
   (
      this : in out AppExtensionCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppExtensionCatalog.all.add_PackageUninstalling (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageUninstalling
   (
      this : in out AppExtensionCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppExtensionCatalog.all.remove_PackageUninstalling (token);
   end;

   function add_PackageStatusChanged
   (
      this : in out AppExtensionCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppExtensionCatalog.all.add_PackageStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageStatusChanged
   (
      this : in out AppExtensionCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppExtensionCatalog.all.remove_PackageStatusChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExtensionPackageInstalledEventArgs

   procedure Initialize (this : in out AppExtensionPackageInstalledEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExtensionPackageInstalledEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExtensionPackageInstalledEventArgs, IAppExtensionPackageInstalledEventArgs_Ptr);
   begin
      if this.m_IAppExtensionPackageInstalledEventArgs /= null then
         if this.m_IAppExtensionPackageInstalledEventArgs.all /= null then
            RefCount := this.m_IAppExtensionPackageInstalledEventArgs.all.Release;
            Free (this.m_IAppExtensionPackageInstalledEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExtensionPackageInstalledEventArgs

   function get_AppExtensionName
   (
      this : in out AppExtensionPackageInstalledEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtensionPackageInstalledEventArgs.all.get_AppExtensionName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Package
   (
      this : in out AppExtensionPackageInstalledEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IAppExtensionPackageInstalledEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Extensions
   (
      this : in out AppExtensionPackageInstalledEventArgs
   )
   return IVectorView_IAppExtension.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppExtension.Kind;
   begin
      Hr := this.m_IAppExtensionPackageInstalledEventArgs.all.get_Extensions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAppExtension (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExtensionPackageStatusChangedEventArgs

   procedure Initialize (this : in out AppExtensionPackageStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExtensionPackageStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExtensionPackageStatusChangedEventArgs, IAppExtensionPackageStatusChangedEventArgs_Ptr);
   begin
      if this.m_IAppExtensionPackageStatusChangedEventArgs /= null then
         if this.m_IAppExtensionPackageStatusChangedEventArgs.all /= null then
            RefCount := this.m_IAppExtensionPackageStatusChangedEventArgs.all.Release;
            Free (this.m_IAppExtensionPackageStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExtensionPackageStatusChangedEventArgs

   function get_AppExtensionName
   (
      this : in out AppExtensionPackageStatusChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtensionPackageStatusChangedEventArgs.all.get_AppExtensionName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Package
   (
      this : in out AppExtensionPackageStatusChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IAppExtensionPackageStatusChangedEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExtensionPackageUninstallingEventArgs

   procedure Initialize (this : in out AppExtensionPackageUninstallingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExtensionPackageUninstallingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExtensionPackageUninstallingEventArgs, IAppExtensionPackageUninstallingEventArgs_Ptr);
   begin
      if this.m_IAppExtensionPackageUninstallingEventArgs /= null then
         if this.m_IAppExtensionPackageUninstallingEventArgs.all /= null then
            RefCount := this.m_IAppExtensionPackageUninstallingEventArgs.all.Release;
            Free (this.m_IAppExtensionPackageUninstallingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExtensionPackageUninstallingEventArgs

   function get_AppExtensionName
   (
      this : in out AppExtensionPackageUninstallingEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtensionPackageUninstallingEventArgs.all.get_AppExtensionName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Package
   (
      this : in out AppExtensionPackageUninstallingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IAppExtensionPackageUninstallingEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExtensionPackageUpdatedEventArgs

   procedure Initialize (this : in out AppExtensionPackageUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExtensionPackageUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExtensionPackageUpdatedEventArgs, IAppExtensionPackageUpdatedEventArgs_Ptr);
   begin
      if this.m_IAppExtensionPackageUpdatedEventArgs /= null then
         if this.m_IAppExtensionPackageUpdatedEventArgs.all /= null then
            RefCount := this.m_IAppExtensionPackageUpdatedEventArgs.all.Release;
            Free (this.m_IAppExtensionPackageUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExtensionPackageUpdatedEventArgs

   function get_AppExtensionName
   (
      this : in out AppExtensionPackageUpdatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtensionPackageUpdatedEventArgs.all.get_AppExtensionName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Package
   (
      this : in out AppExtensionPackageUpdatedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IAppExtensionPackageUpdatedEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Extensions
   (
      this : in out AppExtensionPackageUpdatedEventArgs
   )
   return IVectorView_IAppExtension.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppExtension.Kind;
   begin
      Hr := this.m_IAppExtensionPackageUpdatedEventArgs.all.get_Extensions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAppExtension (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppExtensionPackageUpdatingEventArgs

   procedure Initialize (this : in out AppExtensionPackageUpdatingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppExtensionPackageUpdatingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppExtensionPackageUpdatingEventArgs, IAppExtensionPackageUpdatingEventArgs_Ptr);
   begin
      if this.m_IAppExtensionPackageUpdatingEventArgs /= null then
         if this.m_IAppExtensionPackageUpdatingEventArgs.all /= null then
            RefCount := this.m_IAppExtensionPackageUpdatingEventArgs.all.Release;
            Free (this.m_IAppExtensionPackageUpdatingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppExtensionPackageUpdatingEventArgs

   function get_AppExtensionName
   (
      this : in out AppExtensionPackageUpdatingEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppExtensionPackageUpdatingEventArgs.all.get_AppExtensionName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Package
   (
      this : in out AppExtensionPackageUpdatingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IAppExtensionPackageUpdatingEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

end;

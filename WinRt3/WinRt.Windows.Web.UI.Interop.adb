--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.DataTransfer;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.UI;
with WinRt.Windows.UI.Core;
with WinRt.Windows.Web.Http;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Web.UI.Interop is

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_DataPackage is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage);
   package AsyncOperationCompletedHandler_DataPackage is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage);

   package IAsyncOperation_WebViewControl is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Web.UI.IWebViewControl);
   package AsyncOperationCompletedHandler_WebViewControl is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Web.UI.IWebViewControl);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControl

   procedure Initialize (this : in out WebViewControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControl) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Web.UI.IWebViewControl;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Web.UI.IWebViewControl, WinRt.Windows.Web.UI.IWebViewControl_Ptr);
   begin
      if this.m_IWebViewControl /= null then
         if this.m_IWebViewControl.all /= null then
            RefCount := this.m_IWebViewControl.all.Release;
            Free (this.m_IWebViewControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControl

   function get_Source
   (
      this : in out WebViewControl
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControl.all.get_Source (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Source
   (
      this : in out WebViewControl;
      source : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.put_Source (source.m_IUriRuntimeClass.all);
   end;

   function get_DocumentTitle
   (
      this : in out WebViewControl
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebViewControl.all.get_DocumentTitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CanGoBack
   (
      this : in out WebViewControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControl.all.get_CanGoBack (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanGoForward
   (
      this : in out WebViewControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControl.all.get_CanGoForward (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DefaultBackgroundColor
   (
      this : in out WebViewControl;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.put_DefaultBackgroundColor (value);
   end;

   function get_DefaultBackgroundColor
   (
      this : in out WebViewControl
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IWebViewControl.all.get_DefaultBackgroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContainsFullScreenElement
   (
      this : in out WebViewControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControl.all.get_ContainsFullScreenElement (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Settings
   (
      this : in out WebViewControl
   )
   return WinRt.Windows.Web.UI.WebViewControlSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.IWebViewControlSettings;
   begin
      return RetVal : WinRt.Windows.Web.UI.WebViewControlSettings do
         Hr := this.m_IWebViewControl.all.get_Settings (m_ComRetVal'Access);
         Retval.m_IWebViewControlSettings := new Windows.Web.UI.IWebViewControlSettings;
         Retval.m_IWebViewControlSettings.all := m_ComRetVal;
      end return;
   end;

   function get_DeferredPermissionRequests
   (
      this : in out WebViewControl
   )
   return IVectorView_IWebViewControlDeferredPermissionRequest.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IWebViewControlDeferredPermissionRequest.Kind;
   begin
      Hr := this.m_IWebViewControl.all.get_DeferredPermissionRequests (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IWebViewControlDeferredPermissionRequest (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure GoForward
   (
      this : in out WebViewControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.GoForward;
   end;

   procedure GoBack
   (
      this : in out WebViewControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.GoBack;
   end;

   procedure Refresh
   (
      this : in out WebViewControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.Refresh;
   end;

   procedure Stop
   (
      this : in out WebViewControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.Stop;
   end;

   procedure Navigate
   (
      this : in out WebViewControl;
      source : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.Navigate (source.m_IUriRuntimeClass.all);
   end;

   procedure NavigateToString
   (
      this : in out WebViewControl;
      text : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      Hr := this.m_IWebViewControl.all.NavigateToString (HStr_text);
      Hr := WindowsDeleteString (HStr_text);
   end;

   procedure NavigateToLocalStreamUri
   (
      this : in out WebViewControl;
      source : Windows.Foundation.Uri'Class;
      streamResolver : Windows.Web.IUriToStreamResolver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.NavigateToLocalStreamUri (source.m_IUriRuntimeClass.all, streamResolver);
   end;

   procedure NavigateWithHttpRequestMessage
   (
      this : in out WebViewControl;
      requestMessage : Windows.Web.Http.HttpRequestMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.NavigateWithHttpRequestMessage (requestMessage.m_IHttpRequestMessage.all);
   end;

   function InvokeScriptAsync
   (
      this : in out WebViewControl;
      scriptName : WinRt.WString;
      arguments : GenericObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_scriptName : WinRt.HString := To_HString (scriptName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IWebViewControl.all.InvokeScriptAsync (HStr_scriptName, arguments, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_scriptName);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   procedure CapturePreviewToStreamAsync
   (
      this : in out WebViewControl;
      stream : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWebViewControl.all.CapturePreviewToStreamAsync (stream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function CaptureSelectedContentToDataPackageAsync
   (
      this : in out WebViewControl
   )
   return WinRt.Windows.ApplicationModel.DataTransfer.DataPackage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DataPackage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DataPackage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.DataTransfer.IDataPackage;
      m_IID            : aliased WinRt.IID := (2708417799, 60115, 21476, (148, 144, 117, 189, 186, 235, 122, 91 )); -- Windows.ApplicationModel.DataTransfer.DataPackage;
      m_HandlerIID     : aliased WinRt.IID := (2839165849, 59718, 22478, (170, 217, 194, 61, 19, 140, 53, 62 ));
      m_Handler        : AsyncOperationCompletedHandler_DataPackage.Kind := new AsyncOperationCompletedHandler_DataPackage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DataPackage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DataPackage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DataPackage.Kind_Delegate, AsyncOperationCompletedHandler_DataPackage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.DataTransfer.DataPackage do
         Hr := this.m_IWebViewControl.all.CaptureSelectedContentToDataPackageAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDataPackage := new Windows.ApplicationModel.DataTransfer.IDataPackage;
                  Retval.m_IDataPackage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function BuildLocalStreamUri
   (
      this : in out WebViewControl;
      contentIdentifier : WinRt.WString;
      relativePath : WinRt.WString
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      HStr_contentIdentifier : WinRt.HString := To_HString (contentIdentifier);
      HStr_relativePath : WinRt.HString := To_HString (relativePath);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IWebViewControl.all.BuildLocalStreamUri (HStr_contentIdentifier, HStr_relativePath, m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_contentIdentifier);
         Hr := WindowsDeleteString (HStr_relativePath);
      end return;
   end;

   procedure GetDeferredPermissionRequestById
   (
      this : in out WebViewControl;
      id : WinRt.UInt32;
      result : access Windows.Web.UI.IWebViewControlDeferredPermissionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.GetDeferredPermissionRequestById (id, result);
   end;

   function add_NavigationStarting
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_NavigationStarting (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NavigationStarting
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_NavigationStarting (token);
   end;

   function add_ContentLoading
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_ContentLoading (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ContentLoading
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_ContentLoading (token);
   end;

   function add_DOMContentLoaded
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_DOMContentLoaded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DOMContentLoaded
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_DOMContentLoaded (token);
   end;

   function add_NavigationCompleted
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_NavigationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NavigationCompleted
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_NavigationCompleted (token);
   end;

   function add_FrameNavigationStarting
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_FrameNavigationStarting (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameNavigationStarting
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_FrameNavigationStarting (token);
   end;

   function add_FrameContentLoading
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_FrameContentLoading (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameContentLoading
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_FrameContentLoading (token);
   end;

   function add_FrameDOMContentLoaded
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_FrameDOMContentLoaded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameDOMContentLoaded
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_FrameDOMContentLoaded (token);
   end;

   function add_FrameNavigationCompleted
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_FrameNavigationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameNavigationCompleted
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_FrameNavigationCompleted (token);
   end;

   function add_ScriptNotify
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_ScriptNotify (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ScriptNotify
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_ScriptNotify (token);
   end;

   function add_LongRunningScriptDetected
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_LongRunningScriptDetected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LongRunningScriptDetected
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_LongRunningScriptDetected (token);
   end;

   function add_UnsafeContentWarningDisplaying
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_UnsafeContentWarningDisplaying (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UnsafeContentWarningDisplaying
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_UnsafeContentWarningDisplaying (token);
   end;

   function add_UnviewableContentIdentified
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_UnviewableContentIdentified (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UnviewableContentIdentified
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_UnviewableContentIdentified (token);
   end;

   function add_PermissionRequested
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_PermissionRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PermissionRequested
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_PermissionRequested (token);
   end;

   function add_UnsupportedUriSchemeIdentified
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_UnsupportedUriSchemeIdentified (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UnsupportedUriSchemeIdentified
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_UnsupportedUriSchemeIdentified (token);
   end;

   function add_NewWindowRequested
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_NewWindowRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NewWindowRequested
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_NewWindowRequested (token);
   end;

   function add_ContainsFullScreenElementChanged
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_ContainsFullScreenElementChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ContainsFullScreenElementChanged
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_ContainsFullScreenElementChanged (token);
   end;

   function add_WebResourceRequested
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControl.all.add_WebResourceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WebResourceRequested
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControl.all.remove_WebResourceRequested (token);
   end;

   function get_Process
   (
      this : in out WebViewControl
   )
   return WinRt.Windows.Web.UI.Interop.WebViewControlProcess'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.Interop.IWebViewControlProcess;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.UI.Interop.WebViewControlProcess do
         m_Interface := QInterface (this.m_IWebViewControl.all);
         Hr := m_Interface.get_Process (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IWebViewControlProcess := new Windows.Web.UI.Interop.IWebViewControlProcess;
         Retval.m_IWebViewControlProcess.all := m_ComRetVal;
      end return;
   end;

   procedure put_Scale
   (
      this : in out WebViewControl;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.put_Scale (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Scale
   (
      this : in out WebViewControl
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.get_Scale (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Bounds
   (
      this : in out WebViewControl;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.put_Bounds (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Bounds
   (
      this : in out WebViewControl
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.get_Bounds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsVisible
   (
      this : in out WebViewControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.put_IsVisible (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsVisible
   (
      this : in out WebViewControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.get_IsVisible (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out WebViewControl
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure MoveFocus
   (
      this : in out WebViewControl;
      reason : Windows.Web.UI.Interop.WebViewControlMoveFocusReason
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.MoveFocus (reason);
      m_RefCount := m_Interface.Release;
   end;

   function add_MoveFocusRequested
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.add_MoveFocusRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_MoveFocusRequested
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.remove_MoveFocusRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_AcceleratorKeyPressed
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.add_AcceleratorKeyPressed (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AcceleratorKeyPressed
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.remove_AcceleratorKeyPressed (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddInitializeScript
   (
      this : in out WebViewControl;
      script : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.IWebViewControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_script : WinRt.HString := To_HString (script);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.IWebViewControl2, WinRt.Windows.Web.UI.IID_IWebViewControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.AddInitializeScript (HStr_script);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_script);
   end;

   function add_GotFocus
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite2, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.add_GotFocus (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_GotFocus
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite2, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.remove_GotFocus (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_LostFocus
   (
      this : in out WebViewControl;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite2, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.add_LostFocus (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_LostFocus
   (
      this : in out WebViewControl;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.UI.Interop.IWebViewControlSite2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.UI.IWebViewControl_Interface, WinRt.Windows.Web.UI.Interop.IWebViewControlSite2, WinRt.Windows.Web.UI.Interop.IID_IWebViewControlSite2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebViewControl.all);
      Hr := m_Interface.remove_LostFocus (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlAcceleratorKeyPressedEventArgs

   procedure Initialize (this : in out WebViewControlAcceleratorKeyPressedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlAcceleratorKeyPressedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlAcceleratorKeyPressedEventArgs, IWebViewControlAcceleratorKeyPressedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlAcceleratorKeyPressedEventArgs /= null then
         if this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all.Release;
            Free (this.m_IWebViewControlAcceleratorKeyPressedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlAcceleratorKeyPressedEventArgs

   function get_EventType
   (
      this : in out WebViewControlAcceleratorKeyPressedEventArgs
   )
   return WinRt.Windows.UI.Core.CoreAcceleratorKeyEventType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.CoreAcceleratorKeyEventType;
   begin
      Hr := this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all.get_EventType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VirtualKey
   (
      this : in out WebViewControlAcceleratorKeyPressedEventArgs
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
   begin
      Hr := this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all.get_VirtualKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_KeyStatus
   (
      this : in out WebViewControlAcceleratorKeyPressedEventArgs
   )
   return WinRt.Windows.UI.Core.CorePhysicalKeyStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.CorePhysicalKeyStatus;
   begin
      Hr := this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all.get_KeyStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RoutingStage
   (
      this : in out WebViewControlAcceleratorKeyPressedEventArgs
   )
   return WinRt.Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage;
   begin
      Hr := this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all.get_RoutingStage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Handled
   (
      this : in out WebViewControlAcceleratorKeyPressedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out WebViewControlAcceleratorKeyPressedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlAcceleratorKeyPressedEventArgs.all.put_Handled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlMoveFocusRequestedEventArgs

   procedure Initialize (this : in out WebViewControlMoveFocusRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlMoveFocusRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlMoveFocusRequestedEventArgs, IWebViewControlMoveFocusRequestedEventArgs_Ptr);
   begin
      if this.m_IWebViewControlMoveFocusRequestedEventArgs /= null then
         if this.m_IWebViewControlMoveFocusRequestedEventArgs.all /= null then
            RefCount := this.m_IWebViewControlMoveFocusRequestedEventArgs.all.Release;
            Free (this.m_IWebViewControlMoveFocusRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlMoveFocusRequestedEventArgs

   function get_Reason
   (
      this : in out WebViewControlMoveFocusRequestedEventArgs
   )
   return WinRt.Windows.Web.UI.Interop.WebViewControlMoveFocusReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.Interop.WebViewControlMoveFocusReason;
   begin
      Hr := this.m_IWebViewControlMoveFocusRequestedEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlProcess

   procedure Initialize (this : in out WebViewControlProcess) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlProcess) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlProcess, IWebViewControlProcess_Ptr);
   begin
      if this.m_IWebViewControlProcess /= null then
         if this.m_IWebViewControlProcess.all /= null then
            RefCount := this.m_IWebViewControlProcess.all.Release;
            Free (this.m_IWebViewControlProcess);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebViewControlProcess

   function Constructor
   (
      processOptions : Windows.Web.UI.Interop.WebViewControlProcessOptions'Class
   )
   return WebViewControlProcess is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.UI.Interop.WebViewControlProcess");
      m_Factory    : access IWebViewControlProcessFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.UI.Interop.IWebViewControlProcess;
   begin
      return RetVal : WebViewControlProcess do
         Hr := RoGetActivationFactory (m_hString, IID_IWebViewControlProcessFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithOptions (processOptions.m_IWebViewControlProcessOptions.all, m_ComRetVal'Access);
            Retval.m_IWebViewControlProcess := new Windows.Web.UI.Interop.IWebViewControlProcess;
            Retval.m_IWebViewControlProcess.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return WebViewControlProcess is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.UI.Interop.WebViewControlProcess");
      m_ComRetVal  : aliased Windows.Web.UI.Interop.IWebViewControlProcess;
   begin
      return RetVal : WebViewControlProcess do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWebViewControlProcess := new Windows.Web.UI.Interop.IWebViewControlProcess;
            Retval.m_IWebViewControlProcess.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlProcess

   function get_ProcessId
   (
      this : in out WebViewControlProcess
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWebViewControlProcess.all.get_ProcessId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EnterpriseId
   (
      this : in out WebViewControlProcess
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebViewControlProcess.all.get_EnterpriseId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsPrivateNetworkClientServerCapabilityEnabled
   (
      this : in out WebViewControlProcess
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWebViewControlProcess.all.get_IsPrivateNetworkClientServerCapabilityEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateWebViewControlAsync
   (
      this : in out WebViewControlProcess;
      hostWindowHandle : WinRt.Int64;
      bounds : Windows.Foundation.Rect
   )
   return WinRt.Windows.Web.UI.Interop.WebViewControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WebViewControl.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WebViewControl.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.UI.IWebViewControl;
      m_IID            : aliased WinRt.IID := (2889689260, 33634, 20934, (178, 204, 22, 243, 103, 39, 88, 241 )); -- Windows.Web.UI.Interop.WebViewControl;
      m_HandlerIID     : aliased WinRt.IID := (3591988182, 32877, 20648, (168, 28, 117, 217, 53, 106, 213, 215 ));
      m_Handler        : AsyncOperationCompletedHandler_WebViewControl.Kind := new AsyncOperationCompletedHandler_WebViewControl.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebViewControl.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebViewControl.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebViewControl.Kind_Delegate, AsyncOperationCompletedHandler_WebViewControl.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Web.UI.Interop.WebViewControl do
         Hr := this.m_IWebViewControlProcess.all.CreateWebViewControlAsync (hostWindowHandle, bounds, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWebViewControl := new Windows.Web.UI.IWebViewControl;
                  Retval.m_IWebViewControl.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetWebViewControls
   (
      this : in out WebViewControlProcess
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWebViewControlProcess.all.GetWebViewControls (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Terminate_x
   (
      this : in out WebViewControlProcess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlProcess.all.Terminate_x;
   end;

   function add_ProcessExited
   (
      this : in out WebViewControlProcess;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebViewControlProcess.all.add_ProcessExited (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ProcessExited
   (
      this : in out WebViewControlProcess;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlProcess.all.remove_ProcessExited (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebViewControlProcessOptions

   procedure Initialize (this : in out WebViewControlProcessOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebViewControlProcessOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebViewControlProcessOptions, IWebViewControlProcessOptions_Ptr);
   begin
      if this.m_IWebViewControlProcessOptions /= null then
         if this.m_IWebViewControlProcessOptions.all /= null then
            RefCount := this.m_IWebViewControlProcessOptions.all.Release;
            Free (this.m_IWebViewControlProcessOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebViewControlProcessOptions

   function Constructor return WebViewControlProcessOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.UI.Interop.WebViewControlProcessOptions");
      m_ComRetVal  : aliased Windows.Web.UI.Interop.IWebViewControlProcessOptions;
   begin
      return RetVal : WebViewControlProcessOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWebViewControlProcessOptions := new Windows.Web.UI.Interop.IWebViewControlProcessOptions;
            Retval.m_IWebViewControlProcessOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebViewControlProcessOptions

   procedure put_EnterpriseId
   (
      this : in out WebViewControlProcessOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IWebViewControlProcessOptions.all.put_EnterpriseId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_EnterpriseId
   (
      this : in out WebViewControlProcessOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebViewControlProcessOptions.all.get_EnterpriseId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PrivateNetworkClientServerCapability
   (
      this : in out WebViewControlProcessOptions;
      value : Windows.Web.UI.Interop.WebViewControlProcessCapabilityState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebViewControlProcessOptions.all.put_PrivateNetworkClientServerCapability (value);
   end;

   function get_PrivateNetworkClientServerCapability
   (
      this : in out WebViewControlProcessOptions
   )
   return WinRt.Windows.Web.UI.Interop.WebViewControlProcessCapabilityState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.UI.Interop.WebViewControlProcessCapabilityState;
   begin
      Hr := this.m_IWebViewControlProcessOptions.all.get_PrivateNetworkClientServerCapability (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Activation;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Perception.Spatial;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Preview.Holographic is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body HolographicApplicationPreview is

      function IsCurrentViewPresentedOnHolographicDisplay
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Preview.Holographic.HolographicApplicationPreview");
         m_Factory        : access WinRt.Windows.ApplicationModel.Preview.Holographic.IHolographicApplicationPreviewStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHolographicApplicationPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsCurrentViewPresentedOnHolographicDisplay (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function IsHolographicActivation
      (
         activatedEventArgs : Windows.ApplicationModel.Activation.IActivatedEventArgs
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Preview.Holographic.HolographicApplicationPreview");
         m_Factory        : access WinRt.Windows.ApplicationModel.Preview.Holographic.IHolographicApplicationPreviewStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHolographicApplicationPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsHolographicActivation (activatedEventArgs, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end HolographicApplicationPreview;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HolographicKeyboardPlacementOverridePreview

   procedure Initialize (this : in out HolographicKeyboardPlacementOverridePreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out HolographicKeyboardPlacementOverridePreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHolographicKeyboardPlacementOverridePreview, IHolographicKeyboardPlacementOverridePreview_Ptr);
   begin
      if this.m_IHolographicKeyboardPlacementOverridePreview /= null then
         if this.m_IHolographicKeyboardPlacementOverridePreview.all /= null then
            RefCount := this.m_IHolographicKeyboardPlacementOverridePreview.all.Release;
            Free (this.m_IHolographicKeyboardPlacementOverridePreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HolographicKeyboardPlacementOverridePreview

   function GetForCurrentView
   return WinRt.Windows.ApplicationModel.Preview.Holographic.HolographicKeyboardPlacementOverridePreview is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Preview.Holographic.HolographicKeyboardPlacementOverridePreview");
      m_Factory        : access WinRt.Windows.ApplicationModel.Preview.Holographic.IHolographicKeyboardPlacementOverridePreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Preview.Holographic.IHolographicKeyboardPlacementOverridePreview;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Preview.Holographic.HolographicKeyboardPlacementOverridePreview do
         Hr := RoGetActivationFactory (m_hString, IID_IHolographicKeyboardPlacementOverridePreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHolographicKeyboardPlacementOverridePreview := new Windows.ApplicationModel.Preview.Holographic.IHolographicKeyboardPlacementOverridePreview;
            Retval.m_IHolographicKeyboardPlacementOverridePreview.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HolographicKeyboardPlacementOverridePreview

   procedure SetPlacementOverride
   (
      this : in out HolographicKeyboardPlacementOverridePreview;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      topCenterPosition : Windows.Foundation.Numerics.Vector3;
      normal : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicKeyboardPlacementOverridePreview.all.SetPlacementOverride (coordinateSystem.m_ISpatialCoordinateSystem.all, topCenterPosition, normal);
   end;

   procedure SetPlacementOverride
   (
      this : in out HolographicKeyboardPlacementOverridePreview;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      topCenterPosition : Windows.Foundation.Numerics.Vector3;
      normal : Windows.Foundation.Numerics.Vector3;
      maxSize : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicKeyboardPlacementOverridePreview.all.SetPlacementOverride (coordinateSystem.m_ISpatialCoordinateSystem.all, topCenterPosition, normal, maxSize);
   end;

   procedure ResetPlacementOverride
   (
      this : in out HolographicKeyboardPlacementOverridePreview
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHolographicKeyboardPlacementOverridePreview.all.ResetPlacementOverride;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Contacts;
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Calls is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_PhoneCallHistoryStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryStore);
   package AsyncOperationCompletedHandler_PhoneCallHistoryStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryStore);

   package IAsyncOperation_PhoneCallHistoryEntry is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryEntry);
   package AsyncOperationCompletedHandler_PhoneCallHistoryEntry is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryEntry);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt32);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.UInt32);

   package IAsyncOperation_PhoneCallStore is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Calls.IPhoneCallStore);
   package AsyncOperationCompletedHandler_PhoneCallStore is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Calls.IPhoneCallStore);

   package IAsyncOperation_Guid is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Guid);
   package AsyncOperationCompletedHandler_Guid is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Guid);

   package IAsyncOperation_PhoneCallVideoCapabilities is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Calls.IPhoneCallVideoCapabilities);
   package AsyncOperationCompletedHandler_PhoneCallVideoCapabilities is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Calls.IPhoneCallVideoCapabilities);

   package IAsyncOperation_PhoneLine is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Calls.IPhoneLine);
   package AsyncOperationCompletedHandler_PhoneLine is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Calls.IPhoneLine);

   package IAsyncOperation_DeviceAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);
   package AsyncOperationCompletedHandler_DeviceAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);

   package IAsyncOperation_VoipPhoneCallResourceReservationStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus);
   package AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CallAnswerEventArgs

   procedure Initialize (this : in out CallAnswerEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CallAnswerEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICallAnswerEventArgs, ICallAnswerEventArgs_Ptr);
   begin
      if this.m_ICallAnswerEventArgs /= null then
         if this.m_ICallAnswerEventArgs.all /= null then
            RefCount := this.m_ICallAnswerEventArgs.all.Release;
            Free (this.m_ICallAnswerEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CallAnswerEventArgs

   function get_AcceptedMedia
   (
      this : in out CallAnswerEventArgs
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallMedia is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.VoipPhoneCallMedia;
   begin
      Hr := this.m_ICallAnswerEventArgs.all.get_AcceptedMedia (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CallRejectEventArgs

   procedure Initialize (this : in out CallRejectEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CallRejectEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICallRejectEventArgs, ICallRejectEventArgs_Ptr);
   begin
      if this.m_ICallRejectEventArgs /= null then
         if this.m_ICallRejectEventArgs.all /= null then
            RefCount := this.m_ICallRejectEventArgs.all.Release;
            Free (this.m_ICallRejectEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CallRejectEventArgs

   function get_RejectReason
   (
      this : in out CallRejectEventArgs
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallRejectReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.VoipPhoneCallRejectReason;
   begin
      Hr := this.m_ICallRejectEventArgs.all.get_RejectReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CallStateChangeEventArgs

   procedure Initialize (this : in out CallStateChangeEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CallStateChangeEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICallStateChangeEventArgs, ICallStateChangeEventArgs_Ptr);
   begin
      if this.m_ICallStateChangeEventArgs /= null then
         if this.m_ICallStateChangeEventArgs.all /= null then
            RefCount := this.m_ICallStateChangeEventArgs.all.Release;
            Free (this.m_ICallStateChangeEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CallStateChangeEventArgs

   function get_State
   (
      this : in out CallStateChangeEventArgs
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.VoipPhoneCallState;
   begin
      Hr := this.m_ICallStateChangeEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenCallEndCallDeferral

   procedure Initialize (this : in out LockScreenCallEndCallDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenCallEndCallDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenCallEndCallDeferral, ILockScreenCallEndCallDeferral_Ptr);
   begin
      if this.m_ILockScreenCallEndCallDeferral /= null then
         if this.m_ILockScreenCallEndCallDeferral.all /= null then
            RefCount := this.m_ILockScreenCallEndCallDeferral.all.Release;
            Free (this.m_ILockScreenCallEndCallDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenCallEndCallDeferral

   procedure Complete
   (
      this : in out LockScreenCallEndCallDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenCallEndCallDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenCallEndRequestedEventArgs

   procedure Initialize (this : in out LockScreenCallEndRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenCallEndRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenCallEndRequestedEventArgs, ILockScreenCallEndRequestedEventArgs_Ptr);
   begin
      if this.m_ILockScreenCallEndRequestedEventArgs /= null then
         if this.m_ILockScreenCallEndRequestedEventArgs.all /= null then
            RefCount := this.m_ILockScreenCallEndRequestedEventArgs.all.Release;
            Free (this.m_ILockScreenCallEndRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenCallEndRequestedEventArgs

   function GetDeferral
   (
      this : in out LockScreenCallEndRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Calls.LockScreenCallEndCallDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.ILockScreenCallEndCallDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.LockScreenCallEndCallDeferral do
         Hr := this.m_ILockScreenCallEndRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_ILockScreenCallEndCallDeferral := new Windows.ApplicationModel.Calls.ILockScreenCallEndCallDeferral;
         Retval.m_ILockScreenCallEndCallDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_Deadline
   (
      this : in out LockScreenCallEndRequestedEventArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ILockScreenCallEndRequestedEventArgs.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenCallUI

   procedure Initialize (this : in out LockScreenCallUI) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenCallUI) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenCallUI, ILockScreenCallUI_Ptr);
   begin
      if this.m_ILockScreenCallUI /= null then
         if this.m_ILockScreenCallUI.all /= null then
            RefCount := this.m_ILockScreenCallUI.all.Release;
            Free (this.m_ILockScreenCallUI);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenCallUI

   procedure Dismiss
   (
      this : in out LockScreenCallUI
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenCallUI.all.Dismiss;
   end;

   function add_EndRequested
   (
      this : in out LockScreenCallUI;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILockScreenCallUI.all.add_EndRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EndRequested
   (
      this : in out LockScreenCallUI;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenCallUI.all.remove_EndRequested (token);
   end;

   function add_Closed
   (
      this : in out LockScreenCallUI;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILockScreenCallUI.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out LockScreenCallUI;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenCallUI.all.remove_Closed (token);
   end;

   function get_CallTitle
   (
      this : in out LockScreenCallUI
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILockScreenCallUI.all.get_CallTitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CallTitle
   (
      this : in out LockScreenCallUI;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILockScreenCallUI.all.put_CallTitle (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MuteChangeEventArgs

   procedure Initialize (this : in out MuteChangeEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MuteChangeEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMuteChangeEventArgs, IMuteChangeEventArgs_Ptr);
   begin
      if this.m_IMuteChangeEventArgs /= null then
         if this.m_IMuteChangeEventArgs.all /= null then
            RefCount := this.m_IMuteChangeEventArgs.all.Release;
            Free (this.m_IMuteChangeEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MuteChangeEventArgs

   function get_Muted
   (
      this : in out MuteChangeEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMuteChangeEventArgs.all.get_Muted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PhoneCallBlocking is

      function get_BlockUnknownNumbers
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallBlocking");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallBlockingStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallBlockingStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BlockUnknownNumbers (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_BlockUnknownNumbers
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallBlocking");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallBlockingStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallBlockingStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_BlockUnknownNumbers (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_BlockPrivateNumbers
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallBlocking");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallBlockingStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallBlockingStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BlockPrivateNumbers (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_BlockPrivateNumbers
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallBlocking");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallBlockingStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallBlockingStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_BlockPrivateNumbers (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function SetCallBlockingListAsync
      (
         phoneNumberList : GenericObject
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallBlocking");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallBlockingStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallBlockingStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SetCallBlockingListAsync (phoneNumberList, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end PhoneCallBlocking;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallHistoryEntry

   procedure Initialize (this : in out PhoneCallHistoryEntry) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallHistoryEntry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallHistoryEntry, IPhoneCallHistoryEntry_Ptr);
   begin
      if this.m_IPhoneCallHistoryEntry /= null then
         if this.m_IPhoneCallHistoryEntry.all /= null then
            RefCount := this.m_IPhoneCallHistoryEntry.all.Release;
            Free (this.m_IPhoneCallHistoryEntry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PhoneCallHistoryEntry

   function Constructor return PhoneCallHistoryEntry is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallHistoryEntry");
      m_ComRetVal  : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryEntry;
   begin
      return RetVal : PhoneCallHistoryEntry do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPhoneCallHistoryEntry := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntry;
            Retval.m_IPhoneCallHistoryEntry.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallHistoryEntry

   function get_Id
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Address
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryAddress;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress do
         Hr := this.m_IPhoneCallHistoryEntry.all.get_Address (m_ComRetVal'Access);
         Retval.m_IPhoneCallHistoryEntryAddress := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryAddress;
         Retval.m_IPhoneCallHistoryEntryAddress.all := m_ComRetVal;
      end return;
   end;

   procedure put_Address
   (
      this : in out PhoneCallHistoryEntry;
      value : Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_Address (value.m_IPhoneCallHistoryEntryAddress.all);
   end;

   function get_Duration
   (
      this : in out PhoneCallHistoryEntry
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_Duration (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Duration
   (
      this : in out PhoneCallHistoryEntry;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_Duration (value);
   end;

   function get_IsCallerIdBlocked
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsCallerIdBlocked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCallerIdBlocked
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsCallerIdBlocked (value);
   end;

   function get_IsEmergency
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsEmergency (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEmergency
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsEmergency (value);
   end;

   function get_IsIncoming
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsIncoming (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsIncoming
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsIncoming (value);
   end;

   function get_IsMissed
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsMissed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsMissed
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsMissed (value);
   end;

   function get_IsRinging
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsRinging (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsRinging
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsRinging (value);
   end;

   function get_IsSeen
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsSeen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSeen
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsSeen (value);
   end;

   function get_IsSuppressed
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsSuppressed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSuppressed
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsSuppressed (value);
   end;

   function get_IsVoicemail
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_IsVoicemail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsVoicemail
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_IsVoicemail (value);
   end;

   function get_Media
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryMedia is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneCallHistoryEntryMedia;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_Media (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Media
   (
      this : in out PhoneCallHistoryEntry;
      value : Windows.ApplicationModel.Calls.PhoneCallHistoryEntryMedia
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_Media (value);
   end;

   function get_OtherAppReadAccess
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryOtherAppReadAccess is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneCallHistoryEntryOtherAppReadAccess;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_OtherAppReadAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OtherAppReadAccess
   (
      this : in out PhoneCallHistoryEntry;
      value : Windows.ApplicationModel.Calls.PhoneCallHistoryEntryOtherAppReadAccess
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_OtherAppReadAccess (value);
   end;

   function get_RemoteId
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_RemoteId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RemoteId
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_RemoteId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SourceDisplayName
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_SourceDisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SourceId
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_SourceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SourceId
   (
      this : in out PhoneCallHistoryEntry;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_SourceId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SourceIdKind
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistorySourceIdKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneCallHistorySourceIdKind;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_SourceIdKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SourceIdKind
   (
      this : in out PhoneCallHistoryEntry;
      value : Windows.ApplicationModel.Calls.PhoneCallHistorySourceIdKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_SourceIdKind (value);
   end;

   function get_StartTime
   (
      this : in out PhoneCallHistoryEntry
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartTime
   (
      this : in out PhoneCallHistoryEntry;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntry.all.put_StartTime (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallHistoryEntryAddress

   procedure Initialize (this : in out PhoneCallHistoryEntryAddress) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallHistoryEntryAddress) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallHistoryEntryAddress, IPhoneCallHistoryEntryAddress_Ptr);
   begin
      if this.m_IPhoneCallHistoryEntryAddress /= null then
         if this.m_IPhoneCallHistoryEntryAddress.all /= null then
            RefCount := this.m_IPhoneCallHistoryEntryAddress.all.Release;
            Free (this.m_IPhoneCallHistoryEntryAddress);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PhoneCallHistoryEntryAddress

   function Constructor return PhoneCallHistoryEntryAddress is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress");
      m_ComRetVal  : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryAddress;
   begin
      return RetVal : PhoneCallHistoryEntryAddress do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPhoneCallHistoryEntryAddress := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryAddress;
            Retval.m_IPhoneCallHistoryEntryAddress.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      rawAddress : WinRt.WString;
      rawAddressKind : Windows.ApplicationModel.Calls.PhoneCallHistoryEntryRawAddressKind
   )
   return PhoneCallHistoryEntryAddress is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress");
      m_Factory    : access IPhoneCallHistoryEntryAddressFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryAddress;
      HStr_rawAddress : WinRt.HString := To_HString (rawAddress);
   begin
      return RetVal : PhoneCallHistoryEntryAddress do
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallHistoryEntryAddressFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_rawAddress, rawAddressKind, m_ComRetVal'Access);
            Retval.m_IPhoneCallHistoryEntryAddress := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryAddress;
            Retval.m_IPhoneCallHistoryEntryAddress.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_rawAddress);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallHistoryEntryAddress

   function get_ContactId
   (
      this : in out PhoneCallHistoryEntryAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.get_ContactId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContactId
   (
      this : in out PhoneCallHistoryEntryAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.put_ContactId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out PhoneCallHistoryEntryAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out PhoneCallHistoryEntryAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RawAddress
   (
      this : in out PhoneCallHistoryEntryAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.get_RawAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_RawAddress
   (
      this : in out PhoneCallHistoryEntryAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.put_RawAddress (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_RawAddressKind
   (
      this : in out PhoneCallHistoryEntryAddress
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryRawAddressKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneCallHistoryEntryRawAddressKind;
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.get_RawAddressKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RawAddressKind
   (
      this : in out PhoneCallHistoryEntryAddress;
      value : Windows.ApplicationModel.Calls.PhoneCallHistoryEntryRawAddressKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntryAddress.all.put_RawAddressKind (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallHistoryEntryQueryOptions

   procedure Initialize (this : in out PhoneCallHistoryEntryQueryOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallHistoryEntryQueryOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallHistoryEntryQueryOptions, IPhoneCallHistoryEntryQueryOptions_Ptr);
   begin
      if this.m_IPhoneCallHistoryEntryQueryOptions /= null then
         if this.m_IPhoneCallHistoryEntryQueryOptions.all /= null then
            RefCount := this.m_IPhoneCallHistoryEntryQueryOptions.all.Release;
            Free (this.m_IPhoneCallHistoryEntryQueryOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PhoneCallHistoryEntryQueryOptions

   function Constructor return PhoneCallHistoryEntryQueryOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryQueryOptions;
   begin
      return RetVal : PhoneCallHistoryEntryQueryOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPhoneCallHistoryEntryQueryOptions := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryQueryOptions;
            Retval.m_IPhoneCallHistoryEntryQueryOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallHistoryEntryQueryOptions

   function get_DesiredMedia
   (
      this : in out PhoneCallHistoryEntryQueryOptions
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryDesiredMedia is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryDesiredMedia;
   begin
      Hr := this.m_IPhoneCallHistoryEntryQueryOptions.all.get_DesiredMedia (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredMedia
   (
      this : in out PhoneCallHistoryEntryQueryOptions;
      value : Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryDesiredMedia
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneCallHistoryEntryQueryOptions.all.put_DesiredMedia (value);
   end;

   function get_SourceIds
   (
      this : in out PhoneCallHistoryEntryQueryOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IPhoneCallHistoryEntryQueryOptions.all.get_SourceIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallHistoryEntryReader

   procedure Initialize (this : in out PhoneCallHistoryEntryReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallHistoryEntryReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallHistoryEntryReader, IPhoneCallHistoryEntryReader_Ptr);
   begin
      if this.m_IPhoneCallHistoryEntryReader /= null then
         if this.m_IPhoneCallHistoryEntryReader.all /= null then
            RefCount := this.m_IPhoneCallHistoryEntryReader.all.Release;
            Free (this.m_IPhoneCallHistoryEntryReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallHistoryEntryReader

   function ReadBatchAsync
   (
      this : in out PhoneCallHistoryEntryReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (576239890, 60272, 21345, (178, 10, 115, 30, 21, 187, 144, 151 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (519481349, 64900, 22358, (161, 128, 53, 61, 215, 45, 178, 117 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneCallHistoryEntryReader.all.ReadBatchAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PhoneCallHistoryManager is

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallHistoryManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryManagerForUser;
      begin
         return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallHistoryManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPhoneCallHistoryManagerForUser := new Windows.ApplicationModel.Calls.IPhoneCallHistoryManagerForUser;
               Retval.m_IPhoneCallHistoryManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function RequestStoreAsync
      (
         accessType : Windows.ApplicationModel.Calls.PhoneCallHistoryStoreAccessType
      )
      return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallHistoryManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PhoneCallHistoryStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PhoneCallHistoryStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryStore;
         m_IID            : aliased WinRt.IID := (228235184, 34710, 21183, (128, 218, 177, 67, 95, 230, 74, 38 )); -- Windows.ApplicationModel.Calls.PhoneCallHistoryStore;
         m_HandlerIID     : aliased WinRt.IID := (577377163, 31210, 22227, (173, 194, 164, 13, 184, 216, 201, 176 ));
         m_Handler        : AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind := new AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhoneCallHistoryStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind_Delegate, AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryStore do
            Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallHistoryManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (accessType, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPhoneCallHistoryStore := new Windows.ApplicationModel.Calls.IPhoneCallHistoryStore;
                        Retval.m_IPhoneCallHistoryStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end PhoneCallHistoryManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallHistoryManagerForUser

   procedure Initialize (this : in out PhoneCallHistoryManagerForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallHistoryManagerForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallHistoryManagerForUser, IPhoneCallHistoryManagerForUser_Ptr);
   begin
      if this.m_IPhoneCallHistoryManagerForUser /= null then
         if this.m_IPhoneCallHistoryManagerForUser.all /= null then
            RefCount := this.m_IPhoneCallHistoryManagerForUser.all.Release;
            Free (this.m_IPhoneCallHistoryManagerForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallHistoryManagerForUser

   function RequestStoreAsync
   (
      this : in out PhoneCallHistoryManagerForUser;
      accessType : Windows.ApplicationModel.Calls.PhoneCallHistoryStoreAccessType
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryStore'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhoneCallHistoryStore.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhoneCallHistoryStore.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryStore;
      m_IID            : aliased WinRt.IID := (228235184, 34710, 21183, (128, 218, 177, 67, 95, 230, 74, 38 )); -- Windows.ApplicationModel.Calls.PhoneCallHistoryStore;
      m_HandlerIID     : aliased WinRt.IID := (577377163, 31210, 22227, (173, 194, 164, 13, 184, 216, 201, 176 ));
      m_Handler        : AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind := new AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhoneCallHistoryStore.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind_Delegate, AsyncOperationCompletedHandler_PhoneCallHistoryStore.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryStore do
         Hr := this.m_IPhoneCallHistoryManagerForUser.all.RequestStoreAsync (accessType, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhoneCallHistoryStore := new Windows.ApplicationModel.Calls.IPhoneCallHistoryStore;
                  Retval.m_IPhoneCallHistoryStore.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_User
   (
      this : in out PhoneCallHistoryManagerForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IPhoneCallHistoryManagerForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallHistoryStore

   procedure Initialize (this : in out PhoneCallHistoryStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallHistoryStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallHistoryStore, IPhoneCallHistoryStore_Ptr);
   begin
      if this.m_IPhoneCallHistoryStore /= null then
         if this.m_IPhoneCallHistoryStore.all /= null then
            RefCount := this.m_IPhoneCallHistoryStore.all.Release;
            Free (this.m_IPhoneCallHistoryStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallHistoryStore

   function GetEntryAsync
   (
      this : in out PhoneCallHistoryStore;
      callHistoryEntryId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_callHistoryEntryId : WinRt.HString := To_HString (callHistoryEntryId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhoneCallHistoryEntry.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhoneCallHistoryEntry.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.IPhoneCallHistoryEntry;
      m_IID            : aliased WinRt.IID := (2019458250, 37090, 23811, (143, 35, 179, 53, 141, 9, 201, 81 )); -- Windows.ApplicationModel.Calls.PhoneCallHistoryEntry;
      m_HandlerIID     : aliased WinRt.IID := (842277963, 44014, 22045, (178, 71, 121, 184, 50, 130, 32, 85 ));
      m_Handler        : AsyncOperationCompletedHandler_PhoneCallHistoryEntry.Kind := new AsyncOperationCompletedHandler_PhoneCallHistoryEntry.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhoneCallHistoryEntry.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhoneCallHistoryEntry.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhoneCallHistoryEntry.Kind_Delegate, AsyncOperationCompletedHandler_PhoneCallHistoryEntry.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntry do
         Hr := this.m_IPhoneCallHistoryStore.all.GetEntryAsync (HStr_callHistoryEntryId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPhoneCallHistoryEntry := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntry;
                  Retval.m_IPhoneCallHistoryEntry.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_callHistoryEntryId);
      end return;
   end;

   function GetEntryReader
   (
      this : in out PhoneCallHistoryStore
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader do
         Hr := this.m_IPhoneCallHistoryStore.all.GetEntryReader (m_ComRetVal'Access);
         Retval.m_IPhoneCallHistoryEntryReader := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryReader;
         Retval.m_IPhoneCallHistoryEntryReader.all := m_ComRetVal;
      end return;
   end;

   function GetEntryReader
   (
      this : in out PhoneCallHistoryStore;
      queryOptions : Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryOptions'Class
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryReader;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader do
         Hr := this.m_IPhoneCallHistoryStore.all.GetEntryReader (queryOptions.m_IPhoneCallHistoryEntryQueryOptions.all, m_ComRetVal'Access);
         Retval.m_IPhoneCallHistoryEntryReader := new Windows.ApplicationModel.Calls.IPhoneCallHistoryEntryReader;
         Retval.m_IPhoneCallHistoryEntryReader.all := m_ComRetVal;
      end return;
   end;

   procedure SaveEntryAsync
   (
      this : in out PhoneCallHistoryStore;
      callHistoryEntry : Windows.ApplicationModel.Calls.PhoneCallHistoryEntry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.SaveEntryAsync (callHistoryEntry.m_IPhoneCallHistoryEntry.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteEntryAsync
   (
      this : in out PhoneCallHistoryStore;
      callHistoryEntry : Windows.ApplicationModel.Calls.PhoneCallHistoryEntry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.DeleteEntryAsync (callHistoryEntry.m_IPhoneCallHistoryEntry.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteEntriesAsync
   (
      this : in out PhoneCallHistoryStore;
      callHistoryEntries : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.DeleteEntriesAsync (callHistoryEntries, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure MarkEntryAsSeenAsync
   (
      this : in out PhoneCallHistoryStore;
      callHistoryEntry : Windows.ApplicationModel.Calls.PhoneCallHistoryEntry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.MarkEntryAsSeenAsync (callHistoryEntry.m_IPhoneCallHistoryEntry.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure MarkEntriesAsSeenAsync
   (
      this : in out PhoneCallHistoryStore;
      callHistoryEntries : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.MarkEntriesAsSeenAsync (callHistoryEntries, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetUnseenCountAsync
   (
      this : in out PhoneCallHistoryStore
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.GetUnseenCountAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure MarkAllAsSeenAsync
   (
      this : in out PhoneCallHistoryStore
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.MarkAllAsSeenAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetSourcesUnseenCountAsync
   (
      this : in out PhoneCallHistoryStore;
      sourceIds : GenericObject
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.GetSourcesUnseenCountAsync (sourceIds, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure MarkSourcesAsSeenAsync
   (
      this : in out PhoneCallHistoryStore;
      sourceIds : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneCallHistoryStore.all.MarkSourcesAsSeenAsync (sourceIds, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PhoneCallManager is

      function add_CallStateChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_CallStateChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_CallStateChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_CallStateChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_IsCallActive
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsCallActive (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IsCallIncoming
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsCallIncoming (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure ShowPhoneCallSettingsUI is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowPhoneCallSettingsUI;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RequestStoreAsync
      return WinRt.Windows.ApplicationModel.Calls.PhoneCallStore is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PhoneCallStore.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PhoneCallStore.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.IPhoneCallStore;
         m_IID            : aliased WinRt.IID := (2266803496, 488, 21429, (161, 75, 48, 49, 109, 246, 89, 7 )); -- Windows.ApplicationModel.Calls.PhoneCallStore;
         m_HandlerIID     : aliased WinRt.IID := (666254259, 53256, 22773, (133, 77, 221, 174, 101, 160, 32, 185 ));
         m_Handler        : AsyncOperationCompletedHandler_PhoneCallStore.Kind := new AsyncOperationCompletedHandler_PhoneCallStore.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhoneCallStore.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhoneCallStore.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhoneCallStore.Kind_Delegate, AsyncOperationCompletedHandler_PhoneCallStore.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallStore do
            Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestStoreAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPhoneCallStore := new Windows.ApplicationModel.Calls.IPhoneCallStore;
                        Retval.m_IPhoneCallStore.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ShowPhoneCallUI
      (
         phoneNumber : WinRt.WString;
         displayName : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_phoneNumber : WinRt.HString := To_HString (phoneNumber);
         HStr_displayName : WinRt.HString := To_HString (displayName);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowPhoneCallUI (HStr_phoneNumber, HStr_displayName);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_phoneNumber);
         Hr := WindowsDeleteString (HStr_displayName);
      end;

   end PhoneCallManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallStore

   procedure Initialize (this : in out PhoneCallStore) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallStore) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallStore, IPhoneCallStore_Ptr);
   begin
      if this.m_IPhoneCallStore /= null then
         if this.m_IPhoneCallStore.all /= null then
            RefCount := this.m_IPhoneCallStore.all.Release;
            Free (this.m_IPhoneCallStore);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallStore

   function IsEmergencyPhoneNumberAsync
   (
      this : in out PhoneCallStore;
      number : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_number : WinRt.HString := To_HString (number);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneCallStore.all.IsEmergencyPhoneNumberAsync (HStr_number, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_number);
      return m_RetVal;
   end;

   function GetDefaultLineAsync
   (
      this : in out PhoneCallStore
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Guid.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Guid.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Guid;
      m_IID            : aliased WinRt.IID := (1711782977, 10571, 22901, (156, 63, 75, 73, 131, 109, 9, 22 )); -- Guid;
      m_HandlerIID     : aliased WinRt.IID := (1379109275, 47742, 20559, (187, 131, 206, 235, 172, 98, 222, 207 ));
      m_Handler        : AsyncOperationCompletedHandler_Guid.Kind := new AsyncOperationCompletedHandler_Guid.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Guid.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Guid.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Guid.Kind_Delegate, AsyncOperationCompletedHandler_Guid.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneCallStore.all.GetDefaultLineAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestLineWatcher
   (
      this : in out PhoneCallStore
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLineWatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneLineWatcher;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneLineWatcher do
         Hr := this.m_IPhoneCallStore.all.RequestLineWatcher (m_ComRetVal'Access);
         Retval.m_IPhoneLineWatcher := new Windows.ApplicationModel.Calls.IPhoneLineWatcher;
         Retval.m_IPhoneLineWatcher.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneCallVideoCapabilities

   procedure Initialize (this : in out PhoneCallVideoCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneCallVideoCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneCallVideoCapabilities, IPhoneCallVideoCapabilities_Ptr);
   begin
      if this.m_IPhoneCallVideoCapabilities /= null then
         if this.m_IPhoneCallVideoCapabilities.all /= null then
            RefCount := this.m_IPhoneCallVideoCapabilities.all.Release;
            Free (this.m_IPhoneCallVideoCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneCallVideoCapabilities

   function get_IsVideoCallingCapable
   (
      this : in out PhoneCallVideoCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneCallVideoCapabilities.all.get_IsVideoCallingCapable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PhoneCallVideoCapabilitiesManager is

      function GetCapabilitiesAsync
      (
         phoneNumber : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneCallVideoCapabilitiesManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneCallVideoCapabilitiesManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_phoneNumber : WinRt.HString := To_HString (phoneNumber);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PhoneCallVideoCapabilities.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PhoneCallVideoCapabilities.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.IPhoneCallVideoCapabilities;
         m_IID            : aliased WinRt.IID := (2068523018, 58130, 24326, (185, 83, 126, 72, 43, 103, 207, 207 )); -- Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities;
         m_HandlerIID     : aliased WinRt.IID := (3843016742, 16115, 22121, (170, 20, 235, 149, 144, 55, 147, 165 ));
         m_Handler        : AsyncOperationCompletedHandler_PhoneCallVideoCapabilities.Kind := new AsyncOperationCompletedHandler_PhoneCallVideoCapabilities.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhoneCallVideoCapabilities.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhoneCallVideoCapabilities.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhoneCallVideoCapabilities.Kind_Delegate, AsyncOperationCompletedHandler_PhoneCallVideoCapabilities.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities do
            Hr := RoGetActivationFactory (m_hString, IID_IPhoneCallVideoCapabilitiesManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCapabilitiesAsync (HStr_phoneNumber, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPhoneCallVideoCapabilities := new Windows.ApplicationModel.Calls.IPhoneCallVideoCapabilities;
                        Retval.m_IPhoneCallVideoCapabilities.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_phoneNumber);
         end return;
      end;

   end PhoneCallVideoCapabilitiesManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneDialOptions

   procedure Initialize (this : in out PhoneDialOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneDialOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneDialOptions, IPhoneDialOptions_Ptr);
   begin
      if this.m_IPhoneDialOptions /= null then
         if this.m_IPhoneDialOptions.all /= null then
            RefCount := this.m_IPhoneDialOptions.all.Release;
            Free (this.m_IPhoneDialOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PhoneDialOptions

   function Constructor return PhoneDialOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneDialOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Calls.IPhoneDialOptions;
   begin
      return RetVal : PhoneDialOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPhoneDialOptions := new Windows.ApplicationModel.Calls.IPhoneDialOptions;
            Retval.m_IPhoneDialOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneDialOptions

   function get_Number
   (
      this : in out PhoneDialOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneDialOptions.all.get_Number (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Number
   (
      this : in out PhoneDialOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneDialOptions.all.put_Number (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayName
   (
      this : in out PhoneDialOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneDialOptions.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out PhoneDialOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPhoneDialOptions.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Contact
   (
      this : in out PhoneDialOptions
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IPhoneDialOptions.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   procedure put_Contact
   (
      this : in out PhoneDialOptions;
      value : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneDialOptions.all.put_Contact (value.m_IContact.all);
   end;

   function get_ContactPhone
   (
      this : in out PhoneDialOptions
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactPhone'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactPhone;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactPhone do
         Hr := this.m_IPhoneDialOptions.all.get_ContactPhone (m_ComRetVal'Access);
         Retval.m_IContactPhone := new Windows.ApplicationModel.Contacts.IContactPhone;
         Retval.m_IContactPhone.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContactPhone
   (
      this : in out PhoneDialOptions;
      value : Windows.ApplicationModel.Contacts.ContactPhone'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneDialOptions.all.put_ContactPhone (value.m_IContactPhone.all);
   end;

   function get_Media
   (
      this : in out PhoneDialOptions
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallMedia is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneCallMedia;
   begin
      Hr := this.m_IPhoneDialOptions.all.get_Media (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Media
   (
      this : in out PhoneDialOptions;
      value : Windows.ApplicationModel.Calls.PhoneCallMedia
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneDialOptions.all.put_Media (value);
   end;

   function get_AudioEndpoint
   (
      this : in out PhoneDialOptions
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneAudioRoutingEndpoint is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneAudioRoutingEndpoint;
   begin
      Hr := this.m_IPhoneDialOptions.all.get_AudioEndpoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AudioEndpoint
   (
      this : in out PhoneDialOptions;
      value : Windows.ApplicationModel.Calls.PhoneAudioRoutingEndpoint
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneDialOptions.all.put_AudioEndpoint (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLine

   procedure Initialize (this : in out PhoneLine) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLine) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLine, IPhoneLine_Ptr);
   begin
      if this.m_IPhoneLine /= null then
         if this.m_IPhoneLine.all /= null then
            RefCount := this.m_IPhoneLine.all.Release;
            Free (this.m_IPhoneLine);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PhoneLine

   function FromIdAsync
   (
      lineId : WinRt.Guid
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLine is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneLine");
      m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneLineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PhoneLine.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PhoneLine.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.IPhoneLine;
      m_IID            : aliased WinRt.IID := (3631294256, 43624, 22036, (164, 8, 178, 1, 36, 99, 18, 11 )); -- Windows.ApplicationModel.Calls.PhoneLine;
      m_HandlerIID     : aliased WinRt.IID := (2462997501, 5143, 21998, (176, 182, 41, 138, 231, 140, 177, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_PhoneLine.Kind := new AsyncOperationCompletedHandler_PhoneLine.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PhoneLine.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PhoneLine.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PhoneLine.Kind_Delegate, AsyncOperationCompletedHandler_PhoneLine.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneLine do
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneLineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (lineId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPhoneLine := new Windows.ApplicationModel.Calls.IPhoneLine;
                     Retval.m_IPhoneLine.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLine

   function add_LineChanged
   (
      this : in out PhoneLine;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhoneLine.all.add_LineChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LineChanged
   (
      this : in out PhoneLine;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLine.all.remove_LineChanged (token);
   end;

   function get_Id
   (
      this : in out PhoneLine
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneLine.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayColor
   (
      this : in out PhoneLine
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IPhoneLine.all.get_DisplayColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkState
   (
      this : in out PhoneLine
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneNetworkState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneNetworkState;
   begin
      Hr := this.m_IPhoneLine.all.get_NetworkState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayName
   (
      this : in out PhoneLine
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneLine.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Voicemail
   (
      this : in out PhoneLine
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneVoicemail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneVoicemail;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneVoicemail do
         Hr := this.m_IPhoneLine.all.get_Voicemail (m_ComRetVal'Access);
         Retval.m_IPhoneVoicemail := new Windows.ApplicationModel.Calls.IPhoneVoicemail;
         Retval.m_IPhoneVoicemail.all := m_ComRetVal;
      end return;
   end;

   function get_NetworkName
   (
      this : in out PhoneLine
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneLine.all.get_NetworkName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularDetails
   (
      this : in out PhoneLine
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLineCellularDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneLineCellularDetails;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneLineCellularDetails do
         Hr := this.m_IPhoneLine.all.get_CellularDetails (m_ComRetVal'Access);
         Retval.m_IPhoneLineCellularDetails := new Windows.ApplicationModel.Calls.IPhoneLineCellularDetails;
         Retval.m_IPhoneLineCellularDetails.all := m_ComRetVal;
      end return;
   end;

   function get_Transport
   (
      this : in out PhoneLine
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLineTransport is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneLineTransport;
   begin
      Hr := this.m_IPhoneLine.all.get_Transport (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanDial
   (
      this : in out PhoneLine
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLine.all.get_CanDial (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportsTile
   (
      this : in out PhoneLine
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLine.all.get_SupportsTile (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoCallingCapabilities
   (
      this : in out PhoneLine
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneCallVideoCapabilities;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities do
         Hr := this.m_IPhoneLine.all.get_VideoCallingCapabilities (m_ComRetVal'Access);
         Retval.m_IPhoneCallVideoCapabilities := new Windows.ApplicationModel.Calls.IPhoneCallVideoCapabilities;
         Retval.m_IPhoneCallVideoCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_LineConfiguration
   (
      this : in out PhoneLine
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLineConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneLineConfiguration;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneLineConfiguration do
         Hr := this.m_IPhoneLine.all.get_LineConfiguration (m_ComRetVal'Access);
         Retval.m_IPhoneLineConfiguration := new Windows.ApplicationModel.Calls.IPhoneLineConfiguration;
         Retval.m_IPhoneLineConfiguration.all := m_ComRetVal;
      end return;
   end;

   function IsImmediateDialNumberAsync
   (
      this : in out PhoneLine;
      number : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_number : WinRt.HString := To_HString (number);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneLine.all.IsImmediateDialNumberAsync (HStr_number, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_number);
      return m_RetVal;
   end;

   procedure Dial
   (
      this : in out PhoneLine;
      number : WinRt.WString;
      displayName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_number : WinRt.HString := To_HString (number);
      HStr_displayName : WinRt.HString := To_HString (displayName);
   begin
      Hr := this.m_IPhoneLine.all.Dial (HStr_number, HStr_displayName);
      Hr := WindowsDeleteString (HStr_number);
      Hr := WindowsDeleteString (HStr_displayName);
   end;

   procedure DialWithOptions
   (
      this : in out PhoneLine;
      options : Windows.ApplicationModel.Calls.PhoneDialOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLine.all.DialWithOptions (options.m_IPhoneDialOptions.all);
   end;

   procedure EnableTextReply
   (
      this : in out PhoneLine;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IPhoneLine2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IPhoneLine_Interface, WinRt.Windows.ApplicationModel.Calls.IPhoneLine2, WinRt.Windows.ApplicationModel.Calls.IID_IPhoneLine2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneLine.all);
      Hr := m_Interface.EnableTextReply (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransportDeviceId
   (
      this : in out PhoneLine
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IPhoneLine2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IPhoneLine_Interface, WinRt.Windows.ApplicationModel.Calls.IPhoneLine2, WinRt.Windows.ApplicationModel.Calls.IID_IPhoneLine2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPhoneLine.all);
      Hr := m_Interface.get_TransportDeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLineCellularDetails

   procedure Initialize (this : in out PhoneLineCellularDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLineCellularDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLineCellularDetails, IPhoneLineCellularDetails_Ptr);
   begin
      if this.m_IPhoneLineCellularDetails /= null then
         if this.m_IPhoneLineCellularDetails.all /= null then
            RefCount := this.m_IPhoneLineCellularDetails.all.Release;
            Free (this.m_IPhoneLineCellularDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLineCellularDetails

   function get_SimState
   (
      this : in out PhoneLineCellularDetails
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneSimState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneSimState;
   begin
      Hr := this.m_IPhoneLineCellularDetails.all.get_SimState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SimSlotIndex
   (
      this : in out PhoneLineCellularDetails
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPhoneLineCellularDetails.all.get_SimSlotIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsModemOn
   (
      this : in out PhoneLineCellularDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLineCellularDetails.all.get_IsModemOn (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RegistrationRejectCode
   (
      this : in out PhoneLineCellularDetails
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPhoneLineCellularDetails.all.get_RegistrationRejectCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetNetworkOperatorDisplayText
   (
      this : in out PhoneLineCellularDetails;
      location : Windows.ApplicationModel.Calls.PhoneLineNetworkOperatorDisplayTextLocation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneLineCellularDetails.all.GetNetworkOperatorDisplayText (location, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLineConfiguration

   procedure Initialize (this : in out PhoneLineConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLineConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLineConfiguration, IPhoneLineConfiguration_Ptr);
   begin
      if this.m_IPhoneLineConfiguration /= null then
         if this.m_IPhoneLineConfiguration.all /= null then
            RefCount := this.m_IPhoneLineConfiguration.all.Release;
            Free (this.m_IPhoneLineConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLineConfiguration

   function get_IsVideoCallingEnabled
   (
      this : in out PhoneLineConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLineConfiguration.all.get_IsVideoCallingEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedProperties
   (
      this : in out PhoneLineConfiguration
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IPhoneLineConfiguration.all.get_ExtendedProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLineTransportDevice

   procedure Initialize (this : in out PhoneLineTransportDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLineTransportDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLineTransportDevice, IPhoneLineTransportDevice_Ptr);
   begin
      if this.m_IPhoneLineTransportDevice /= null then
         if this.m_IPhoneLineTransportDevice.all /= null then
            RefCount := this.m_IPhoneLineTransportDevice.all.Release;
            Free (this.m_IPhoneLineTransportDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PhoneLineTransportDevice

   function FromId
   (
      id : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLineTransportDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneLineTransportDevice");
      m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneLineTransportDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IPhoneLineTransportDevice;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.PhoneLineTransportDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneLineTransportDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromId (HStr_id, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPhoneLineTransportDevice := new Windows.ApplicationModel.Calls.IPhoneLineTransportDevice;
            Retval.m_IPhoneLineTransportDevice.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneLineTransportDevice");
      m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneLineTransportDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPhoneLineTransportDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector
   (
      transport : Windows.ApplicationModel.Calls.PhoneLineTransport
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.PhoneLineTransportDevice");
      m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IPhoneLineTransportDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPhoneLineTransportDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (transport, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLineTransportDevice

   function get_DeviceId
   (
      this : in out PhoneLineTransportDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Transport
   (
      this : in out PhoneLineTransportDevice
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLineTransport is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneLineTransport;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.get_Transport (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestAccessAsync
   (
      this : in out PhoneLineTransportDevice
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.DeviceAccessStatus;
      m_IID            : aliased WinRt.IID := (3221996274, 43000, 24383, (128, 209, 40, 8, 239, 107, 202, 16 )); -- Windows.Devices.Enumeration.DeviceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (3994373507, 32859, 21480, (132, 105, 144, 113, 80, 54, 208, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceAccessStatus.Kind := new AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_DeviceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneLineTransportDevice.all.RequestAccessAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure RegisterApp
   (
      this : in out PhoneLineTransportDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.RegisterApp;
   end;

   procedure RegisterAppForUser
   (
      this : in out PhoneLineTransportDevice;
      user : Windows.System.User'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.RegisterAppForUser (user.m_IUser.all);
   end;

   procedure UnregisterApp
   (
      this : in out PhoneLineTransportDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.UnregisterApp;
   end;

   procedure UnregisterAppForUser
   (
      this : in out PhoneLineTransportDevice;
      user : Windows.System.User'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.UnregisterAppForUser (user.m_IUser.all);
   end;

   function IsRegistered
   (
      this : in out PhoneLineTransportDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.IsRegistered (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Connect
   (
      this : in out PhoneLineTransportDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneLineTransportDevice.all.Connect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ConnectAsync
   (
      this : in out PhoneLineTransportDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPhoneLineTransportDevice.all.ConnectAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLineWatcher

   procedure Initialize (this : in out PhoneLineWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLineWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLineWatcher, IPhoneLineWatcher_Ptr);
   begin
      if this.m_IPhoneLineWatcher /= null then
         if this.m_IPhoneLineWatcher.all /= null then
            RefCount := this.m_IPhoneLineWatcher.all.Release;
            Free (this.m_IPhoneLineWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLineWatcher

   procedure Start
   (
      this : in out PhoneLineWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out PhoneLineWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineWatcher.all.Stop;
   end;

   function add_LineAdded
   (
      this : in out PhoneLineWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhoneLineWatcher.all.add_LineAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LineAdded
   (
      this : in out PhoneLineWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineWatcher.all.remove_LineAdded (token);
   end;

   function add_LineRemoved
   (
      this : in out PhoneLineWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhoneLineWatcher.all.add_LineRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LineRemoved
   (
      this : in out PhoneLineWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineWatcher.all.remove_LineRemoved (token);
   end;

   function add_LineUpdated
   (
      this : in out PhoneLineWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhoneLineWatcher.all.add_LineUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LineUpdated
   (
      this : in out PhoneLineWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineWatcher.all.remove_LineUpdated (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out PhoneLineWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhoneLineWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out PhoneLineWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Stopped
   (
      this : in out PhoneLineWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPhoneLineWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out PhoneLineWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPhoneLineWatcher.all.remove_Stopped (token);
   end;

   function get_Status
   (
      this : in out PhoneLineWatcher
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneLineWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneLineWatcherStatus;
   begin
      Hr := this.m_IPhoneLineWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneLineWatcherEventArgs

   procedure Initialize (this : in out PhoneLineWatcherEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneLineWatcherEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneLineWatcherEventArgs, IPhoneLineWatcherEventArgs_Ptr);
   begin
      if this.m_IPhoneLineWatcherEventArgs /= null then
         if this.m_IPhoneLineWatcherEventArgs.all /= null then
            RefCount := this.m_IPhoneLineWatcherEventArgs.all.Release;
            Free (this.m_IPhoneLineWatcherEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneLineWatcherEventArgs

   function get_LineId
   (
      this : in out PhoneLineWatcherEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPhoneLineWatcherEventArgs.all.get_LineId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneVoicemail

   procedure Initialize (this : in out PhoneVoicemail) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneVoicemail) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneVoicemail, IPhoneVoicemail_Ptr);
   begin
      if this.m_IPhoneVoicemail /= null then
         if this.m_IPhoneVoicemail.all /= null then
            RefCount := this.m_IPhoneVoicemail.all.Release;
            Free (this.m_IPhoneVoicemail);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneVoicemail

   function get_Number
   (
      this : in out PhoneVoicemail
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPhoneVoicemail.all.get_Number (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MessageCount
   (
      this : in out PhoneVoicemail
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPhoneVoicemail.all.get_MessageCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out PhoneVoicemail
   )
   return WinRt.Windows.ApplicationModel.Calls.PhoneVoicemailType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.PhoneVoicemailType;
   begin
      Hr := this.m_IPhoneVoicemail.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure DialVoicemailAsync
   (
      this : in out PhoneVoicemail
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPhoneVoicemail.all.DialVoicemailAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoipCallCoordinator

   procedure Initialize (this : in out VoipCallCoordinator) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoipCallCoordinator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoipCallCoordinator, IVoipCallCoordinator_Ptr);
   begin
      if this.m_IVoipCallCoordinator /= null then
         if this.m_IVoipCallCoordinator.all /= null then
            RefCount := this.m_IVoipCallCoordinator.all.Release;
            Free (this.m_IVoipCallCoordinator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VoipCallCoordinator

   function GetDefault
   return WinRt.Windows.ApplicationModel.Calls.VoipCallCoordinator is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Calls.VoipCallCoordinator");
      m_Factory        : access WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinatorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipCallCoordinator;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipCallCoordinator do
         Hr := RoGetActivationFactory (m_hString, IID_IVoipCallCoordinatorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVoipCallCoordinator := new Windows.ApplicationModel.Calls.IVoipCallCoordinator;
            Retval.m_IVoipCallCoordinator.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoipCallCoordinator

   function ReserveCallResourcesAsync
   (
      this : in out VoipCallCoordinator;
      taskEntryPoint : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_taskEntryPoint : WinRt.HString := To_HString (taskEntryPoint);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VoipPhoneCallResourceReservationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VoipPhoneCallResourceReservationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus;
      m_IID            : aliased WinRt.IID := (2234039936, 31977, 22120, (142, 72, 70, 154, 229, 186, 158, 173 )); -- Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus;
      m_HandlerIID     : aliased WinRt.IID := (2049421839, 25722, 21500, (128, 240, 167, 157, 8, 60, 229, 49 ));
      m_Handler        : AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind := new AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VoipPhoneCallResourceReservationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind_Delegate, AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IVoipCallCoordinator.all.ReserveCallResourcesAsync (HStr_taskEntryPoint, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_taskEntryPoint);
      return m_RetVal;
   end;

   function add_MuteStateChanged
   (
      this : in out VoipCallCoordinator;
      muteChangeHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVoipCallCoordinator.all.add_MuteStateChanged (muteChangeHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MuteStateChanged
   (
      this : in out VoipCallCoordinator;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipCallCoordinator.all.remove_MuteStateChanged (token);
   end;

   function RequestNewIncomingCall
   (
      this : in out VoipCallCoordinator;
      context : WinRt.WString;
      contactName : WinRt.WString;
      contactNumber : WinRt.WString;
      contactImage : Windows.Foundation.Uri'Class;
      serviceName : WinRt.WString;
      brandingImage : Windows.Foundation.Uri'Class;
      callDetails : WinRt.WString;
      ringtone : Windows.Foundation.Uri'Class;
      media : Windows.ApplicationModel.Calls.VoipPhoneCallMedia;
      ringTimeout : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipPhoneCall;
      HStr_context : WinRt.HString := To_HString (context);
      HStr_contactName : WinRt.HString := To_HString (contactName);
      HStr_contactNumber : WinRt.HString := To_HString (contactNumber);
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
      HStr_callDetails : WinRt.HString := To_HString (callDetails);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall do
         Hr := this.m_IVoipCallCoordinator.all.RequestNewIncomingCall (HStr_context, HStr_contactName, HStr_contactNumber, contactImage.m_IUriRuntimeClass.all, HStr_serviceName, brandingImage.m_IUriRuntimeClass.all, HStr_callDetails, ringtone.m_IUriRuntimeClass.all, media, ringTimeout, m_ComRetVal'Access);
         Retval.m_IVoipPhoneCall := new Windows.ApplicationModel.Calls.IVoipPhoneCall;
         Retval.m_IVoipPhoneCall.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_context);
         Hr := WindowsDeleteString (HStr_contactName);
         Hr := WindowsDeleteString (HStr_contactNumber);
         Hr := WindowsDeleteString (HStr_serviceName);
         Hr := WindowsDeleteString (HStr_callDetails);
      end return;
   end;

   function RequestNewOutgoingCall
   (
      this : in out VoipCallCoordinator;
      context : WinRt.WString;
      contactName : WinRt.WString;
      serviceName : WinRt.WString;
      media : Windows.ApplicationModel.Calls.VoipPhoneCallMedia
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipPhoneCall;
      HStr_context : WinRt.HString := To_HString (context);
      HStr_contactName : WinRt.HString := To_HString (contactName);
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall do
         Hr := this.m_IVoipCallCoordinator.all.RequestNewOutgoingCall (HStr_context, HStr_contactName, HStr_serviceName, media, m_ComRetVal'Access);
         Retval.m_IVoipPhoneCall := new Windows.ApplicationModel.Calls.IVoipPhoneCall;
         Retval.m_IVoipPhoneCall.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_context);
         Hr := WindowsDeleteString (HStr_contactName);
         Hr := WindowsDeleteString (HStr_serviceName);
      end return;
   end;

   procedure NotifyMuted
   (
      this : in out VoipCallCoordinator
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipCallCoordinator.all.NotifyMuted;
   end;

   procedure NotifyUnmuted
   (
      this : in out VoipCallCoordinator
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipCallCoordinator.all.NotifyUnmuted;
   end;

   function RequestOutgoingUpgradeToVideoCall
   (
      this : in out VoipCallCoordinator;
      callUpgradeGuid : WinRt.Guid;
      context : WinRt.WString;
      contactName : WinRt.WString;
      serviceName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipPhoneCall;
      HStr_context : WinRt.HString := To_HString (context);
      HStr_contactName : WinRt.HString := To_HString (contactName);
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall do
         Hr := this.m_IVoipCallCoordinator.all.RequestOutgoingUpgradeToVideoCall (callUpgradeGuid, HStr_context, HStr_contactName, HStr_serviceName, m_ComRetVal'Access);
         Retval.m_IVoipPhoneCall := new Windows.ApplicationModel.Calls.IVoipPhoneCall;
         Retval.m_IVoipPhoneCall.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_context);
         Hr := WindowsDeleteString (HStr_contactName);
         Hr := WindowsDeleteString (HStr_serviceName);
      end return;
   end;

   function RequestIncomingUpgradeToVideoCall
   (
      this : in out VoipCallCoordinator;
      context : WinRt.WString;
      contactName : WinRt.WString;
      contactNumber : WinRt.WString;
      contactImage : Windows.Foundation.Uri'Class;
      serviceName : WinRt.WString;
      brandingImage : Windows.Foundation.Uri'Class;
      callDetails : WinRt.WString;
      ringtone : Windows.Foundation.Uri'Class;
      ringTimeout : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipPhoneCall;
      HStr_context : WinRt.HString := To_HString (context);
      HStr_contactName : WinRt.HString := To_HString (contactName);
      HStr_contactNumber : WinRt.HString := To_HString (contactNumber);
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
      HStr_callDetails : WinRt.HString := To_HString (callDetails);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall do
         Hr := this.m_IVoipCallCoordinator.all.RequestIncomingUpgradeToVideoCall (HStr_context, HStr_contactName, HStr_contactNumber, contactImage.m_IUriRuntimeClass.all, HStr_serviceName, brandingImage.m_IUriRuntimeClass.all, HStr_callDetails, ringtone.m_IUriRuntimeClass.all, ringTimeout, m_ComRetVal'Access);
         Retval.m_IVoipPhoneCall := new Windows.ApplicationModel.Calls.IVoipPhoneCall;
         Retval.m_IVoipPhoneCall.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_context);
         Hr := WindowsDeleteString (HStr_contactName);
         Hr := WindowsDeleteString (HStr_contactNumber);
         Hr := WindowsDeleteString (HStr_serviceName);
         Hr := WindowsDeleteString (HStr_callDetails);
      end return;
   end;

   procedure TerminateCellularCall
   (
      this : in out VoipCallCoordinator;
      callUpgradeGuid : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipCallCoordinator.all.TerminateCellularCall (callUpgradeGuid);
   end;

   procedure CancelUpgrade
   (
      this : in out VoipCallCoordinator;
      callUpgradeGuid : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipCallCoordinator.all.CancelUpgrade (callUpgradeGuid);
   end;

   function SetupNewAcceptedCall
   (
      this : in out VoipCallCoordinator;
      context : WinRt.WString;
      contactName : WinRt.WString;
      contactNumber : WinRt.WString;
      serviceName : WinRt.WString;
      media : Windows.ApplicationModel.Calls.VoipPhoneCallMedia
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipPhoneCall;
      HStr_context : WinRt.HString := To_HString (context);
      HStr_contactName : WinRt.HString := To_HString (contactName);
      HStr_contactNumber : WinRt.HString := To_HString (contactNumber);
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator_Interface, WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator2, WinRt.Windows.ApplicationModel.Calls.IID_IVoipCallCoordinator2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall do
         m_Interface := QInterface (this.m_IVoipCallCoordinator.all);
         Hr := m_Interface.SetupNewAcceptedCall (HStr_context, HStr_contactName, HStr_contactNumber, HStr_serviceName, media, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVoipPhoneCall := new Windows.ApplicationModel.Calls.IVoipPhoneCall;
         Retval.m_IVoipPhoneCall.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_context);
         Hr := WindowsDeleteString (HStr_contactName);
         Hr := WindowsDeleteString (HStr_contactNumber);
         Hr := WindowsDeleteString (HStr_serviceName);
      end return;
   end;

   function RequestNewAppInitiatedCall
   (
      this : in out VoipCallCoordinator;
      context : WinRt.WString;
      contactName : WinRt.WString;
      contactNumber : WinRt.WString;
      serviceName : WinRt.WString;
      media : Windows.ApplicationModel.Calls.VoipPhoneCallMedia
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipPhoneCall;
      HStr_context : WinRt.HString := To_HString (context);
      HStr_contactName : WinRt.HString := To_HString (contactName);
      HStr_contactNumber : WinRt.HString := To_HString (contactNumber);
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator_Interface, WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator3, WinRt.Windows.ApplicationModel.Calls.IID_IVoipCallCoordinator3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall do
         m_Interface := QInterface (this.m_IVoipCallCoordinator.all);
         Hr := m_Interface.RequestNewAppInitiatedCall (HStr_context, HStr_contactName, HStr_contactNumber, HStr_serviceName, media, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVoipPhoneCall := new Windows.ApplicationModel.Calls.IVoipPhoneCall;
         Retval.m_IVoipPhoneCall.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_context);
         Hr := WindowsDeleteString (HStr_contactName);
         Hr := WindowsDeleteString (HStr_contactNumber);
         Hr := WindowsDeleteString (HStr_serviceName);
      end return;
   end;

   function RequestNewIncomingCall
   (
      this : in out VoipCallCoordinator;
      context : WinRt.WString;
      contactName : WinRt.WString;
      contactNumber : WinRt.WString;
      contactImage : Windows.Foundation.Uri'Class;
      serviceName : WinRt.WString;
      brandingImage : Windows.Foundation.Uri'Class;
      callDetails : WinRt.WString;
      ringtone : Windows.Foundation.Uri'Class;
      media : Windows.ApplicationModel.Calls.VoipPhoneCallMedia;
      ringTimeout : Windows.Foundation.TimeSpan;
      contactRemoteId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.IVoipPhoneCall;
      HStr_context : WinRt.HString := To_HString (context);
      HStr_contactName : WinRt.HString := To_HString (contactName);
      HStr_contactNumber : WinRt.HString := To_HString (contactNumber);
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
      HStr_callDetails : WinRt.HString := To_HString (callDetails);
      HStr_contactRemoteId : WinRt.HString := To_HString (contactRemoteId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator_Interface, WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator3, WinRt.Windows.ApplicationModel.Calls.IID_IVoipCallCoordinator3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Calls.VoipPhoneCall do
         m_Interface := QInterface (this.m_IVoipCallCoordinator.all);
         Hr := m_Interface.RequestNewIncomingCall (HStr_context, HStr_contactName, HStr_contactNumber, contactImage.m_IUriRuntimeClass.all, HStr_serviceName, brandingImage.m_IUriRuntimeClass.all, HStr_callDetails, ringtone.m_IUriRuntimeClass.all, media, ringTimeout, HStr_contactRemoteId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVoipPhoneCall := new Windows.ApplicationModel.Calls.IVoipPhoneCall;
         Retval.m_IVoipPhoneCall.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_context);
         Hr := WindowsDeleteString (HStr_contactName);
         Hr := WindowsDeleteString (HStr_contactNumber);
         Hr := WindowsDeleteString (HStr_serviceName);
         Hr := WindowsDeleteString (HStr_callDetails);
         Hr := WindowsDeleteString (HStr_contactRemoteId);
      end return;
   end;

   function ReserveCallResourcesAsync
   (
      this : in out VoipCallCoordinator
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VoipPhoneCallResourceReservationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VoipPhoneCallResourceReservationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus;
      m_IID            : aliased WinRt.IID := (2234039936, 31977, 22120, (142, 72, 70, 154, 229, 186, 158, 173 )); -- Windows.ApplicationModel.Calls.VoipPhoneCallResourceReservationStatus;
      m_HandlerIID     : aliased WinRt.IID := (2049421839, 25722, 21500, (128, 240, 167, 157, 8, 60, 229, 49 ));
      m_Handler        : AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind := new AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VoipPhoneCallResourceReservationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind_Delegate, AsyncOperationCompletedHandler_VoipPhoneCallResourceReservationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator_Interface, WinRt.Windows.ApplicationModel.Calls.IVoipCallCoordinator4, WinRt.Windows.ApplicationModel.Calls.IID_IVoipCallCoordinator4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVoipCallCoordinator.all);
      Hr := m_Interface.ReserveCallResourcesAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoipPhoneCall

   procedure Initialize (this : in out VoipPhoneCall) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoipPhoneCall) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoipPhoneCall, IVoipPhoneCall_Ptr);
   begin
      if this.m_IVoipPhoneCall /= null then
         if this.m_IVoipPhoneCall.all /= null then
            RefCount := this.m_IVoipPhoneCall.all.Release;
            Free (this.m_IVoipPhoneCall);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoipPhoneCall

   function add_EndRequested
   (
      this : in out VoipPhoneCall;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVoipPhoneCall.all.add_EndRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EndRequested
   (
      this : in out VoipPhoneCall;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.remove_EndRequested (token);
   end;

   function add_HoldRequested
   (
      this : in out VoipPhoneCall;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVoipPhoneCall.all.add_HoldRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HoldRequested
   (
      this : in out VoipPhoneCall;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.remove_HoldRequested (token);
   end;

   function add_ResumeRequested
   (
      this : in out VoipPhoneCall;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVoipPhoneCall.all.add_ResumeRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ResumeRequested
   (
      this : in out VoipPhoneCall;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.remove_ResumeRequested (token);
   end;

   function add_AnswerRequested
   (
      this : in out VoipPhoneCall;
      acceptHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVoipPhoneCall.all.add_AnswerRequested (acceptHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AnswerRequested
   (
      this : in out VoipPhoneCall;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.remove_AnswerRequested (token);
   end;

   function add_RejectRequested
   (
      this : in out VoipPhoneCall;
      rejectHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVoipPhoneCall.all.add_RejectRequested (rejectHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RejectRequested
   (
      this : in out VoipPhoneCall;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.remove_RejectRequested (token);
   end;

   procedure NotifyCallHeld
   (
      this : in out VoipPhoneCall
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.NotifyCallHeld;
   end;

   procedure NotifyCallActive
   (
      this : in out VoipPhoneCall
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.NotifyCallActive;
   end;

   procedure NotifyCallEnded
   (
      this : in out VoipPhoneCall
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.NotifyCallEnded;
   end;

   function get_ContactName
   (
      this : in out VoipPhoneCall
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoipPhoneCall.all.get_ContactName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContactName
   (
      this : in out VoipPhoneCall;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoipPhoneCall.all.put_ContactName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_StartTime
   (
      this : in out VoipPhoneCall
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IVoipPhoneCall.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartTime
   (
      this : in out VoipPhoneCall;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.put_StartTime (value);
   end;

   function get_CallMedia
   (
      this : in out VoipPhoneCall
   )
   return WinRt.Windows.ApplicationModel.Calls.VoipPhoneCallMedia is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.VoipPhoneCallMedia;
   begin
      Hr := this.m_IVoipPhoneCall.all.get_CallMedia (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CallMedia
   (
      this : in out VoipPhoneCall;
      value : Windows.ApplicationModel.Calls.VoipPhoneCallMedia
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.put_CallMedia (value);
   end;

   procedure NotifyCallReady
   (
      this : in out VoipPhoneCall
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoipPhoneCall.all.NotifyCallReady;
   end;

   procedure TryShowAppUI
   (
      this : in out VoipPhoneCall
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IVoipPhoneCall2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IVoipPhoneCall_Interface, WinRt.Windows.ApplicationModel.Calls.IVoipPhoneCall2, WinRt.Windows.ApplicationModel.Calls.IID_IVoipPhoneCall2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVoipPhoneCall.all);
      Hr := m_Interface.TryShowAppUI;
      m_RefCount := m_Interface.Release;
   end;

   procedure NotifyCallAccepted
   (
      this : in out VoipPhoneCall;
      media : Windows.ApplicationModel.Calls.VoipPhoneCallMedia
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Calls.IVoipPhoneCall3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Calls.IVoipPhoneCall_Interface, WinRt.Windows.ApplicationModel.Calls.IVoipPhoneCall3, WinRt.Windows.ApplicationModel.Calls.IID_IVoipPhoneCall3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVoipPhoneCall.all);
      Hr := m_Interface.NotifyCallAccepted (media);
      m_RefCount := m_Interface.Release;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Appointments.DataProvider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarCancelMeetingRequest

   procedure Initialize (this : in out AppointmentCalendarCancelMeetingRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarCancelMeetingRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarCancelMeetingRequest, IAppointmentCalendarCancelMeetingRequest_Ptr);
   begin
      if this.m_IAppointmentCalendarCancelMeetingRequest /= null then
         if this.m_IAppointmentCalendarCancelMeetingRequest.all /= null then
            RefCount := this.m_IAppointmentCalendarCancelMeetingRequest.all.Release;
            Free (this.m_IAppointmentCalendarCancelMeetingRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarCancelMeetingRequest

   function get_AppointmentCalendarLocalId
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.get_AppointmentCalendarLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentLocalId
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.get_AppointmentLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentOriginalStartTime
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.get_AppointmentOriginalStartTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Subject
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Comment
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NotifyInvitees
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.get_NotifyInvitees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out AppointmentCalendarCancelMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarCancelMeetingRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarCancelMeetingRequestEventArgs

   procedure Initialize (this : in out AppointmentCalendarCancelMeetingRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarCancelMeetingRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarCancelMeetingRequestEventArgs, IAppointmentCalendarCancelMeetingRequestEventArgs_Ptr);
   begin
      if this.m_IAppointmentCalendarCancelMeetingRequestEventArgs /= null then
         if this.m_IAppointmentCalendarCancelMeetingRequestEventArgs.all /= null then
            RefCount := this.m_IAppointmentCalendarCancelMeetingRequestEventArgs.all.Release;
            Free (this.m_IAppointmentCalendarCancelMeetingRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarCancelMeetingRequestEventArgs

   function get_Request
   (
      this : in out AppointmentCalendarCancelMeetingRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCancelMeetingRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequest do
         Hr := this.m_IAppointmentCalendarCancelMeetingRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IAppointmentCalendarCancelMeetingRequest := new Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCancelMeetingRequest;
         Retval.m_IAppointmentCalendarCancelMeetingRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AppointmentCalendarCancelMeetingRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAppointmentCalendarCancelMeetingRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarCreateOrUpdateAppointmentRequest

   procedure Initialize (this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarCreateOrUpdateAppointmentRequest, IAppointmentCalendarCreateOrUpdateAppointmentRequest_Ptr);
   begin
      if this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest /= null then
         if this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all /= null then
            RefCount := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all.Release;
            Free (this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarCreateOrUpdateAppointmentRequest

   function get_AppointmentCalendarLocalId
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all.get_AppointmentCalendarLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Appointment
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointment;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all.get_Appointment (m_ComRetVal'Access);
         Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
         Retval.m_IAppointment.all := m_ComRetVal;
      end return;
   end;

   function get_NotifyInvitees
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all.get_NotifyInvitees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ChangedProperties
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all.get_ChangedProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest;
      createdOrUpdatedAppointment : Windows.ApplicationModel.Appointments.Appointment'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all.ReportCompletedAsync (createdOrUpdatedAppointment.m_IAppointment.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs

   procedure Initialize (this : in out AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs, IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_Ptr);
   begin
      if this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs /= null then
         if this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs.all /= null then
            RefCount := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs.all.Release;
            Free (this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs

   function get_Request
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCreateOrUpdateAppointmentRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequest do
         Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest := new Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCreateOrUpdateAppointmentRequest;
         Retval.m_IAppointmentCalendarCreateOrUpdateAppointmentRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarForwardMeetingRequest

   procedure Initialize (this : in out AppointmentCalendarForwardMeetingRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarForwardMeetingRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarForwardMeetingRequest, IAppointmentCalendarForwardMeetingRequest_Ptr);
   begin
      if this.m_IAppointmentCalendarForwardMeetingRequest /= null then
         if this.m_IAppointmentCalendarForwardMeetingRequest.all /= null then
            RefCount := this.m_IAppointmentCalendarForwardMeetingRequest.all.Release;
            Free (this.m_IAppointmentCalendarForwardMeetingRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarForwardMeetingRequest

   function get_AppointmentCalendarLocalId
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.get_AppointmentCalendarLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentLocalId
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.get_AppointmentLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentOriginalStartTime
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.get_AppointmentOriginalStartTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Invitees
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   )
   return IVectorView_IAppointmentInvitee.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppointmentInvitee.Kind;
   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.get_Invitees (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAppointmentInvitee (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Subject
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ForwardHeader
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.get_ForwardHeader (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Comment
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out AppointmentCalendarForwardMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarForwardMeetingRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarForwardMeetingRequestEventArgs

   procedure Initialize (this : in out AppointmentCalendarForwardMeetingRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarForwardMeetingRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarForwardMeetingRequestEventArgs, IAppointmentCalendarForwardMeetingRequestEventArgs_Ptr);
   begin
      if this.m_IAppointmentCalendarForwardMeetingRequestEventArgs /= null then
         if this.m_IAppointmentCalendarForwardMeetingRequestEventArgs.all /= null then
            RefCount := this.m_IAppointmentCalendarForwardMeetingRequestEventArgs.all.Release;
            Free (this.m_IAppointmentCalendarForwardMeetingRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarForwardMeetingRequestEventArgs

   function get_Request
   (
      this : in out AppointmentCalendarForwardMeetingRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarForwardMeetingRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequest do
         Hr := this.m_IAppointmentCalendarForwardMeetingRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IAppointmentCalendarForwardMeetingRequest := new Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarForwardMeetingRequest;
         Retval.m_IAppointmentCalendarForwardMeetingRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AppointmentCalendarForwardMeetingRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAppointmentCalendarForwardMeetingRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarProposeNewTimeForMeetingRequest

   procedure Initialize (this : in out AppointmentCalendarProposeNewTimeForMeetingRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarProposeNewTimeForMeetingRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarProposeNewTimeForMeetingRequest, IAppointmentCalendarProposeNewTimeForMeetingRequest_Ptr);
   begin
      if this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest /= null then
         if this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all /= null then
            RefCount := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.Release;
            Free (this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarProposeNewTimeForMeetingRequest

   function get_AppointmentCalendarLocalId
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.get_AppointmentCalendarLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentLocalId
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.get_AppointmentLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentOriginalStartTime
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.get_AppointmentOriginalStartTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NewStartTime
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.get_NewStartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewDuration
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.get_NewDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Subject
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Comment
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs

   procedure Initialize (this : in out AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs, IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_Ptr);
   begin
      if this.m_IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs /= null then
         if this.m_IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs.all /= null then
            RefCount := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs.all.Release;
            Free (this.m_IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs

   function get_Request
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarProposeNewTimeForMeetingRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequest do
         Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IAppointmentCalendarProposeNewTimeForMeetingRequest := new Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarProposeNewTimeForMeetingRequest;
         Retval.m_IAppointmentCalendarProposeNewTimeForMeetingRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarSyncManagerSyncRequest

   procedure Initialize (this : in out AppointmentCalendarSyncManagerSyncRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarSyncManagerSyncRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarSyncManagerSyncRequest, IAppointmentCalendarSyncManagerSyncRequest_Ptr);
   begin
      if this.m_IAppointmentCalendarSyncManagerSyncRequest /= null then
         if this.m_IAppointmentCalendarSyncManagerSyncRequest.all /= null then
            RefCount := this.m_IAppointmentCalendarSyncManagerSyncRequest.all.Release;
            Free (this.m_IAppointmentCalendarSyncManagerSyncRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarSyncManagerSyncRequest

   function get_AppointmentCalendarLocalId
   (
      this : in out AppointmentCalendarSyncManagerSyncRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarSyncManagerSyncRequest.all.get_AppointmentCalendarLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out AppointmentCalendarSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarSyncManagerSyncRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out AppointmentCalendarSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarSyncManagerSyncRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarSyncManagerSyncRequestEventArgs

   procedure Initialize (this : in out AppointmentCalendarSyncManagerSyncRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarSyncManagerSyncRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarSyncManagerSyncRequestEventArgs, IAppointmentCalendarSyncManagerSyncRequestEventArgs_Ptr);
   begin
      if this.m_IAppointmentCalendarSyncManagerSyncRequestEventArgs /= null then
         if this.m_IAppointmentCalendarSyncManagerSyncRequestEventArgs.all /= null then
            RefCount := this.m_IAppointmentCalendarSyncManagerSyncRequestEventArgs.all.Release;
            Free (this.m_IAppointmentCalendarSyncManagerSyncRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarSyncManagerSyncRequestEventArgs

   function get_Request
   (
      this : in out AppointmentCalendarSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarSyncManagerSyncRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequest do
         Hr := this.m_IAppointmentCalendarSyncManagerSyncRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IAppointmentCalendarSyncManagerSyncRequest := new Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarSyncManagerSyncRequest;
         Retval.m_IAppointmentCalendarSyncManagerSyncRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AppointmentCalendarSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAppointmentCalendarSyncManagerSyncRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarUpdateMeetingResponseRequest

   procedure Initialize (this : in out AppointmentCalendarUpdateMeetingResponseRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarUpdateMeetingResponseRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarUpdateMeetingResponseRequest, IAppointmentCalendarUpdateMeetingResponseRequest_Ptr);
   begin
      if this.m_IAppointmentCalendarUpdateMeetingResponseRequest /= null then
         if this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all /= null then
            RefCount := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.Release;
            Free (this.m_IAppointmentCalendarUpdateMeetingResponseRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarUpdateMeetingResponseRequest

   function get_AppointmentCalendarLocalId
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.get_AppointmentCalendarLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentLocalId
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.get_AppointmentLocalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentOriginalStartTime
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.get_AppointmentOriginalStartTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Response
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   )
   return WinRt.Windows.ApplicationModel.Appointments.AppointmentParticipantResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.AppointmentParticipantResponse;
   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.get_Response (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Subject
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Comment
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SendUpdate
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.get_SendUpdate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentCalendarUpdateMeetingResponseRequestEventArgs

   procedure Initialize (this : in out AppointmentCalendarUpdateMeetingResponseRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentCalendarUpdateMeetingResponseRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentCalendarUpdateMeetingResponseRequestEventArgs, IAppointmentCalendarUpdateMeetingResponseRequestEventArgs_Ptr);
   begin
      if this.m_IAppointmentCalendarUpdateMeetingResponseRequestEventArgs /= null then
         if this.m_IAppointmentCalendarUpdateMeetingResponseRequestEventArgs.all /= null then
            RefCount := this.m_IAppointmentCalendarUpdateMeetingResponseRequestEventArgs.all.Release;
            Free (this.m_IAppointmentCalendarUpdateMeetingResponseRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentCalendarUpdateMeetingResponseRequestEventArgs

   function get_Request
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarUpdateMeetingResponseRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequest do
         Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IAppointmentCalendarUpdateMeetingResponseRequest := new Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarUpdateMeetingResponseRequest;
         Retval.m_IAppointmentCalendarUpdateMeetingResponseRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out AppointmentCalendarUpdateMeetingResponseRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IAppointmentCalendarUpdateMeetingResponseRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentDataProviderConnection

   procedure Initialize (this : in out AppointmentDataProviderConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentDataProviderConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentDataProviderConnection, IAppointmentDataProviderConnection_Ptr);
   begin
      if this.m_IAppointmentDataProviderConnection /= null then
         if this.m_IAppointmentDataProviderConnection.all /= null then
            RefCount := this.m_IAppointmentDataProviderConnection.all.Release;
            Free (this.m_IAppointmentDataProviderConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentDataProviderConnection

   function add_SyncRequested
   (
      this : in out AppointmentDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.add_SyncRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SyncRequested
   (
      this : in out AppointmentDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.remove_SyncRequested (token);
   end;

   function add_CreateOrUpdateAppointmentRequested
   (
      this : in out AppointmentDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.add_CreateOrUpdateAppointmentRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CreateOrUpdateAppointmentRequested
   (
      this : in out AppointmentDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.remove_CreateOrUpdateAppointmentRequested (token);
   end;

   function add_CancelMeetingRequested
   (
      this : in out AppointmentDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.add_CancelMeetingRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CancelMeetingRequested
   (
      this : in out AppointmentDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.remove_CancelMeetingRequested (token);
   end;

   function add_ForwardMeetingRequested
   (
      this : in out AppointmentDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.add_ForwardMeetingRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ForwardMeetingRequested
   (
      this : in out AppointmentDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.remove_ForwardMeetingRequested (token);
   end;

   function add_ProposeNewTimeForMeetingRequested
   (
      this : in out AppointmentDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.add_ProposeNewTimeForMeetingRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ProposeNewTimeForMeetingRequested
   (
      this : in out AppointmentDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.remove_ProposeNewTimeForMeetingRequested (token);
   end;

   function add_UpdateMeetingResponseRequested
   (
      this : in out AppointmentDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.add_UpdateMeetingResponseRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UpdateMeetingResponseRequested
   (
      this : in out AppointmentDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.remove_UpdateMeetingResponseRequested (token);
   end;

   procedure Start
   (
      this : in out AppointmentDataProviderConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppointmentDataProviderConnection.all.Start;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentDataProviderTriggerDetails

   procedure Initialize (this : in out AppointmentDataProviderTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentDataProviderTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentDataProviderTriggerDetails, IAppointmentDataProviderTriggerDetails_Ptr);
   begin
      if this.m_IAppointmentDataProviderTriggerDetails /= null then
         if this.m_IAppointmentDataProviderTriggerDetails.all /= null then
            RefCount := this.m_IAppointmentDataProviderTriggerDetails.all.Release;
            Free (this.m_IAppointmentDataProviderTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentDataProviderTriggerDetails

   function get_Connection
   (
      this : in out AppointmentDataProviderTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.DataProvider.IAppointmentDataProviderConnection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection do
         Hr := this.m_IAppointmentDataProviderTriggerDetails.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IAppointmentDataProviderConnection := new Windows.ApplicationModel.Appointments.DataProvider.IAppointmentDataProviderConnection;
         Retval.m_IAppointmentDataProviderConnection.all := m_ComRetVal;
      end return;
   end;

end;

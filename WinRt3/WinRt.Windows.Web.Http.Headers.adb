--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Globalization;
with WinRt.Windows.Networking;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Web.Http.Headers is

   package IIterable_IHttpNameValueHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpNameValueHeaderValue);
   package IVector_IHttpChallengeHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValue);
   package IIterable_IHttpChallengeHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValue);
   package IVector_IHttpConnectionOptionHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue);
   package IIterable_IHttpConnectionOptionHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue);
   package IVector_IHttpContentCodingHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValue);
   package IIterable_IHttpContentCodingHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValue);
   package IVector_IHttpContentCodingWithQualityHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue);
   package IIterable_IHttpContentCodingWithQualityHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue);
   package IMap_HString_HString is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.HString);
   package IVector_IHttpCookiePairHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValue);
   package IIterable_IHttpCookiePairHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValue);
   package IVector_IHttpExpectationHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValue);
   package IIterable_IHttpExpectationHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValue);
   package IVector_ILanguage is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Globalization.ILanguage);
   package IIterable_ILanguage is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Globalization.ILanguage);
   package IVector_IHttpLanguageRangeWithQualityHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue);
   package IIterable_IHttpLanguageRangeWithQualityHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue);
   package IVector_IHttpMediaTypeWithQualityHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue);
   package IIterable_IHttpMediaTypeWithQualityHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue);
   package IVector_IHttpMethod is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.IHttpMethod);
   package IIterable_IHttpMethod is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.IHttpMethod);
   package IVector_IHttpProductInfoHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValue);
   package IIterable_IHttpProductInfoHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValue);
   package IVector_IHttpTransferCodingHeaderValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue);
   package IIterable_IHttpTransferCodingHeaderValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCacheDirectiveHeaderValueCollection

   procedure Initialize (this : in out HttpCacheDirectiveHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCacheDirectiveHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpCacheDirectiveHeaderValueCollection, IHttpCacheDirectiveHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpCacheDirectiveHeaderValueCollection /= null then
         if this.m_IHttpCacheDirectiveHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpCacheDirectiveHeaderValueCollection.all.Release;
            Free (this.m_IHttpCacheDirectiveHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCacheDirectiveHeaderValueCollection

   function get_MaxAge
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.get_MaxAge (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxAge
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.put_MaxAge (value);
   end;

   function get_MaxStale
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.get_MaxStale (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxStale
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.put_MaxStale (value);
   end;

   function get_MinFresh
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.get_MinFresh (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MinFresh
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.put_MinFresh (value);
   end;

   function get_SharedMaxAge
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.get_SharedMaxAge (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SharedMaxAge
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.put_SharedMaxAge (value);
   end;

   procedure ParseAdd
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpCacheDirectiveHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpNameValueHeaderValue>
   function GetAt
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpNameValueHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpNameValueHeaderValue do
         m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpNameValueHeaderValue := new Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
         Retval.m_IHttpNameValueHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpNameValueHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpNameValueHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpNameValueHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpNameValueHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpNameValueHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpNameValueHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpNameValueHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpNameValueHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpNameValueHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpCacheDirectiveHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpNameValueHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (754450644, 13776, 21596, (171, 130, 246, 121, 59, 231, 76, 186 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IVector_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpNameValueHeaderValue>
   function First
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpNameValueHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1480106278, 46615, 21527, (179, 46, 222, 210, 210, 125, 64, 163 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, IIterable_IHttpNameValueHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpCacheDirectiveHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCacheDirectiveHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpChallengeHeaderValue

   procedure Initialize (this : in out HttpChallengeHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpChallengeHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpChallengeHeaderValue, IHttpChallengeHeaderValue_Ptr);
   begin
      if this.m_IHttpChallengeHeaderValue /= null then
         if this.m_IHttpChallengeHeaderValue.all /= null then
            RefCount := this.m_IHttpChallengeHeaderValue.all.Release;
            Free (this.m_IHttpChallengeHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpChallengeHeaderValue

   function Constructor
   (
      scheme : WinRt.WString
   )
   return HttpChallengeHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpChallengeHeaderValue");
      m_Factory    : access IHttpChallengeHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
      HStr_scheme : WinRt.HString := To_HString (scheme);
   begin
      return RetVal : HttpChallengeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpChallengeHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromScheme (HStr_scheme, m_ComRetVal'Access);
            Retval.m_IHttpChallengeHeaderValue := new Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
            Retval.m_IHttpChallengeHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scheme);
      end return;
   end;

   function Constructor
   (
      scheme : WinRt.WString;
      token : WinRt.WString
   )
   return HttpChallengeHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpChallengeHeaderValue");
      m_Factory    : access IHttpChallengeHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
      HStr_scheme : WinRt.HString := To_HString (scheme);
      HStr_token : WinRt.HString := To_HString (token);
   begin
      return RetVal : HttpChallengeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpChallengeHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromSchemeWithToken (HStr_scheme, HStr_token, m_ComRetVal'Access);
            Retval.m_IHttpChallengeHeaderValue := new Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
            Retval.m_IHttpChallengeHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scheme);
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpChallengeHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpChallengeHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpChallengeHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpChallengeHeaderValue := new Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
            Retval.m_IHttpChallengeHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      challengeHeaderValue : access Windows.Web.Http.Headers.IHttpChallengeHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpChallengeHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpChallengeHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, challengeHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpChallengeHeaderValue

   function get_Parameters
   (
      this : in out HttpChallengeHeaderValue
   )
   return IVector_IHttpNameValueHeaderValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHttpNameValueHeaderValue.Kind;
   begin
      Hr := this.m_IHttpChallengeHeaderValue.all.get_Parameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHttpNameValueHeaderValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Scheme
   (
      this : in out HttpChallengeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpChallengeHeaderValue.all.get_Scheme (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Token
   (
      this : in out HttpChallengeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpChallengeHeaderValue.all.get_Token (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpChallengeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpChallengeHeaderValueCollection

   procedure Initialize (this : in out HttpChallengeHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpChallengeHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpChallengeHeaderValueCollection, IHttpChallengeHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpChallengeHeaderValueCollection /= null then
         if this.m_IHttpChallengeHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpChallengeHeaderValueCollection.all.Release;
            Free (this.m_IHttpChallengeHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpChallengeHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpChallengeHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpChallengeHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpChallengeHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpChallengeHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpChallengeHeaderValue>
   function GetAt
   (
      this : in out HttpChallengeHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValue do
         m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpChallengeHeaderValue := new Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
         Retval.m_IHttpChallengeHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpChallengeHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpChallengeHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpChallengeHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpChallengeHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpChallengeHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpChallengeHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpChallengeHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpChallengeHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpChallengeHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpChallengeHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpChallengeHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpChallengeHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpChallengeHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpChallengeHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpChallengeHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpChallengeHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpChallengeHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpChallengeHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpChallengeHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpChallengeHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpChallengeHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (926415966, 2855, 21155, (158, 64, 203, 185, 132, 78, 106, 183 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IVector_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpChallengeHeaderValue>
   function First
   (
      this : in out HttpChallengeHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpChallengeHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (394559064, 61647, 21223, (129, 192, 157, 6, 160, 129, 86, 159 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, IIterable_IHttpChallengeHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpChallengeHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpChallengeHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpConnectionOptionHeaderValue

   procedure Initialize (this : in out HttpConnectionOptionHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpConnectionOptionHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValue_Ptr);
   begin
      if this.m_IHttpConnectionOptionHeaderValue /= null then
         if this.m_IHttpConnectionOptionHeaderValue.all /= null then
            RefCount := this.m_IHttpConnectionOptionHeaderValue.all.Release;
            Free (this.m_IHttpConnectionOptionHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpConnectionOptionHeaderValue

   function Constructor
   (
      token : WinRt.WString
   )
   return HttpConnectionOptionHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue");
      m_Factory    : access IHttpConnectionOptionHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
      HStr_token : WinRt.HString := To_HString (token);
   begin
      return RetVal : HttpConnectionOptionHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpConnectionOptionHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_token, m_ComRetVal'Access);
            Retval.m_IHttpConnectionOptionHeaderValue := new Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
            Retval.m_IHttpConnectionOptionHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpConnectionOptionHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpConnectionOptionHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpConnectionOptionHeaderValue := new Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
            Retval.m_IHttpConnectionOptionHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      connectionOptionHeaderValue : access Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpConnectionOptionHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, connectionOptionHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpConnectionOptionHeaderValue

   function get_Token
   (
      this : in out HttpConnectionOptionHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpConnectionOptionHeaderValue.all.get_Token (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpConnectionOptionHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpConnectionOptionHeaderValueCollection

   procedure Initialize (this : in out HttpConnectionOptionHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpConnectionOptionHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpConnectionOptionHeaderValueCollection, IHttpConnectionOptionHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpConnectionOptionHeaderValueCollection /= null then
         if this.m_IHttpConnectionOptionHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpConnectionOptionHeaderValueCollection.all.Release;
            Free (this.m_IHttpConnectionOptionHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpConnectionOptionHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpConnectionOptionHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpConnectionOptionHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>
   function GetAt
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue do
         m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpConnectionOptionHeaderValue := new Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
         Retval.m_IHttpConnectionOptionHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpConnectionOptionHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpConnectionOptionHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpConnectionOptionHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpConnectionOptionHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpConnectionOptionHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpConnectionOptionHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpConnectionOptionHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpConnectionOptionHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpConnectionOptionHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3272792717, 51247, 20937, (183, 5, 90, 38, 213, 47, 190, 230 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IVector_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>
   function First
   (
      this : in out HttpConnectionOptionHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpConnectionOptionHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (452743471, 57250, 21800, (138, 239, 110, 106, 55, 120, 155, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, IIterable_IHttpConnectionOptionHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpConnectionOptionHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpConnectionOptionHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpContentCodingHeaderValue

   procedure Initialize (this : in out HttpContentCodingHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpContentCodingHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContentCodingHeaderValue, IHttpContentCodingHeaderValue_Ptr);
   begin
      if this.m_IHttpContentCodingHeaderValue /= null then
         if this.m_IHttpContentCodingHeaderValue.all /= null then
            RefCount := this.m_IHttpContentCodingHeaderValue.all.Release;
            Free (this.m_IHttpContentCodingHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpContentCodingHeaderValue

   function Constructor
   (
      contentCoding : WinRt.WString
   )
   return HttpContentCodingHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentCodingHeaderValue");
      m_Factory    : access IHttpContentCodingHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
      HStr_contentCoding : WinRt.HString := To_HString (contentCoding);
   begin
      return RetVal : HttpContentCodingHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentCodingHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_contentCoding, m_ComRetVal'Access);
            Retval.m_IHttpContentCodingHeaderValue := new Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
            Retval.m_IHttpContentCodingHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentCoding);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpContentCodingHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentCodingHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentCodingHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentCodingHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentCodingHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpContentCodingHeaderValue := new Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
            Retval.m_IHttpContentCodingHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      contentCodingHeaderValue : access Windows.Web.Http.Headers.IHttpContentCodingHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentCodingHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpContentCodingHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, contentCodingHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpContentCodingHeaderValue

   function get_ContentCoding
   (
      this : in out HttpContentCodingHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpContentCodingHeaderValue.all.get_ContentCoding (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpContentCodingHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpContentCodingHeaderValueCollection

   procedure Initialize (this : in out HttpContentCodingHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpContentCodingHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContentCodingHeaderValueCollection, IHttpContentCodingHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpContentCodingHeaderValueCollection /= null then
         if this.m_IHttpContentCodingHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpContentCodingHeaderValueCollection.all.Release;
            Free (this.m_IHttpContentCodingHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpContentCodingHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpContentCodingHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpContentCodingHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpContentCodingHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpContentCodingHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>
   function GetAt
   (
      this : in out HttpContentCodingHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentCodingHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentCodingHeaderValue do
         m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpContentCodingHeaderValue := new Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
         Retval.m_IHttpContentCodingHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpContentCodingHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpContentCodingHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpContentCodingHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpContentCodingHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpContentCodingHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpContentCodingHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpContentCodingHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpContentCodingHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpContentCodingHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpContentCodingHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpContentCodingHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpContentCodingHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpContentCodingHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpContentCodingHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpContentCodingHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpContentCodingHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpContentCodingHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpContentCodingHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpContentCodingHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpContentCodingHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpContentCodingHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3108918175, 17590, 21702, (154, 212, 226, 132, 75, 62, 11, 225 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IVector_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>
   function First
   (
      this : in out HttpContentCodingHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpContentCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (243884226, 30437, 22209, (159, 230, 140, 217, 1, 138, 103, 134 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, IIterable_IHttpContentCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpContentCodingHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpContentCodingWithQualityHeaderValue

   procedure Initialize (this : in out HttpContentCodingWithQualityHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpContentCodingWithQualityHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValue_Ptr);
   begin
      if this.m_IHttpContentCodingWithQualityHeaderValue /= null then
         if this.m_IHttpContentCodingWithQualityHeaderValue.all /= null then
            RefCount := this.m_IHttpContentCodingWithQualityHeaderValue.all.Release;
            Free (this.m_IHttpContentCodingWithQualityHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpContentCodingWithQualityHeaderValue

   function Constructor
   (
      contentCoding : WinRt.WString
   )
   return HttpContentCodingWithQualityHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue");
      m_Factory    : access IHttpContentCodingWithQualityHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
      HStr_contentCoding : WinRt.HString := To_HString (contentCoding);
   begin
      return RetVal : HttpContentCodingWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentCodingWithQualityHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromValue (HStr_contentCoding, m_ComRetVal'Access);
            Retval.m_IHttpContentCodingWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
            Retval.m_IHttpContentCodingWithQualityHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentCoding);
      end return;
   end;

   function Constructor
   (
      contentCoding : WinRt.WString;
      quality : WinRt.Double
   )
   return HttpContentCodingWithQualityHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue");
      m_Factory    : access IHttpContentCodingWithQualityHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
      HStr_contentCoding : WinRt.HString := To_HString (contentCoding);
   begin
      return RetVal : HttpContentCodingWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentCodingWithQualityHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromValueWithQuality (HStr_contentCoding, quality, m_ComRetVal'Access);
            Retval.m_IHttpContentCodingWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
            Retval.m_IHttpContentCodingWithQualityHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentCoding);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpContentCodingWithQualityHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentCodingWithQualityHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpContentCodingWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
            Retval.m_IHttpContentCodingWithQualityHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      contentCodingWithQualityHeaderValue : access Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpContentCodingWithQualityHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, contentCodingWithQualityHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpContentCodingWithQualityHeaderValue

   function get_ContentCoding
   (
      this : in out HttpContentCodingWithQualityHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpContentCodingWithQualityHeaderValue.all.get_ContentCoding (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Quality
   (
      this : in out HttpContentCodingWithQualityHeaderValue
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IHttpContentCodingWithQualityHeaderValue.all.get_Quality (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ToString
   (
      this : in out HttpContentCodingWithQualityHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpContentCodingWithQualityHeaderValueCollection

   procedure Initialize (this : in out HttpContentCodingWithQualityHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpContentCodingWithQualityHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContentCodingWithQualityHeaderValueCollection, IHttpContentCodingWithQualityHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpContentCodingWithQualityHeaderValueCollection /= null then
         if this.m_IHttpContentCodingWithQualityHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpContentCodingWithQualityHeaderValueCollection.all.Release;
            Free (this.m_IHttpContentCodingWithQualityHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpContentCodingWithQualityHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpContentCodingWithQualityHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpContentCodingWithQualityHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>
   function GetAt
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue do
         m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpContentCodingWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
         Retval.m_IHttpContentCodingWithQualityHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpContentCodingWithQualityHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpContentCodingWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpContentCodingWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpContentCodingWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (871982397, 3821, 21352, (165, 30, 152, 56, 81, 145, 248, 111 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IVector_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>
   function First
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpContentCodingWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2439930481, 52982, 21432, (185, 63, 220, 141, 202, 85, 158, 80 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, IIterable_IHttpContentCodingWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpContentCodingWithQualityHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentCodingWithQualityHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpContentDispositionHeaderValue

   procedure Initialize (this : in out HttpContentDispositionHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpContentDispositionHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValue_Ptr);
   begin
      if this.m_IHttpContentDispositionHeaderValue /= null then
         if this.m_IHttpContentDispositionHeaderValue.all /= null then
            RefCount := this.m_IHttpContentDispositionHeaderValue.all.Release;
            Free (this.m_IHttpContentDispositionHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpContentDispositionHeaderValue

   function Constructor
   (
      dispositionType : WinRt.WString
   )
   return HttpContentDispositionHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentDispositionHeaderValue");
      m_Factory    : access IHttpContentDispositionHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
      HStr_dispositionType : WinRt.HString := To_HString (dispositionType);
   begin
      return RetVal : HttpContentDispositionHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentDispositionHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_dispositionType, m_ComRetVal'Access);
            Retval.m_IHttpContentDispositionHeaderValue := new Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
            Retval.m_IHttpContentDispositionHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_dispositionType);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpContentDispositionHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentDispositionHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentDispositionHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentDispositionHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentDispositionHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpContentDispositionHeaderValue := new Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
            Retval.m_IHttpContentDispositionHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      contentDispositionHeaderValue : access Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentDispositionHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpContentDispositionHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, contentDispositionHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpContentDispositionHeaderValue

   function get_DispositionType
   (
      this : in out HttpContentDispositionHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.get_DispositionType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DispositionType
   (
      this : in out HttpContentDispositionHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.put_DispositionType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FileName
   (
      this : in out HttpContentDispositionHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.get_FileName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_FileName
   (
      this : in out HttpContentDispositionHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.put_FileName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FileNameStar
   (
      this : in out HttpContentDispositionHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.get_FileNameStar (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_FileNameStar
   (
      this : in out HttpContentDispositionHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.put_FileNameStar (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Name
   (
      this : in out HttpContentDispositionHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out HttpContentDispositionHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Parameters
   (
      this : in out HttpContentDispositionHeaderValue
   )
   return IVector_IHttpNameValueHeaderValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHttpNameValueHeaderValue.Kind;
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.get_Parameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHttpNameValueHeaderValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Size
   (
      this : in out HttpContentDispositionHeaderValue
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.get_Size (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Size
   (
      this : in out HttpContentDispositionHeaderValue;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentDispositionHeaderValue.all.put_Size (value);
   end;

   function ToString
   (
      this : in out HttpContentDispositionHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentDispositionHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpContentHeaderCollection

   procedure Initialize (this : in out HttpContentHeaderCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpContentHeaderCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContentHeaderCollection, IHttpContentHeaderCollection_Ptr);
   begin
      if this.m_IHttpContentHeaderCollection /= null then
         if this.m_IHttpContentHeaderCollection.all /= null then
            RefCount := this.m_IHttpContentHeaderCollection.all.Release;
            Free (this.m_IHttpContentHeaderCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpContentHeaderCollection

   function Constructor return HttpContentHeaderCollection is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentHeaderCollection");
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentHeaderCollection;
   begin
      return RetVal : HttpContentHeaderCollection do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHttpContentHeaderCollection := new Windows.Web.Http.Headers.IHttpContentHeaderCollection;
            Retval.m_IHttpContentHeaderCollection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpContentHeaderCollection

   function get_ContentDisposition
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentDispositionHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentDispositionHeaderValue do
         Hr := this.m_IHttpContentHeaderCollection.all.get_ContentDisposition (m_ComRetVal'Access);
         Retval.m_IHttpContentDispositionHeaderValue := new Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
         Retval.m_IHttpContentDispositionHeaderValue.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentDisposition
   (
      this : in out HttpContentHeaderCollection;
      value : Windows.Web.Http.Headers.HttpContentDispositionHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_ContentDisposition (value.m_IHttpContentDispositionHeaderValue.all);
   end;

   function get_ContentEncoding
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection do
         Hr := this.m_IHttpContentHeaderCollection.all.get_ContentEncoding (m_ComRetVal'Access);
         Retval.m_IHttpContentCodingHeaderValueCollection := new Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection;
         Retval.m_IHttpContentCodingHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_ContentLanguage
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection do
         Hr := this.m_IHttpContentHeaderCollection.all.get_ContentLanguage (m_ComRetVal'Access);
         Retval.m_IHttpLanguageHeaderValueCollection := new Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection;
         Retval.m_IHttpLanguageHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_ContentLength
   (
      this : in out HttpContentHeaderCollection
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.get_ContentLength (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ContentLength
   (
      this : in out HttpContentHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_ContentLength (value);
   end;

   function get_ContentLocation
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHttpContentHeaderCollection.all.get_ContentLocation (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentLocation
   (
      this : in out HttpContentHeaderCollection;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_ContentLocation (value.m_IUriRuntimeClass.all);
   end;

   function get_ContentMD5
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.get_ContentMD5 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ContentMD5
   (
      this : in out HttpContentHeaderCollection;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_ContentMD5 (value);
   end;

   function get_ContentRange
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentRangeHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentRangeHeaderValue do
         Hr := this.m_IHttpContentHeaderCollection.all.get_ContentRange (m_ComRetVal'Access);
         Retval.m_IHttpContentRangeHeaderValue := new Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
         Retval.m_IHttpContentRangeHeaderValue.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentRange
   (
      this : in out HttpContentHeaderCollection;
      value : Windows.Web.Http.Headers.HttpContentRangeHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_ContentRange (value.m_IHttpContentRangeHeaderValue.all);
   end;

   function get_ContentType
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpMediaTypeHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpMediaTypeHeaderValue do
         Hr := this.m_IHttpContentHeaderCollection.all.get_ContentType (m_ComRetVal'Access);
         Retval.m_IHttpMediaTypeHeaderValue := new Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
         Retval.m_IHttpMediaTypeHeaderValue.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentType
   (
      this : in out HttpContentHeaderCollection;
      value : Windows.Web.Http.Headers.HttpMediaTypeHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_ContentType (value.m_IHttpMediaTypeHeaderValue.all);
   end;

   function get_Expires
   (
      this : in out HttpContentHeaderCollection
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.get_Expires (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Expires
   (
      this : in out HttpContentHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_Expires (value);
   end;

   function get_LastModified
   (
      this : in out HttpContentHeaderCollection
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.get_LastModified (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_LastModified
   (
      this : in out HttpContentHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.put_LastModified (value);
   end;

   procedure Append
   (
      this : in out HttpContentHeaderCollection;
      name : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.Append (HStr_name, HStr_value);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function TryAppendWithoutValidation
   (
      this : in out HttpContentHeaderCollection;
      name : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpContentHeaderCollection.all.TryAppendWithoutValidation (HStr_name, HStr_value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.String>
   function Lookup
   (
      this : in out HttpContentHeaderCollection;
      key : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out HttpContentHeaderCollection;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out HttpContentHeaderCollection;
      key : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.Insert (HStr_key, HStr_value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out HttpContentHeaderCollection;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out HttpContentHeaderCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpContentHeaderCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentHeaderCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentHeaderCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpContentRangeHeaderValue

   procedure Initialize (this : in out HttpContentRangeHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpContentRangeHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpContentRangeHeaderValue, IHttpContentRangeHeaderValue_Ptr);
   begin
      if this.m_IHttpContentRangeHeaderValue /= null then
         if this.m_IHttpContentRangeHeaderValue.all /= null then
            RefCount := this.m_IHttpContentRangeHeaderValue.all.Release;
            Free (this.m_IHttpContentRangeHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpContentRangeHeaderValue

   function Constructor
   (
      length : WinRt.UInt64
   )
   return HttpContentRangeHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
      m_Factory    : access IHttpContentRangeHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
   begin
      return RetVal : HttpContentRangeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentRangeHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromLength (length, m_ComRetVal'Access);
            Retval.m_IHttpContentRangeHeaderValue := new Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
            Retval.m_IHttpContentRangeHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      from : WinRt.UInt64;
      to : WinRt.UInt64
   )
   return HttpContentRangeHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
      m_Factory    : access IHttpContentRangeHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
   begin
      return RetVal : HttpContentRangeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentRangeHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromRange (from, to, m_ComRetVal'Access);
            Retval.m_IHttpContentRangeHeaderValue := new Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
            Retval.m_IHttpContentRangeHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      from : WinRt.UInt64;
      to : WinRt.UInt64;
      length : WinRt.UInt64
   )
   return HttpContentRangeHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
      m_Factory    : access IHttpContentRangeHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
   begin
      return RetVal : HttpContentRangeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentRangeHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromRangeWithLength (from, to, length, m_ComRetVal'Access);
            Retval.m_IHttpContentRangeHeaderValue := new Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
            Retval.m_IHttpContentRangeHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpContentRangeHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentRangeHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentRangeHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentRangeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpContentRangeHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpContentRangeHeaderValue := new Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
            Retval.m_IHttpContentRangeHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      contentRangeHeaderValue : access Windows.Web.Http.Headers.IHttpContentRangeHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpContentRangeHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpContentRangeHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, contentRangeHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpContentRangeHeaderValue

   function get_FirstBytePosition
   (
      this : in out HttpContentRangeHeaderValue
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IHttpContentRangeHeaderValue.all.get_FirstBytePosition (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LastBytePosition
   (
      this : in out HttpContentRangeHeaderValue
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IHttpContentRangeHeaderValue.all.get_LastBytePosition (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Length
   (
      this : in out HttpContentRangeHeaderValue
   )
   return IReference_UInt64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt64.Kind;
   begin
      Hr := this.m_IHttpContentRangeHeaderValue.all.get_Length (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Unit
   (
      this : in out HttpContentRangeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpContentRangeHeaderValue.all.get_Unit (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Unit
   (
      this : in out HttpContentRangeHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpContentRangeHeaderValue.all.put_Unit (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function ToString
   (
      this : in out HttpContentRangeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpContentRangeHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpContentRangeHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCookiePairHeaderValue

   procedure Initialize (this : in out HttpCookiePairHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCookiePairHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpCookiePairHeaderValue, IHttpCookiePairHeaderValue_Ptr);
   begin
      if this.m_IHttpCookiePairHeaderValue /= null then
         if this.m_IHttpCookiePairHeaderValue.all /= null then
            RefCount := this.m_IHttpCookiePairHeaderValue.all.Release;
            Free (this.m_IHttpCookiePairHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpCookiePairHeaderValue

   function Constructor
   (
      name : WinRt.WString
   )
   return HttpCookiePairHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCookiePairHeaderValue");
      m_Factory    : access IHttpCookiePairHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : HttpCookiePairHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpCookiePairHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromName (HStr_name, m_ComRetVal'Access);
            Retval.m_IHttpCookiePairHeaderValue := new Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
            Retval.m_IHttpCookiePairHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      value : WinRt.WString
   )
   return HttpCookiePairHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCookiePairHeaderValue");
      m_Factory    : access IHttpCookiePairHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : HttpCookiePairHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpCookiePairHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNameWithValue (HStr_name, HStr_value, m_ComRetVal'Access);
            Retval.m_IHttpCookiePairHeaderValue := new Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
            Retval.m_IHttpCookiePairHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpCookiePairHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpCookiePairHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCookiePairHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCookiePairHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpCookiePairHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpCookiePairHeaderValue := new Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
            Retval.m_IHttpCookiePairHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      cookiePairHeaderValue : access Windows.Web.Http.Headers.IHttpCookiePairHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCookiePairHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpCookiePairHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, cookiePairHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCookiePairHeaderValue

   function get_Name
   (
      this : in out HttpCookiePairHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCookiePairHeaderValue.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out HttpCookiePairHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCookiePairHeaderValue.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out HttpCookiePairHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpCookiePairHeaderValue.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function ToString
   (
      this : in out HttpCookiePairHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCookiePairHeaderValueCollection

   procedure Initialize (this : in out HttpCookiePairHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCookiePairHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpCookiePairHeaderValueCollection, IHttpCookiePairHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpCookiePairHeaderValueCollection /= null then
         if this.m_IHttpCookiePairHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpCookiePairHeaderValueCollection.all.Release;
            Free (this.m_IHttpCookiePairHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCookiePairHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpCookiePairHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpCookiePairHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpCookiePairHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpCookiePairHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>
   function GetAt
   (
      this : in out HttpCookiePairHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpCookiePairHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCookiePairHeaderValue do
         m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpCookiePairHeaderValue := new Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
         Retval.m_IHttpCookiePairHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpCookiePairHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpCookiePairHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpCookiePairHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpCookiePairHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpCookiePairHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpCookiePairHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpCookiePairHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpCookiePairHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpCookiePairHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpCookiePairHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpCookiePairHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpCookiePairHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpCookiePairHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpCookiePairHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpCookiePairHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpCookiePairHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpCookiePairHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpCookiePairHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpCookiePairHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3155782350, 35414, 24528, (152, 120, 200, 7, 237, 216, 100, 90 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IVector_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>
   function First
   (
      this : in out HttpCookiePairHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpCookiePairHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (376910404, 20497, 21060, (187, 0, 20, 219, 76, 247, 16, 5 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, IIterable_IHttpCookiePairHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpCookiePairHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCookiePairHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCredentialsHeaderValue

   procedure Initialize (this : in out HttpCredentialsHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCredentialsHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpCredentialsHeaderValue, IHttpCredentialsHeaderValue_Ptr);
   begin
      if this.m_IHttpCredentialsHeaderValue /= null then
         if this.m_IHttpCredentialsHeaderValue.all /= null then
            RefCount := this.m_IHttpCredentialsHeaderValue.all.Release;
            Free (this.m_IHttpCredentialsHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpCredentialsHeaderValue

   function Constructor
   (
      scheme : WinRt.WString
   )
   return HttpCredentialsHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCredentialsHeaderValue");
      m_Factory    : access IHttpCredentialsHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
      HStr_scheme : WinRt.HString := To_HString (scheme);
   begin
      return RetVal : HttpCredentialsHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpCredentialsHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromScheme (HStr_scheme, m_ComRetVal'Access);
            Retval.m_IHttpCredentialsHeaderValue := new Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
            Retval.m_IHttpCredentialsHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scheme);
      end return;
   end;

   function Constructor
   (
      scheme : WinRt.WString;
      token : WinRt.WString
   )
   return HttpCredentialsHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCredentialsHeaderValue");
      m_Factory    : access IHttpCredentialsHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
      HStr_scheme : WinRt.HString := To_HString (scheme);
      HStr_token : WinRt.HString := To_HString (token);
   begin
      return RetVal : HttpCredentialsHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpCredentialsHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromSchemeWithToken (HStr_scheme, HStr_token, m_ComRetVal'Access);
            Retval.m_IHttpCredentialsHeaderValue := new Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
            Retval.m_IHttpCredentialsHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scheme);
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpCredentialsHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpCredentialsHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCredentialsHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpCredentialsHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCredentialsHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpCredentialsHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpCredentialsHeaderValue := new Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
            Retval.m_IHttpCredentialsHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      credentialsHeaderValue : access Windows.Web.Http.Headers.IHttpCredentialsHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpCredentialsHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpCredentialsHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpCredentialsHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, credentialsHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCredentialsHeaderValue

   function get_Parameters
   (
      this : in out HttpCredentialsHeaderValue
   )
   return IVector_IHttpNameValueHeaderValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHttpNameValueHeaderValue.Kind;
   begin
      Hr := this.m_IHttpCredentialsHeaderValue.all.get_Parameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHttpNameValueHeaderValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Scheme
   (
      this : in out HttpCredentialsHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCredentialsHeaderValue.all.get_Scheme (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Token
   (
      this : in out HttpCredentialsHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpCredentialsHeaderValue.all.get_Token (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpCredentialsHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpCredentialsHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpCredentialsHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpDateOrDeltaHeaderValue

   procedure Initialize (this : in out HttpDateOrDeltaHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpDateOrDeltaHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValue_Ptr);
   begin
      if this.m_IHttpDateOrDeltaHeaderValue /= null then
         if this.m_IHttpDateOrDeltaHeaderValue.all /= null then
            RefCount := this.m_IHttpDateOrDeltaHeaderValue.all.Release;
            Free (this.m_IHttpDateOrDeltaHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpDateOrDeltaHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpDateOrDeltaHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpDateOrDeltaHeaderValue := new Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue;
            Retval.m_IHttpDateOrDeltaHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      dateOrDeltaHeaderValue : access Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpDateOrDeltaHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, dateOrDeltaHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpDateOrDeltaHeaderValue

   function get_Date
   (
      this : in out HttpDateOrDeltaHeaderValue
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpDateOrDeltaHeaderValue.all.get_Date (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Delta
   (
      this : in out HttpDateOrDeltaHeaderValue
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IHttpDateOrDeltaHeaderValue.all.get_Delta (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ToString
   (
      this : in out HttpDateOrDeltaHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpDateOrDeltaHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpExpectationHeaderValue

   procedure Initialize (this : in out HttpExpectationHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpExpectationHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpExpectationHeaderValue, IHttpExpectationHeaderValue_Ptr);
   begin
      if this.m_IHttpExpectationHeaderValue /= null then
         if this.m_IHttpExpectationHeaderValue.all /= null then
            RefCount := this.m_IHttpExpectationHeaderValue.all.Release;
            Free (this.m_IHttpExpectationHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpExpectationHeaderValue

   function Constructor
   (
      name : WinRt.WString
   )
   return HttpExpectationHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpExpectationHeaderValue");
      m_Factory    : access IHttpExpectationHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : HttpExpectationHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpExpectationHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromName (HStr_name, m_ComRetVal'Access);
            Retval.m_IHttpExpectationHeaderValue := new Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
            Retval.m_IHttpExpectationHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      value : WinRt.WString
   )
   return HttpExpectationHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpExpectationHeaderValue");
      m_Factory    : access IHttpExpectationHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : HttpExpectationHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpExpectationHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNameWithValue (HStr_name, HStr_value, m_ComRetVal'Access);
            Retval.m_IHttpExpectationHeaderValue := new Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
            Retval.m_IHttpExpectationHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpExpectationHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpExpectationHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpExpectationHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpExpectationHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpExpectationHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpExpectationHeaderValue := new Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
            Retval.m_IHttpExpectationHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      expectationHeaderValue : access Windows.Web.Http.Headers.IHttpExpectationHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpExpectationHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpExpectationHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, expectationHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpExpectationHeaderValue

   function get_Name
   (
      this : in out HttpExpectationHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpExpectationHeaderValue.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out HttpExpectationHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpExpectationHeaderValue.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out HttpExpectationHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpExpectationHeaderValue.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Parameters
   (
      this : in out HttpExpectationHeaderValue
   )
   return IVector_IHttpNameValueHeaderValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHttpNameValueHeaderValue.Kind;
   begin
      Hr := this.m_IHttpExpectationHeaderValue.all.get_Parameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHttpNameValueHeaderValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ToString
   (
      this : in out HttpExpectationHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpExpectationHeaderValueCollection

   procedure Initialize (this : in out HttpExpectationHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpExpectationHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpExpectationHeaderValueCollection, IHttpExpectationHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpExpectationHeaderValueCollection /= null then
         if this.m_IHttpExpectationHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpExpectationHeaderValueCollection.all.Release;
            Free (this.m_IHttpExpectationHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpExpectationHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpExpectationHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpExpectationHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpExpectationHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpExpectationHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpExpectationHeaderValue>
   function GetAt
   (
      this : in out HttpExpectationHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpExpectationHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpExpectationHeaderValue do
         m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpExpectationHeaderValue := new Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
         Retval.m_IHttpExpectationHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpExpectationHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpExpectationHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpExpectationHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpExpectationHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpExpectationHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpExpectationHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpExpectationHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpExpectationHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpExpectationHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpExpectationHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpExpectationHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpExpectationHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpExpectationHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpExpectationHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpExpectationHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpExpectationHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpExpectationHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpExpectationHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpExpectationHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpExpectationHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpExpectationHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (417413358, 65223, 21117, (134, 147, 222, 235, 202, 79, 61, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IVector_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpExpectationHeaderValue>
   function First
   (
      this : in out HttpExpectationHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpExpectationHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (171514923, 5059, 22968, (134, 98, 19, 175, 251, 157, 23, 84 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, IIterable_IHttpExpectationHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpExpectationHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpExpectationHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpLanguageHeaderValueCollection

   procedure Initialize (this : in out HttpLanguageHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpLanguageHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpLanguageHeaderValueCollection, IHttpLanguageHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpLanguageHeaderValueCollection /= null then
         if this.m_IHttpLanguageHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpLanguageHeaderValueCollection.all.Release;
            Free (this.m_IHttpLanguageHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpLanguageHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpLanguageHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpLanguageHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpLanguageHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpLanguageHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Globalization.Language>
   function GetAt
   (
      this : in out HttpLanguageHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Globalization.Language'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILanguage := new Windows.Globalization.ILanguage;
         Retval.m_ILanguage.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpLanguageHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpLanguageHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpLanguageHeaderValueCollection;
      value : Windows.Globalization.Language'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_ILanguage.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpLanguageHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Globalization.Language'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_ILanguage.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpLanguageHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Globalization.Language'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_ILanguage.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpLanguageHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpLanguageHeaderValueCollection;
      value : Windows.Globalization.Language'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_ILanguage.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpLanguageHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpLanguageHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpLanguageHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Globalization.ILanguage_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpLanguageHeaderValueCollection;
      items : Windows.Globalization.ILanguage_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3706868314, 17088, 20509, (159, 203, 71, 31, 174, 6, 3, 150 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IVector_ILanguage.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Globalization.Language>
   function First
   (
      this : in out HttpLanguageHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ILanguage.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1212193296, 25014, 23985, (166, 157, 138, 188, 70, 172, 96, 138 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, IIterable_ILanguage.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpLanguageHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpLanguageRangeWithQualityHeaderValue

   procedure Initialize (this : in out HttpLanguageRangeWithQualityHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpLanguageRangeWithQualityHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValue_Ptr);
   begin
      if this.m_IHttpLanguageRangeWithQualityHeaderValue /= null then
         if this.m_IHttpLanguageRangeWithQualityHeaderValue.all /= null then
            RefCount := this.m_IHttpLanguageRangeWithQualityHeaderValue.all.Release;
            Free (this.m_IHttpLanguageRangeWithQualityHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpLanguageRangeWithQualityHeaderValue

   function Constructor
   (
      languageRange : WinRt.WString
   )
   return HttpLanguageRangeWithQualityHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue");
      m_Factory    : access IHttpLanguageRangeWithQualityHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
      HStr_languageRange : WinRt.HString := To_HString (languageRange);
   begin
      return RetVal : HttpLanguageRangeWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpLanguageRangeWithQualityHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromLanguageRange (HStr_languageRange, m_ComRetVal'Access);
            Retval.m_IHttpLanguageRangeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
            Retval.m_IHttpLanguageRangeWithQualityHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_languageRange);
      end return;
   end;

   function Constructor
   (
      languageRange : WinRt.WString;
      quality : WinRt.Double
   )
   return HttpLanguageRangeWithQualityHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue");
      m_Factory    : access IHttpLanguageRangeWithQualityHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
      HStr_languageRange : WinRt.HString := To_HString (languageRange);
   begin
      return RetVal : HttpLanguageRangeWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpLanguageRangeWithQualityHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromLanguageRangeWithQuality (HStr_languageRange, quality, m_ComRetVal'Access);
            Retval.m_IHttpLanguageRangeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
            Retval.m_IHttpLanguageRangeWithQualityHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_languageRange);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpLanguageRangeWithQualityHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpLanguageRangeWithQualityHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpLanguageRangeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
            Retval.m_IHttpLanguageRangeWithQualityHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      languageRangeWithQualityHeaderValue : access Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpLanguageRangeWithQualityHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, languageRangeWithQualityHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpLanguageRangeWithQualityHeaderValue

   function get_LanguageRange
   (
      this : in out HttpLanguageRangeWithQualityHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpLanguageRangeWithQualityHeaderValue.all.get_LanguageRange (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Quality
   (
      this : in out HttpLanguageRangeWithQualityHeaderValue
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IHttpLanguageRangeWithQualityHeaderValue.all.get_Quality (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ToString
   (
      this : in out HttpLanguageRangeWithQualityHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpLanguageRangeWithQualityHeaderValueCollection

   procedure Initialize (this : in out HttpLanguageRangeWithQualityHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpLanguageRangeWithQualityHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpLanguageRangeWithQualityHeaderValueCollection, IHttpLanguageRangeWithQualityHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpLanguageRangeWithQualityHeaderValueCollection /= null then
         if this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all.Release;
            Free (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpLanguageRangeWithQualityHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>
   function GetAt
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue do
         m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpLanguageRangeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
         Retval.m_IHttpLanguageRangeWithQualityHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpLanguageRangeWithQualityHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpLanguageRangeWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpLanguageRangeWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpLanguageRangeWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3068095906, 36242, 21104, (149, 132, 214, 169, 169, 49, 88, 109 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IVector_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>
   function First
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpLanguageRangeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (207243789, 56247, 23231, (165, 253, 195, 185, 141, 156, 20, 135 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, IIterable_IHttpLanguageRangeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpLanguageRangeWithQualityHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpMediaTypeHeaderValue

   procedure Initialize (this : in out HttpMediaTypeHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpMediaTypeHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValue_Ptr);
   begin
      if this.m_IHttpMediaTypeHeaderValue /= null then
         if this.m_IHttpMediaTypeHeaderValue.all /= null then
            RefCount := this.m_IHttpMediaTypeHeaderValue.all.Release;
            Free (this.m_IHttpMediaTypeHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpMediaTypeHeaderValue

   function Constructor
   (
      mediaType : WinRt.WString
   )
   return HttpMediaTypeHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpMediaTypeHeaderValue");
      m_Factory    : access IHttpMediaTypeHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
      HStr_mediaType : WinRt.HString := To_HString (mediaType);
   begin
      return RetVal : HttpMediaTypeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMediaTypeHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_mediaType, m_ComRetVal'Access);
            Retval.m_IHttpMediaTypeHeaderValue := new Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
            Retval.m_IHttpMediaTypeHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_mediaType);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpMediaTypeHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpMediaTypeHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpMediaTypeHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpMediaTypeHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMediaTypeHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMediaTypeHeaderValue := new Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
            Retval.m_IHttpMediaTypeHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      mediaTypeHeaderValue : access Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpMediaTypeHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpMediaTypeHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, mediaTypeHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpMediaTypeHeaderValue

   function get_CharSet
   (
      this : in out HttpMediaTypeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpMediaTypeHeaderValue.all.get_CharSet (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CharSet
   (
      this : in out HttpMediaTypeHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpMediaTypeHeaderValue.all.put_CharSet (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_MediaType
   (
      this : in out HttpMediaTypeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpMediaTypeHeaderValue.all.get_MediaType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_MediaType
   (
      this : in out HttpMediaTypeHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpMediaTypeHeaderValue.all.put_MediaType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Parameters
   (
      this : in out HttpMediaTypeHeaderValue
   )
   return IVector_IHttpNameValueHeaderValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHttpNameValueHeaderValue.Kind;
   begin
      Hr := this.m_IHttpMediaTypeHeaderValue.all.get_Parameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHttpNameValueHeaderValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ToString
   (
      this : in out HttpMediaTypeHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpMediaTypeWithQualityHeaderValue

   procedure Initialize (this : in out HttpMediaTypeWithQualityHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpMediaTypeWithQualityHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValue_Ptr);
   begin
      if this.m_IHttpMediaTypeWithQualityHeaderValue /= null then
         if this.m_IHttpMediaTypeWithQualityHeaderValue.all /= null then
            RefCount := this.m_IHttpMediaTypeWithQualityHeaderValue.all.Release;
            Free (this.m_IHttpMediaTypeWithQualityHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpMediaTypeWithQualityHeaderValue

   function Constructor
   (
      mediaType : WinRt.WString
   )
   return HttpMediaTypeWithQualityHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue");
      m_Factory    : access IHttpMediaTypeWithQualityHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
      HStr_mediaType : WinRt.HString := To_HString (mediaType);
   begin
      return RetVal : HttpMediaTypeWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMediaTypeWithQualityHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromMediaType (HStr_mediaType, m_ComRetVal'Access);
            Retval.m_IHttpMediaTypeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
            Retval.m_IHttpMediaTypeWithQualityHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_mediaType);
      end return;
   end;

   function Constructor
   (
      mediaType : WinRt.WString;
      quality : WinRt.Double
   )
   return HttpMediaTypeWithQualityHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue");
      m_Factory    : access IHttpMediaTypeWithQualityHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
      HStr_mediaType : WinRt.HString := To_HString (mediaType);
   begin
      return RetVal : HttpMediaTypeWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMediaTypeWithQualityHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromMediaTypeWithQuality (HStr_mediaType, quality, m_ComRetVal'Access);
            Retval.m_IHttpMediaTypeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
            Retval.m_IHttpMediaTypeWithQualityHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_mediaType);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpMediaTypeWithQualityHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpMediaTypeWithQualityHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpMediaTypeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
            Retval.m_IHttpMediaTypeWithQualityHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      mediaTypeWithQualityHeaderValue : access Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpMediaTypeWithQualityHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, mediaTypeWithQualityHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpMediaTypeWithQualityHeaderValue

   function get_CharSet
   (
      this : in out HttpMediaTypeWithQualityHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValue.all.get_CharSet (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CharSet
   (
      this : in out HttpMediaTypeWithQualityHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValue.all.put_CharSet (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_MediaType
   (
      this : in out HttpMediaTypeWithQualityHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValue.all.get_MediaType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_MediaType
   (
      this : in out HttpMediaTypeWithQualityHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValue.all.put_MediaType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Parameters
   (
      this : in out HttpMediaTypeWithQualityHeaderValue
   )
   return IVector_IHttpNameValueHeaderValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHttpNameValueHeaderValue.Kind;
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValue.all.get_Parameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHttpNameValueHeaderValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Quality
   (
      this : in out HttpMediaTypeWithQualityHeaderValue
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValue.all.get_Quality (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Quality
   (
      this : in out HttpMediaTypeWithQualityHeaderValue;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValue.all.put_Quality (value);
   end;

   function ToString
   (
      this : in out HttpMediaTypeWithQualityHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpMediaTypeWithQualityHeaderValueCollection

   procedure Initialize (this : in out HttpMediaTypeWithQualityHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpMediaTypeWithQualityHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpMediaTypeWithQualityHeaderValueCollection, IHttpMediaTypeWithQualityHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpMediaTypeWithQualityHeaderValueCollection /= null then
         if this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all.Release;
            Free (this.m_IHttpMediaTypeWithQualityHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpMediaTypeWithQualityHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>
   function GetAt
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue do
         m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpMediaTypeWithQualityHeaderValue := new Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
         Retval.m_IHttpMediaTypeWithQualityHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpMediaTypeWithQualityHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpMediaTypeWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpMediaTypeWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpMediaTypeWithQualityHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3246733559, 49750, 22118, (136, 104, 34, 37, 175, 53, 116, 182 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IVector_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>
   function First
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpMediaTypeWithQualityHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4291289054, 22712, 20969, (179, 59, 101, 165, 214, 164, 226, 76 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, IIterable_IHttpMediaTypeWithQualityHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpMediaTypeWithQualityHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMediaTypeWithQualityHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpMethodHeaderValueCollection

   procedure Initialize (this : in out HttpMethodHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpMethodHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpMethodHeaderValueCollection, IHttpMethodHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpMethodHeaderValueCollection /= null then
         if this.m_IHttpMethodHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpMethodHeaderValueCollection.all.Release;
            Free (this.m_IHttpMethodHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpMethodHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpMethodHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpMethodHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpMethodHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpMethodHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.HttpMethod>
   function GetAt
   (
      this : in out HttpMethodHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.HttpMethod'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpMethod;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpMethod do
         m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpMethod := new Windows.Web.Http.IHttpMethod;
         Retval.m_IHttpMethod.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpMethodHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpMethodHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpMethodHeaderValueCollection;
      value : Windows.Web.Http.HttpMethod'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpMethod.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpMethodHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.HttpMethod'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpMethod.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpMethodHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.HttpMethod'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpMethod.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpMethodHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpMethodHeaderValueCollection;
      value : Windows.Web.Http.HttpMethod'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpMethod.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpMethodHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpMethodHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpMethodHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.IHttpMethod_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpMethodHeaderValueCollection;
      items : Windows.Web.Http.IHttpMethod_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (579498914, 42249, 23160, (189, 127, 219, 148, 186, 11, 239, 33 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IVector_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.HttpMethod>
   function First
   (
      this : in out HttpMethodHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpMethod.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3230186266, 56417, 22497, (185, 103, 120, 218, 179, 84, 29, 165 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, IIterable_IHttpMethod.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpMethodHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpMethodHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpNameValueHeaderValue

   procedure Initialize (this : in out HttpNameValueHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpNameValueHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpNameValueHeaderValue, IHttpNameValueHeaderValue_Ptr);
   begin
      if this.m_IHttpNameValueHeaderValue /= null then
         if this.m_IHttpNameValueHeaderValue.all /= null then
            RefCount := this.m_IHttpNameValueHeaderValue.all.Release;
            Free (this.m_IHttpNameValueHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpNameValueHeaderValue

   function Constructor
   (
      name : WinRt.WString
   )
   return HttpNameValueHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpNameValueHeaderValue");
      m_Factory    : access IHttpNameValueHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : HttpNameValueHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpNameValueHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromName (HStr_name, m_ComRetVal'Access);
            Retval.m_IHttpNameValueHeaderValue := new Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
            Retval.m_IHttpNameValueHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      value : WinRt.WString
   )
   return HttpNameValueHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpNameValueHeaderValue");
      m_Factory    : access IHttpNameValueHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : HttpNameValueHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpNameValueHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNameWithValue (HStr_name, HStr_value, m_ComRetVal'Access);
            Retval.m_IHttpNameValueHeaderValue := new Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
            Retval.m_IHttpNameValueHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpNameValueHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpNameValueHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpNameValueHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpNameValueHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpNameValueHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpNameValueHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpNameValueHeaderValue := new Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
            Retval.m_IHttpNameValueHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      nameValueHeaderValue : access Windows.Web.Http.Headers.IHttpNameValueHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpNameValueHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpNameValueHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpNameValueHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, nameValueHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpNameValueHeaderValue

   function get_Name
   (
      this : in out HttpNameValueHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpNameValueHeaderValue.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Value
   (
      this : in out HttpNameValueHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpNameValueHeaderValue.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out HttpNameValueHeaderValue;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpNameValueHeaderValue.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function ToString
   (
      this : in out HttpNameValueHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpNameValueHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpNameValueHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpProductHeaderValue

   procedure Initialize (this : in out HttpProductHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpProductHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpProductHeaderValue, IHttpProductHeaderValue_Ptr);
   begin
      if this.m_IHttpProductHeaderValue /= null then
         if this.m_IHttpProductHeaderValue.all /= null then
            RefCount := this.m_IHttpProductHeaderValue.all.Release;
            Free (this.m_IHttpProductHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpProductHeaderValue

   function Constructor
   (
      productName : WinRt.WString
   )
   return HttpProductHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductHeaderValue");
      m_Factory    : access IHttpProductHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpProductHeaderValue;
      HStr_productName : WinRt.HString := To_HString (productName);
   begin
      return RetVal : HttpProductHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpProductHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromName (HStr_productName, m_ComRetVal'Access);
            Retval.m_IHttpProductHeaderValue := new Windows.Web.Http.Headers.IHttpProductHeaderValue;
            Retval.m_IHttpProductHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_productName);
      end return;
   end;

   function Constructor
   (
      productName : WinRt.WString;
      productVersion : WinRt.WString
   )
   return HttpProductHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductHeaderValue");
      m_Factory    : access IHttpProductHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpProductHeaderValue;
      HStr_productName : WinRt.HString := To_HString (productName);
      HStr_productVersion : WinRt.HString := To_HString (productVersion);
   begin
      return RetVal : HttpProductHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpProductHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNameWithVersion (HStr_productName, HStr_productVersion, m_ComRetVal'Access);
            Retval.m_IHttpProductHeaderValue := new Windows.Web.Http.Headers.IHttpProductHeaderValue;
            Retval.m_IHttpProductHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_productName);
         Hr := WindowsDeleteString (HStr_productVersion);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpProductHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpProductHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpProductHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpProductHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpProductHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpProductHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpProductHeaderValue := new Windows.Web.Http.Headers.IHttpProductHeaderValue;
            Retval.m_IHttpProductHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      productHeaderValue : access Windows.Web.Http.Headers.IHttpProductHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpProductHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpProductHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, productHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpProductHeaderValue

   function get_Name
   (
      this : in out HttpProductHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpProductHeaderValue.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Version
   (
      this : in out HttpProductHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpProductHeaderValue.all.get_Version (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpProductHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpProductInfoHeaderValue

   procedure Initialize (this : in out HttpProductInfoHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpProductInfoHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpProductInfoHeaderValue, IHttpProductInfoHeaderValue_Ptr);
   begin
      if this.m_IHttpProductInfoHeaderValue /= null then
         if this.m_IHttpProductInfoHeaderValue.all /= null then
            RefCount := this.m_IHttpProductInfoHeaderValue.all.Release;
            Free (this.m_IHttpProductInfoHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpProductInfoHeaderValue

   function Constructor
   (
      productComment : WinRt.WString
   )
   return HttpProductInfoHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductInfoHeaderValue");
      m_Factory    : access IHttpProductInfoHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
      HStr_productComment : WinRt.HString := To_HString (productComment);
   begin
      return RetVal : HttpProductInfoHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpProductInfoHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromComment (HStr_productComment, m_ComRetVal'Access);
            Retval.m_IHttpProductInfoHeaderValue := new Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
            Retval.m_IHttpProductInfoHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_productComment);
      end return;
   end;

   function Constructor
   (
      productName : WinRt.WString;
      productVersion : WinRt.WString
   )
   return HttpProductInfoHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductInfoHeaderValue");
      m_Factory    : access IHttpProductInfoHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
      HStr_productName : WinRt.HString := To_HString (productName);
      HStr_productVersion : WinRt.HString := To_HString (productVersion);
   begin
      return RetVal : HttpProductInfoHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpProductInfoHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNameWithVersion (HStr_productName, HStr_productVersion, m_ComRetVal'Access);
            Retval.m_IHttpProductInfoHeaderValue := new Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
            Retval.m_IHttpProductInfoHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_productName);
         Hr := WindowsDeleteString (HStr_productVersion);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpProductInfoHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpProductInfoHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductInfoHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpProductInfoHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpProductInfoHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpProductInfoHeaderValue := new Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
            Retval.m_IHttpProductInfoHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      productInfoHeaderValue : access Windows.Web.Http.Headers.IHttpProductInfoHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpProductInfoHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpProductInfoHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, productInfoHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpProductInfoHeaderValue

   function get_Product
   (
      this : in out HttpProductInfoHeaderValue
   )
   return WinRt.Windows.Web.Http.Headers.HttpProductHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpProductHeaderValue;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpProductHeaderValue do
         Hr := this.m_IHttpProductInfoHeaderValue.all.get_Product (m_ComRetVal'Access);
         Retval.m_IHttpProductHeaderValue := new Windows.Web.Http.Headers.IHttpProductHeaderValue;
         Retval.m_IHttpProductHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Comment
   (
      this : in out HttpProductInfoHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpProductInfoHeaderValue.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpProductInfoHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpProductInfoHeaderValueCollection

   procedure Initialize (this : in out HttpProductInfoHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpProductInfoHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpProductInfoHeaderValueCollection, IHttpProductInfoHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpProductInfoHeaderValueCollection /= null then
         if this.m_IHttpProductInfoHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpProductInfoHeaderValueCollection.all.Release;
            Free (this.m_IHttpProductInfoHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpProductInfoHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpProductInfoHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpProductInfoHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpProductInfoHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpProductInfoHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>
   function GetAt
   (
      this : in out HttpProductInfoHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpProductInfoHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpProductInfoHeaderValue do
         m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpProductInfoHeaderValue := new Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
         Retval.m_IHttpProductInfoHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpProductInfoHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpProductInfoHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpProductInfoHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpProductInfoHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpProductInfoHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpProductInfoHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpProductInfoHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpProductInfoHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpProductInfoHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpProductInfoHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpProductInfoHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpProductInfoHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpProductInfoHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpProductInfoHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpProductInfoHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpProductInfoHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpProductInfoHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpProductInfoHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpProductInfoHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpProductInfoHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpProductInfoHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1765351520, 27663, 24038, (140, 237, 241, 79, 193, 184, 51, 118 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IVector_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>
   function First
   (
      this : in out HttpProductInfoHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpProductInfoHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3214397337, 58900, 22373, (186, 215, 22, 26, 227, 169, 58, 233 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, IIterable_IHttpProductInfoHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpProductInfoHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpProductInfoHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpRequestHeaderCollection

   procedure Initialize (this : in out HttpRequestHeaderCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpRequestHeaderCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpRequestHeaderCollection, IHttpRequestHeaderCollection_Ptr);
   begin
      if this.m_IHttpRequestHeaderCollection /= null then
         if this.m_IHttpRequestHeaderCollection.all /= null then
            RefCount := this.m_IHttpRequestHeaderCollection.all.Release;
            Free (this.m_IHttpRequestHeaderCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpRequestHeaderCollection

   function get_Accept
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_Accept (m_ComRetVal'Access);
         Retval.m_IHttpMediaTypeWithQualityHeaderValueCollection := new Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection;
         Retval.m_IHttpMediaTypeWithQualityHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_AcceptEncoding
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_AcceptEncoding (m_ComRetVal'Access);
         Retval.m_IHttpContentCodingWithQualityHeaderValueCollection := new Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection;
         Retval.m_IHttpContentCodingWithQualityHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_AcceptLanguage
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_AcceptLanguage (m_ComRetVal'Access);
         Retval.m_IHttpLanguageRangeWithQualityHeaderValueCollection := new Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection;
         Retval.m_IHttpLanguageRangeWithQualityHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Authorization
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpCredentialsHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCredentialsHeaderValue do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_Authorization (m_ComRetVal'Access);
         Retval.m_IHttpCredentialsHeaderValue := new Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
         Retval.m_IHttpCredentialsHeaderValue.all := m_ComRetVal;
      end return;
   end;

   procedure put_Authorization
   (
      this : in out HttpRequestHeaderCollection;
      value : Windows.Web.Http.Headers.HttpCredentialsHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_Authorization (value.m_IHttpCredentialsHeaderValue.all);
   end;

   function get_CacheControl
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_CacheControl (m_ComRetVal'Access);
         Retval.m_IHttpCacheDirectiveHeaderValueCollection := new Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection;
         Retval.m_IHttpCacheDirectiveHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Connection
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IHttpConnectionOptionHeaderValueCollection := new Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection;
         Retval.m_IHttpConnectionOptionHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Cookie
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_Cookie (m_ComRetVal'Access);
         Retval.m_IHttpCookiePairHeaderValueCollection := new Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection;
         Retval.m_IHttpCookiePairHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Date
   (
      this : in out HttpRequestHeaderCollection
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.get_Date (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Date
   (
      this : in out HttpRequestHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_Date (value);
   end;

   function get_Expect
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_Expect (m_ComRetVal'Access);
         Retval.m_IHttpExpectationHeaderValueCollection := new Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection;
         Retval.m_IHttpExpectationHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_From
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.get_From (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_From
   (
      this : in out HttpRequestHeaderCollection;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_From (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Host
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_Host (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   procedure put_Host
   (
      this : in out HttpRequestHeaderCollection;
      value : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_Host (value.m_IHostName.all);
   end;

   function get_IfModifiedSince
   (
      this : in out HttpRequestHeaderCollection
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.get_IfModifiedSince (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IfModifiedSince
   (
      this : in out HttpRequestHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_IfModifiedSince (value);
   end;

   function get_IfUnmodifiedSince
   (
      this : in out HttpRequestHeaderCollection
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.get_IfUnmodifiedSince (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IfUnmodifiedSince
   (
      this : in out HttpRequestHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_IfUnmodifiedSince (value);
   end;

   function get_MaxForwards
   (
      this : in out HttpRequestHeaderCollection
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.get_MaxForwards (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxForwards
   (
      this : in out HttpRequestHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_MaxForwards (value);
   end;

   function get_ProxyAuthorization
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpCredentialsHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCredentialsHeaderValue do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_ProxyAuthorization (m_ComRetVal'Access);
         Retval.m_IHttpCredentialsHeaderValue := new Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
         Retval.m_IHttpCredentialsHeaderValue.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyAuthorization
   (
      this : in out HttpRequestHeaderCollection;
      value : Windows.Web.Http.Headers.HttpCredentialsHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_ProxyAuthorization (value.m_IHttpCredentialsHeaderValue.all);
   end;

   function get_Referer
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_Referer (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Referer
   (
      this : in out HttpRequestHeaderCollection;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.put_Referer (value.m_IUriRuntimeClass.all);
   end;

   function get_TransferEncoding
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_TransferEncoding (m_ComRetVal'Access);
         Retval.m_IHttpTransferCodingHeaderValueCollection := new Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection;
         Retval.m_IHttpTransferCodingHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_UserAgent
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection do
         Hr := this.m_IHttpRequestHeaderCollection.all.get_UserAgent (m_ComRetVal'Access);
         Retval.m_IHttpProductInfoHeaderValueCollection := new Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection;
         Retval.m_IHttpProductInfoHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   procedure Append
   (
      this : in out HttpRequestHeaderCollection;
      name : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.Append (HStr_name, HStr_value);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function TryAppendWithoutValidation
   (
      this : in out HttpRequestHeaderCollection;
      name : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpRequestHeaderCollection.all.TryAppendWithoutValidation (HStr_name, HStr_value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.String>
   function Lookup
   (
      this : in out HttpRequestHeaderCollection;
      key : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out HttpRequestHeaderCollection;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out HttpRequestHeaderCollection;
      key : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.Insert (HStr_key, HStr_value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out HttpRequestHeaderCollection;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out HttpRequestHeaderCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpRequestHeaderCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpRequestHeaderCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpRequestHeaderCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpResponseHeaderCollection

   procedure Initialize (this : in out HttpResponseHeaderCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpResponseHeaderCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpResponseHeaderCollection, IHttpResponseHeaderCollection_Ptr);
   begin
      if this.m_IHttpResponseHeaderCollection /= null then
         if this.m_IHttpResponseHeaderCollection.all /= null then
            RefCount := this.m_IHttpResponseHeaderCollection.all.Release;
            Free (this.m_IHttpResponseHeaderCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpResponseHeaderCollection

   function get_Age
   (
      this : in out HttpResponseHeaderCollection
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.get_Age (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Age
   (
      this : in out HttpResponseHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.put_Age (value);
   end;

   function get_Allow
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpMethodHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpMethodHeaderValueCollection do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_Allow (m_ComRetVal'Access);
         Retval.m_IHttpMethodHeaderValueCollection := new Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection;
         Retval.m_IHttpMethodHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_CacheControl
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_CacheControl (m_ComRetVal'Access);
         Retval.m_IHttpCacheDirectiveHeaderValueCollection := new Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection;
         Retval.m_IHttpCacheDirectiveHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Connection
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IHttpConnectionOptionHeaderValueCollection := new Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection;
         Retval.m_IHttpConnectionOptionHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Date
   (
      this : in out HttpResponseHeaderCollection
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.get_Date (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Date
   (
      this : in out HttpResponseHeaderCollection;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.put_Date (value);
   end;

   function get_Location
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_Location (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Location
   (
      this : in out HttpResponseHeaderCollection;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.put_Location (value.m_IUriRuntimeClass.all);
   end;

   function get_ProxyAuthenticate
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_ProxyAuthenticate (m_ComRetVal'Access);
         Retval.m_IHttpChallengeHeaderValueCollection := new Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection;
         Retval.m_IHttpChallengeHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_RetryAfter
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_RetryAfter (m_ComRetVal'Access);
         Retval.m_IHttpDateOrDeltaHeaderValue := new Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue;
         Retval.m_IHttpDateOrDeltaHeaderValue.all := m_ComRetVal;
      end return;
   end;

   procedure put_RetryAfter
   (
      this : in out HttpResponseHeaderCollection;
      value : Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.put_RetryAfter (value.m_IHttpDateOrDeltaHeaderValue.all);
   end;

   function get_TransferEncoding
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_TransferEncoding (m_ComRetVal'Access);
         Retval.m_IHttpTransferCodingHeaderValueCollection := new Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection;
         Retval.m_IHttpTransferCodingHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   function get_WwwAuthenticate
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection;
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection do
         Hr := this.m_IHttpResponseHeaderCollection.all.get_WwwAuthenticate (m_ComRetVal'Access);
         Retval.m_IHttpChallengeHeaderValueCollection := new Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection;
         Retval.m_IHttpChallengeHeaderValueCollection.all := m_ComRetVal;
      end return;
   end;

   procedure Append
   (
      this : in out HttpResponseHeaderCollection;
      name : WinRt.WString;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.Append (HStr_name, HStr_value);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function TryAppendWithoutValidation
   (
      this : in out HttpResponseHeaderCollection;
      name : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IHttpResponseHeaderCollection.all.TryAppendWithoutValidation (HStr_name, HStr_value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.String>
   function Lookup
   (
      this : in out HttpResponseHeaderCollection;
      key : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out HttpResponseHeaderCollection;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out HttpResponseHeaderCollection;
      key : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.Insert (HStr_key, HStr_value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out HttpResponseHeaderCollection;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out HttpResponseHeaderCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function ToString
   (
      this : in out HttpResponseHeaderCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpResponseHeaderCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpResponseHeaderCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpTransferCodingHeaderValue

   procedure Initialize (this : in out HttpTransferCodingHeaderValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpTransferCodingHeaderValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValue_Ptr);
   begin
      if this.m_IHttpTransferCodingHeaderValue /= null then
         if this.m_IHttpTransferCodingHeaderValue.all /= null then
            RefCount := this.m_IHttpTransferCodingHeaderValue.all.Release;
            Free (this.m_IHttpTransferCodingHeaderValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpTransferCodingHeaderValue

   function Constructor
   (
      input : WinRt.WString
   )
   return HttpTransferCodingHeaderValue is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpTransferCodingHeaderValue");
      m_Factory    : access IHttpTransferCodingHeaderValueFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : HttpTransferCodingHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpTransferCodingHeaderValueFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_input, m_ComRetVal'Access);
            Retval.m_IHttpTransferCodingHeaderValue := new Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
            Retval.m_IHttpTransferCodingHeaderValue.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpTransferCodingHeaderValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpTransferCodingHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValue do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpTransferCodingHeaderValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpTransferCodingHeaderValue := new Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
            Retval.m_IHttpTransferCodingHeaderValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      transferCodingHeaderValue : access Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Headers.HttpTransferCodingHeaderValue");
      m_Factory        : access WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHttpTransferCodingHeaderValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, transferCodingHeaderValue, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpTransferCodingHeaderValue

   function get_Parameters
   (
      this : in out HttpTransferCodingHeaderValue
   )
   return IVector_IHttpNameValueHeaderValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IHttpNameValueHeaderValue.Kind;
   begin
      Hr := this.m_IHttpTransferCodingHeaderValue.all.get_Parameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IHttpNameValueHeaderValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Value
   (
      this : in out HttpTransferCodingHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHttpTransferCodingHeaderValue.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ToString
   (
      this : in out HttpTransferCodingHeaderValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpTransferCodingHeaderValueCollection

   procedure Initialize (this : in out HttpTransferCodingHeaderValueCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpTransferCodingHeaderValueCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpTransferCodingHeaderValueCollection, IHttpTransferCodingHeaderValueCollection_Ptr);
   begin
      if this.m_IHttpTransferCodingHeaderValueCollection /= null then
         if this.m_IHttpTransferCodingHeaderValueCollection.all /= null then
            RefCount := this.m_IHttpTransferCodingHeaderValueCollection.all.Release;
            Free (this.m_IHttpTransferCodingHeaderValueCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpTransferCodingHeaderValueCollection

   procedure ParseAdd
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      input : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpTransferCodingHeaderValueCollection.all.ParseAdd (HStr_input);
      Hr := WindowsDeleteString (HStr_input);
   end;

   function TryParseAdd
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      input : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := this.m_IHttpTransferCodingHeaderValueCollection.all.TryParseAdd (HStr_input, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>
   function GetAt
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.Headers.HttpTransferCodingHeaderValue do
         m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IHttpTransferCodingHeaderValue := new Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
         Retval.m_IHttpTransferCodingHeaderValue.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out HttpTransferCodingHeaderValueCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out HttpTransferCodingHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpTransferCodingHeaderValue'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.IndexOf (value.m_IHttpTransferCodingHeaderValue.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpTransferCodingHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.SetAt (index, value.m_IHttpTransferCodingHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      index : WinRt.UInt32;
      value : Windows.Web.Http.Headers.HttpTransferCodingHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_IHttpTransferCodingHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      value : Windows.Web.Http.Headers.HttpTransferCodingHeaderValue'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.Append (value.m_IHttpTransferCodingHeaderValue.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out HttpTransferCodingHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out HttpTransferCodingHeaderValueCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out HttpTransferCodingHeaderValueCollection;
      items : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (954672482, 57724, 23912, (170, 209, 142, 138, 134, 11, 137, 105 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IVector_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>
   function First
   (
      this : in out HttpTransferCodingHeaderValueCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IHttpTransferCodingHeaderValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1463820360, 14527, 20565, (172, 182, 92, 77, 167, 101, 227, 136 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, IIterable_IHttpTransferCodingHeaderValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out HttpTransferCodingHeaderValueCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpTransferCodingHeaderValueCollection.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Background;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with WinRt.Windows.UI.Popups;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Enumeration is

   package IAsyncOperation_DeviceThumbnail is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_DeviceThumbnail is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_DeviceInformation is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Enumeration.IDeviceInformation);
   package AsyncOperationCompletedHandler_DeviceInformation is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Enumeration.IDeviceInformation);

   package IAsyncOperation_DeviceInformationCollection is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_DeviceInformationCollection is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IVectorView_IDeviceInformation is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Devices.Enumeration.IDeviceInformation);
   package IIterable_IDeviceInformation is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Devices.Enumeration.IDeviceInformation);
   package IAsyncOperation_DevicePairingResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Enumeration.IDevicePairingResult);
   package AsyncOperationCompletedHandler_DevicePairingResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Enumeration.IDevicePairingResult);

   package IAsyncOperation_DeviceUnpairingResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Enumeration.IDeviceUnpairingResult);
   package AsyncOperationCompletedHandler_DeviceUnpairingResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Enumeration.IDeviceUnpairingResult);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.UInt32, GenericObject);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.UInt32, GenericObject);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceAccessChangedEventArgs

   procedure Initialize (this : in out DeviceAccessChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceAccessChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceAccessChangedEventArgs, IDeviceAccessChangedEventArgs_Ptr);
   begin
      if this.m_IDeviceAccessChangedEventArgs /= null then
         if this.m_IDeviceAccessChangedEventArgs.all /= null then
            RefCount := this.m_IDeviceAccessChangedEventArgs.all.Release;
            Free (this.m_IDeviceAccessChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceAccessChangedEventArgs

   function get_Status
   (
      this : in out DeviceAccessChangedEventArgs
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceAccessStatus;
   begin
      Hr := this.m_IDeviceAccessChangedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out DeviceAccessChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs_Interface, WinRt.Windows.Devices.Enumeration.IDeviceAccessChangedEventArgs2, WinRt.Windows.Devices.Enumeration.IID_IDeviceAccessChangedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceAccessChangedEventArgs.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceAccessInformation

   procedure Initialize (this : in out DeviceAccessInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceAccessInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceAccessInformation, IDeviceAccessInformation_Ptr);
   begin
      if this.m_IDeviceAccessInformation /= null then
         if this.m_IDeviceAccessInformation.all /= null then
            RefCount := this.m_IDeviceAccessInformation.all.Release;
            Free (this.m_IDeviceAccessInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DeviceAccessInformation

   function CreateFromId
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceAccessInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceAccessInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceAccessInformation;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceAccessInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceAccessInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceAccessInformation := new Windows.Devices.Enumeration.IDeviceAccessInformation;
            Retval.m_IDeviceAccessInformation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function CreateFromDeviceClassId
   (
      deviceClassId : WinRt.Guid
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceAccessInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceAccessInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceAccessInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceAccessInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceAccessInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDeviceClassId (deviceClassId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceAccessInformation := new Windows.Devices.Enumeration.IDeviceAccessInformation;
            Retval.m_IDeviceAccessInformation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromDeviceClass
   (
      deviceClass : Windows.Devices.Enumeration.DeviceClass
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceAccessInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceAccessInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceAccessInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceAccessInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceAccessInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromDeviceClass (deviceClass, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceAccessInformation := new Windows.Devices.Enumeration.IDeviceAccessInformation;
            Retval.m_IDeviceAccessInformation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceAccessInformation

   function add_AccessChanged
   (
      this : in out DeviceAccessInformation;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDeviceAccessInformation.all.add_AccessChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AccessChanged
   (
      this : in out DeviceAccessInformation;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceAccessInformation.all.remove_AccessChanged (cookie);
   end;

   function get_CurrentStatus
   (
      this : in out DeviceAccessInformation
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceAccessStatus;
   begin
      Hr := this.m_IDeviceAccessInformation.all.get_CurrentStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceConnectionChangeTriggerDetails

   procedure Initialize (this : in out DeviceConnectionChangeTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceConnectionChangeTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceConnectionChangeTriggerDetails, IDeviceConnectionChangeTriggerDetails_Ptr);
   begin
      if this.m_IDeviceConnectionChangeTriggerDetails /= null then
         if this.m_IDeviceConnectionChangeTriggerDetails.all /= null then
            RefCount := this.m_IDeviceConnectionChangeTriggerDetails.all.Release;
            Free (this.m_IDeviceConnectionChangeTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceConnectionChangeTriggerDetails

   function get_DeviceId
   (
      this : in out DeviceConnectionChangeTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceConnectionChangeTriggerDetails.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceDisconnectButtonClickedEventArgs

   procedure Initialize (this : in out DeviceDisconnectButtonClickedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceDisconnectButtonClickedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceDisconnectButtonClickedEventArgs, IDeviceDisconnectButtonClickedEventArgs_Ptr);
   begin
      if this.m_IDeviceDisconnectButtonClickedEventArgs /= null then
         if this.m_IDeviceDisconnectButtonClickedEventArgs.all /= null then
            RefCount := this.m_IDeviceDisconnectButtonClickedEventArgs.all.Release;
            Free (this.m_IDeviceDisconnectButtonClickedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceDisconnectButtonClickedEventArgs

   function get_Device
   (
      this : in out DeviceDisconnectButtonClickedEventArgs
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDeviceDisconnectButtonClickedEventArgs.all.get_Device (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceInformation

   procedure Initialize (this : in out DeviceInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceInformation, IDeviceInformation_Ptr);
   begin
      if this.m_IDeviceInformation /= null then
         if this.m_IDeviceInformation.all /= null then
            RefCount := this.m_IDeviceInformation.all.Release;
            Free (this.m_IDeviceInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DeviceInformation

   function CreateFromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDeviceInformation;
      m_IID            : aliased WinRt.IID := (133865555, 60207, 23738, (178, 91, 217, 213, 123, 230, 113, 95 )); -- Windows.Devices.Enumeration.DeviceInformation;
      m_HandlerIID     : aliased WinRt.IID := (3142073842, 31670, 22819, (162, 141, 131, 66, 236, 48, 4, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformation.Kind := new AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
                     Retval.m_IDeviceInformation.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function CreateFromIdAsync
   (
      deviceId : WinRt.WString;
      additionalProperties : GenericObject
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDeviceInformation;
      m_IID            : aliased WinRt.IID := (133865555, 60207, 23738, (178, 91, 217, 213, 123, 230, 113, 95 )); -- Windows.Devices.Enumeration.DeviceInformation;
      m_HandlerIID     : aliased WinRt.IID := (3142073842, 31670, 22819, (162, 141, 131, 66, 236, 48, 4, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformation.Kind := new AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIdAsync (HStr_deviceId, additionalProperties, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
                     Retval.m_IDeviceInformation.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function FindAllAsync
   return WinRt.Windows.Devices.Enumeration.DeviceInformationCollection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformationCollection.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformationCollection.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1159201364, 2094, 21108, (178, 231, 172, 5, 23, 244, 77, 7 )); -- Windows.Devices.Enumeration.DeviceInformationCollection;
      m_HandlerIID     : aliased WinRt.IID := (1246070578, 21118, 23667, (154, 104, 167, 61, 163, 112, 247, 130 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformationCollection.Kind := new AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformationCollection.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformationCollection.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationCollection do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_GenericObject := new GenericObject;
                     Retval.m_GenericObject.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindAllAsync
   (
      deviceClass : Windows.Devices.Enumeration.DeviceClass
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationCollection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformationCollection.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformationCollection.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1159201364, 2094, 21108, (178, 231, 172, 5, 23, 244, 77, 7 )); -- Windows.Devices.Enumeration.DeviceInformationCollection;
      m_HandlerIID     : aliased WinRt.IID := (1246070578, 21118, 23667, (154, 104, 167, 61, 163, 112, 247, 130 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformationCollection.Kind := new AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformationCollection.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformationCollection.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationCollection do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllAsync (deviceClass, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_GenericObject := new GenericObject;
                     Retval.m_GenericObject.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindAllAsync
   (
      aqsFilter : WinRt.WString
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationCollection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_aqsFilter : WinRt.HString := To_HString (aqsFilter);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformationCollection.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformationCollection.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1159201364, 2094, 21108, (178, 231, 172, 5, 23, 244, 77, 7 )); -- Windows.Devices.Enumeration.DeviceInformationCollection;
      m_HandlerIID     : aliased WinRt.IID := (1246070578, 21118, 23667, (154, 104, 167, 61, 163, 112, 247, 130 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformationCollection.Kind := new AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformationCollection.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformationCollection.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationCollection do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllAsync (HStr_aqsFilter, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_GenericObject := new GenericObject;
                     Retval.m_GenericObject.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_aqsFilter);
      end return;
   end;

   function FindAllAsync
   (
      aqsFilter : WinRt.WString;
      additionalProperties : GenericObject
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationCollection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_aqsFilter : WinRt.HString := To_HString (aqsFilter);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformationCollection.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformationCollection.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1159201364, 2094, 21108, (178, 231, 172, 5, 23, 244, 77, 7 )); -- Windows.Devices.Enumeration.DeviceInformationCollection;
      m_HandlerIID     : aliased WinRt.IID := (1246070578, 21118, 23667, (154, 104, 167, 61, 163, 112, 247, 130 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformationCollection.Kind := new AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformationCollection.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformationCollection.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationCollection do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllAsync (HStr_aqsFilter, additionalProperties, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_GenericObject := new GenericObject;
                     Retval.m_GenericObject.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_aqsFilter);
      end return;
   end;

   function CreateWatcher
   return WinRt.Windows.Devices.Enumeration.DeviceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceWatcher;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceWatcher := new Windows.Devices.Enumeration.IDeviceWatcher;
            Retval.m_IDeviceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWatcher
   (
      deviceClass : Windows.Devices.Enumeration.DeviceClass
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceWatcher;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (deviceClass, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceWatcher := new Windows.Devices.Enumeration.IDeviceWatcher;
            Retval.m_IDeviceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWatcher
   (
      aqsFilter : WinRt.WString
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceWatcher;
      HStr_aqsFilter : WinRt.HString := To_HString (aqsFilter);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (HStr_aqsFilter, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceWatcher := new Windows.Devices.Enumeration.IDeviceWatcher;
            Retval.m_IDeviceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_aqsFilter);
      end return;
   end;

   function CreateWatcher
   (
      aqsFilter : WinRt.WString;
      additionalProperties : GenericObject
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceWatcher;
      HStr_aqsFilter : WinRt.HString := To_HString (aqsFilter);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (HStr_aqsFilter, additionalProperties, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceWatcher := new Windows.Devices.Enumeration.IDeviceWatcher;
            Retval.m_IDeviceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_aqsFilter);
      end return;
   end;

   function GetAqsFilterFromDeviceClass
   (
      deviceClass : Windows.Devices.Enumeration.DeviceClass
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetAqsFilterFromDeviceClass (deviceClass, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function CreateFromIdAsync
   (
      deviceId : WinRt.WString;
      additionalProperties : GenericObject;
      kind : Windows.Devices.Enumeration.DeviceInformationKind
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDeviceInformation;
      m_IID            : aliased WinRt.IID := (133865555, 60207, 23738, (178, 91, 217, 213, 123, 230, 113, 95 )); -- Windows.Devices.Enumeration.DeviceInformation;
      m_HandlerIID     : aliased WinRt.IID := (3142073842, 31670, 22819, (162, 141, 131, 66, 236, 48, 4, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformation.Kind := new AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromIdAsync (HStr_deviceId, additionalProperties, kind, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
                     Retval.m_IDeviceInformation.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function FindAllAsync
   (
      aqsFilter : WinRt.WString;
      additionalProperties : GenericObject;
      kind : Windows.Devices.Enumeration.DeviceInformationKind
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationCollection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_aqsFilter : WinRt.HString := To_HString (aqsFilter);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformationCollection.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformationCollection.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1159201364, 2094, 21108, (178, 231, 172, 5, 23, 244, 77, 7 )); -- Windows.Devices.Enumeration.DeviceInformationCollection;
      m_HandlerIID     : aliased WinRt.IID := (1246070578, 21118, 23667, (154, 104, 167, 61, 163, 112, 247, 130 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformationCollection.Kind := new AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformationCollection.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformationCollection.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformationCollection.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationCollection do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindAllAsync (HStr_aqsFilter, additionalProperties, kind, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_GenericObject := new GenericObject;
                     Retval.m_GenericObject.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_aqsFilter);
      end return;
   end;

   function CreateWatcher
   (
      aqsFilter : WinRt.WString;
      additionalProperties : GenericObject;
      kind : Windows.Devices.Enumeration.DeviceInformationKind
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformation");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceWatcher;
      HStr_aqsFilter : WinRt.HString := To_HString (aqsFilter);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (HStr_aqsFilter, additionalProperties, kind, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDeviceWatcher := new Windows.Devices.Enumeration.IDeviceWatcher;
            Retval.m_IDeviceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_aqsFilter);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceInformation

   function get_Id
   (
      this : in out DeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceInformation.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out DeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceInformation.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsEnabled
   (
      this : in out DeviceInformation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceInformation.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDefault
   (
      this : in out DeviceInformation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceInformation.all.get_IsDefault (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EnclosureLocation
   (
      this : in out DeviceInformation
   )
   return WinRt.Windows.Devices.Enumeration.EnclosureLocation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IEnclosureLocation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.EnclosureLocation do
         Hr := this.m_IDeviceInformation.all.get_EnclosureLocation (m_ComRetVal'Access);
         Retval.m_IEnclosureLocation := new Windows.Devices.Enumeration.IEnclosureLocation;
         Retval.m_IEnclosureLocation.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out DeviceInformation
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IDeviceInformation.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Update
   (
      this : in out DeviceInformation;
      updateInfo : Windows.Devices.Enumeration.DeviceInformationUpdate'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceInformation.all.Update (updateInfo.m_IDeviceInformationUpdate.all);
   end;

   function GetThumbnailAsync
   (
      this : in out DeviceInformation
   )
   return WinRt.Windows.Devices.Enumeration.DeviceThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3133178787, 14873, 20594, (157, 144, 19, 51, 35, 160, 73, 186 )); -- Windows.Devices.Enumeration.DeviceThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (2262062514, 55189, 21836, (156, 49, 191, 101, 57, 52, 156, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceThumbnail.Kind := new AsyncOperationCompletedHandler_DeviceThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_DeviceThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceThumbnail do
         Hr := this.m_IDeviceInformation.all.GetThumbnailAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetGlyphThumbnailAsync
   (
      this : in out DeviceInformation
   )
   return WinRt.Windows.Devices.Enumeration.DeviceThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3133178787, 14873, 20594, (157, 144, 19, 51, 35, 160, 73, 186 )); -- Windows.Devices.Enumeration.DeviceThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (2262062514, 55189, 21836, (156, 49, 191, 101, 57, 52, 156, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceThumbnail.Kind := new AsyncOperationCompletedHandler_DeviceThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_DeviceThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceThumbnail do
         Hr := this.m_IDeviceInformation.all.GetGlyphThumbnailAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Kind
   (
      this : in out DeviceInformation
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceInformationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceInformation_Interface, WinRt.Windows.Devices.Enumeration.IDeviceInformation2, WinRt.Windows.Devices.Enumeration.IID_IDeviceInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceInformation.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Pairing
   (
      this : in out DeviceInformation
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationPairing'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformationPairing;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceInformation_Interface, WinRt.Windows.Devices.Enumeration.IDeviceInformation2, WinRt.Windows.Devices.Enumeration.IID_IDeviceInformation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationPairing do
         m_Interface := QInterface (this.m_IDeviceInformation.all);
         Hr := m_Interface.get_Pairing (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceInformationPairing := new Windows.Devices.Enumeration.IDeviceInformationPairing;
         Retval.m_IDeviceInformationPairing.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceInformationCollection

   procedure Initialize (this : in out DeviceInformationCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceInformationCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceInformationCollection

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Enumeration.DeviceInformation>
   function GetAt
   (
      this : in out DeviceInformationCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDeviceInformation.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
      m_GenericIID     : aliased WinRt.IID := (3782240399, 13461, 23542, (170, 181, 156, 172, 23, 224, 241, 15 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDeviceInformation.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out DeviceInformationCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDeviceInformation.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3782240399, 13461, 23542, (170, 181, 156, 172, 23, 224, 241, 15 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDeviceInformation.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out DeviceInformationCollection;
      value : Windows.Devices.Enumeration.DeviceInformation'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDeviceInformation.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3782240399, 13461, 23542, (170, 181, 156, 172, 23, 224, 241, 15 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDeviceInformation.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IDeviceInformation.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out DeviceInformationCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Devices.Enumeration.IDeviceInformation_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDeviceInformation.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3782240399, 13461, 23542, (170, 181, 156, 172, 23, 224, 241, 15 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDeviceInformation.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Devices.Enumeration.DeviceInformation>
   function First
   (
      this : in out DeviceInformationCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IDeviceInformation.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3718220381, 60568, 24395, (163, 234, 156, 139, 90, 213, 60, 75 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IDeviceInformation.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceInformationCustomPairing

   procedure Initialize (this : in out DeviceInformationCustomPairing) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceInformationCustomPairing) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceInformationCustomPairing, IDeviceInformationCustomPairing_Ptr);
   begin
      if this.m_IDeviceInformationCustomPairing /= null then
         if this.m_IDeviceInformationCustomPairing.all /= null then
            RefCount := this.m_IDeviceInformationCustomPairing.all.Release;
            Free (this.m_IDeviceInformationCustomPairing);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceInformationCustomPairing

   function PairAsync
   (
      this : in out DeviceInformationCustomPairing;
      pairingKindsSupported : Windows.Devices.Enumeration.DevicePairingKinds
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DevicePairingResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DevicePairingResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDevicePairingResult;
      m_IID            : aliased WinRt.IID := (268622708, 35144, 22814, (129, 93, 228, 11, 102, 117, 153, 163 )); -- Windows.Devices.Enumeration.DevicePairingResult;
      m_HandlerIID     : aliased WinRt.IID := (2128618623, 24407, 23730, (180, 14, 24, 181, 162, 17, 214, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_DevicePairingResult.Kind := new AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DevicePairingResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DevicePairingResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate, AsyncOperationCompletedHandler_DevicePairingResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePairingResult do
         Hr := this.m_IDeviceInformationCustomPairing.all.PairAsync (pairingKindsSupported, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDevicePairingResult := new Windows.Devices.Enumeration.IDevicePairingResult;
                  Retval.m_IDevicePairingResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PairAsync
   (
      this : in out DeviceInformationCustomPairing;
      pairingKindsSupported : Windows.Devices.Enumeration.DevicePairingKinds;
      minProtectionLevel : Windows.Devices.Enumeration.DevicePairingProtectionLevel
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DevicePairingResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DevicePairingResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDevicePairingResult;
      m_IID            : aliased WinRt.IID := (268622708, 35144, 22814, (129, 93, 228, 11, 102, 117, 153, 163 )); -- Windows.Devices.Enumeration.DevicePairingResult;
      m_HandlerIID     : aliased WinRt.IID := (2128618623, 24407, 23730, (180, 14, 24, 181, 162, 17, 214, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_DevicePairingResult.Kind := new AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DevicePairingResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DevicePairingResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate, AsyncOperationCompletedHandler_DevicePairingResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePairingResult do
         Hr := this.m_IDeviceInformationCustomPairing.all.PairAsync (pairingKindsSupported, minProtectionLevel, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDevicePairingResult := new Windows.Devices.Enumeration.IDevicePairingResult;
                  Retval.m_IDevicePairingResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PairAsync
   (
      this : in out DeviceInformationCustomPairing;
      pairingKindsSupported : Windows.Devices.Enumeration.DevicePairingKinds;
      minProtectionLevel : Windows.Devices.Enumeration.DevicePairingProtectionLevel;
      devicePairingSettings : Windows.Devices.Enumeration.IDevicePairingSettings
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DevicePairingResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DevicePairingResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDevicePairingResult;
      m_IID            : aliased WinRt.IID := (268622708, 35144, 22814, (129, 93, 228, 11, 102, 117, 153, 163 )); -- Windows.Devices.Enumeration.DevicePairingResult;
      m_HandlerIID     : aliased WinRt.IID := (2128618623, 24407, 23730, (180, 14, 24, 181, 162, 17, 214, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_DevicePairingResult.Kind := new AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DevicePairingResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DevicePairingResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate, AsyncOperationCompletedHandler_DevicePairingResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePairingResult do
         Hr := this.m_IDeviceInformationCustomPairing.all.PairAsync (pairingKindsSupported, minProtectionLevel, devicePairingSettings, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDevicePairingResult := new Windows.Devices.Enumeration.IDevicePairingResult;
                  Retval.m_IDevicePairingResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_PairingRequested
   (
      this : in out DeviceInformationCustomPairing;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDeviceInformationCustomPairing.all.add_PairingRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PairingRequested
   (
      this : in out DeviceInformationCustomPairing;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceInformationCustomPairing.all.remove_PairingRequested (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceInformationPairing

   procedure Initialize (this : in out DeviceInformationPairing) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceInformationPairing) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceInformationPairing, IDeviceInformationPairing_Ptr);
   begin
      if this.m_IDeviceInformationPairing /= null then
         if this.m_IDeviceInformationPairing.all /= null then
            RefCount := this.m_IDeviceInformationPairing.all.Release;
            Free (this.m_IDeviceInformationPairing);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DeviceInformationPairing

   function TryRegisterForAllInboundPairingRequests
   (
      pairingKindsSupported : Windows.Devices.Enumeration.DevicePairingKinds
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformationPairing");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationPairingStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationPairingStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryRegisterForAllInboundPairingRequests (pairingKindsSupported, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function TryRegisterForAllInboundPairingRequestsWithProtectionLevel
   (
      pairingKindsSupported : Windows.Devices.Enumeration.DevicePairingKinds;
      minProtectionLevel : Windows.Devices.Enumeration.DevicePairingProtectionLevel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DeviceInformationPairing");
      m_Factory        : access WinRt.Windows.Devices.Enumeration.IDeviceInformationPairingStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDeviceInformationPairingStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryRegisterForAllInboundPairingRequestsWithProtectionLevel (pairingKindsSupported, minProtectionLevel, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceInformationPairing

   function get_IsPaired
   (
      this : in out DeviceInformationPairing
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceInformationPairing.all.get_IsPaired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanPair
   (
      this : in out DeviceInformationPairing
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceInformationPairing.all.get_CanPair (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function PairAsync
   (
      this : in out DeviceInformationPairing
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DevicePairingResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DevicePairingResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDevicePairingResult;
      m_IID            : aliased WinRt.IID := (268622708, 35144, 22814, (129, 93, 228, 11, 102, 117, 153, 163 )); -- Windows.Devices.Enumeration.DevicePairingResult;
      m_HandlerIID     : aliased WinRt.IID := (2128618623, 24407, 23730, (180, 14, 24, 181, 162, 17, 214, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_DevicePairingResult.Kind := new AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DevicePairingResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DevicePairingResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate, AsyncOperationCompletedHandler_DevicePairingResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePairingResult do
         Hr := this.m_IDeviceInformationPairing.all.PairAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDevicePairingResult := new Windows.Devices.Enumeration.IDevicePairingResult;
                  Retval.m_IDevicePairingResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PairAsync
   (
      this : in out DeviceInformationPairing;
      minProtectionLevel : Windows.Devices.Enumeration.DevicePairingProtectionLevel
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DevicePairingResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DevicePairingResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDevicePairingResult;
      m_IID            : aliased WinRt.IID := (268622708, 35144, 22814, (129, 93, 228, 11, 102, 117, 153, 163 )); -- Windows.Devices.Enumeration.DevicePairingResult;
      m_HandlerIID     : aliased WinRt.IID := (2128618623, 24407, 23730, (180, 14, 24, 181, 162, 17, 214, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_DevicePairingResult.Kind := new AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DevicePairingResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DevicePairingResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate, AsyncOperationCompletedHandler_DevicePairingResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePairingResult do
         Hr := this.m_IDeviceInformationPairing.all.PairAsync (minProtectionLevel, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDevicePairingResult := new Windows.Devices.Enumeration.IDevicePairingResult;
                  Retval.m_IDevicePairingResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_ProtectionLevel
   (
      this : in out DeviceInformationPairing
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DevicePairingProtectionLevel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing_Interface, WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2, WinRt.Windows.Devices.Enumeration.IID_IDeviceInformationPairing2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceInformationPairing.all);
      Hr := m_Interface.get_ProtectionLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Custom
   (
      this : in out DeviceInformationPairing
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationCustomPairing'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformationCustomPairing;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing_Interface, WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2, WinRt.Windows.Devices.Enumeration.IID_IDeviceInformationPairing2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationCustomPairing do
         m_Interface := QInterface (this.m_IDeviceInformationPairing.all);
         Hr := m_Interface.get_Custom (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceInformationCustomPairing := new Windows.Devices.Enumeration.IDeviceInformationCustomPairing;
         Retval.m_IDeviceInformationCustomPairing.all := m_ComRetVal;
      end return;
   end;

   function PairAsync
   (
      this : in out DeviceInformationPairing;
      minProtectionLevel : Windows.Devices.Enumeration.DevicePairingProtectionLevel;
      devicePairingSettings : Windows.Devices.Enumeration.IDevicePairingSettings
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DevicePairingResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DevicePairingResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDevicePairingResult;
      m_IID            : aliased WinRt.IID := (268622708, 35144, 22814, (129, 93, 228, 11, 102, 117, 153, 163 )); -- Windows.Devices.Enumeration.DevicePairingResult;
      m_HandlerIID     : aliased WinRt.IID := (2128618623, 24407, 23730, (180, 14, 24, 181, 162, 17, 214, 195 ));
      m_Handler        : AsyncOperationCompletedHandler_DevicePairingResult.Kind := new AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DevicePairingResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DevicePairingResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DevicePairingResult.Kind_Delegate, AsyncOperationCompletedHandler_DevicePairingResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing_Interface, WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2, WinRt.Windows.Devices.Enumeration.IID_IDeviceInformationPairing2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePairingResult do
         m_Interface := QInterface (this.m_IDeviceInformationPairing.all);
         Hr := m_Interface.PairAsync (minProtectionLevel, devicePairingSettings, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDevicePairingResult := new Windows.Devices.Enumeration.IDevicePairingResult;
                  Retval.m_IDevicePairingResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function UnpairAsync
   (
      this : in out DeviceInformationPairing
   )
   return WinRt.Windows.Devices.Enumeration.DeviceUnpairingResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceUnpairingResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceUnpairingResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDeviceUnpairingResult;
      m_IID            : aliased WinRt.IID := (733273917, 48510, 24544, (144, 32, 86, 220, 13, 48, 185, 53 )); -- Windows.Devices.Enumeration.DeviceUnpairingResult;
      m_HandlerIID     : aliased WinRt.IID := (2612948665, 56109, 20832, (162, 12, 240, 194, 101, 242, 13, 142 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceUnpairingResult.Kind := new AsyncOperationCompletedHandler_DeviceUnpairingResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceUnpairingResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceUnpairingResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceUnpairingResult.Kind_Delegate, AsyncOperationCompletedHandler_DeviceUnpairingResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing_Interface, WinRt.Windows.Devices.Enumeration.IDeviceInformationPairing2, WinRt.Windows.Devices.Enumeration.IID_IDeviceInformationPairing2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceUnpairingResult do
         m_Interface := QInterface (this.m_IDeviceInformationPairing.all);
         Hr := m_Interface.UnpairAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeviceUnpairingResult := new Windows.Devices.Enumeration.IDeviceUnpairingResult;
                  Retval.m_IDeviceUnpairingResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceInformationUpdate

   procedure Initialize (this : in out DeviceInformationUpdate) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceInformationUpdate) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceInformationUpdate, IDeviceInformationUpdate_Ptr);
   begin
      if this.m_IDeviceInformationUpdate /= null then
         if this.m_IDeviceInformationUpdate.all /= null then
            RefCount := this.m_IDeviceInformationUpdate.all.Release;
            Free (this.m_IDeviceInformationUpdate);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceInformationUpdate

   function get_Id
   (
      this : in out DeviceInformationUpdate
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceInformationUpdate.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out DeviceInformationUpdate
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IDeviceInformationUpdate.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out DeviceInformationUpdate
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceInformationUpdate2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceInformationKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceInformationUpdate_Interface, WinRt.Windows.Devices.Enumeration.IDeviceInformationUpdate2, WinRt.Windows.Devices.Enumeration.IID_IDeviceInformationUpdate2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDeviceInformationUpdate.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePairingRequestedEventArgs

   procedure Initialize (this : in out DevicePairingRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePairingRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePairingRequestedEventArgs, IDevicePairingRequestedEventArgs_Ptr);
   begin
      if this.m_IDevicePairingRequestedEventArgs /= null then
         if this.m_IDevicePairingRequestedEventArgs.all /= null then
            RefCount := this.m_IDevicePairingRequestedEventArgs.all.Release;
            Free (this.m_IDevicePairingRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePairingRequestedEventArgs

   function get_DeviceInformation
   (
      this : in out DevicePairingRequestedEventArgs
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDevicePairingRequestedEventArgs.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_PairingKind
   (
      this : in out DevicePairingRequestedEventArgs
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingKinds is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DevicePairingKinds;
   begin
      Hr := this.m_IDevicePairingRequestedEventArgs.all.get_PairingKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Pin
   (
      this : in out DevicePairingRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDevicePairingRequestedEventArgs.all.get_Pin (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Accept_x
   (
      this : in out DevicePairingRequestedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePairingRequestedEventArgs.all.Accept_x;
   end;

   procedure Accept_x
   (
      this : in out DevicePairingRequestedEventArgs;
      pin : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_pin : WinRt.HString := To_HString (pin);
   begin
      Hr := this.m_IDevicePairingRequestedEventArgs.all.Accept_x (HStr_pin);
      Hr := WindowsDeleteString (HStr_pin);
   end;

   function GetDeferral
   (
      this : in out DevicePairingRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IDevicePairingRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure AcceptWithPasswordCredential
   (
      this : in out DevicePairingRequestedEventArgs;
      passwordCredential : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs_Interface, WinRt.Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs2, WinRt.Windows.Devices.Enumeration.IID_IDevicePairingRequestedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDevicePairingRequestedEventArgs.all);
      Hr := m_Interface.AcceptWithPasswordCredential (passwordCredential.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePairingResult

   procedure Initialize (this : in out DevicePairingResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePairingResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePairingResult, IDevicePairingResult_Ptr);
   begin
      if this.m_IDevicePairingResult /= null then
         if this.m_IDevicePairingResult.all /= null then
            RefCount := this.m_IDevicePairingResult.all.Release;
            Free (this.m_IDevicePairingResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePairingResult

   function get_Status
   (
      this : in out DevicePairingResult
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DevicePairingResultStatus;
   begin
      Hr := this.m_IDevicePairingResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtectionLevelUsed
   (
      this : in out DevicePairingResult
   )
   return WinRt.Windows.Devices.Enumeration.DevicePairingProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DevicePairingProtectionLevel;
   begin
      Hr := this.m_IDevicePairingResult.all.get_ProtectionLevelUsed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePicker

   procedure Initialize (this : in out DevicePicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePicker, IDevicePicker_Ptr);
   begin
      if this.m_IDevicePicker /= null then
         if this.m_IDevicePicker.all /= null then
            RefCount := this.m_IDevicePicker.all.Release;
            Free (this.m_IDevicePicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DevicePicker

   function Constructor return DevicePicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Enumeration.DevicePicker");
      m_ComRetVal  : aliased Windows.Devices.Enumeration.IDevicePicker;
   begin
      return RetVal : DevicePicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDevicePicker := new Windows.Devices.Enumeration.IDevicePicker;
            Retval.m_IDevicePicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePicker

   function get_Filter
   (
      this : in out DevicePicker
   )
   return WinRt.Windows.Devices.Enumeration.DevicePickerFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDevicePickerFilter;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePickerFilter do
         Hr := this.m_IDevicePicker.all.get_Filter (m_ComRetVal'Access);
         Retval.m_IDevicePickerFilter := new Windows.Devices.Enumeration.IDevicePickerFilter;
         Retval.m_IDevicePickerFilter.all := m_ComRetVal;
      end return;
   end;

   function get_Appearance
   (
      this : in out DevicePicker
   )
   return WinRt.Windows.Devices.Enumeration.DevicePickerAppearance'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDevicePickerAppearance;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePickerAppearance do
         Hr := this.m_IDevicePicker.all.get_Appearance (m_ComRetVal'Access);
         Retval.m_IDevicePickerAppearance := new Windows.Devices.Enumeration.IDevicePickerAppearance;
         Retval.m_IDevicePickerAppearance.all := m_ComRetVal;
      end return;
   end;

   function get_RequestedProperties
   (
      this : in out DevicePicker
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IDevicePicker.all.get_RequestedProperties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_DeviceSelected
   (
      this : in out DevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDevicePicker.all.add_DeviceSelected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DeviceSelected
   (
      this : in out DevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePicker.all.remove_DeviceSelected (token);
   end;

   function add_DisconnectButtonClicked
   (
      this : in out DevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDevicePicker.all.add_DisconnectButtonClicked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DisconnectButtonClicked
   (
      this : in out DevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePicker.all.remove_DisconnectButtonClicked (token);
   end;

   function add_DevicePickerDismissed
   (
      this : in out DevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDevicePicker.all.add_DevicePickerDismissed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DevicePickerDismissed
   (
      this : in out DevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePicker.all.remove_DevicePickerDismissed (token);
   end;

   procedure Show
   (
      this : in out DevicePicker;
      selection : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePicker.all.Show (selection);
   end;

   procedure Show
   (
      this : in out DevicePicker;
      selection : Windows.Foundation.Rect;
      placement : Windows.UI.Popups.Placement
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePicker.all.Show (selection, placement);
   end;

   function PickSingleDeviceAsync
   (
      this : in out DevicePicker;
      selection : Windows.Foundation.Rect
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDeviceInformation;
      m_IID            : aliased WinRt.IID := (133865555, 60207, 23738, (178, 91, 217, 213, 123, 230, 113, 95 )); -- Windows.Devices.Enumeration.DeviceInformation;
      m_HandlerIID     : aliased WinRt.IID := (3142073842, 31670, 22819, (162, 141, 131, 66, 236, 48, 4, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformation.Kind := new AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDevicePicker.all.PickSingleDeviceAsync (selection, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
                  Retval.m_IDeviceInformation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PickSingleDeviceAsync
   (
      this : in out DevicePicker;
      selection : Windows.Foundation.Rect;
      placement : Windows.UI.Popups.Placement
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceInformation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceInformation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.IDeviceInformation;
      m_IID            : aliased WinRt.IID := (133865555, 60207, 23738, (178, 91, 217, 213, 123, 230, 113, 95 )); -- Windows.Devices.Enumeration.DeviceInformation;
      m_HandlerIID     : aliased WinRt.IID := (3142073842, 31670, 22819, (162, 141, 131, 66, 236, 48, 4, 107 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceInformation.Kind := new AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceInformation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceInformation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceInformation.Kind_Delegate, AsyncOperationCompletedHandler_DeviceInformation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDevicePicker.all.PickSingleDeviceAsync (selection, placement, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
                  Retval.m_IDeviceInformation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Hide
   (
      this : in out DevicePicker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePicker.all.Hide;
   end;

   procedure SetDisplayStatus
   (
      this : in out DevicePicker;
      device : Windows.Devices.Enumeration.DeviceInformation'Class;
      status : WinRt.WString;
      options : Windows.Devices.Enumeration.DevicePickerDisplayStatusOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_status : WinRt.HString := To_HString (status);
   begin
      Hr := this.m_IDevicePicker.all.SetDisplayStatus (device.m_IDeviceInformation.all, HStr_status, options);
      Hr := WindowsDeleteString (HStr_status);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePickerAppearance

   procedure Initialize (this : in out DevicePickerAppearance) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePickerAppearance) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePickerAppearance, IDevicePickerAppearance_Ptr);
   begin
      if this.m_IDevicePickerAppearance /= null then
         if this.m_IDevicePickerAppearance.all /= null then
            RefCount := this.m_IDevicePickerAppearance.all.Release;
            Free (this.m_IDevicePickerAppearance);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePickerAppearance

   function get_Title
   (
      this : in out DevicePickerAppearance
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDevicePickerAppearance.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out DevicePickerAppearance;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDevicePickerAppearance.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ForegroundColor
   (
      this : in out DevicePickerAppearance
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDevicePickerAppearance.all.get_ForegroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForegroundColor
   (
      this : in out DevicePickerAppearance;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePickerAppearance.all.put_ForegroundColor (value);
   end;

   function get_BackgroundColor
   (
      this : in out DevicePickerAppearance
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDevicePickerAppearance.all.get_BackgroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BackgroundColor
   (
      this : in out DevicePickerAppearance;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePickerAppearance.all.put_BackgroundColor (value);
   end;

   function get_AccentColor
   (
      this : in out DevicePickerAppearance
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDevicePickerAppearance.all.get_AccentColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AccentColor
   (
      this : in out DevicePickerAppearance;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePickerAppearance.all.put_AccentColor (value);
   end;

   function get_SelectedForegroundColor
   (
      this : in out DevicePickerAppearance
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDevicePickerAppearance.all.get_SelectedForegroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedForegroundColor
   (
      this : in out DevicePickerAppearance;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePickerAppearance.all.put_SelectedForegroundColor (value);
   end;

   function get_SelectedBackgroundColor
   (
      this : in out DevicePickerAppearance
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDevicePickerAppearance.all.get_SelectedBackgroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedBackgroundColor
   (
      this : in out DevicePickerAppearance;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePickerAppearance.all.put_SelectedBackgroundColor (value);
   end;

   function get_SelectedAccentColor
   (
      this : in out DevicePickerAppearance
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDevicePickerAppearance.all.get_SelectedAccentColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedAccentColor
   (
      this : in out DevicePickerAppearance;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDevicePickerAppearance.all.put_SelectedAccentColor (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DevicePickerFilter

   procedure Initialize (this : in out DevicePickerFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out DevicePickerFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDevicePickerFilter, IDevicePickerFilter_Ptr);
   begin
      if this.m_IDevicePickerFilter /= null then
         if this.m_IDevicePickerFilter.all /= null then
            RefCount := this.m_IDevicePickerFilter.all.Release;
            Free (this.m_IDevicePickerFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DevicePickerFilter

   function get_SupportedDeviceClasses
   (
      this : in out DevicePickerFilter
   )
   return IVector_DeviceClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_DeviceClass.Kind;
   begin
      Hr := this.m_IDevicePickerFilter.all.get_SupportedDeviceClasses (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_DeviceClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedDeviceSelectors
   (
      this : in out DevicePickerFilter
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IDevicePickerFilter.all.get_SupportedDeviceSelectors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceSelectedEventArgs

   procedure Initialize (this : in out DeviceSelectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceSelectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceSelectedEventArgs, IDeviceSelectedEventArgs_Ptr);
   begin
      if this.m_IDeviceSelectedEventArgs /= null then
         if this.m_IDeviceSelectedEventArgs.all /= null then
            RefCount := this.m_IDeviceSelectedEventArgs.all.Release;
            Free (this.m_IDeviceSelectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceSelectedEventArgs

   function get_SelectedDevice
   (
      this : in out DeviceSelectedEventArgs
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDeviceSelectedEventArgs.all.get_SelectedDevice (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceThumbnail

   procedure Initialize (this : in out DeviceThumbnail) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceThumbnail) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType, WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Ptr);
   begin
      if this.m_IRandomAccessStreamWithContentType /= null then
         if this.m_IRandomAccessStreamWithContentType.all /= null then
            RefCount := this.m_IRandomAccessStreamWithContentType.all.Release;
            Free (this.m_IRandomAccessStreamWithContentType);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceThumbnail

   function get_ContentType
   (
      this : in out DeviceThumbnail
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IContentTypeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IContentTypeProvider, WinRt.Windows.Storage.Streams.IID_IContentTypeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_ContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out DeviceThumbnail
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out DeviceThumbnail;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.put_Size (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetInputStreamAt
   (
      this : in out DeviceThumbnail;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.GetInputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetOutputStreamAt
   (
      this : in out DeviceThumbnail;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.GetOutputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out DeviceThumbnail
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out DeviceThumbnail;
      position : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.Seek (position);
      m_RefCount := m_Interface.Release;
   end;

   function CloneStream
   (
      this : in out DeviceThumbnail
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.CloneStream (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanRead
   (
      this : in out DeviceThumbnail
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_CanRead (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanWrite
   (
      this : in out DeviceThumbnail
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.get_CanWrite (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function WriteAsync
   (
      this : in out DeviceThumbnail;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.WriteAsync (buffer, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out DeviceThumbnail
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.FlushAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out DeviceThumbnail
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ReadAsync
   (
      this : in out DeviceThumbnail;
      buffer : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType_Interface, WinRt.Windows.Storage.Streams.IInputStream, WinRt.Windows.Storage.Streams.IID_IInputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStreamWithContentType.all);
      Hr := m_Interface.ReadAsync (buffer, count, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceUnpairingResult

   procedure Initialize (this : in out DeviceUnpairingResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceUnpairingResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceUnpairingResult, IDeviceUnpairingResult_Ptr);
   begin
      if this.m_IDeviceUnpairingResult /= null then
         if this.m_IDeviceUnpairingResult.all /= null then
            RefCount := this.m_IDeviceUnpairingResult.all.Release;
            Free (this.m_IDeviceUnpairingResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceUnpairingResult

   function get_Status
   (
      this : in out DeviceUnpairingResult
   )
   return WinRt.Windows.Devices.Enumeration.DeviceUnpairingResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceUnpairingResultStatus;
   begin
      Hr := this.m_IDeviceUnpairingResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceWatcher

   procedure Initialize (this : in out DeviceWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceWatcher, IDeviceWatcher_Ptr);
   begin
      if this.m_IDeviceWatcher /= null then
         if this.m_IDeviceWatcher.all /= null then
            RefCount := this.m_IDeviceWatcher.all.Release;
            Free (this.m_IDeviceWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceWatcher

   function add_Added
   (
      this : in out DeviceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDeviceWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out DeviceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceWatcher.all.remove_Added (token);
   end;

   function add_Updated
   (
      this : in out DeviceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDeviceWatcher.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out DeviceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceWatcher.all.remove_Updated (token);
   end;

   function add_Removed
   (
      this : in out DeviceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDeviceWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out DeviceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceWatcher.all.remove_Removed (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out DeviceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDeviceWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out DeviceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Stopped
   (
      this : in out DeviceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDeviceWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out DeviceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceWatcher.all.remove_Stopped (token);
   end;

   function get_Status
   (
      this : in out DeviceWatcher
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceWatcherStatus;
   begin
      Hr := this.m_IDeviceWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out DeviceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out DeviceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceWatcher.all.Stop;
   end;

   function GetBackgroundTrigger
   (
      this : in out DeviceWatcher;
      requestedEventKinds : GenericObject
   )
   return WinRt.Windows.ApplicationModel.Background.DeviceWatcherTrigger'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IDeviceWatcher2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IDeviceWatcherTrigger;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IDeviceWatcher_Interface, WinRt.Windows.Devices.Enumeration.IDeviceWatcher2, WinRt.Windows.Devices.Enumeration.IID_IDeviceWatcher2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.DeviceWatcherTrigger do
         m_Interface := QInterface (this.m_IDeviceWatcher.all);
         Hr := m_Interface.GetBackgroundTrigger (requestedEventKinds, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceWatcherTrigger := new Windows.ApplicationModel.Background.IDeviceWatcherTrigger;
         Retval.m_IDeviceWatcherTrigger.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceWatcherEvent

   procedure Initialize (this : in out DeviceWatcherEvent) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceWatcherEvent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceWatcherEvent, IDeviceWatcherEvent_Ptr);
   begin
      if this.m_IDeviceWatcherEvent /= null then
         if this.m_IDeviceWatcherEvent.all /= null then
            RefCount := this.m_IDeviceWatcherEvent.all.Release;
            Free (this.m_IDeviceWatcherEvent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceWatcherEvent

   function get_Kind
   (
      this : in out DeviceWatcherEvent
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcherEventKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceWatcherEventKind;
   begin
      Hr := this.m_IDeviceWatcherEvent.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceInformation
   (
      this : in out DeviceWatcherEvent
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IDeviceWatcherEvent.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceInformationUpdate
   (
      this : in out DeviceWatcherEvent
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformationUpdate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformationUpdate;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformationUpdate do
         Hr := this.m_IDeviceWatcherEvent.all.get_DeviceInformationUpdate (m_ComRetVal'Access);
         Retval.m_IDeviceInformationUpdate := new Windows.Devices.Enumeration.IDeviceInformationUpdate;
         Retval.m_IDeviceInformationUpdate.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceWatcherTriggerDetails

   procedure Initialize (this : in out DeviceWatcherTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceWatcherTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceWatcherTriggerDetails, IDeviceWatcherTriggerDetails_Ptr);
   begin
      if this.m_IDeviceWatcherTriggerDetails /= null then
         if this.m_IDeviceWatcherTriggerDetails.all /= null then
            RefCount := this.m_IDeviceWatcherTriggerDetails.all.Release;
            Free (this.m_IDeviceWatcherTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceWatcherTriggerDetails

   function get_DeviceWatcherEvents
   (
      this : in out DeviceWatcherTriggerDetails
   )
   return IVectorView_IDeviceWatcherEvent.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IDeviceWatcherEvent.Kind;
   begin
      Hr := this.m_IDeviceWatcherTriggerDetails.all.get_DeviceWatcherEvents (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IDeviceWatcherEvent (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EnclosureLocation

   procedure Initialize (this : in out EnclosureLocation) is
   begin
      null;
   end;

   procedure Finalize (this : in out EnclosureLocation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEnclosureLocation, IEnclosureLocation_Ptr);
   begin
      if this.m_IEnclosureLocation /= null then
         if this.m_IEnclosureLocation.all /= null then
            RefCount := this.m_IEnclosureLocation.all.Release;
            Free (this.m_IEnclosureLocation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EnclosureLocation

   function get_InDock
   (
      this : in out EnclosureLocation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEnclosureLocation.all.get_InDock (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_InLid
   (
      this : in out EnclosureLocation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEnclosureLocation.all.get_InLid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Panel
   (
      this : in out EnclosureLocation
   )
   return WinRt.Windows.Devices.Enumeration.Panel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.Panel;
   begin
      Hr := this.m_IEnclosureLocation.all.get_Panel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RotationAngleInDegreesClockwise
   (
      this : in out EnclosureLocation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Enumeration.IEnclosureLocation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Enumeration.IEnclosureLocation_Interface, WinRt.Windows.Devices.Enumeration.IEnclosureLocation2, WinRt.Windows.Devices.Enumeration.IID_IEnclosureLocation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEnclosureLocation.all);
      Hr := m_Interface.get_RotationAngleInDegreesClockwise (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

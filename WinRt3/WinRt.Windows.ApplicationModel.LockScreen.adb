--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.LockScreen is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockApplicationHost

   procedure Initialize (this : in out LockApplicationHost) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockApplicationHost) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockApplicationHost, ILockApplicationHost_Ptr);
   begin
      if this.m_ILockApplicationHost /= null then
         if this.m_ILockApplicationHost.all /= null then
            RefCount := this.m_ILockApplicationHost.all.Release;
            Free (this.m_ILockApplicationHost);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LockApplicationHost

   function GetForCurrentView
   return WinRt.Windows.ApplicationModel.LockScreen.LockApplicationHost is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.LockScreen.LockApplicationHost");
      m_Factory        : access WinRt.Windows.ApplicationModel.LockScreen.ILockApplicationHostStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.LockScreen.ILockApplicationHost;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.LockScreen.LockApplicationHost do
         Hr := RoGetActivationFactory (m_hString, IID_ILockApplicationHostStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ILockApplicationHost := new Windows.ApplicationModel.LockScreen.ILockApplicationHost;
            Retval.m_ILockApplicationHost.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockApplicationHost

   procedure RequestUnlock
   (
      this : in out LockApplicationHost
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockApplicationHost.all.RequestUnlock;
   end;

   function add_Unlocking
   (
      this : in out LockApplicationHost;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILockApplicationHost.all.add_Unlocking (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Unlocking
   (
      this : in out LockApplicationHost;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockApplicationHost.all.remove_Unlocking (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenBadge

   procedure Initialize (this : in out LockScreenBadge) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenBadge) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenBadge, ILockScreenBadge_Ptr);
   begin
      if this.m_ILockScreenBadge /= null then
         if this.m_ILockScreenBadge.all /= null then
            RefCount := this.m_ILockScreenBadge.all.Release;
            Free (this.m_ILockScreenBadge);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenBadge

   function get_Logo
   (
      this : in out LockScreenBadge
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_ILockScreenBadge.all.get_Logo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Glyph
   (
      this : in out LockScreenBadge
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_ILockScreenBadge.all.get_Glyph (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Number
   (
      this : in out LockScreenBadge
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_ILockScreenBadge.all.get_Number (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AutomationName
   (
      this : in out LockScreenBadge
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILockScreenBadge.all.get_AutomationName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure LaunchApp
   (
      this : in out LockScreenBadge
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenBadge.all.LaunchApp;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenInfo

   procedure Initialize (this : in out LockScreenInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenInfo, ILockScreenInfo_Ptr);
   begin
      if this.m_ILockScreenInfo /= null then
         if this.m_ILockScreenInfo.all /= null then
            RefCount := this.m_ILockScreenInfo.all.Release;
            Free (this.m_ILockScreenInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenInfo

   function add_LockScreenImageChanged
   (
      this : in out LockScreenInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILockScreenInfo.all.add_LockScreenImageChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_LockScreenImageChanged
   (
      this : in out LockScreenInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenInfo.all.remove_LockScreenImageChanged (token);
   end;

   function get_LockScreenImage
   (
      this : in out LockScreenInfo
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_ILockScreenInfo.all.get_LockScreenImage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_BadgesChanged
   (
      this : in out LockScreenInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILockScreenInfo.all.add_BadgesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BadgesChanged
   (
      this : in out LockScreenInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenInfo.all.remove_BadgesChanged (token);
   end;

   function get_Badges
   (
      this : in out LockScreenInfo
   )
   return IVectorView_ILockScreenBadge.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ILockScreenBadge.Kind;
   begin
      Hr := this.m_ILockScreenInfo.all.get_Badges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ILockScreenBadge (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_DetailTextChanged
   (
      this : in out LockScreenInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILockScreenInfo.all.add_DetailTextChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DetailTextChanged
   (
      this : in out LockScreenInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenInfo.all.remove_DetailTextChanged (token);
   end;

   function get_DetailText
   (
      this : in out LockScreenInfo
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ILockScreenInfo.all.get_DetailText (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_AlarmIconChanged
   (
      this : in out LockScreenInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILockScreenInfo.all.add_AlarmIconChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AlarmIconChanged
   (
      this : in out LockScreenInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenInfo.all.remove_AlarmIconChanged (token);
   end;

   function get_AlarmIcon
   (
      this : in out LockScreenInfo
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_ILockScreenInfo.all.get_AlarmIcon (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenUnlockingDeferral

   procedure Initialize (this : in out LockScreenUnlockingDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenUnlockingDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenUnlockingDeferral, ILockScreenUnlockingDeferral_Ptr);
   begin
      if this.m_ILockScreenUnlockingDeferral /= null then
         if this.m_ILockScreenUnlockingDeferral.all /= null then
            RefCount := this.m_ILockScreenUnlockingDeferral.all.Release;
            Free (this.m_ILockScreenUnlockingDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenUnlockingDeferral

   procedure Complete
   (
      this : in out LockScreenUnlockingDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILockScreenUnlockingDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LockScreenUnlockingEventArgs

   procedure Initialize (this : in out LockScreenUnlockingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LockScreenUnlockingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILockScreenUnlockingEventArgs, ILockScreenUnlockingEventArgs_Ptr);
   begin
      if this.m_ILockScreenUnlockingEventArgs /= null then
         if this.m_ILockScreenUnlockingEventArgs.all /= null then
            RefCount := this.m_ILockScreenUnlockingEventArgs.all.Release;
            Free (this.m_ILockScreenUnlockingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LockScreenUnlockingEventArgs

   function GetDeferral
   (
      this : in out LockScreenUnlockingEventArgs
   )
   return WinRt.Windows.ApplicationModel.LockScreen.LockScreenUnlockingDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.LockScreen.ILockScreenUnlockingDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.LockScreen.LockScreenUnlockingDeferral do
         Hr := this.m_ILockScreenUnlockingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_ILockScreenUnlockingDeferral := new Windows.ApplicationModel.LockScreen.ILockScreenUnlockingDeferral;
         Retval.m_ILockScreenUnlockingDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_Deadline
   (
      this : in out LockScreenUnlockingEventArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ILockScreenUnlockingEventArgs.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

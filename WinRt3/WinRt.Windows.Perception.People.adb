--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Perception.Spatial;
with WinRt.Windows.UI.Input;
with WinRt.Windows.UI.Input.Spatial;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Perception.People is

   package IAsyncOperation_GazeInputAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Input.GazeInputAccessStatus);
   package AsyncOperationCompletedHandler_GazeInputAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Input.GazeInputAccessStatus);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EyesPose

   procedure Initialize (this : in out EyesPose) is
   begin
      null;
   end;

   procedure Finalize (this : in out EyesPose) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEyesPose, IEyesPose_Ptr);
   begin
      if this.m_IEyesPose /= null then
         if this.m_IEyesPose.all /= null then
            RefCount := this.m_IEyesPose.all.Release;
            Free (this.m_IEyesPose);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for EyesPose

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.People.EyesPose");
      m_Factory        : access WinRt.Windows.Perception.People.IEyesPoseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IEyesPoseStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function RequestAccessAsync
   return WinRt.Windows.UI.Input.GazeInputAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Perception.People.EyesPose");
      m_Factory        : access WinRt.Windows.Perception.People.IEyesPoseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GazeInputAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GazeInputAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Input.GazeInputAccessStatus;
      m_IID            : aliased WinRt.IID := (1466231619, 56143, 24554, (155, 197, 175, 1, 88, 242, 105, 41 )); -- Windows.UI.Input.GazeInputAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (664859332, 17951, 20651, (175, 143, 217, 217, 159, 48, 182, 125 ));
      m_Handler        : AsyncOperationCompletedHandler_GazeInputAccessStatus.Kind := new AsyncOperationCompletedHandler_GazeInputAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GazeInputAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GazeInputAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GazeInputAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_GazeInputAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IEyesPoseStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EyesPose

   function get_IsCalibrationValid
   (
      this : in out EyesPose
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEyesPose.all.get_IsCalibrationValid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Gaze
   (
      this : in out EyesPose
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IEyesPose.all.get_Gaze (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateTimestamp
   (
      this : in out EyesPose
   )
   return WinRt.Windows.Perception.PerceptionTimestamp'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.IPerceptionTimestamp;
   begin
      return RetVal : WinRt.Windows.Perception.PerceptionTimestamp do
         Hr := this.m_IEyesPose.all.get_UpdateTimestamp (m_ComRetVal'Access);
         Retval.m_IPerceptionTimestamp := new Windows.Perception.IPerceptionTimestamp;
         Retval.m_IPerceptionTimestamp.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HandMeshObserver

   procedure Initialize (this : in out HandMeshObserver) is
   begin
      null;
   end;

   procedure Finalize (this : in out HandMeshObserver) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHandMeshObserver, IHandMeshObserver_Ptr);
   begin
      if this.m_IHandMeshObserver /= null then
         if this.m_IHandMeshObserver.all /= null then
            RefCount := this.m_IHandMeshObserver.all.Release;
            Free (this.m_IHandMeshObserver);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HandMeshObserver

   function get_Source
   (
      this : in out HandMeshObserver
   )
   return WinRt.Windows.UI.Input.Spatial.SpatialInteractionSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Input.Spatial.ISpatialInteractionSource;
   begin
      return RetVal : WinRt.Windows.UI.Input.Spatial.SpatialInteractionSource do
         Hr := this.m_IHandMeshObserver.all.get_Source (m_ComRetVal'Access);
         Retval.m_ISpatialInteractionSource := new Windows.UI.Input.Spatial.ISpatialInteractionSource;
         Retval.m_ISpatialInteractionSource.all := m_ComRetVal;
      end return;
   end;

   function get_TriangleIndexCount
   (
      this : in out HandMeshObserver
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHandMeshObserver.all.get_TriangleIndexCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VertexCount
   (
      this : in out HandMeshObserver
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHandMeshObserver.all.get_VertexCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetTriangleIndices
   (
      this : in out HandMeshObserver;
      indices : WinRt.UInt16_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_indices is new Ada.Unchecked_Conversion (Address, WinRt.UInt16_Ptr);
   begin
      Hr := this.m_IHandMeshObserver.all.GetTriangleIndices (WinRt.UInt32(indices'Length), Convert_indices (indices (indices'First)'Address));
   end;

   function GetVertexStateForPose
   (
      this : in out HandMeshObserver;
      handPose_p : Windows.Perception.People.HandPose'Class
   )
   return WinRt.Windows.Perception.People.HandMeshVertexState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.People.IHandMeshVertexState;
   begin
      return RetVal : WinRt.Windows.Perception.People.HandMeshVertexState do
         Hr := this.m_IHandMeshObserver.all.GetVertexStateForPose (handPose_p.m_IHandPose.all, m_ComRetVal'Access);
         Retval.m_IHandMeshVertexState := new Windows.Perception.People.IHandMeshVertexState;
         Retval.m_IHandMeshVertexState.all := m_ComRetVal;
      end return;
   end;

   function get_NeutralPose
   (
      this : in out HandMeshObserver
   )
   return WinRt.Windows.Perception.People.HandPose'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.People.IHandPose;
   begin
      return RetVal : WinRt.Windows.Perception.People.HandPose do
         Hr := this.m_IHandMeshObserver.all.get_NeutralPose (m_ComRetVal'Access);
         Retval.m_IHandPose := new Windows.Perception.People.IHandPose;
         Retval.m_IHandPose.all := m_ComRetVal;
      end return;
   end;

   function get_NeutralPoseVersion
   (
      this : in out HandMeshObserver
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IHandMeshObserver.all.get_NeutralPoseVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ModelId
   (
      this : in out HandMeshObserver
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IHandMeshObserver.all.get_ModelId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HandMeshVertexState

   procedure Initialize (this : in out HandMeshVertexState) is
   begin
      null;
   end;

   procedure Finalize (this : in out HandMeshVertexState) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHandMeshVertexState, IHandMeshVertexState_Ptr);
   begin
      if this.m_IHandMeshVertexState /= null then
         if this.m_IHandMeshVertexState.all /= null then
            RefCount := this.m_IHandMeshVertexState.all.Release;
            Free (this.m_IHandMeshVertexState);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HandMeshVertexState

   function get_CoordinateSystem
   (
      this : in out HandMeshVertexState
   )
   return WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.Spatial.ISpatialCoordinateSystem;
   begin
      return RetVal : WinRt.Windows.Perception.Spatial.SpatialCoordinateSystem do
         Hr := this.m_IHandMeshVertexState.all.get_CoordinateSystem (m_ComRetVal'Access);
         Retval.m_ISpatialCoordinateSystem := new Windows.Perception.Spatial.ISpatialCoordinateSystem;
         Retval.m_ISpatialCoordinateSystem.all := m_ComRetVal;
      end return;
   end;

   procedure GetVertices
   (
      this : in out HandMeshVertexState;
      vertices : Windows.Perception.People.HandMeshVertex_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_vertices is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Perception.People.HandMeshVertex_Ptr);
   begin
      Hr := this.m_IHandMeshVertexState.all.GetVertices (WinRt.UInt32(vertices'Length), Convert_vertices (vertices (vertices'First)'Address));
   end;

   function get_UpdateTimestamp
   (
      this : in out HandMeshVertexState
   )
   return WinRt.Windows.Perception.PerceptionTimestamp'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.IPerceptionTimestamp;
   begin
      return RetVal : WinRt.Windows.Perception.PerceptionTimestamp do
         Hr := this.m_IHandMeshVertexState.all.get_UpdateTimestamp (m_ComRetVal'Access);
         Retval.m_IPerceptionTimestamp := new Windows.Perception.IPerceptionTimestamp;
         Retval.m_IPerceptionTimestamp.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HandPose

   procedure Initialize (this : in out HandPose) is
   begin
      null;
   end;

   procedure Finalize (this : in out HandPose) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHandPose, IHandPose_Ptr);
   begin
      if this.m_IHandPose /= null then
         if this.m_IHandPose.all /= null then
            RefCount := this.m_IHandPose.all.Release;
            Free (this.m_IHandPose);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HandPose

   function TryGetJoint
   (
      this : in out HandPose;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      joint : Windows.Perception.People.HandJointKind;
      jointPose : Windows.Perception.People.JointPose_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHandPose.all.TryGetJoint (coordinateSystem.m_ISpatialCoordinateSystem.all, joint, jointPose, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetJoints
   (
      this : in out HandPose;
      coordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      joints : Windows.Perception.People.HandJointKind_Array;
      jointPoses : Windows.Perception.People.JointPose_Array
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function Convert_joints is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Perception.People.HandJointKind_Ptr);
      function Convert_jointPoses is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Perception.People.JointPose_Ptr);
   begin
      Hr := this.m_IHandPose.all.TryGetJoints (coordinateSystem.m_ISpatialCoordinateSystem.all, WinRt.UInt32(joints'Length), Convert_joints (joints (joints'First)'Address), WinRt.UInt32(jointPoses'Length), Convert_jointPoses (jointPoses (jointPoses'First)'Address), m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetRelativeJoint
   (
      this : in out HandPose;
      joint : Windows.Perception.People.HandJointKind;
      referenceJoint : Windows.Perception.People.HandJointKind
   )
   return WinRt.Windows.Perception.People.JointPose is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Perception.People.JointPose;
   begin
      Hr := this.m_IHandPose.all.GetRelativeJoint (joint, referenceJoint, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetRelativeJoints
   (
      this : in out HandPose;
      joints : Windows.Perception.People.HandJointKind_Array;
      referenceJoints : Windows.Perception.People.HandJointKind_Array;
      jointPoses : Windows.Perception.People.JointPose_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_joints is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Perception.People.HandJointKind_Ptr);
      function Convert_referenceJoints is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Perception.People.HandJointKind_Ptr);
      function Convert_jointPoses is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Perception.People.JointPose_Ptr);
   begin
      Hr := this.m_IHandPose.all.GetRelativeJoints (WinRt.UInt32(joints'Length), Convert_joints (joints (joints'First)'Address), WinRt.UInt32(referenceJoints'Length), Convert_referenceJoints (referenceJoints (referenceJoints'First)'Address), WinRt.UInt32(jointPoses'Length), Convert_jointPoses (jointPoses (jointPoses'First)'Address));
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HeadPose

   procedure Initialize (this : in out HeadPose) is
   begin
      null;
   end;

   procedure Finalize (this : in out HeadPose) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHeadPose, IHeadPose_Ptr);
   begin
      if this.m_IHeadPose /= null then
         if this.m_IHeadPose.all /= null then
            RefCount := this.m_IHeadPose.all.Release;
            Free (this.m_IHeadPose);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HeadPose

   function get_Position
   (
      this : in out HeadPose
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IHeadPose.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ForwardDirection
   (
      this : in out HeadPose
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IHeadPose.all.get_ForwardDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpDirection
   (
      this : in out HeadPose
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IHeadPose.all.get_UpDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

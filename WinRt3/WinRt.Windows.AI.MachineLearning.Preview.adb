--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.AI.MachineLearning.Preview is

   package IAsyncOperation_LearningModelEvaluationResultPreview is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelEvaluationResultPreview);
   package AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelEvaluationResultPreview);

   package IAsyncOperation_LearningModelPreview is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelPreview);
   package AsyncOperationCompletedHandler_LearningModelPreview is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelPreview);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageVariableDescriptorPreview

   procedure Initialize (this : in out ImageVariableDescriptorPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageVariableDescriptorPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageVariableDescriptorPreview, IImageVariableDescriptorPreview_Ptr);
   begin
      if this.m_IImageVariableDescriptorPreview /= null then
         if this.m_IImageVariableDescriptorPreview.all /= null then
            RefCount := this.m_IImageVariableDescriptorPreview.all.Release;
            Free (this.m_IImageVariableDescriptorPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageVariableDescriptorPreview

   function get_BitmapPixelFormat
   (
      this : in out ImageVariableDescriptorPreview
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
   begin
      Hr := this.m_IImageVariableDescriptorPreview.all.get_BitmapPixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Width
   (
      this : in out ImageVariableDescriptorPreview
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IImageVariableDescriptorPreview.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out ImageVariableDescriptorPreview
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IImageVariableDescriptorPreview.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out ImageVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IImageVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageVariableDescriptorPreview.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out ImageVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IImageVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageVariableDescriptorPreview.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelFeatureKind
   (
      this : in out ImageVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IImageVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageVariableDescriptorPreview.all);
      Hr := m_Interface.get_ModelFeatureKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out ImageVariableDescriptorPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IImageVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageVariableDescriptorPreview.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InferencingOptionsPreview

   procedure Initialize (this : in out InferencingOptionsPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out InferencingOptionsPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInferencingOptionsPreview, IInferencingOptionsPreview_Ptr);
   begin
      if this.m_IInferencingOptionsPreview /= null then
         if this.m_IInferencingOptionsPreview.all /= null then
            RefCount := this.m_IInferencingOptionsPreview.all.Release;
            Free (this.m_IInferencingOptionsPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InferencingOptionsPreview

   function get_PreferredDeviceKind
   (
      this : in out InferencingOptionsPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelDeviceKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.LearningModelDeviceKindPreview;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.get_PreferredDeviceKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PreferredDeviceKind
   (
      this : in out InferencingOptionsPreview;
      value : Windows.AI.MachineLearning.Preview.LearningModelDeviceKindPreview
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.put_PreferredDeviceKind (value);
   end;

   function get_IsTracingEnabled
   (
      this : in out InferencingOptionsPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.get_IsTracingEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsTracingEnabled
   (
      this : in out InferencingOptionsPreview;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.put_IsTracingEnabled (value);
   end;

   function get_MaxBatchSize
   (
      this : in out InferencingOptionsPreview
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.get_MaxBatchSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxBatchSize
   (
      this : in out InferencingOptionsPreview;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.put_MaxBatchSize (value);
   end;

   function get_MinimizeMemoryAllocation
   (
      this : in out InferencingOptionsPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.get_MinimizeMemoryAllocation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinimizeMemoryAllocation
   (
      this : in out InferencingOptionsPreview;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.put_MinimizeMemoryAllocation (value);
   end;

   function get_ReclaimMemoryAfterEvaluation
   (
      this : in out InferencingOptionsPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.get_ReclaimMemoryAfterEvaluation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReclaimMemoryAfterEvaluation
   (
      this : in out InferencingOptionsPreview;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInferencingOptionsPreview.all.put_ReclaimMemoryAfterEvaluation (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelBindingPreview

   procedure Initialize (this : in out LearningModelBindingPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelBindingPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelBindingPreview, ILearningModelBindingPreview_Ptr);
   begin
      if this.m_ILearningModelBindingPreview /= null then
         if this.m_ILearningModelBindingPreview.all /= null then
            RefCount := this.m_ILearningModelBindingPreview.all.Release;
            Free (this.m_ILearningModelBindingPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LearningModelBindingPreview

   function Constructor
   (
      model : Windows.AI.MachineLearning.Preview.LearningModelPreview'Class
   )
   return LearningModelBindingPreview is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.AI.MachineLearning.Preview.LearningModelBindingPreview");
      m_Factory    : access ILearningModelBindingPreviewFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.AI.MachineLearning.Preview.ILearningModelBindingPreview;
   begin
      return RetVal : LearningModelBindingPreview do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelBindingPreviewFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromModel (model.m_ILearningModelPreview.all, m_ComRetVal'Access);
            Retval.m_ILearningModelBindingPreview := new Windows.AI.MachineLearning.Preview.ILearningModelBindingPreview;
            Retval.m_ILearningModelBindingPreview.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelBindingPreview

   procedure Bind
   (
      this : in out LearningModelBindingPreview;
      name : WinRt.WString;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILearningModelBindingPreview.all.Bind (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure Bind
   (
      this : in out LearningModelBindingPreview;
      name : WinRt.WString;
      value : WinRt.IInspectable;
      metadata : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ILearningModelBindingPreview.all.Bind (HStr_name, value, metadata);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure Clear
   (
      this : in out LearningModelBindingPreview
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILearningModelBindingPreview.all.Clear;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMapView`2<System.String,System.Object>
   function Lookup
   (
      this : in out LearningModelBindingPreview;
      key : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased IInspectable;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelBindingPreview_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBindingPreview.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out LearningModelBindingPreview
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelBindingPreview_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBindingPreview.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out LearningModelBindingPreview;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelBindingPreview_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBindingPreview.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Split
   (
      this : in out LearningModelBindingPreview;
      first : access GenericObject_Ptr;
      second : access GenericObject_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMapView_HString_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3145224234, 63389, 21754, (146, 201, 144, 197, 3, 159, 223, 126 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ILearningModelBindingPreview_Interface, IMapView_HString_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILearningModelBindingPreview.all);
      Hr := m_Interface.Split (first, second);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelDescriptionPreview

   procedure Initialize (this : in out LearningModelDescriptionPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelDescriptionPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelDescriptionPreview, ILearningModelDescriptionPreview_Ptr);
   begin
      if this.m_ILearningModelDescriptionPreview /= null then
         if this.m_ILearningModelDescriptionPreview.all /= null then
            RefCount := this.m_ILearningModelDescriptionPreview.all.Release;
            Free (this.m_ILearningModelDescriptionPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelDescriptionPreview

   function get_Author
   (
      this : in out LearningModelDescriptionPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_Author (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out LearningModelDescriptionPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Domain
   (
      this : in out LearningModelDescriptionPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_Domain (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out LearningModelDescriptionPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Version
   (
      this : in out LearningModelDescriptionPreview
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_Version (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Metadata
   (
      this : in out LearningModelDescriptionPreview
   )
   return IMapView_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_HString.Kind;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_Metadata (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_InputFeatures
   (
      this : in out LearningModelDescriptionPreview
   )
   return IIterable_ILearningModelVariableDescriptorPreview.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_ILearningModelVariableDescriptorPreview.Kind;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_InputFeatures (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IIterable_ILearningModelVariableDescriptorPreview (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_OutputFeatures
   (
      this : in out LearningModelDescriptionPreview
   )
   return IIterable_ILearningModelVariableDescriptorPreview.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_ILearningModelVariableDescriptorPreview.Kind;
   begin
      Hr := this.m_ILearningModelDescriptionPreview.all.get_OutputFeatures (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IIterable_ILearningModelVariableDescriptorPreview (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelEvaluationResultPreview

   procedure Initialize (this : in out LearningModelEvaluationResultPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelEvaluationResultPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelEvaluationResultPreview, ILearningModelEvaluationResultPreview_Ptr);
   begin
      if this.m_ILearningModelEvaluationResultPreview /= null then
         if this.m_ILearningModelEvaluationResultPreview.all /= null then
            RefCount := this.m_ILearningModelEvaluationResultPreview.all.Release;
            Free (this.m_ILearningModelEvaluationResultPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelEvaluationResultPreview

   function get_CorrelationId
   (
      this : in out LearningModelEvaluationResultPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelEvaluationResultPreview.all.get_CorrelationId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Outputs
   (
      this : in out LearningModelEvaluationResultPreview
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_ILearningModelEvaluationResultPreview.all.get_Outputs (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelPreview

   procedure Initialize (this : in out LearningModelPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelPreview, ILearningModelPreview_Ptr);
   begin
      if this.m_ILearningModelPreview /= null then
         if this.m_ILearningModelPreview.all /= null then
            RefCount := this.m_ILearningModelPreview.all.Release;
            Free (this.m_ILearningModelPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LearningModelPreview

   function LoadModelFromStorageFileAsync
   (
      modelFile : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelPreview is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.Preview.LearningModelPreview");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.Preview.ILearningModelPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModelPreview.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModelPreview.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.Preview.ILearningModelPreview;
      m_IID            : aliased WinRt.IID := (2261632701, 32925, 23083, (137, 139, 92, 42, 146, 190, 119, 68 )); -- Windows.AI.MachineLearning.Preview.LearningModelPreview;
      m_HandlerIID     : aliased WinRt.IID := (2808912601, 28425, 23809, (140, 31, 81, 102, 35, 203, 250, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModelPreview.Kind := new AsyncOperationCompletedHandler_LearningModelPreview.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModelPreview.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModelPreview.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModelPreview.Kind_Delegate, AsyncOperationCompletedHandler_LearningModelPreview.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.Preview.LearningModelPreview do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadModelFromStorageFileAsync (modelFile, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILearningModelPreview := new Windows.AI.MachineLearning.Preview.ILearningModelPreview;
                     Retval.m_ILearningModelPreview.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function LoadModelFromStreamAsync
   (
      modelStream : Windows.Storage.Streams.IRandomAccessStreamReference
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelPreview is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.AI.MachineLearning.Preview.LearningModelPreview");
      m_Factory        : access WinRt.Windows.AI.MachineLearning.Preview.ILearningModelPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModelPreview.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModelPreview.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.Preview.ILearningModelPreview;
      m_IID            : aliased WinRt.IID := (2261632701, 32925, 23083, (137, 139, 92, 42, 146, 190, 119, 68 )); -- Windows.AI.MachineLearning.Preview.LearningModelPreview;
      m_HandlerIID     : aliased WinRt.IID := (2808912601, 28425, 23809, (140, 31, 81, 102, 35, 203, 250, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModelPreview.Kind := new AsyncOperationCompletedHandler_LearningModelPreview.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModelPreview.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModelPreview.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModelPreview.Kind_Delegate, AsyncOperationCompletedHandler_LearningModelPreview.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.Preview.LearningModelPreview do
         Hr := RoGetActivationFactory (m_hString, IID_ILearningModelPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadModelFromStreamAsync (modelStream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ILearningModelPreview := new Windows.AI.MachineLearning.Preview.ILearningModelPreview;
                     Retval.m_ILearningModelPreview.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelPreview

   function EvaluateAsync
   (
      this : in out LearningModelPreview;
      binding : Windows.AI.MachineLearning.Preview.LearningModelBindingPreview'Class;
      correlationId : WinRt.WString
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelEvaluationResultPreview'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationId : WinRt.HString := To_HString (correlationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModelEvaluationResultPreview.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModelEvaluationResultPreview.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.Preview.ILearningModelEvaluationResultPreview;
      m_IID            : aliased WinRt.IID := (3326341816, 59960, 21040, (147, 72, 16, 148, 192, 109, 145, 125 )); -- Windows.AI.MachineLearning.Preview.LearningModelEvaluationResultPreview;
      m_HandlerIID     : aliased WinRt.IID := (4061561556, 20427, 23255, (155, 78, 31, 233, 197, 148, 43, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind := new AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModelEvaluationResultPreview.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind_Delegate, AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.Preview.LearningModelEvaluationResultPreview do
         Hr := this.m_ILearningModelPreview.all.EvaluateAsync (binding.m_ILearningModelBindingPreview.all, HStr_correlationId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILearningModelEvaluationResultPreview := new Windows.AI.MachineLearning.Preview.ILearningModelEvaluationResultPreview;
                  Retval.m_ILearningModelEvaluationResultPreview.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_correlationId);
      end return;
   end;

   function EvaluateFeaturesAsync
   (
      this : in out LearningModelPreview;
      features : GenericObject;
      correlationId : WinRt.WString
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelEvaluationResultPreview'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationId : WinRt.HString := To_HString (correlationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LearningModelEvaluationResultPreview.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LearningModelEvaluationResultPreview.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.AI.MachineLearning.Preview.ILearningModelEvaluationResultPreview;
      m_IID            : aliased WinRt.IID := (3326341816, 59960, 21040, (147, 72, 16, 148, 192, 109, 145, 125 )); -- Windows.AI.MachineLearning.Preview.LearningModelEvaluationResultPreview;
      m_HandlerIID     : aliased WinRt.IID := (4061561556, 20427, 23255, (155, 78, 31, 233, 197, 148, 43, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind := new AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LearningModelEvaluationResultPreview.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind_Delegate, AsyncOperationCompletedHandler_LearningModelEvaluationResultPreview.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.Preview.LearningModelEvaluationResultPreview do
         Hr := this.m_ILearningModelPreview.all.EvaluateFeaturesAsync (features, HStr_correlationId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILearningModelEvaluationResultPreview := new Windows.AI.MachineLearning.Preview.ILearningModelEvaluationResultPreview;
                  Retval.m_ILearningModelEvaluationResultPreview.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_correlationId);
      end return;
   end;

   function get_Description
   (
      this : in out LearningModelPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelDescriptionPreview'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.ILearningModelDescriptionPreview;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.Preview.LearningModelDescriptionPreview do
         Hr := this.m_ILearningModelPreview.all.get_Description (m_ComRetVal'Access);
         Retval.m_ILearningModelDescriptionPreview := new Windows.AI.MachineLearning.Preview.ILearningModelDescriptionPreview;
         Retval.m_ILearningModelDescriptionPreview.all := m_ComRetVal;
      end return;
   end;

   function get_InferencingOptions
   (
      this : in out LearningModelPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.InferencingOptionsPreview'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.IInferencingOptionsPreview;
   begin
      return RetVal : WinRt.Windows.AI.MachineLearning.Preview.InferencingOptionsPreview do
         Hr := this.m_ILearningModelPreview.all.get_InferencingOptions (m_ComRetVal'Access);
         Retval.m_IInferencingOptionsPreview := new Windows.AI.MachineLearning.Preview.IInferencingOptionsPreview;
         Retval.m_IInferencingOptionsPreview.all := m_ComRetVal;
      end return;
   end;

   procedure put_InferencingOptions
   (
      this : in out LearningModelPreview;
      value : Windows.AI.MachineLearning.Preview.InferencingOptionsPreview'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILearningModelPreview.all.put_InferencingOptions (value.m_IInferencingOptionsPreview.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LearningModelVariableDescriptorPreview

   procedure Initialize (this : in out LearningModelVariableDescriptorPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out LearningModelVariableDescriptorPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILearningModelVariableDescriptorPreview, ILearningModelVariableDescriptorPreview_Ptr);
   begin
      if this.m_ILearningModelVariableDescriptorPreview /= null then
         if this.m_ILearningModelVariableDescriptorPreview.all /= null then
            RefCount := this.m_ILearningModelVariableDescriptorPreview.all.Release;
            Free (this.m_ILearningModelVariableDescriptorPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LearningModelVariableDescriptorPreview

   function get_Name
   (
      this : in out LearningModelVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelVariableDescriptorPreview.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out LearningModelVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILearningModelVariableDescriptorPreview.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelFeatureKind
   (
      this : in out LearningModelVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview;
   begin
      Hr := this.m_ILearningModelVariableDescriptorPreview.all.get_ModelFeatureKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out LearningModelVariableDescriptorPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILearningModelVariableDescriptorPreview.all.get_IsRequired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MapVariableDescriptorPreview

   procedure Initialize (this : in out MapVariableDescriptorPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out MapVariableDescriptorPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMapVariableDescriptorPreview, IMapVariableDescriptorPreview_Ptr);
   begin
      if this.m_IMapVariableDescriptorPreview /= null then
         if this.m_IMapVariableDescriptorPreview.all /= null then
            RefCount := this.m_IMapVariableDescriptorPreview.all.Release;
            Free (this.m_IMapVariableDescriptorPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MapVariableDescriptorPreview

   function get_KeyKind
   (
      this : in out MapVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.FeatureElementKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.FeatureElementKindPreview;
   begin
      Hr := this.m_IMapVariableDescriptorPreview.all.get_KeyKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ValidStringKeys
   (
      this : in out MapVariableDescriptorPreview
   )
   return IIterable_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_HString.Kind;
   begin
      Hr := this.m_IMapVariableDescriptorPreview.all.get_ValidStringKeys (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IIterable_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ValidIntegerKeys
   (
      this : in out MapVariableDescriptorPreview
   )
   return IIterable_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_Int64.Kind;
   begin
      Hr := this.m_IMapVariableDescriptorPreview.all.get_ValidIntegerKeys (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IIterable_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Fields
   (
      this : in out MapVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview;
   begin
      Hr := this.m_IMapVariableDescriptorPreview.all.get_Fields (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out MapVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IMapVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapVariableDescriptorPreview.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out MapVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IMapVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapVariableDescriptorPreview.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelFeatureKind
   (
      this : in out MapVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IMapVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapVariableDescriptorPreview.all);
      Hr := m_Interface.get_ModelFeatureKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out MapVariableDescriptorPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.IMapVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMapVariableDescriptorPreview.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SequenceVariableDescriptorPreview

   procedure Initialize (this : in out SequenceVariableDescriptorPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out SequenceVariableDescriptorPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISequenceVariableDescriptorPreview, ISequenceVariableDescriptorPreview_Ptr);
   begin
      if this.m_ISequenceVariableDescriptorPreview /= null then
         if this.m_ISequenceVariableDescriptorPreview.all /= null then
            RefCount := this.m_ISequenceVariableDescriptorPreview.all.Release;
            Free (this.m_ISequenceVariableDescriptorPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SequenceVariableDescriptorPreview

   function get_ElementType
   (
      this : in out SequenceVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview;
   begin
      Hr := this.m_ISequenceVariableDescriptorPreview.all.get_ElementType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out SequenceVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ISequenceVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceVariableDescriptorPreview.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out SequenceVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ISequenceVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceVariableDescriptorPreview.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelFeatureKind
   (
      this : in out SequenceVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ISequenceVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceVariableDescriptorPreview.all);
      Hr := m_Interface.get_ModelFeatureKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out SequenceVariableDescriptorPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ISequenceVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISequenceVariableDescriptorPreview.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TensorVariableDescriptorPreview

   procedure Initialize (this : in out TensorVariableDescriptorPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out TensorVariableDescriptorPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITensorVariableDescriptorPreview, ITensorVariableDescriptorPreview_Ptr);
   begin
      if this.m_ITensorVariableDescriptorPreview /= null then
         if this.m_ITensorVariableDescriptorPreview.all /= null then
            RefCount := this.m_ITensorVariableDescriptorPreview.all.Release;
            Free (this.m_ITensorVariableDescriptorPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TensorVariableDescriptorPreview

   function get_DataType
   (
      this : in out TensorVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.FeatureElementKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.FeatureElementKindPreview;
   begin
      Hr := this.m_ITensorVariableDescriptorPreview.all.get_DataType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Shape
   (
      this : in out TensorVariableDescriptorPreview
   )
   return IIterable_Int64.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IIterable_Int64.Kind;
   begin
      Hr := this.m_ITensorVariableDescriptorPreview.all.get_Shape (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IIterable_Int64 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Name
   (
      this : in out TensorVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ITensorVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorVariableDescriptorPreview.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out TensorVariableDescriptorPreview
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ITensorVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorVariableDescriptorPreview.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelFeatureKind
   (
      this : in out TensorVariableDescriptorPreview
   )
   return WinRt.Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.AI.MachineLearning.Preview.LearningModelFeatureKindPreview;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ITensorVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorVariableDescriptorPreview.all);
      Hr := m_Interface.get_ModelFeatureKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out TensorVariableDescriptorPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.AI.MachineLearning.Preview.ITensorVariableDescriptorPreview_Interface, WinRt.Windows.AI.MachineLearning.Preview.ILearningModelVariableDescriptorPreview, WinRt.Windows.AI.MachineLearning.Preview.IID_ILearningModelVariableDescriptorPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITensorVariableDescriptorPreview.all);
      Hr := m_Interface.get_IsRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

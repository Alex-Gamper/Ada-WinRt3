--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Graphics;
with WinRt.Windows.Graphics.DirectX;
with WinRt.Windows.Graphics.Effects;
with WinRt.Windows.System;
with WinRt.Windows.UI.Core;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Composition is

   package IIterable_ICompositionAnimation is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Composition.ICompositionAnimation);
   package IIterable_ICompositionColorGradientStop is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Composition.ICompositionColorGradientStop);
   package IVector_ICompositionColorGradientStop is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Composition.ICompositionColorGradientStop);
   package IIterable_ICompositionProjectedShadowCaster is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Composition.ICompositionProjectedShadowCaster);
   package IIterable_ICompositionProjectedShadowReceiver is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Composition.ICompositionProjectedShadowReceiver);
   package IVector_ICompositionShape is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.UI.Composition.ICompositionShape);
   package IIterable_ICompositionShape is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Composition.ICompositionShape);
   package IVector_Single is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Single);
   package IIterable_Single is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Single);
   package IMap_HString_ICompositionAnimationBase is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.Windows.UI.Composition.ICompositionAnimationBase);
   package IMap_HString_HString is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.HString);
   package IIterable_IVisual is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.UI.Composition.IVisual);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionObject

   procedure Initialize (this : in out CompositionObject) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionObject) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionObject, ICompositionObject_Ptr);
   begin
      if this.m_ICompositionObject /= null then
         if this.m_ICompositionObject.all /= null then
            RefCount := this.m_ICompositionObject.all.Release;
            Free (this.m_ICompositionObject);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionObject

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositionObject

   procedure StartAnimationWithIAnimationObject
   (
      target : Windows.UI.Composition.IAnimationObject;
      propertyName : WinRt.WString;
      animation : Windows.UI.Composition.CompositionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.CompositionObject");
      m_Factory        : access WinRt.Windows.UI.Composition.ICompositionObjectStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionObjectStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.StartAnimationWithIAnimationObject (target, HStr_propertyName, animation.m_ICompositionAnimation.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure StartAnimationGroupWithIAnimationObject
   (
      target : Windows.UI.Composition.IAnimationObject;
      animation : Windows.UI.Composition.ICompositionAnimationBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.CompositionObject");
      m_Factory        : access WinRt.Windows.UI.Composition.ICompositionObjectStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionObjectStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.StartAnimationGroupWithIAnimationObject (target, animation);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionObject

   function get_Compositor
   (
      this : in out CompositionObject
   )
   return WinRt.Windows.UI.Composition.Compositor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositor;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Compositor do
         Hr := this.m_ICompositionObject.all.get_Compositor (m_ComRetVal'Access);
         Retval.m_ICompositor := new Windows.UI.Composition.ICompositor;
         Retval.m_ICompositor.all := m_ComRetVal;
      end return;
   end;

   function get_Dispatcher
   (
      this : in out CompositionObject
   )
   return WinRt.Windows.UI.Core.CoreDispatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Core.ICoreDispatcher;
   begin
      return RetVal : WinRt.Windows.UI.Core.CoreDispatcher do
         Hr := this.m_ICompositionObject.all.get_Dispatcher (m_ComRetVal'Access);
         Retval.m_ICoreDispatcher := new Windows.UI.Core.ICoreDispatcher;
         Retval.m_ICoreDispatcher.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out CompositionObject
   )
   return WinRt.Windows.UI.Composition.CompositionPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionPropertySet;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionPropertySet do
         Hr := this.m_ICompositionObject.all.get_Properties (m_ComRetVal'Access);
         Retval.m_ICompositionPropertySet := new Windows.UI.Composition.ICompositionPropertySet;
         Retval.m_ICompositionPropertySet.all := m_ComRetVal;
      end return;
   end;

   procedure StartAnimation
   (
      this : in out CompositionObject;
      propertyName : WinRt.WString;
      animation : Windows.UI.Composition.CompositionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionObject.all.StartAnimation (HStr_propertyName, animation.m_ICompositionAnimation.all);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure StopAnimation
   (
      this : in out CompositionObject;
      propertyName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionObject.all.StopAnimation (HStr_propertyName);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   function get_Comment
   (
      this : in out CompositionObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject2, WinRt.Windows.UI.Composition.IID_ICompositionObject2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionObject.all);
      Hr := m_Interface.get_Comment (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Comment
   (
      this : in out CompositionObject;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject2, WinRt.Windows.UI.Composition.IID_ICompositionObject2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionObject.all);
      Hr := m_Interface.put_Comment (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ImplicitAnimations
   (
      this : in out CompositionObject
   )
   return WinRt.Windows.UI.Composition.ImplicitAnimationCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IImplicitAnimationCollection;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject2, WinRt.Windows.UI.Composition.IID_ICompositionObject2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.ImplicitAnimationCollection do
         m_Interface := QInterface (this.m_ICompositionObject.all);
         Hr := m_Interface.get_ImplicitAnimations (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IImplicitAnimationCollection := new Windows.UI.Composition.IImplicitAnimationCollection;
         Retval.m_IImplicitAnimationCollection.all := m_ComRetVal;
      end return;
   end;

   procedure put_ImplicitAnimations
   (
      this : in out CompositionObject;
      value : Windows.UI.Composition.ImplicitAnimationCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject2, WinRt.Windows.UI.Composition.IID_ICompositionObject2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionObject.all);
      Hr := m_Interface.put_ImplicitAnimations (value.m_IImplicitAnimationCollection.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure StartAnimationGroup
   (
      this : in out CompositionObject;
      value : Windows.UI.Composition.ICompositionAnimationBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject2, WinRt.Windows.UI.Composition.IID_ICompositionObject2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionObject.all);
      Hr := m_Interface.StartAnimationGroup (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure StopAnimationGroup
   (
      this : in out CompositionObject;
      value : Windows.UI.Composition.ICompositionAnimationBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject2, WinRt.Windows.UI.Composition.IID_ICompositionObject2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionObject.all);
      Hr := m_Interface.StopAnimationGroup (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DispatcherQueue
   (
      this : in out CompositionObject
   )
   return WinRt.Windows.System.DispatcherQueue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IDispatcherQueue;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject3, WinRt.Windows.UI.Composition.IID_ICompositionObject3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.DispatcherQueue do
         m_Interface := QInterface (this.m_ICompositionObject.all);
         Hr := m_Interface.get_DispatcherQueue (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDispatcherQueue := new Windows.System.IDispatcherQueue;
         Retval.m_IDispatcherQueue.all := m_ComRetVal;
      end return;
   end;

   function TryGetAnimationController
   (
      this : in out CompositionObject;
      propertyName : WinRt.WString
   )
   return WinRt.Windows.UI.Composition.AnimationController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionObject4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IAnimationController;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.ICompositionObject4, WinRt.Windows.UI.Composition.IID_ICompositionObject4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.AnimationController do
         m_Interface := QInterface (this.m_ICompositionObject.all);
         Hr := m_Interface.TryGetAnimationController (HStr_propertyName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAnimationController := new Windows.UI.Composition.IAnimationController;
         Retval.m_IAnimationController.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_propertyName);
      end return;
   end;

   procedure Close
   (
      this : in out CompositionObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionObject.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure PopulatePropertyInfo
   (
      this : in out CompositionObject;
      propertyName : WinRt.WString;
      propertyInfo : Windows.UI.Composition.AnimationPropertyInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IAnimationObject := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionObject_Interface, WinRt.Windows.UI.Composition.IAnimationObject, WinRt.Windows.UI.Composition.IID_IAnimationObject'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionObject.all);
      Hr := m_Interface.PopulatePropertyInfo (HStr_propertyName, propertyInfo.m_IAnimationPropertyInfo.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionLight

   procedure Initialize (this : in out CompositionLight) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionLight) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionLight, ICompositionLight_Ptr);
   begin
      if this.m_ICompositionLight /= null then
         if this.m_ICompositionLight.all /= null then
            RefCount := this.m_ICompositionLight.all.Release;
            Free (this.m_ICompositionLight);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionLight

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionLight

   function get_Targets
   (
      this : in out CompositionLight
   )
   return WinRt.Windows.UI.Composition.VisualUnorderedCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisualUnorderedCollection;
   begin
      return RetVal : WinRt.Windows.UI.Composition.VisualUnorderedCollection do
         Hr := this.m_ICompositionLight.all.get_Targets (m_ComRetVal'Access);
         Retval.m_IVisualUnorderedCollection := new Windows.UI.Composition.IVisualUnorderedCollection;
         Retval.m_IVisualUnorderedCollection.all := m_ComRetVal;
      end return;
   end;

   function get_ExclusionsFromTargets
   (
      this : in out CompositionLight
   )
   return WinRt.Windows.UI.Composition.VisualUnorderedCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisualUnorderedCollection;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionLight_Interface, WinRt.Windows.UI.Composition.ICompositionLight2, WinRt.Windows.UI.Composition.IID_ICompositionLight2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.VisualUnorderedCollection do
         m_Interface := QInterface (this.m_ICompositionLight.all);
         Hr := m_Interface.get_ExclusionsFromTargets (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVisualUnorderedCollection := new Windows.UI.Composition.IVisualUnorderedCollection;
         Retval.m_IVisualUnorderedCollection.all := m_ComRetVal;
      end return;
   end;

   function get_IsEnabled
   (
      this : in out CompositionLight
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionLight_Interface, WinRt.Windows.UI.Composition.ICompositionLight3, WinRt.Windows.UI.Composition.IID_ICompositionLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionLight.all);
      Hr := m_Interface.get_IsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out CompositionLight;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionLight_Interface, WinRt.Windows.UI.Composition.ICompositionLight3, WinRt.Windows.UI.Composition.IID_ICompositionLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionLight.all);
      Hr := m_Interface.put_IsEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AmbientLight

   procedure Initialize (this : in out AmbientLight) is
   begin
      null;
   end;

   procedure Finalize (this : in out AmbientLight) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAmbientLight, IAmbientLight_Ptr);
   begin
      if this.m_IAmbientLight /= null then
         if this.m_IAmbientLight.all /= null then
            RefCount := this.m_IAmbientLight.all.Release;
            Free (this.m_IAmbientLight);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AmbientLight

   function get_Color
   (
      this : in out AmbientLight
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IAmbientLight.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out AmbientLight;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAmbientLight.all.put_Color (value);
   end;

   function get_Intensity
   (
      this : in out AmbientLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IAmbientLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IAmbientLight_Interface, WinRt.Windows.UI.Composition.IAmbientLight2, WinRt.Windows.UI.Composition.IID_IAmbientLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAmbientLight.all);
      Hr := m_Interface.get_Intensity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Intensity
   (
      this : in out AmbientLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IAmbientLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IAmbientLight_Interface, WinRt.Windows.UI.Composition.IAmbientLight2, WinRt.Windows.UI.Composition.IID_IAmbientLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAmbientLight.all);
      Hr := m_Interface.put_Intensity (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AnimationController

   procedure Initialize (this : in out AnimationController) is
   begin
      null;
   end;

   procedure Finalize (this : in out AnimationController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAnimationController, IAnimationController_Ptr);
   begin
      if this.m_IAnimationController /= null then
         if this.m_IAnimationController.all /= null then
            RefCount := this.m_IAnimationController.all.Release;
            Free (this.m_IAnimationController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AnimationController

   function get_MaxPlaybackRate
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.AnimationController");
      m_Factory        : access WinRt.Windows.UI.Composition.IAnimationControllerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAnimationControllerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxPlaybackRate (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MinPlaybackRate
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.AnimationController");
      m_Factory        : access WinRt.Windows.UI.Composition.IAnimationControllerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAnimationControllerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MinPlaybackRate (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AnimationController

   function get_PlaybackRate
   (
      this : in out AnimationController
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAnimationController.all.get_PlaybackRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PlaybackRate
   (
      this : in out AnimationController;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAnimationController.all.put_PlaybackRate (value);
   end;

   function get_Progress
   (
      this : in out AnimationController
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IAnimationController.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Progress
   (
      this : in out AnimationController;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAnimationController.all.put_Progress (value);
   end;

   function get_ProgressBehavior
   (
      this : in out AnimationController
   )
   return WinRt.Windows.UI.Composition.AnimationControllerProgressBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationControllerProgressBehavior;
   begin
      Hr := this.m_IAnimationController.all.get_ProgressBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProgressBehavior
   (
      this : in out AnimationController;
      value : Windows.UI.Composition.AnimationControllerProgressBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAnimationController.all.put_ProgressBehavior (value);
   end;

   procedure Pause
   (
      this : in out AnimationController
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAnimationController.all.Pause;
   end;

   procedure Resume
   (
      this : in out AnimationController
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAnimationController.all.Resume;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AnimationPropertyInfo

   procedure Initialize (this : in out AnimationPropertyInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AnimationPropertyInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAnimationPropertyInfo, IAnimationPropertyInfo_Ptr);
   begin
      if this.m_IAnimationPropertyInfo /= null then
         if this.m_IAnimationPropertyInfo.all /= null then
            RefCount := this.m_IAnimationPropertyInfo.all.Release;
            Free (this.m_IAnimationPropertyInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AnimationPropertyInfo

   function get_AccessMode
   (
      this : in out AnimationPropertyInfo
   )
   return WinRt.Windows.UI.Composition.AnimationPropertyAccessMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationPropertyAccessMode;
   begin
      Hr := this.m_IAnimationPropertyInfo.all.get_AccessMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AccessMode
   (
      this : in out AnimationPropertyInfo;
      value : Windows.UI.Composition.AnimationPropertyAccessMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAnimationPropertyInfo.all.put_AccessMode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionAnimation

   procedure Initialize (this : in out CompositionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionAnimation, ICompositionAnimation_Ptr);
   begin
      if this.m_ICompositionAnimation /= null then
         if this.m_ICompositionAnimation.all /= null then
            RefCount := this.m_ICompositionAnimation.all.Release;
            Free (this.m_ICompositionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionAnimation

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionAnimation

   procedure ClearAllParameters
   (
      this : in out CompositionAnimation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionAnimation.all.ClearAllParameters;
   end;

   procedure ClearParameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.ClearParameter (HStr_key);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetColorParameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetColorParameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetMatrix3x2Parameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : Windows.Foundation.Numerics.Matrix3x2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetMatrix3x2Parameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetMatrix4x4Parameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : Windows.Foundation.Numerics.Matrix4x4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetMatrix4x4Parameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetQuaternionParameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetQuaternionParameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetReferenceParameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      compositionObject_p : Windows.UI.Composition.CompositionObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetReferenceParameter (HStr_key, compositionObject_p.m_ICompositionObject.all);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetScalarParameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetScalarParameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetVector2Parameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetVector2Parameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetVector3Parameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetVector3Parameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetVector4Parameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      Hr := this.m_ICompositionAnimation.all.SetVector4Parameter (HStr_key, value);
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure SetBooleanParameter
   (
      this : in out CompositionAnimation;
      key : WinRt.WString;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionAnimation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionAnimation_Interface, WinRt.Windows.UI.Composition.ICompositionAnimation2, WinRt.Windows.UI.Composition.IID_ICompositionAnimation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionAnimation.all);
      Hr := m_Interface.SetBooleanParameter (HStr_key, value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   function get_Target
   (
      this : in out CompositionAnimation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionAnimation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionAnimation_Interface, WinRt.Windows.UI.Composition.ICompositionAnimation2, WinRt.Windows.UI.Composition.IID_ICompositionAnimation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionAnimation.all);
      Hr := m_Interface.get_Target (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Target
   (
      this : in out CompositionAnimation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionAnimation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionAnimation_Interface, WinRt.Windows.UI.Composition.ICompositionAnimation2, WinRt.Windows.UI.Composition.IID_ICompositionAnimation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionAnimation.all);
      Hr := m_Interface.put_Target (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_InitialValueExpressions
   (
      this : in out CompositionAnimation
   )
   return WinRt.Windows.UI.Composition.InitialValueExpressionCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionAnimation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionAnimation_Interface, WinRt.Windows.UI.Composition.ICompositionAnimation3, WinRt.Windows.UI.Composition.IID_ICompositionAnimation3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.InitialValueExpressionCollection do
         m_Interface := QInterface (this.m_ICompositionAnimation.all);
         Hr := m_Interface.get_InitialValueExpressions (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure SetExpressionReferenceParameter
   (
      this : in out CompositionAnimation;
      parameterName : WinRt.WString;
      source : Windows.UI.Composition.IAnimationObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionAnimation4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_parameterName : WinRt.HString := To_HString (parameterName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionAnimation_Interface, WinRt.Windows.UI.Composition.ICompositionAnimation4, WinRt.Windows.UI.Composition.IID_ICompositionAnimation4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionAnimation.all);
      Hr := m_Interface.SetExpressionReferenceParameter (HStr_parameterName, source);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_parameterName);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyFrameAnimation

   procedure Initialize (this : in out KeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out KeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IKeyFrameAnimation, IKeyFrameAnimation_Ptr);
   begin
      if this.m_IKeyFrameAnimation /= null then
         if this.m_IKeyFrameAnimation.all /= null then
            RefCount := this.m_IKeyFrameAnimation.all.Release;
            Free (this.m_IKeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for KeyFrameAnimation

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyFrameAnimation

   function get_DelayTime
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IKeyFrameAnimation.all.get_DelayTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DelayTime
   (
      this : in out KeyFrameAnimation;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IKeyFrameAnimation.all.put_DelayTime (value);
   end;

   function get_Duration
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IKeyFrameAnimation.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Duration
   (
      this : in out KeyFrameAnimation;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IKeyFrameAnimation.all.put_Duration (value);
   end;

   function get_IterationBehavior
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Windows.UI.Composition.AnimationIterationBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationIterationBehavior;
   begin
      Hr := this.m_IKeyFrameAnimation.all.get_IterationBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IterationBehavior
   (
      this : in out KeyFrameAnimation;
      value : Windows.UI.Composition.AnimationIterationBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IKeyFrameAnimation.all.put_IterationBehavior (value);
   end;

   function get_IterationCount
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IKeyFrameAnimation.all.get_IterationCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IterationCount
   (
      this : in out KeyFrameAnimation;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IKeyFrameAnimation.all.put_IterationCount (value);
   end;

   function get_KeyFrameCount
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IKeyFrameAnimation.all.get_KeyFrameCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StopBehavior
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Windows.UI.Composition.AnimationStopBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationStopBehavior;
   begin
      Hr := this.m_IKeyFrameAnimation.all.get_StopBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StopBehavior
   (
      this : in out KeyFrameAnimation;
      value : Windows.UI.Composition.AnimationStopBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IKeyFrameAnimation.all.put_StopBehavior (value);
   end;

   procedure InsertExpressionKeyFrame
   (
      this : in out KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IKeyFrameAnimation.all.InsertExpressionKeyFrame (normalizedProgressKey, HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure InsertExpressionKeyFrame
   (
      this : in out KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : WinRt.WString;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IKeyFrameAnimation.all.InsertExpressionKeyFrame (normalizedProgressKey, HStr_value, easingFunction.m_ICompositionEasingFunction.all);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Direction
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Windows.UI.Composition.AnimationDirection is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IKeyFrameAnimation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationDirection;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IKeyFrameAnimation_Interface, WinRt.Windows.UI.Composition.IKeyFrameAnimation2, WinRt.Windows.UI.Composition.IID_IKeyFrameAnimation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IKeyFrameAnimation.all);
      Hr := m_Interface.get_Direction (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Direction
   (
      this : in out KeyFrameAnimation;
      value : Windows.UI.Composition.AnimationDirection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IKeyFrameAnimation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IKeyFrameAnimation_Interface, WinRt.Windows.UI.Composition.IKeyFrameAnimation2, WinRt.Windows.UI.Composition.IID_IKeyFrameAnimation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IKeyFrameAnimation.all);
      Hr := m_Interface.put_Direction (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DelayBehavior
   (
      this : in out KeyFrameAnimation
   )
   return WinRt.Windows.UI.Composition.AnimationDelayBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IKeyFrameAnimation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationDelayBehavior;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IKeyFrameAnimation_Interface, WinRt.Windows.UI.Composition.IKeyFrameAnimation3, WinRt.Windows.UI.Composition.IID_IKeyFrameAnimation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IKeyFrameAnimation.all);
      Hr := m_Interface.get_DelayBehavior (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DelayBehavior
   (
      this : in out KeyFrameAnimation;
      value : Windows.UI.Composition.AnimationDelayBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IKeyFrameAnimation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IKeyFrameAnimation_Interface, WinRt.Windows.UI.Composition.IKeyFrameAnimation3, WinRt.Windows.UI.Composition.IID_IKeyFrameAnimation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IKeyFrameAnimation.all);
      Hr := m_Interface.put_DelayBehavior (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BooleanKeyFrameAnimation

   procedure Initialize (this : in out BooleanKeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out BooleanKeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBooleanKeyFrameAnimation, IBooleanKeyFrameAnimation_Ptr);
   begin
      if this.m_IBooleanKeyFrameAnimation /= null then
         if this.m_IBooleanKeyFrameAnimation.all /= null then
            RefCount := this.m_IBooleanKeyFrameAnimation.all.Release;
            Free (this.m_IBooleanKeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BooleanKeyFrameAnimation

   procedure InsertKeyFrame
   (
      this : in out BooleanKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBooleanKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NaturalMotionAnimation

   procedure Initialize (this : in out NaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out NaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INaturalMotionAnimation, INaturalMotionAnimation_Ptr);
   begin
      if this.m_INaturalMotionAnimation /= null then
         if this.m_INaturalMotionAnimation.all /= null then
            RefCount := this.m_INaturalMotionAnimation.all.Release;
            Free (this.m_INaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NaturalMotionAnimation

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NaturalMotionAnimation

   function get_DelayBehavior
   (
      this : in out NaturalMotionAnimation
   )
   return WinRt.Windows.UI.Composition.AnimationDelayBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationDelayBehavior;
   begin
      Hr := this.m_INaturalMotionAnimation.all.get_DelayBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DelayBehavior
   (
      this : in out NaturalMotionAnimation;
      value : Windows.UI.Composition.AnimationDelayBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INaturalMotionAnimation.all.put_DelayBehavior (value);
   end;

   function get_DelayTime
   (
      this : in out NaturalMotionAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_INaturalMotionAnimation.all.get_DelayTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DelayTime
   (
      this : in out NaturalMotionAnimation;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INaturalMotionAnimation.all.put_DelayTime (value);
   end;

   function get_StopBehavior
   (
      this : in out NaturalMotionAnimation
   )
   return WinRt.Windows.UI.Composition.AnimationStopBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.AnimationStopBehavior;
   begin
      Hr := this.m_INaturalMotionAnimation.all.get_StopBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StopBehavior
   (
      this : in out NaturalMotionAnimation;
      value : Windows.UI.Composition.AnimationStopBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INaturalMotionAnimation.all.put_StopBehavior (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScalarNaturalMotionAnimation

   procedure Initialize (this : in out ScalarNaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScalarNaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScalarNaturalMotionAnimation, IScalarNaturalMotionAnimation_Ptr);
   begin
      if this.m_IScalarNaturalMotionAnimation /= null then
         if this.m_IScalarNaturalMotionAnimation.all /= null then
            RefCount := this.m_IScalarNaturalMotionAnimation.all.Release;
            Free (this.m_IScalarNaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScalarNaturalMotionAnimation

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScalarNaturalMotionAnimation

   function get_FinalValue
   (
      this : in out ScalarNaturalMotionAnimation
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IScalarNaturalMotionAnimation.all.get_FinalValue (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_FinalValue
   (
      this : in out ScalarNaturalMotionAnimation;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScalarNaturalMotionAnimation.all.put_FinalValue (value);
   end;

   function get_InitialValue
   (
      this : in out ScalarNaturalMotionAnimation
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IScalarNaturalMotionAnimation.all.get_InitialValue (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InitialValue
   (
      this : in out ScalarNaturalMotionAnimation;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScalarNaturalMotionAnimation.all.put_InitialValue (value);
   end;

   function get_InitialVelocity
   (
      this : in out ScalarNaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IScalarNaturalMotionAnimation.all.get_InitialVelocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InitialVelocity
   (
      this : in out ScalarNaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScalarNaturalMotionAnimation.all.put_InitialVelocity (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BounceScalarNaturalMotionAnimation

   procedure Initialize (this : in out BounceScalarNaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out BounceScalarNaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBounceScalarNaturalMotionAnimation, IBounceScalarNaturalMotionAnimation_Ptr);
   begin
      if this.m_IBounceScalarNaturalMotionAnimation /= null then
         if this.m_IBounceScalarNaturalMotionAnimation.all /= null then
            RefCount := this.m_IBounceScalarNaturalMotionAnimation.all.Release;
            Free (this.m_IBounceScalarNaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BounceScalarNaturalMotionAnimation

   function get_Acceleration
   (
      this : in out BounceScalarNaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IBounceScalarNaturalMotionAnimation.all.get_Acceleration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Acceleration
   (
      this : in out BounceScalarNaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBounceScalarNaturalMotionAnimation.all.put_Acceleration (value);
   end;

   function get_Restitution
   (
      this : in out BounceScalarNaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IBounceScalarNaturalMotionAnimation.all.get_Restitution (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Restitution
   (
      this : in out BounceScalarNaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBounceScalarNaturalMotionAnimation.all.put_Restitution (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Vector2NaturalMotionAnimation

   procedure Initialize (this : in out Vector2NaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out Vector2NaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVector2NaturalMotionAnimation, IVector2NaturalMotionAnimation_Ptr);
   begin
      if this.m_IVector2NaturalMotionAnimation /= null then
         if this.m_IVector2NaturalMotionAnimation.all /= null then
            RefCount := this.m_IVector2NaturalMotionAnimation.all.Release;
            Free (this.m_IVector2NaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Vector2NaturalMotionAnimation

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Vector2NaturalMotionAnimation

   function get_FinalValue
   (
      this : in out Vector2NaturalMotionAnimation
   )
   return IReference_Vector2.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector2.Kind;
   begin
      Hr := this.m_IVector2NaturalMotionAnimation.all.get_FinalValue (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector2 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_FinalValue
   (
      this : in out Vector2NaturalMotionAnimation;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector2NaturalMotionAnimation.all.put_FinalValue (value);
   end;

   function get_InitialValue
   (
      this : in out Vector2NaturalMotionAnimation
   )
   return IReference_Vector2.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector2.Kind;
   begin
      Hr := this.m_IVector2NaturalMotionAnimation.all.get_InitialValue (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector2 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InitialValue
   (
      this : in out Vector2NaturalMotionAnimation;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector2NaturalMotionAnimation.all.put_InitialValue (value);
   end;

   function get_InitialVelocity
   (
      this : in out Vector2NaturalMotionAnimation
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_IVector2NaturalMotionAnimation.all.get_InitialVelocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InitialVelocity
   (
      this : in out Vector2NaturalMotionAnimation;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector2NaturalMotionAnimation.all.put_InitialVelocity (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BounceVector2NaturalMotionAnimation

   procedure Initialize (this : in out BounceVector2NaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out BounceVector2NaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBounceVector2NaturalMotionAnimation, IBounceVector2NaturalMotionAnimation_Ptr);
   begin
      if this.m_IBounceVector2NaturalMotionAnimation /= null then
         if this.m_IBounceVector2NaturalMotionAnimation.all /= null then
            RefCount := this.m_IBounceVector2NaturalMotionAnimation.all.Release;
            Free (this.m_IBounceVector2NaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BounceVector2NaturalMotionAnimation

   function get_Acceleration
   (
      this : in out BounceVector2NaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IBounceVector2NaturalMotionAnimation.all.get_Acceleration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Acceleration
   (
      this : in out BounceVector2NaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBounceVector2NaturalMotionAnimation.all.put_Acceleration (value);
   end;

   function get_Restitution
   (
      this : in out BounceVector2NaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IBounceVector2NaturalMotionAnimation.all.get_Restitution (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Restitution
   (
      this : in out BounceVector2NaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBounceVector2NaturalMotionAnimation.all.put_Restitution (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Vector3NaturalMotionAnimation

   procedure Initialize (this : in out Vector3NaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out Vector3NaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVector3NaturalMotionAnimation, IVector3NaturalMotionAnimation_Ptr);
   begin
      if this.m_IVector3NaturalMotionAnimation /= null then
         if this.m_IVector3NaturalMotionAnimation.all /= null then
            RefCount := this.m_IVector3NaturalMotionAnimation.all.Release;
            Free (this.m_IVector3NaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Vector3NaturalMotionAnimation

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Vector3NaturalMotionAnimation

   function get_FinalValue
   (
      this : in out Vector3NaturalMotionAnimation
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
   begin
      Hr := this.m_IVector3NaturalMotionAnimation.all.get_FinalValue (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_FinalValue
   (
      this : in out Vector3NaturalMotionAnimation;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector3NaturalMotionAnimation.all.put_FinalValue (value);
   end;

   function get_InitialValue
   (
      this : in out Vector3NaturalMotionAnimation
   )
   return IReference_Vector3.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Vector3.Kind;
   begin
      Hr := this.m_IVector3NaturalMotionAnimation.all.get_InitialValue (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Vector3 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InitialValue
   (
      this : in out Vector3NaturalMotionAnimation;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector3NaturalMotionAnimation.all.put_InitialValue (value);
   end;

   function get_InitialVelocity
   (
      this : in out Vector3NaturalMotionAnimation
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IVector3NaturalMotionAnimation.all.get_InitialVelocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InitialVelocity
   (
      this : in out Vector3NaturalMotionAnimation;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector3NaturalMotionAnimation.all.put_InitialVelocity (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BounceVector3NaturalMotionAnimation

   procedure Initialize (this : in out BounceVector3NaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out BounceVector3NaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBounceVector3NaturalMotionAnimation, IBounceVector3NaturalMotionAnimation_Ptr);
   begin
      if this.m_IBounceVector3NaturalMotionAnimation /= null then
         if this.m_IBounceVector3NaturalMotionAnimation.all /= null then
            RefCount := this.m_IBounceVector3NaturalMotionAnimation.all.Release;
            Free (this.m_IBounceVector3NaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BounceVector3NaturalMotionAnimation

   function get_Acceleration
   (
      this : in out BounceVector3NaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IBounceVector3NaturalMotionAnimation.all.get_Acceleration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Acceleration
   (
      this : in out BounceVector3NaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBounceVector3NaturalMotionAnimation.all.put_Acceleration (value);
   end;

   function get_Restitution
   (
      this : in out BounceVector3NaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IBounceVector3NaturalMotionAnimation.all.get_Restitution (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Restitution
   (
      this : in out BounceVector3NaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBounceVector3NaturalMotionAnimation.all.put_Restitution (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ColorKeyFrameAnimation

   procedure Initialize (this : in out ColorKeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ColorKeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColorKeyFrameAnimation, IColorKeyFrameAnimation_Ptr);
   begin
      if this.m_IColorKeyFrameAnimation /= null then
         if this.m_IColorKeyFrameAnimation.all /= null then
            RefCount := this.m_IColorKeyFrameAnimation.all.Release;
            Free (this.m_IColorKeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ColorKeyFrameAnimation

   function get_InterpolationColorSpace
   (
      this : in out ColorKeyFrameAnimation
   )
   return WinRt.Windows.UI.Composition.CompositionColorSpace is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionColorSpace;
   begin
      Hr := this.m_IColorKeyFrameAnimation.all.get_InterpolationColorSpace (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InterpolationColorSpace
   (
      this : in out ColorKeyFrameAnimation;
      value : Windows.UI.Composition.CompositionColorSpace
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorKeyFrameAnimation.all.put_InterpolationColorSpace (value);
   end;

   procedure InsertKeyFrame
   (
      this : in out ColorKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value);
   end;

   procedure InsertKeyFrame
   (
      this : in out ColorKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.UI.Color;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value, easingFunction.m_ICompositionEasingFunction.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionAnimationGroup

   procedure Initialize (this : in out CompositionAnimationGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionAnimationGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionAnimationGroup, ICompositionAnimationGroup_Ptr);
   begin
      if this.m_ICompositionAnimationGroup /= null then
         if this.m_ICompositionAnimationGroup.all /= null then
            RefCount := this.m_ICompositionAnimationGroup.all.Release;
            Free (this.m_ICompositionAnimationGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionAnimationGroup

   function get_Count
   (
      this : in out CompositionAnimationGroup
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICompositionAnimationGroup.all.get_Count (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Add
   (
      this : in out CompositionAnimationGroup;
      value : Windows.UI.Composition.CompositionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionAnimationGroup.all.Add (value.m_ICompositionAnimation.all);
   end;

   procedure Remove
   (
      this : in out CompositionAnimationGroup;
      value : Windows.UI.Composition.CompositionAnimation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionAnimationGroup.all.Remove (value.m_ICompositionAnimation.all);
   end;

   procedure RemoveAll
   (
      this : in out CompositionAnimationGroup
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionAnimationGroup.all.RemoveAll;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionAnimation>
   function First
   (
      this : in out CompositionAnimationGroup
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ICompositionAnimation.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (213227842, 50931, 22623, (154, 146, 180, 126, 141, 211, 142, 191 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionAnimationGroup_Interface, IIterable_ICompositionAnimation.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionAnimationGroup.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionBrush

   procedure Initialize (this : in out CompositionBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionBrush, ICompositionBrush_Ptr);
   begin
      if this.m_ICompositionBrush /= null then
         if this.m_ICompositionBrush.all /= null then
            RefCount := this.m_ICompositionBrush.all.Release;
            Free (this.m_ICompositionBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionBrush

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionBrush

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionBackdropBrush

   procedure Initialize (this : in out CompositionBackdropBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionBackdropBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionBackdropBrush, ICompositionBackdropBrush_Ptr);
   begin
      if this.m_ICompositionBackdropBrush /= null then
         if this.m_ICompositionBackdropBrush.all /= null then
            RefCount := this.m_ICompositionBackdropBrush.all.Release;
            Free (this.m_ICompositionBackdropBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionBackdropBrush

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionBatchCompletedEventArgs

   procedure Initialize (this : in out CompositionBatchCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionBatchCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionBatchCompletedEventArgs, ICompositionBatchCompletedEventArgs_Ptr);
   begin
      if this.m_ICompositionBatchCompletedEventArgs /= null then
         if this.m_ICompositionBatchCompletedEventArgs.all /= null then
            RefCount := this.m_ICompositionBatchCompletedEventArgs.all.Release;
            Free (this.m_ICompositionBatchCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionBatchCompletedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionCapabilities

   procedure Initialize (this : in out CompositionCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionCapabilities, ICompositionCapabilities_Ptr);
   begin
      if this.m_ICompositionCapabilities /= null then
         if this.m_ICompositionCapabilities.all /= null then
            RefCount := this.m_ICompositionCapabilities.all.Release;
            Free (this.m_ICompositionCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositionCapabilities

   function GetForCurrentView
   return WinRt.Windows.UI.Composition.CompositionCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.CompositionCapabilities");
      m_Factory        : access WinRt.Windows.UI.Composition.ICompositionCapabilitiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionCapabilities;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionCapabilities do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositionCapabilitiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ICompositionCapabilities := new Windows.UI.Composition.ICompositionCapabilities;
            Retval.m_ICompositionCapabilities.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionCapabilities

   function AreEffectsSupported
   (
      this : in out CompositionCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionCapabilities.all.AreEffectsSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function AreEffectsFast
   (
      this : in out CompositionCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionCapabilities.all.AreEffectsFast (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Changed
   (
      this : in out CompositionCapabilities;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICompositionCapabilities.all.add_Changed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Changed
   (
      this : in out CompositionCapabilities;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionCapabilities.all.remove_Changed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionClip

   procedure Initialize (this : in out CompositionClip) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionClip) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionClip, ICompositionClip_Ptr);
   begin
      if this.m_ICompositionClip /= null then
         if this.m_ICompositionClip.all /= null then
            RefCount := this.m_ICompositionClip.all.Release;
            Free (this.m_ICompositionClip);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionClip

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionClip

   function get_AnchorPoint
   (
      this : in out CompositionClip
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.get_AnchorPoint (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AnchorPoint
   (
      this : in out CompositionClip;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.put_AnchorPoint (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CenterPoint
   (
      this : in out CompositionClip
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.get_CenterPoint (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CenterPoint
   (
      this : in out CompositionClip;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.put_CenterPoint (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Offset
   (
      this : in out CompositionClip
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.get_Offset (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionClip;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.put_Offset (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RotationAngle
   (
      this : in out CompositionClip
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.get_RotationAngle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RotationAngle
   (
      this : in out CompositionClip;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.put_RotationAngle (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RotationAngleInDegrees
   (
      this : in out CompositionClip
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.get_RotationAngleInDegrees (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RotationAngleInDegrees
   (
      this : in out CompositionClip;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.put_RotationAngleInDegrees (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Scale
   (
      this : in out CompositionClip
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.get_Scale (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Scale
   (
      this : in out CompositionClip;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.put_Scale (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransformMatrix
   (
      this : in out CompositionClip
   )
   return WinRt.Windows.Foundation.Numerics.Matrix3x2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix3x2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.get_TransformMatrix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TransformMatrix
   (
      this : in out CompositionClip;
      value : Windows.Foundation.Numerics.Matrix3x2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionClip2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionClip_Interface, WinRt.Windows.UI.Composition.ICompositionClip2, WinRt.Windows.UI.Composition.IID_ICompositionClip2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionClip.all);
      Hr := m_Interface.put_TransformMatrix (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionColorBrush

   procedure Initialize (this : in out CompositionColorBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionColorBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionColorBrush, ICompositionColorBrush_Ptr);
   begin
      if this.m_ICompositionColorBrush /= null then
         if this.m_ICompositionColorBrush.all /= null then
            RefCount := this.m_ICompositionColorBrush.all.Release;
            Free (this.m_ICompositionColorBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionColorBrush

   function get_Color
   (
      this : in out CompositionColorBrush
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ICompositionColorBrush.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out CompositionColorBrush;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionColorBrush.all.put_Color (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionColorGradientStop

   procedure Initialize (this : in out CompositionColorGradientStop) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionColorGradientStop) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionColorGradientStop, ICompositionColorGradientStop_Ptr);
   begin
      if this.m_ICompositionColorGradientStop /= null then
         if this.m_ICompositionColorGradientStop.all /= null then
            RefCount := this.m_ICompositionColorGradientStop.all.Release;
            Free (this.m_ICompositionColorGradientStop);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionColorGradientStop

   function get_Color
   (
      this : in out CompositionColorGradientStop
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ICompositionColorGradientStop.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out CompositionColorGradientStop;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionColorGradientStop.all.put_Color (value);
   end;

   function get_Offset
   (
      this : in out CompositionColorGradientStop
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionColorGradientStop.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionColorGradientStop;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionColorGradientStop.all.put_Offset (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionColorGradientStopCollection

   procedure Initialize (this : in out CompositionColorGradientStopCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionColorGradientStopCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionColorGradientStopCollection, ICompositionColorGradientStopCollection_Ptr);
   begin
      if this.m_ICompositionColorGradientStopCollection /= null then
         if this.m_ICompositionColorGradientStopCollection.all /= null then
            RefCount := this.m_ICompositionColorGradientStopCollection.all.Release;
            Free (this.m_ICompositionColorGradientStopCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionColorGradientStopCollection

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionColorGradientStop>
   function First
   (
      this : in out CompositionColorGradientStopCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (254606017, 52668, 23630, (167, 210, 163, 145, 79, 182, 52, 38 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IIterable_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Composition.CompositionColorGradientStop>
   function GetAt
   (
      this : in out CompositionColorGradientStopCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Composition.CompositionColorGradientStop'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionColorGradientStop;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionColorGradientStop do
         m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionColorGradientStop := new Windows.UI.Composition.ICompositionColorGradientStop;
         Retval.m_ICompositionColorGradientStop.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out CompositionColorGradientStopCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out CompositionColorGradientStopCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out CompositionColorGradientStopCollection;
      value : Windows.UI.Composition.CompositionColorGradientStop'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.IndexOf (value.m_ICompositionColorGradientStop.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out CompositionColorGradientStopCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Composition.CompositionColorGradientStop'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.SetAt (index, value.m_ICompositionColorGradientStop.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out CompositionColorGradientStopCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Composition.CompositionColorGradientStop'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.InsertAt (index, value.m_ICompositionColorGradientStop.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out CompositionColorGradientStopCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out CompositionColorGradientStopCollection;
      value : Windows.UI.Composition.CompositionColorGradientStop'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.Append (value.m_ICompositionColorGradientStop.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out CompositionColorGradientStopCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out CompositionColorGradientStopCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out CompositionColorGradientStopCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Composition.ICompositionColorGradientStop_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out CompositionColorGradientStopCollection;
      items : Windows.UI.Composition.ICompositionColorGradientStop_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionColorGradientStop.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3207467134, 62427, 22221, (145, 237, 193, 18, 148, 6, 213, 82 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionColorGradientStopCollection_Interface, IVector_ICompositionColorGradientStop.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_ICompositionColorGradientStopCollection.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionCommitBatch

   procedure Initialize (this : in out CompositionCommitBatch) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionCommitBatch) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionCommitBatch, ICompositionCommitBatch_Ptr);
   begin
      if this.m_ICompositionCommitBatch /= null then
         if this.m_ICompositionCommitBatch.all /= null then
            RefCount := this.m_ICompositionCommitBatch.all.Release;
            Free (this.m_ICompositionCommitBatch);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionCommitBatch

   function get_IsActive
   (
      this : in out CompositionCommitBatch
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionCommitBatch.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsEnded
   (
      this : in out CompositionCommitBatch
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionCommitBatch.all.get_IsEnded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Completed
   (
      this : in out CompositionCommitBatch;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICompositionCommitBatch.all.add_Completed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out CompositionCommitBatch;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionCommitBatch.all.remove_Completed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionShape

   procedure Initialize (this : in out CompositionShape) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionShape) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionShape, ICompositionShape_Ptr);
   begin
      if this.m_ICompositionShape /= null then
         if this.m_ICompositionShape.all /= null then
            RefCount := this.m_ICompositionShape.all.Release;
            Free (this.m_ICompositionShape);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionShape

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionShape

   function get_CenterPoint
   (
      this : in out CompositionShape
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionShape.all.get_CenterPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterPoint
   (
      this : in out CompositionShape;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionShape.all.put_CenterPoint (value);
   end;

   function get_Offset
   (
      this : in out CompositionShape
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionShape.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionShape;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionShape.all.put_Offset (value);
   end;

   function get_RotationAngle
   (
      this : in out CompositionShape
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionShape.all.get_RotationAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAngle
   (
      this : in out CompositionShape;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionShape.all.put_RotationAngle (value);
   end;

   function get_RotationAngleInDegrees
   (
      this : in out CompositionShape
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionShape.all.get_RotationAngleInDegrees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAngleInDegrees
   (
      this : in out CompositionShape;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionShape.all.put_RotationAngleInDegrees (value);
   end;

   function get_Scale
   (
      this : in out CompositionShape
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionShape.all.get_Scale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Scale
   (
      this : in out CompositionShape;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionShape.all.put_Scale (value);
   end;

   function get_TransformMatrix
   (
      this : in out CompositionShape
   )
   return WinRt.Windows.Foundation.Numerics.Matrix3x2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix3x2;
   begin
      Hr := this.m_ICompositionShape.all.get_TransformMatrix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TransformMatrix
   (
      this : in out CompositionShape;
      value : Windows.Foundation.Numerics.Matrix3x2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionShape.all.put_TransformMatrix (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionContainerShape

   procedure Initialize (this : in out CompositionContainerShape) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionContainerShape) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionContainerShape, ICompositionContainerShape_Ptr);
   begin
      if this.m_ICompositionContainerShape /= null then
         if this.m_ICompositionContainerShape.all /= null then
            RefCount := this.m_ICompositionContainerShape.all.Release;
            Free (this.m_ICompositionContainerShape);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionContainerShape

   function get_Shapes
   (
      this : in out CompositionContainerShape
   )
   return WinRt.Windows.UI.Composition.CompositionShapeCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionShapeCollection do
         Hr := this.m_ICompositionContainerShape.all.get_Shapes (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionDrawingSurface

   procedure Initialize (this : in out CompositionDrawingSurface) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionDrawingSurface) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionDrawingSurface, ICompositionDrawingSurface_Ptr);
   begin
      if this.m_ICompositionDrawingSurface /= null then
         if this.m_ICompositionDrawingSurface.all /= null then
            RefCount := this.m_ICompositionDrawingSurface.all.Release;
            Free (this.m_ICompositionDrawingSurface);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionDrawingSurface

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionDrawingSurface

   function get_AlphaMode
   (
      this : in out CompositionDrawingSurface
   )
   return WinRt.Windows.Graphics.DirectX.DirectXAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXAlphaMode;
   begin
      Hr := this.m_ICompositionDrawingSurface.all.get_AlphaMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelFormat
   (
      this : in out CompositionDrawingSurface
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_ICompositionDrawingSurface.all.get_PixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out CompositionDrawingSurface
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ICompositionDrawingSurface.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SizeInt32
   (
      this : in out CompositionDrawingSurface
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionDrawingSurface2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionDrawingSurface_Interface, WinRt.Windows.UI.Composition.ICompositionDrawingSurface2, WinRt.Windows.UI.Composition.IID_ICompositionDrawingSurface2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionDrawingSurface.all);
      Hr := m_Interface.get_SizeInt32 (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Resize
   (
      this : in out CompositionDrawingSurface;
      sizePixels : Windows.Graphics.SizeInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionDrawingSurface2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionDrawingSurface_Interface, WinRt.Windows.UI.Composition.ICompositionDrawingSurface2, WinRt.Windows.UI.Composition.IID_ICompositionDrawingSurface2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionDrawingSurface.all);
      Hr := m_Interface.Resize (sizePixels);
      m_RefCount := m_Interface.Release;
   end;

   procedure Scroll
   (
      this : in out CompositionDrawingSurface;
      offset : Windows.Graphics.PointInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionDrawingSurface2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionDrawingSurface_Interface, WinRt.Windows.UI.Composition.ICompositionDrawingSurface2, WinRt.Windows.UI.Composition.IID_ICompositionDrawingSurface2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionDrawingSurface.all);
      Hr := m_Interface.Scroll (offset);
      m_RefCount := m_Interface.Release;
   end;

   procedure Scroll
   (
      this : in out CompositionDrawingSurface;
      offset : Windows.Graphics.PointInt32;
      scrollRect : Windows.Graphics.RectInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionDrawingSurface2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionDrawingSurface_Interface, WinRt.Windows.UI.Composition.ICompositionDrawingSurface2, WinRt.Windows.UI.Composition.IID_ICompositionDrawingSurface2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionDrawingSurface.all);
      Hr := m_Interface.Scroll (offset, scrollRect);
      m_RefCount := m_Interface.Release;
   end;

   procedure ScrollWithClip
   (
      this : in out CompositionDrawingSurface;
      offset : Windows.Graphics.PointInt32;
      clipRect : Windows.Graphics.RectInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionDrawingSurface2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionDrawingSurface_Interface, WinRt.Windows.UI.Composition.ICompositionDrawingSurface2, WinRt.Windows.UI.Composition.IID_ICompositionDrawingSurface2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionDrawingSurface.all);
      Hr := m_Interface.ScrollWithClip (offset, clipRect);
      m_RefCount := m_Interface.Release;
   end;

   procedure ScrollWithClip
   (
      this : in out CompositionDrawingSurface;
      offset : Windows.Graphics.PointInt32;
      clipRect : Windows.Graphics.RectInt32;
      scrollRect : Windows.Graphics.RectInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionDrawingSurface2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionDrawingSurface_Interface, WinRt.Windows.UI.Composition.ICompositionDrawingSurface2, WinRt.Windows.UI.Composition.IID_ICompositionDrawingSurface2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionDrawingSurface.all);
      Hr := m_Interface.ScrollWithClip (offset, clipRect, scrollRect);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionEasingFunction

   procedure Initialize (this : in out CompositionEasingFunction) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionEasingFunction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionEasingFunction, ICompositionEasingFunction_Ptr);
   begin
      if this.m_ICompositionEasingFunction /= null then
         if this.m_ICompositionEasingFunction.all /= null then
            RefCount := this.m_ICompositionEasingFunction.all.Release;
            Free (this.m_ICompositionEasingFunction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionEasingFunction

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionEasingFunction

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionEffectBrush

   procedure Initialize (this : in out CompositionEffectBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionEffectBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionEffectBrush, ICompositionEffectBrush_Ptr);
   begin
      if this.m_ICompositionEffectBrush /= null then
         if this.m_ICompositionEffectBrush.all /= null then
            RefCount := this.m_ICompositionEffectBrush.all.Release;
            Free (this.m_ICompositionEffectBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionEffectBrush

   function GetSourceParameter
   (
      this : in out CompositionEffectBrush;
      name : WinRt.WString
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ICompositionEffectBrush.all.GetSourceParameter (HStr_name, m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   procedure SetSourceParameter
   (
      this : in out CompositionEffectBrush;
      name : WinRt.WString;
      source : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_ICompositionEffectBrush.all.SetSourceParameter (HStr_name, source.m_ICompositionBrush.all);
      Hr := WindowsDeleteString (HStr_name);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionEffectFactory

   procedure Initialize (this : in out CompositionEffectFactory) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionEffectFactory) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionEffectFactory, ICompositionEffectFactory_Ptr);
   begin
      if this.m_ICompositionEffectFactory /= null then
         if this.m_ICompositionEffectFactory.all /= null then
            RefCount := this.m_ICompositionEffectFactory.all.Release;
            Free (this.m_ICompositionEffectFactory);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionEffectFactory

   function CreateBrush
   (
      this : in out CompositionEffectFactory
   )
   return WinRt.Windows.UI.Composition.CompositionEffectBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionEffectBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionEffectBrush do
         Hr := this.m_ICompositionEffectFactory.all.CreateBrush (m_ComRetVal'Access);
         Retval.m_ICompositionEffectBrush := new Windows.UI.Composition.ICompositionEffectBrush;
         Retval.m_ICompositionEffectBrush.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out CompositionEffectFactory
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_ICompositionEffectFactory.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LoadStatus
   (
      this : in out CompositionEffectFactory
   )
   return WinRt.Windows.UI.Composition.CompositionEffectFactoryLoadStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionEffectFactoryLoadStatus;
   begin
      Hr := this.m_ICompositionEffectFactory.all.get_LoadStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionEffectSourceParameter

   procedure Initialize (this : in out CompositionEffectSourceParameter) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionEffectSourceParameter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionEffectSourceParameter, ICompositionEffectSourceParameter_Ptr);
   begin
      if this.m_ICompositionEffectSourceParameter /= null then
         if this.m_ICompositionEffectSourceParameter.all /= null then
            RefCount := this.m_ICompositionEffectSourceParameter.all.Release;
            Free (this.m_ICompositionEffectSourceParameter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionEffectSourceParameter

   function Constructor
   (
      name : WinRt.WString
   )
   return CompositionEffectSourceParameter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Composition.CompositionEffectSourceParameter");
      m_Factory    : access ICompositionEffectSourceParameterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Composition.ICompositionEffectSourceParameter;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : CompositionEffectSourceParameter do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositionEffectSourceParameterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_name, m_ComRetVal'Access);
            Retval.m_ICompositionEffectSourceParameter := new Windows.UI.Composition.ICompositionEffectSourceParameter;
            Retval.m_ICompositionEffectSourceParameter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionEffectSourceParameter

   function get_Name
   (
      this : in out CompositionEffectSourceParameter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICompositionEffectSourceParameter.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionGeometry

   procedure Initialize (this : in out CompositionGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionGeometry, ICompositionGeometry_Ptr);
   begin
      if this.m_ICompositionGeometry /= null then
         if this.m_ICompositionGeometry.all /= null then
            RefCount := this.m_ICompositionGeometry.all.Release;
            Free (this.m_ICompositionGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionGeometry

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionGeometry

   function get_TrimEnd
   (
      this : in out CompositionGeometry
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionGeometry.all.get_TrimEnd (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimEnd
   (
      this : in out CompositionGeometry;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGeometry.all.put_TrimEnd (value);
   end;

   function get_TrimOffset
   (
      this : in out CompositionGeometry
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionGeometry.all.get_TrimOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimOffset
   (
      this : in out CompositionGeometry;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGeometry.all.put_TrimOffset (value);
   end;

   function get_TrimStart
   (
      this : in out CompositionGeometry
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionGeometry.all.get_TrimStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimStart
   (
      this : in out CompositionGeometry;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGeometry.all.put_TrimStart (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionEllipseGeometry

   procedure Initialize (this : in out CompositionEllipseGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionEllipseGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionEllipseGeometry, ICompositionEllipseGeometry_Ptr);
   begin
      if this.m_ICompositionEllipseGeometry /= null then
         if this.m_ICompositionEllipseGeometry.all /= null then
            RefCount := this.m_ICompositionEllipseGeometry.all.Release;
            Free (this.m_ICompositionEllipseGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionEllipseGeometry

   function get_Center
   (
      this : in out CompositionEllipseGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionEllipseGeometry.all.get_Center (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Center
   (
      this : in out CompositionEllipseGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionEllipseGeometry.all.put_Center (value);
   end;

   function get_Radius
   (
      this : in out CompositionEllipseGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionEllipseGeometry.all.get_Radius (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Radius
   (
      this : in out CompositionEllipseGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionEllipseGeometry.all.put_Radius (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionGeometricClip

   procedure Initialize (this : in out CompositionGeometricClip) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionGeometricClip) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionGeometricClip, ICompositionGeometricClip_Ptr);
   begin
      if this.m_ICompositionGeometricClip /= null then
         if this.m_ICompositionGeometricClip.all /= null then
            RefCount := this.m_ICompositionGeometricClip.all.Release;
            Free (this.m_ICompositionGeometricClip);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionGeometricClip

   function get_Geometry
   (
      this : in out CompositionGeometricClip
   )
   return WinRt.Windows.UI.Composition.CompositionGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionGeometry;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionGeometry do
         Hr := this.m_ICompositionGeometricClip.all.get_Geometry (m_ComRetVal'Access);
         Retval.m_ICompositionGeometry := new Windows.UI.Composition.ICompositionGeometry;
         Retval.m_ICompositionGeometry.all := m_ComRetVal;
      end return;
   end;

   procedure put_Geometry
   (
      this : in out CompositionGeometricClip;
      value : Windows.UI.Composition.CompositionGeometry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGeometricClip.all.put_Geometry (value.m_ICompositionGeometry.all);
   end;

   function get_ViewBox
   (
      this : in out CompositionGeometricClip
   )
   return WinRt.Windows.UI.Composition.CompositionViewBox'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionViewBox;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionViewBox do
         Hr := this.m_ICompositionGeometricClip.all.get_ViewBox (m_ComRetVal'Access);
         Retval.m_ICompositionViewBox := new Windows.UI.Composition.ICompositionViewBox;
         Retval.m_ICompositionViewBox.all := m_ComRetVal;
      end return;
   end;

   procedure put_ViewBox
   (
      this : in out CompositionGeometricClip;
      value : Windows.UI.Composition.CompositionViewBox'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGeometricClip.all.put_ViewBox (value.m_ICompositionViewBox.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionGradientBrush

   procedure Initialize (this : in out CompositionGradientBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionGradientBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionGradientBrush, ICompositionGradientBrush_Ptr);
   begin
      if this.m_ICompositionGradientBrush /= null then
         if this.m_ICompositionGradientBrush.all /= null then
            RefCount := this.m_ICompositionGradientBrush.all.Release;
            Free (this.m_ICompositionGradientBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionGradientBrush

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionGradientBrush

   function get_AnchorPoint
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_AnchorPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AnchorPoint
   (
      this : in out CompositionGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_AnchorPoint (value);
   end;

   function get_CenterPoint
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_CenterPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterPoint
   (
      this : in out CompositionGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_CenterPoint (value);
   end;

   function get_ColorStops
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.UI.Composition.CompositionColorGradientStopCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionColorGradientStopCollection;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionColorGradientStopCollection do
         Hr := this.m_ICompositionGradientBrush.all.get_ColorStops (m_ComRetVal'Access);
         Retval.m_ICompositionColorGradientStopCollection := new Windows.UI.Composition.ICompositionColorGradientStopCollection;
         Retval.m_ICompositionColorGradientStopCollection.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendMode
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.UI.Composition.CompositionGradientExtendMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGradientExtendMode;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_ExtendMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ExtendMode
   (
      this : in out CompositionGradientBrush;
      value : Windows.UI.Composition.CompositionGradientExtendMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_ExtendMode (value);
   end;

   function get_InterpolationSpace
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.UI.Composition.CompositionColorSpace is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionColorSpace;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_InterpolationSpace (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InterpolationSpace
   (
      this : in out CompositionGradientBrush;
      value : Windows.UI.Composition.CompositionColorSpace
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_InterpolationSpace (value);
   end;

   function get_Offset
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_Offset (value);
   end;

   function get_RotationAngle
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_RotationAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAngle
   (
      this : in out CompositionGradientBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_RotationAngle (value);
   end;

   function get_RotationAngleInDegrees
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_RotationAngleInDegrees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAngleInDegrees
   (
      this : in out CompositionGradientBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_RotationAngleInDegrees (value);
   end;

   function get_Scale
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_Scale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Scale
   (
      this : in out CompositionGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_Scale (value);
   end;

   function get_TransformMatrix
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Matrix3x2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix3x2;
   begin
      Hr := this.m_ICompositionGradientBrush.all.get_TransformMatrix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TransformMatrix
   (
      this : in out CompositionGradientBrush;
      value : Windows.Foundation.Numerics.Matrix3x2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGradientBrush.all.put_TransformMatrix (value);
   end;

   function get_MappingMode
   (
      this : in out CompositionGradientBrush
   )
   return WinRt.Windows.UI.Composition.CompositionMappingMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionGradientBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionMappingMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionGradientBrush_Interface, WinRt.Windows.UI.Composition.ICompositionGradientBrush2, WinRt.Windows.UI.Composition.IID_ICompositionGradientBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionGradientBrush.all);
      Hr := m_Interface.get_MappingMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MappingMode
   (
      this : in out CompositionGradientBrush;
      value : Windows.UI.Composition.CompositionMappingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionGradientBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionGradientBrush_Interface, WinRt.Windows.UI.Composition.ICompositionGradientBrush2, WinRt.Windows.UI.Composition.IID_ICompositionGradientBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionGradientBrush.all);
      Hr := m_Interface.put_MappingMode (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionGraphicsDevice

   procedure Initialize (this : in out CompositionGraphicsDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionGraphicsDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionGraphicsDevice, ICompositionGraphicsDevice_Ptr);
   begin
      if this.m_ICompositionGraphicsDevice /= null then
         if this.m_ICompositionGraphicsDevice.all /= null then
            RefCount := this.m_ICompositionGraphicsDevice.all.Release;
            Free (this.m_ICompositionGraphicsDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionGraphicsDevice

   function CreateDrawingSurface
   (
      this : in out CompositionGraphicsDevice;
      sizePixels : Windows.Foundation.Size;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat;
      alphaMode : Windows.Graphics.DirectX.DirectXAlphaMode
   )
   return WinRt.Windows.UI.Composition.CompositionDrawingSurface'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionDrawingSurface;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionDrawingSurface do
         Hr := this.m_ICompositionGraphicsDevice.all.CreateDrawingSurface (sizePixels, pixelFormat, alphaMode, m_ComRetVal'Access);
         Retval.m_ICompositionDrawingSurface := new Windows.UI.Composition.ICompositionDrawingSurface;
         Retval.m_ICompositionDrawingSurface.all := m_ComRetVal;
      end return;
   end;

   function add_RenderingDeviceReplaced
   (
      this : in out CompositionGraphicsDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICompositionGraphicsDevice.all.add_RenderingDeviceReplaced (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RenderingDeviceReplaced
   (
      this : in out CompositionGraphicsDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionGraphicsDevice.all.remove_RenderingDeviceReplaced (token);
   end;

   function CreateDrawingSurface2
   (
      this : in out CompositionGraphicsDevice;
      sizePixels : Windows.Graphics.SizeInt32;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat;
      alphaMode : Windows.Graphics.DirectX.DirectXAlphaMode
   )
   return WinRt.Windows.UI.Composition.CompositionDrawingSurface'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionGraphicsDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionDrawingSurface;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionGraphicsDevice_Interface, WinRt.Windows.UI.Composition.ICompositionGraphicsDevice2, WinRt.Windows.UI.Composition.IID_ICompositionGraphicsDevice2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionDrawingSurface do
         m_Interface := QInterface (this.m_ICompositionGraphicsDevice.all);
         Hr := m_Interface.CreateDrawingSurface2 (sizePixels, pixelFormat, alphaMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionDrawingSurface := new Windows.UI.Composition.ICompositionDrawingSurface;
         Retval.m_ICompositionDrawingSurface.all := m_ComRetVal;
      end return;
   end;

   function CreateVirtualDrawingSurface
   (
      this : in out CompositionGraphicsDevice;
      sizePixels : Windows.Graphics.SizeInt32;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat;
      alphaMode : Windows.Graphics.DirectX.DirectXAlphaMode
   )
   return WinRt.Windows.UI.Composition.CompositionVirtualDrawingSurface'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionGraphicsDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionVirtualDrawingSurface;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionGraphicsDevice_Interface, WinRt.Windows.UI.Composition.ICompositionGraphicsDevice2, WinRt.Windows.UI.Composition.IID_ICompositionGraphicsDevice2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionVirtualDrawingSurface do
         m_Interface := QInterface (this.m_ICompositionGraphicsDevice.all);
         Hr := m_Interface.CreateVirtualDrawingSurface (sizePixels, pixelFormat, alphaMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionVirtualDrawingSurface := new Windows.UI.Composition.ICompositionVirtualDrawingSurface;
         Retval.m_ICompositionVirtualDrawingSurface.all := m_ComRetVal;
      end return;
   end;

   function CreateMipmapSurface
   (
      this : in out CompositionGraphicsDevice;
      sizePixels : Windows.Graphics.SizeInt32;
      pixelFormat : Windows.Graphics.DirectX.DirectXPixelFormat;
      alphaMode : Windows.Graphics.DirectX.DirectXAlphaMode
   )
   return WinRt.Windows.UI.Composition.CompositionMipmapSurface'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionGraphicsDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionMipmapSurface;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionGraphicsDevice_Interface, WinRt.Windows.UI.Composition.ICompositionGraphicsDevice3, WinRt.Windows.UI.Composition.IID_ICompositionGraphicsDevice3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionMipmapSurface do
         m_Interface := QInterface (this.m_ICompositionGraphicsDevice.all);
         Hr := m_Interface.CreateMipmapSurface (sizePixels, pixelFormat, alphaMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionMipmapSurface := new Windows.UI.Composition.ICompositionMipmapSurface;
         Retval.m_ICompositionMipmapSurface.all := m_ComRetVal;
      end return;
   end;

   procedure Trim
   (
      this : in out CompositionGraphicsDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionGraphicsDevice3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionGraphicsDevice_Interface, WinRt.Windows.UI.Composition.ICompositionGraphicsDevice3, WinRt.Windows.UI.Composition.IID_ICompositionGraphicsDevice3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionGraphicsDevice.all);
      Hr := m_Interface.Trim;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionLineGeometry

   procedure Initialize (this : in out CompositionLineGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionLineGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionLineGeometry, ICompositionLineGeometry_Ptr);
   begin
      if this.m_ICompositionLineGeometry /= null then
         if this.m_ICompositionLineGeometry.all /= null then
            RefCount := this.m_ICompositionLineGeometry.all.Release;
            Free (this.m_ICompositionLineGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionLineGeometry

   function get_Start
   (
      this : in out CompositionLineGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionLineGeometry.all.get_Start (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Start
   (
      this : in out CompositionLineGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionLineGeometry.all.put_Start (value);
   end;

   function get_End
   (
      this : in out CompositionLineGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionLineGeometry.all.get_End (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_End
   (
      this : in out CompositionLineGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionLineGeometry.all.put_End (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionLinearGradientBrush

   procedure Initialize (this : in out CompositionLinearGradientBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionLinearGradientBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionLinearGradientBrush, ICompositionLinearGradientBrush_Ptr);
   begin
      if this.m_ICompositionLinearGradientBrush /= null then
         if this.m_ICompositionLinearGradientBrush.all /= null then
            RefCount := this.m_ICompositionLinearGradientBrush.all.Release;
            Free (this.m_ICompositionLinearGradientBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionLinearGradientBrush

   function get_EndPoint
   (
      this : in out CompositionLinearGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionLinearGradientBrush.all.get_EndPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EndPoint
   (
      this : in out CompositionLinearGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionLinearGradientBrush.all.put_EndPoint (value);
   end;

   function get_StartPoint
   (
      this : in out CompositionLinearGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionLinearGradientBrush.all.get_StartPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartPoint
   (
      this : in out CompositionLinearGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionLinearGradientBrush.all.put_StartPoint (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionMaskBrush

   procedure Initialize (this : in out CompositionMaskBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionMaskBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionMaskBrush, ICompositionMaskBrush_Ptr);
   begin
      if this.m_ICompositionMaskBrush /= null then
         if this.m_ICompositionMaskBrush.all /= null then
            RefCount := this.m_ICompositionMaskBrush.all.Release;
            Free (this.m_ICompositionMaskBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionMaskBrush

   function get_Mask
   (
      this : in out CompositionMaskBrush
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ICompositionMaskBrush.all.get_Mask (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Mask
   (
      this : in out CompositionMaskBrush;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionMaskBrush.all.put_Mask (value.m_ICompositionBrush.all);
   end;

   function get_Source
   (
      this : in out CompositionMaskBrush
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ICompositionMaskBrush.all.get_Source (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Source
   (
      this : in out CompositionMaskBrush;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionMaskBrush.all.put_Source (value.m_ICompositionBrush.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionMipmapSurface

   procedure Initialize (this : in out CompositionMipmapSurface) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionMipmapSurface) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionMipmapSurface, ICompositionMipmapSurface_Ptr);
   begin
      if this.m_ICompositionMipmapSurface /= null then
         if this.m_ICompositionMipmapSurface.all /= null then
            RefCount := this.m_ICompositionMipmapSurface.all.Release;
            Free (this.m_ICompositionMipmapSurface);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionMipmapSurface

   function get_LevelCount
   (
      this : in out CompositionMipmapSurface
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICompositionMipmapSurface.all.get_LevelCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AlphaMode
   (
      this : in out CompositionMipmapSurface
   )
   return WinRt.Windows.Graphics.DirectX.DirectXAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXAlphaMode;
   begin
      Hr := this.m_ICompositionMipmapSurface.all.get_AlphaMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelFormat
   (
      this : in out CompositionMipmapSurface
   )
   return WinRt.Windows.Graphics.DirectX.DirectXPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.DirectXPixelFormat;
   begin
      Hr := this.m_ICompositionMipmapSurface.all.get_PixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SizeInt32
   (
      this : in out CompositionMipmapSurface
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
   begin
      Hr := this.m_ICompositionMipmapSurface.all.get_SizeInt32 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDrawingSurfaceForLevel
   (
      this : in out CompositionMipmapSurface;
      level : WinRt.UInt32
   )
   return WinRt.Windows.UI.Composition.CompositionDrawingSurface'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionDrawingSurface;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionDrawingSurface do
         Hr := this.m_ICompositionMipmapSurface.all.GetDrawingSurfaceForLevel (level, m_ComRetVal'Access);
         Retval.m_ICompositionDrawingSurface := new Windows.UI.Composition.ICompositionDrawingSurface;
         Retval.m_ICompositionDrawingSurface.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionNineGridBrush

   procedure Initialize (this : in out CompositionNineGridBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionNineGridBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionNineGridBrush, ICompositionNineGridBrush_Ptr);
   begin
      if this.m_ICompositionNineGridBrush /= null then
         if this.m_ICompositionNineGridBrush.all /= null then
            RefCount := this.m_ICompositionNineGridBrush.all.Release;
            Free (this.m_ICompositionNineGridBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionNineGridBrush

   function get_BottomInset
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_BottomInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BottomInset
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_BottomInset (value);
   end;

   function get_BottomInsetScale
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_BottomInsetScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BottomInsetScale
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_BottomInsetScale (value);
   end;

   function get_IsCenterHollow
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_IsCenterHollow (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCenterHollow
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_IsCenterHollow (value);
   end;

   function get_LeftInset
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_LeftInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LeftInset
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_LeftInset (value);
   end;

   function get_LeftInsetScale
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_LeftInsetScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LeftInsetScale
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_LeftInsetScale (value);
   end;

   function get_RightInset
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_RightInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RightInset
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_RightInset (value);
   end;

   function get_RightInsetScale
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_RightInsetScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RightInsetScale
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_RightInsetScale (value);
   end;

   function get_Source
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ICompositionNineGridBrush.all.get_Source (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Source
   (
      this : in out CompositionNineGridBrush;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_Source (value.m_ICompositionBrush.all);
   end;

   function get_TopInset
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_TopInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TopInset
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_TopInset (value);
   end;

   function get_TopInsetScale
   (
      this : in out CompositionNineGridBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.get_TopInsetScale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TopInsetScale
   (
      this : in out CompositionNineGridBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.put_TopInsetScale (value);
   end;

   procedure SetInsets
   (
      this : in out CompositionNineGridBrush;
      inset : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.SetInsets (inset);
   end;

   procedure SetInsets
   (
      this : in out CompositionNineGridBrush;
      left : WinRt.Single;
      top : WinRt.Single;
      right : WinRt.Single;
      bottom : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.SetInsets (left, top, right, bottom);
   end;

   procedure SetInsetScales
   (
      this : in out CompositionNineGridBrush;
      scale : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.SetInsetScales (scale);
   end;

   procedure SetInsetScales
   (
      this : in out CompositionNineGridBrush;
      left : WinRt.Single;
      top : WinRt.Single;
      right : WinRt.Single;
      bottom : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionNineGridBrush.all.SetInsetScales (left, top, right, bottom);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionPath

   procedure Initialize (this : in out CompositionPath) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionPath) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionPath, ICompositionPath_Ptr);
   begin
      if this.m_ICompositionPath /= null then
         if this.m_ICompositionPath.all /= null then
            RefCount := this.m_ICompositionPath.all.Release;
            Free (this.m_ICompositionPath);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionPath

   function Constructor
   (
      source : Windows.Graphics.IGeometrySource2D
   )
   return CompositionPath is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Composition.CompositionPath");
      m_Factory    : access ICompositionPathFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Composition.ICompositionPath;
   begin
      return RetVal : CompositionPath do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositionPathFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (source, m_ComRetVal'Access);
            Retval.m_ICompositionPath := new Windows.UI.Composition.ICompositionPath;
            Retval.m_ICompositionPath.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionPath

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionPathGeometry

   procedure Initialize (this : in out CompositionPathGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionPathGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionPathGeometry, ICompositionPathGeometry_Ptr);
   begin
      if this.m_ICompositionPathGeometry /= null then
         if this.m_ICompositionPathGeometry.all /= null then
            RefCount := this.m_ICompositionPathGeometry.all.Release;
            Free (this.m_ICompositionPathGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionPathGeometry

   function get_Path
   (
      this : in out CompositionPathGeometry
   )
   return WinRt.Windows.UI.Composition.CompositionPath'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionPath;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionPath do
         Hr := this.m_ICompositionPathGeometry.all.get_Path (m_ComRetVal'Access);
         Retval.m_ICompositionPath := new Windows.UI.Composition.ICompositionPath;
         Retval.m_ICompositionPath.all := m_ComRetVal;
      end return;
   end;

   procedure put_Path
   (
      this : in out CompositionPathGeometry;
      value : Windows.UI.Composition.CompositionPath'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionPathGeometry.all.put_Path (value.m_ICompositionPath.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionProjectedShadow

   procedure Initialize (this : in out CompositionProjectedShadow) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionProjectedShadow) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionProjectedShadow, ICompositionProjectedShadow_Ptr);
   begin
      if this.m_ICompositionProjectedShadow /= null then
         if this.m_ICompositionProjectedShadow.all /= null then
            RefCount := this.m_ICompositionProjectedShadow.all.Release;
            Free (this.m_ICompositionProjectedShadow);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionProjectedShadow

   function get_BlurRadiusMultiplier
   (
      this : in out CompositionProjectedShadow
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionProjectedShadow.all.get_BlurRadiusMultiplier (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BlurRadiusMultiplier
   (
      this : in out CompositionProjectedShadow;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadow.all.put_BlurRadiusMultiplier (value);
   end;

   function get_Casters
   (
      this : in out CompositionProjectedShadow
   )
   return WinRt.Windows.UI.Composition.CompositionProjectedShadowCasterCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionProjectedShadowCasterCollection;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionProjectedShadowCasterCollection do
         Hr := this.m_ICompositionProjectedShadow.all.get_Casters (m_ComRetVal'Access);
         Retval.m_ICompositionProjectedShadowCasterCollection := new Windows.UI.Composition.ICompositionProjectedShadowCasterCollection;
         Retval.m_ICompositionProjectedShadowCasterCollection.all := m_ComRetVal;
      end return;
   end;

   function get_LightSource
   (
      this : in out CompositionProjectedShadow
   )
   return WinRt.Windows.UI.Composition.CompositionLight'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionLight;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionLight do
         Hr := this.m_ICompositionProjectedShadow.all.get_LightSource (m_ComRetVal'Access);
         Retval.m_ICompositionLight := new Windows.UI.Composition.ICompositionLight;
         Retval.m_ICompositionLight.all := m_ComRetVal;
      end return;
   end;

   procedure put_LightSource
   (
      this : in out CompositionProjectedShadow;
      value : Windows.UI.Composition.CompositionLight'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadow.all.put_LightSource (value.m_ICompositionLight.all);
   end;

   function get_MaxBlurRadius
   (
      this : in out CompositionProjectedShadow
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionProjectedShadow.all.get_MaxBlurRadius (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxBlurRadius
   (
      this : in out CompositionProjectedShadow;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadow.all.put_MaxBlurRadius (value);
   end;

   function get_MinBlurRadius
   (
      this : in out CompositionProjectedShadow
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionProjectedShadow.all.get_MinBlurRadius (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinBlurRadius
   (
      this : in out CompositionProjectedShadow;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadow.all.put_MinBlurRadius (value);
   end;

   function get_Receivers
   (
      this : in out CompositionProjectedShadow
   )
   return WinRt.Windows.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection do
         Hr := this.m_ICompositionProjectedShadow.all.get_Receivers (m_ComRetVal'Access);
         Retval.m_ICompositionProjectedShadowReceiverUnorderedCollection := new Windows.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection;
         Retval.m_ICompositionProjectedShadowReceiverUnorderedCollection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionProjectedShadowCaster

   procedure Initialize (this : in out CompositionProjectedShadowCaster) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionProjectedShadowCaster) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionProjectedShadowCaster, ICompositionProjectedShadowCaster_Ptr);
   begin
      if this.m_ICompositionProjectedShadowCaster /= null then
         if this.m_ICompositionProjectedShadowCaster.all /= null then
            RefCount := this.m_ICompositionProjectedShadowCaster.all.Release;
            Free (this.m_ICompositionProjectedShadowCaster);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionProjectedShadowCaster

   function get_Brush
   (
      this : in out CompositionProjectedShadowCaster
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ICompositionProjectedShadowCaster.all.get_Brush (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Brush
   (
      this : in out CompositionProjectedShadowCaster;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCaster.all.put_Brush (value.m_ICompositionBrush.all);
   end;

   function get_CastingVisual
   (
      this : in out CompositionProjectedShadowCaster
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_ICompositionProjectedShadowCaster.all.get_CastingVisual (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_CastingVisual
   (
      this : in out CompositionProjectedShadowCaster;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCaster.all.put_CastingVisual (value.m_IVisual.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionProjectedShadowCasterCollection

   procedure Initialize (this : in out CompositionProjectedShadowCasterCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionProjectedShadowCasterCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionProjectedShadowCasterCollection, ICompositionProjectedShadowCasterCollection_Ptr);
   begin
      if this.m_ICompositionProjectedShadowCasterCollection /= null then
         if this.m_ICompositionProjectedShadowCasterCollection.all /= null then
            RefCount := this.m_ICompositionProjectedShadowCasterCollection.all.Release;
            Free (this.m_ICompositionProjectedShadowCasterCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositionProjectedShadowCasterCollection

   function get_MaxRespectedCasters
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.CompositionProjectedShadowCasterCollection");
      m_Factory        : access WinRt.Windows.UI.Composition.ICompositionProjectedShadowCasterCollectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositionProjectedShadowCasterCollectionStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxRespectedCasters (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionProjectedShadowCasterCollection

   function get_Count
   (
      this : in out CompositionProjectedShadowCasterCollection
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICompositionProjectedShadowCasterCollection.all.get_Count (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure InsertAbove
   (
      this : in out CompositionProjectedShadowCasterCollection;
      newCaster : Windows.UI.Composition.CompositionProjectedShadowCaster'Class;
      reference : Windows.UI.Composition.CompositionProjectedShadowCaster'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCasterCollection.all.InsertAbove (newCaster.m_ICompositionProjectedShadowCaster.all, reference.m_ICompositionProjectedShadowCaster.all);
   end;

   procedure InsertAtBottom
   (
      this : in out CompositionProjectedShadowCasterCollection;
      newCaster : Windows.UI.Composition.CompositionProjectedShadowCaster'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCasterCollection.all.InsertAtBottom (newCaster.m_ICompositionProjectedShadowCaster.all);
   end;

   procedure InsertAtTop
   (
      this : in out CompositionProjectedShadowCasterCollection;
      newCaster : Windows.UI.Composition.CompositionProjectedShadowCaster'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCasterCollection.all.InsertAtTop (newCaster.m_ICompositionProjectedShadowCaster.all);
   end;

   procedure InsertBelow
   (
      this : in out CompositionProjectedShadowCasterCollection;
      newCaster : Windows.UI.Composition.CompositionProjectedShadowCaster'Class;
      reference : Windows.UI.Composition.CompositionProjectedShadowCaster'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCasterCollection.all.InsertBelow (newCaster.m_ICompositionProjectedShadowCaster.all, reference.m_ICompositionProjectedShadowCaster.all);
   end;

   procedure Remove
   (
      this : in out CompositionProjectedShadowCasterCollection;
      caster : Windows.UI.Composition.CompositionProjectedShadowCaster'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCasterCollection.all.Remove (caster.m_ICompositionProjectedShadowCaster.all);
   end;

   procedure RemoveAll
   (
      this : in out CompositionProjectedShadowCasterCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowCasterCollection.all.RemoveAll;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionProjectedShadowCaster>
   function First
   (
      this : in out CompositionProjectedShadowCasterCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ICompositionProjectedShadowCaster.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3090160386, 17051, 23921, (171, 12, 141, 17, 65, 177, 42, 195 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionProjectedShadowCasterCollection_Interface, IIterable_ICompositionProjectedShadowCaster.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionProjectedShadowCasterCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionProjectedShadowReceiver

   procedure Initialize (this : in out CompositionProjectedShadowReceiver) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionProjectedShadowReceiver) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionProjectedShadowReceiver, ICompositionProjectedShadowReceiver_Ptr);
   begin
      if this.m_ICompositionProjectedShadowReceiver /= null then
         if this.m_ICompositionProjectedShadowReceiver.all /= null then
            RefCount := this.m_ICompositionProjectedShadowReceiver.all.Release;
            Free (this.m_ICompositionProjectedShadowReceiver);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionProjectedShadowReceiver

   function get_ReceivingVisual
   (
      this : in out CompositionProjectedShadowReceiver
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_ICompositionProjectedShadowReceiver.all.get_ReceivingVisual (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_ReceivingVisual
   (
      this : in out CompositionProjectedShadowReceiver;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowReceiver.all.put_ReceivingVisual (value.m_IVisual.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionProjectedShadowReceiverUnorderedCollection

   procedure Initialize (this : in out CompositionProjectedShadowReceiverUnorderedCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionProjectedShadowReceiverUnorderedCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionProjectedShadowReceiverUnorderedCollection, ICompositionProjectedShadowReceiverUnorderedCollection_Ptr);
   begin
      if this.m_ICompositionProjectedShadowReceiverUnorderedCollection /= null then
         if this.m_ICompositionProjectedShadowReceiverUnorderedCollection.all /= null then
            RefCount := this.m_ICompositionProjectedShadowReceiverUnorderedCollection.all.Release;
            Free (this.m_ICompositionProjectedShadowReceiverUnorderedCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionProjectedShadowReceiverUnorderedCollection

   procedure Add
   (
      this : in out CompositionProjectedShadowReceiverUnorderedCollection;
      value : Windows.UI.Composition.CompositionProjectedShadowReceiver'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowReceiverUnorderedCollection.all.Add (value.m_ICompositionProjectedShadowReceiver.all);
   end;

   function get_Count
   (
      this : in out CompositionProjectedShadowReceiverUnorderedCollection
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICompositionProjectedShadowReceiverUnorderedCollection.all.get_Count (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out CompositionProjectedShadowReceiverUnorderedCollection;
      value : Windows.UI.Composition.CompositionProjectedShadowReceiver'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowReceiverUnorderedCollection.all.Remove (value.m_ICompositionProjectedShadowReceiver.all);
   end;

   procedure RemoveAll
   (
      this : in out CompositionProjectedShadowReceiverUnorderedCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionProjectedShadowReceiverUnorderedCollection.all.RemoveAll;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionProjectedShadowReceiver>
   function First
   (
      this : in out CompositionProjectedShadowReceiverUnorderedCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ICompositionProjectedShadowReceiver.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3799472680, 60488, 23736, (179, 82, 118, 247, 249, 129, 215, 164 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection_Interface, IIterable_ICompositionProjectedShadowReceiver.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionProjectedShadowReceiverUnorderedCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionPropertySet

   procedure Initialize (this : in out CompositionPropertySet) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionPropertySet) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionPropertySet, ICompositionPropertySet_Ptr);
   begin
      if this.m_ICompositionPropertySet /= null then
         if this.m_ICompositionPropertySet.all /= null then
            RefCount := this.m_ICompositionPropertySet.all.Release;
            Free (this.m_ICompositionPropertySet);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionPropertySet

   procedure InsertColor
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertColor (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure InsertMatrix3x2
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Matrix3x2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertMatrix3x2 (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure InsertMatrix4x4
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Matrix4x4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertMatrix4x4 (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure InsertQuaternion
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertQuaternion (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure InsertScalar
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertScalar (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure InsertVector2
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertVector2 (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure InsertVector3
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertVector3 (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   procedure InsertVector4
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.InsertVector4 (HStr_propertyName, value);
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   function TryGetColor
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.UI.Color_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetColor (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   function TryGetMatrix3x2
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Matrix3x2_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetMatrix3x2 (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   function TryGetMatrix4x4
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Matrix4x4_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetMatrix4x4 (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   function TryGetQuaternion
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Quaternion_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetQuaternion (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   function TryGetScalar
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : WinRt.Single_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetScalar (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   function TryGetVector2
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector2_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetVector2 (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   function TryGetVector3
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector3_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetVector3 (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   function TryGetVector4
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : Windows.Foundation.Numerics.Vector4_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
   begin
      Hr := this.m_ICompositionPropertySet.all.TryGetVector4 (HStr_propertyName, value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   procedure InsertBoolean
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionPropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionPropertySet_Interface, WinRt.Windows.UI.Composition.ICompositionPropertySet2, WinRt.Windows.UI.Composition.IID_ICompositionPropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionPropertySet.all);
      Hr := m_Interface.InsertBoolean (HStr_propertyName, value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyName);
   end;

   function TryGetBoolean
   (
      this : in out CompositionPropertySet;
      propertyName : WinRt.WString;
      value : WinRt.Boolean_Ptr
   )
   return WinRt.Windows.UI.Composition.CompositionGetValueStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionPropertySet2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionGetValueStatus;
      HStr_propertyName : WinRt.HString := To_HString (propertyName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionPropertySet_Interface, WinRt.Windows.UI.Composition.ICompositionPropertySet2, WinRt.Windows.UI.Composition.IID_ICompositionPropertySet2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionPropertySet.all);
      Hr := m_Interface.TryGetBoolean (HStr_propertyName, value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_propertyName);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionRadialGradientBrush

   procedure Initialize (this : in out CompositionRadialGradientBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionRadialGradientBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionRadialGradientBrush, ICompositionRadialGradientBrush_Ptr);
   begin
      if this.m_ICompositionRadialGradientBrush /= null then
         if this.m_ICompositionRadialGradientBrush.all /= null then
            RefCount := this.m_ICompositionRadialGradientBrush.all.Release;
            Free (this.m_ICompositionRadialGradientBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionRadialGradientBrush

   function get_EllipseCenter
   (
      this : in out CompositionRadialGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRadialGradientBrush.all.get_EllipseCenter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EllipseCenter
   (
      this : in out CompositionRadialGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRadialGradientBrush.all.put_EllipseCenter (value);
   end;

   function get_EllipseRadius
   (
      this : in out CompositionRadialGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRadialGradientBrush.all.get_EllipseRadius (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EllipseRadius
   (
      this : in out CompositionRadialGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRadialGradientBrush.all.put_EllipseRadius (value);
   end;

   function get_GradientOriginOffset
   (
      this : in out CompositionRadialGradientBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRadialGradientBrush.all.get_GradientOriginOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GradientOriginOffset
   (
      this : in out CompositionRadialGradientBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRadialGradientBrush.all.put_GradientOriginOffset (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionRectangleGeometry

   procedure Initialize (this : in out CompositionRectangleGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionRectangleGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionRectangleGeometry, ICompositionRectangleGeometry_Ptr);
   begin
      if this.m_ICompositionRectangleGeometry /= null then
         if this.m_ICompositionRectangleGeometry.all /= null then
            RefCount := this.m_ICompositionRectangleGeometry.all.Release;
            Free (this.m_ICompositionRectangleGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionRectangleGeometry

   function get_Offset
   (
      this : in out CompositionRectangleGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRectangleGeometry.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionRectangleGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRectangleGeometry.all.put_Offset (value);
   end;

   function get_Size
   (
      this : in out CompositionRectangleGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRectangleGeometry.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out CompositionRectangleGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRectangleGeometry.all.put_Size (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionRoundedRectangleGeometry

   procedure Initialize (this : in out CompositionRoundedRectangleGeometry) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionRoundedRectangleGeometry) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionRoundedRectangleGeometry, ICompositionRoundedRectangleGeometry_Ptr);
   begin
      if this.m_ICompositionRoundedRectangleGeometry /= null then
         if this.m_ICompositionRoundedRectangleGeometry.all /= null then
            RefCount := this.m_ICompositionRoundedRectangleGeometry.all.Release;
            Free (this.m_ICompositionRoundedRectangleGeometry);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionRoundedRectangleGeometry

   function get_CornerRadius
   (
      this : in out CompositionRoundedRectangleGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRoundedRectangleGeometry.all.get_CornerRadius (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CornerRadius
   (
      this : in out CompositionRoundedRectangleGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRoundedRectangleGeometry.all.put_CornerRadius (value);
   end;

   function get_Offset
   (
      this : in out CompositionRoundedRectangleGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRoundedRectangleGeometry.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionRoundedRectangleGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRoundedRectangleGeometry.all.put_Offset (value);
   end;

   function get_Size
   (
      this : in out CompositionRoundedRectangleGeometry
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionRoundedRectangleGeometry.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out CompositionRoundedRectangleGeometry;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionRoundedRectangleGeometry.all.put_Size (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionScopedBatch

   procedure Initialize (this : in out CompositionScopedBatch) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionScopedBatch) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionScopedBatch, ICompositionScopedBatch_Ptr);
   begin
      if this.m_ICompositionScopedBatch /= null then
         if this.m_ICompositionScopedBatch.all /= null then
            RefCount := this.m_ICompositionScopedBatch.all.Release;
            Free (this.m_ICompositionScopedBatch);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionScopedBatch

   function get_IsActive
   (
      this : in out CompositionScopedBatch
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionScopedBatch.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsEnded
   (
      this : in out CompositionScopedBatch
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionScopedBatch.all.get_IsEnded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure End_x
   (
      this : in out CompositionScopedBatch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionScopedBatch.all.End_x;
   end;

   procedure Resume
   (
      this : in out CompositionScopedBatch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionScopedBatch.all.Resume;
   end;

   procedure Suspend
   (
      this : in out CompositionScopedBatch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionScopedBatch.all.Suspend;
   end;

   function add_Completed
   (
      this : in out CompositionScopedBatch;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ICompositionScopedBatch.all.add_Completed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out CompositionScopedBatch;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionScopedBatch.all.remove_Completed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionShadow

   procedure Initialize (this : in out CompositionShadow) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionShadow) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionShadow, ICompositionShadow_Ptr);
   begin
      if this.m_ICompositionShadow /= null then
         if this.m_ICompositionShadow.all /= null then
            RefCount := this.m_ICompositionShadow.all.Release;
            Free (this.m_ICompositionShadow);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionShadow

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionShadow

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionShapeCollection

   procedure Initialize (this : in out CompositionShapeCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionShapeCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionShapeCollection

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.UI.Composition.CompositionShape>
   function GetAt
   (
      this : in out CompositionShapeCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.UI.Composition.CompositionShape'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionShape;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionShape do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionShape := new Windows.UI.Composition.ICompositionShape;
         Retval.m_ICompositionShape.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out CompositionShapeCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out CompositionShapeCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out CompositionShapeCollection;
      value : Windows.UI.Composition.CompositionShape'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_ICompositionShape.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out CompositionShapeCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Composition.CompositionShape'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value.m_ICompositionShape.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out CompositionShapeCollection;
      index : WinRt.UInt32;
      value : Windows.UI.Composition.CompositionShape'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value.m_ICompositionShape.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out CompositionShapeCollection;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out CompositionShapeCollection;
      value : Windows.UI.Composition.CompositionShape'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value.m_ICompositionShape.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out CompositionShapeCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out CompositionShapeCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out CompositionShapeCollection;
      startIndex : WinRt.UInt32;
      items : Windows.UI.Composition.ICompositionShape_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out CompositionShapeCollection;
      items : Windows.UI.Composition.ICompositionShape_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1121198490, 48667, 20625, (143, 30, 144, 39, 8, 64, 252, 45 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionShape>
   function First
   (
      this : in out CompositionShapeCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ICompositionShape.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (288730613, 56082, 21992, (174, 15, 189, 141, 145, 75, 211, 153 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_ICompositionShape.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionSpriteShape

   procedure Initialize (this : in out CompositionSpriteShape) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionSpriteShape) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionSpriteShape, ICompositionSpriteShape_Ptr);
   begin
      if this.m_ICompositionSpriteShape /= null then
         if this.m_ICompositionSpriteShape.all /= null then
            RefCount := this.m_ICompositionSpriteShape.all.Release;
            Free (this.m_ICompositionSpriteShape);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionSpriteShape

   function get_FillBrush
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ICompositionSpriteShape.all.get_FillBrush (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_FillBrush
   (
      this : in out CompositionSpriteShape;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_FillBrush (value.m_ICompositionBrush.all);
   end;

   function get_Geometry
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionGeometry;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionGeometry do
         Hr := this.m_ICompositionSpriteShape.all.get_Geometry (m_ComRetVal'Access);
         Retval.m_ICompositionGeometry := new Windows.UI.Composition.ICompositionGeometry;
         Retval.m_ICompositionGeometry.all := m_ComRetVal;
      end return;
   end;

   procedure put_Geometry
   (
      this : in out CompositionSpriteShape;
      value : Windows.UI.Composition.CompositionGeometry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_Geometry (value.m_ICompositionGeometry.all);
   end;

   function get_IsStrokeNonScaling
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_IsStrokeNonScaling (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsStrokeNonScaling
   (
      this : in out CompositionSpriteShape;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_IsStrokeNonScaling (value);
   end;

   function get_StrokeBrush
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ICompositionSpriteShape.all.get_StrokeBrush (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_StrokeBrush
   (
      this : in out CompositionSpriteShape;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeBrush (value.m_ICompositionBrush.all);
   end;

   function get_StrokeDashArray
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionStrokeDashArray'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionStrokeDashArray do
         Hr := this.m_ICompositionSpriteShape.all.get_StrokeDashArray (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_StrokeDashCap
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionStrokeCap is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionStrokeCap;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_StrokeDashCap (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeDashCap
   (
      this : in out CompositionSpriteShape;
      value : Windows.UI.Composition.CompositionStrokeCap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeDashCap (value);
   end;

   function get_StrokeDashOffset
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_StrokeDashOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeDashOffset
   (
      this : in out CompositionSpriteShape;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeDashOffset (value);
   end;

   function get_StrokeEndCap
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionStrokeCap is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionStrokeCap;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_StrokeEndCap (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeEndCap
   (
      this : in out CompositionSpriteShape;
      value : Windows.UI.Composition.CompositionStrokeCap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeEndCap (value);
   end;

   function get_StrokeLineJoin
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionStrokeLineJoin is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionStrokeLineJoin;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_StrokeLineJoin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeLineJoin
   (
      this : in out CompositionSpriteShape;
      value : Windows.UI.Composition.CompositionStrokeLineJoin
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeLineJoin (value);
   end;

   function get_StrokeMiterLimit
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_StrokeMiterLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeMiterLimit
   (
      this : in out CompositionSpriteShape;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeMiterLimit (value);
   end;

   function get_StrokeStartCap
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Windows.UI.Composition.CompositionStrokeCap is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionStrokeCap;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_StrokeStartCap (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeStartCap
   (
      this : in out CompositionSpriteShape;
      value : Windows.UI.Composition.CompositionStrokeCap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeStartCap (value);
   end;

   function get_StrokeThickness
   (
      this : in out CompositionSpriteShape
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionSpriteShape.all.get_StrokeThickness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeThickness
   (
      this : in out CompositionSpriteShape;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSpriteShape.all.put_StrokeThickness (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionStrokeDashArray

   procedure Initialize (this : in out CompositionStrokeDashArray) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionStrokeDashArray) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionStrokeDashArray

   -- Generic Interface Windows.Foundation.Collections.IVector`1<System.Single>
   function GetAt
   (
      this : in out CompositionStrokeDashArray;
      index : WinRt.UInt32
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Single;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out CompositionStrokeDashArray
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out CompositionStrokeDashArray
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out CompositionStrokeDashArray;
      value : WinRt.Single;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out CompositionStrokeDashArray;
      index : WinRt.UInt32;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out CompositionStrokeDashArray;
      index : WinRt.UInt32;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.InsertAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out CompositionStrokeDashArray;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out CompositionStrokeDashArray;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Append (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out CompositionStrokeDashArray
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out CompositionStrokeDashArray
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out CompositionStrokeDashArray;
      startIndex : WinRt.UInt32;
      items : WinRt.Single_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out CompositionStrokeDashArray;
      items : WinRt.Single_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1640982847, 56140, 22431, (185, 5, 93, 211, 210, 60, 253, 77 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVector_Single.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<System.Single>
   function First
   (
      this : in out CompositionStrokeDashArray
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_Single.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2954620497, 1594, 24538, (189, 114, 215, 102, 55, 187, 140, 184 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_Single.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionSurfaceBrush

   procedure Initialize (this : in out CompositionSurfaceBrush) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionSurfaceBrush) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionSurfaceBrush, ICompositionSurfaceBrush_Ptr);
   begin
      if this.m_ICompositionSurfaceBrush /= null then
         if this.m_ICompositionSurfaceBrush.all /= null then
            RefCount := this.m_ICompositionSurfaceBrush.all.Release;
            Free (this.m_ICompositionSurfaceBrush);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionSurfaceBrush

   function get_BitmapInterpolationMode
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.UI.Composition.CompositionBitmapInterpolationMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionBitmapInterpolationMode;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.get_BitmapInterpolationMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BitmapInterpolationMode
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.UI.Composition.CompositionBitmapInterpolationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.put_BitmapInterpolationMode (value);
   end;

   function get_HorizontalAlignmentRatio
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.get_HorizontalAlignmentRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HorizontalAlignmentRatio
   (
      this : in out CompositionSurfaceBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.put_HorizontalAlignmentRatio (value);
   end;

   function get_Stretch
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.UI.Composition.CompositionStretch is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionStretch;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.get_Stretch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Stretch
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.UI.Composition.CompositionStretch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.put_Stretch (value);
   end;

   function get_Surface
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.UI.Composition.ICompositionSurface is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionSurface;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.get_Surface (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Surface
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.UI.Composition.ICompositionSurface
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.put_Surface (value);
   end;

   function get_VerticalAlignmentRatio
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.get_VerticalAlignmentRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VerticalAlignmentRatio
   (
      this : in out CompositionSurfaceBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionSurfaceBrush.all.put_VerticalAlignmentRatio (value);
   end;

   function get_AnchorPoint
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_AnchorPoint (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AnchorPoint
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_AnchorPoint (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CenterPoint
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_CenterPoint (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CenterPoint
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_CenterPoint (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Offset
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_Offset (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_Offset (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RotationAngle
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_RotationAngle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RotationAngle
   (
      this : in out CompositionSurfaceBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_RotationAngle (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RotationAngleInDegrees
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_RotationAngleInDegrees (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RotationAngleInDegrees
   (
      this : in out CompositionSurfaceBrush;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_RotationAngleInDegrees (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Scale
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_Scale (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Scale
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_Scale (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransformMatrix
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Windows.Foundation.Numerics.Matrix3x2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix3x2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_TransformMatrix (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TransformMatrix
   (
      this : in out CompositionSurfaceBrush;
      value : Windows.Foundation.Numerics.Matrix3x2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush2, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_TransformMatrix (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SnapToPixels
   (
      this : in out CompositionSurfaceBrush
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush3, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.get_SnapToPixels (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SnapToPixels
   (
      this : in out CompositionSurfaceBrush;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositionSurfaceBrush3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositionSurfaceBrush_Interface, WinRt.Windows.UI.Composition.ICompositionSurfaceBrush3, WinRt.Windows.UI.Composition.IID_ICompositionSurfaceBrush3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositionSurfaceBrush.all);
      Hr := m_Interface.put_SnapToPixels (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionTarget

   procedure Initialize (this : in out CompositionTarget) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionTarget) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionTarget, ICompositionTarget_Ptr);
   begin
      if this.m_ICompositionTarget /= null then
         if this.m_ICompositionTarget.all /= null then
            RefCount := this.m_ICompositionTarget.all.Release;
            Free (this.m_ICompositionTarget);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionTarget

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionTarget

   function get_Root
   (
      this : in out CompositionTarget
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_ICompositionTarget.all.get_Root (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_Root
   (
      this : in out CompositionTarget;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionTarget.all.put_Root (value.m_IVisual.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionTransform

   procedure Initialize (this : in out CompositionTransform) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionTransform) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionTransform, ICompositionTransform_Ptr);
   begin
      if this.m_ICompositionTransform /= null then
         if this.m_ICompositionTransform.all /= null then
            RefCount := this.m_ICompositionTransform.all.Release;
            Free (this.m_ICompositionTransform);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionTransform

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionTransform

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionViewBox

   procedure Initialize (this : in out CompositionViewBox) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionViewBox) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionViewBox, ICompositionViewBox_Ptr);
   begin
      if this.m_ICompositionViewBox /= null then
         if this.m_ICompositionViewBox.all /= null then
            RefCount := this.m_ICompositionViewBox.all.Release;
            Free (this.m_ICompositionViewBox);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionViewBox

   function get_HorizontalAlignmentRatio
   (
      this : in out CompositionViewBox
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionViewBox.all.get_HorizontalAlignmentRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HorizontalAlignmentRatio
   (
      this : in out CompositionViewBox;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionViewBox.all.put_HorizontalAlignmentRatio (value);
   end;

   function get_Offset
   (
      this : in out CompositionViewBox
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionViewBox.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out CompositionViewBox;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionViewBox.all.put_Offset (value);
   end;

   function get_Size
   (
      this : in out CompositionViewBox
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionViewBox.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out CompositionViewBox;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionViewBox.all.put_Size (value);
   end;

   function get_Stretch
   (
      this : in out CompositionViewBox
   )
   return WinRt.Windows.UI.Composition.CompositionStretch is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionStretch;
   begin
      Hr := this.m_ICompositionViewBox.all.get_Stretch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Stretch
   (
      this : in out CompositionViewBox;
      value : Windows.UI.Composition.CompositionStretch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionViewBox.all.put_Stretch (value);
   end;

   function get_VerticalAlignmentRatio
   (
      this : in out CompositionViewBox
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICompositionViewBox.all.get_VerticalAlignmentRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VerticalAlignmentRatio
   (
      this : in out CompositionViewBox;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionViewBox.all.put_VerticalAlignmentRatio (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionVirtualDrawingSurface

   procedure Initialize (this : in out CompositionVirtualDrawingSurface) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionVirtualDrawingSurface) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionVirtualDrawingSurface, ICompositionVirtualDrawingSurface_Ptr);
   begin
      if this.m_ICompositionVirtualDrawingSurface /= null then
         if this.m_ICompositionVirtualDrawingSurface.all /= null then
            RefCount := this.m_ICompositionVirtualDrawingSurface.all.Release;
            Free (this.m_ICompositionVirtualDrawingSurface);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositionVirtualDrawingSurface

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionVirtualDrawingSurface

   procedure Trim
   (
      this : in out CompositionVirtualDrawingSurface;
      rects : Windows.Graphics.RectInt32_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_rects is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Graphics.RectInt32_Ptr);
   begin
      Hr := this.m_ICompositionVirtualDrawingSurface.all.Trim (WinRt.UInt32(rects'Length), Convert_rects (rects (rects'First)'Address));
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositionVisualSurface

   procedure Initialize (this : in out CompositionVisualSurface) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositionVisualSurface) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositionVisualSurface, ICompositionVisualSurface_Ptr);
   begin
      if this.m_ICompositionVisualSurface /= null then
         if this.m_ICompositionVisualSurface.all /= null then
            RefCount := this.m_ICompositionVisualSurface.all.Release;
            Free (this.m_ICompositionVisualSurface);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositionVisualSurface

   function get_SourceVisual
   (
      this : in out CompositionVisualSurface
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_ICompositionVisualSurface.all.get_SourceVisual (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_SourceVisual
   (
      this : in out CompositionVisualSurface;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionVisualSurface.all.put_SourceVisual (value.m_IVisual.all);
   end;

   function get_SourceOffset
   (
      this : in out CompositionVisualSurface
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionVisualSurface.all.get_SourceOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SourceOffset
   (
      this : in out CompositionVisualSurface;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionVisualSurface.all.put_SourceOffset (value);
   end;

   function get_SourceSize
   (
      this : in out CompositionVisualSurface
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICompositionVisualSurface.all.get_SourceSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SourceSize
   (
      this : in out CompositionVisualSurface;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositionVisualSurface.all.put_SourceSize (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Compositor

   procedure Initialize (this : in out Compositor) is
   begin
      null;
   end;

   procedure Finalize (this : in out Compositor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositor, ICompositor_Ptr);
   begin
      if this.m_ICompositor /= null then
         if this.m_ICompositor.all /= null then
            RefCount := this.m_ICompositor.all.Release;
            Free (this.m_ICompositor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Compositor

   function Constructor return Compositor is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Composition.Compositor");
      m_ComRetVal  : aliased Windows.UI.Composition.ICompositor;
   begin
      return RetVal : Compositor do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICompositor := new Windows.UI.Composition.ICompositor;
            Retval.m_ICompositor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Compositor

   function get_MaxGlobalPlaybackRate
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Compositor");
      m_Factory        : access WinRt.Windows.UI.Composition.ICompositorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxGlobalPlaybackRate (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MinGlobalPlaybackRate
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Composition.Compositor");
      m_Factory        : access WinRt.Windows.UI.Composition.ICompositorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ICompositorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MinGlobalPlaybackRate (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Compositor

   function CreateColorKeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.ColorKeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IColorKeyFrameAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ColorKeyFrameAnimation do
         Hr := this.m_ICompositor.all.CreateColorKeyFrameAnimation (m_ComRetVal'Access);
         Retval.m_IColorKeyFrameAnimation := new Windows.UI.Composition.IColorKeyFrameAnimation;
         Retval.m_IColorKeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateColorBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionColorBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionColorBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionColorBrush do
         Hr := this.m_ICompositor.all.CreateColorBrush (m_ComRetVal'Access);
         Retval.m_ICompositionColorBrush := new Windows.UI.Composition.ICompositionColorBrush;
         Retval.m_ICompositionColorBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateColorBrush
   (
      this : in out Compositor;
      color : Windows.UI.Color
   )
   return WinRt.Windows.UI.Composition.CompositionColorBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionColorBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionColorBrush do
         Hr := this.m_ICompositor.all.CreateColorBrush (color, m_ComRetVal'Access);
         Retval.m_ICompositionColorBrush := new Windows.UI.Composition.ICompositionColorBrush;
         Retval.m_ICompositionColorBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateContainerVisual
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.ContainerVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IContainerVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ContainerVisual do
         Hr := this.m_ICompositor.all.CreateContainerVisual (m_ComRetVal'Access);
         Retval.m_IContainerVisual := new Windows.UI.Composition.IContainerVisual;
         Retval.m_IContainerVisual.all := m_ComRetVal;
      end return;
   end;

   function CreateCubicBezierEasingFunction
   (
      this : in out Compositor;
      controlPoint1 : Windows.Foundation.Numerics.Vector2;
      controlPoint2 : Windows.Foundation.Numerics.Vector2
   )
   return WinRt.Windows.UI.Composition.CubicBezierEasingFunction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICubicBezierEasingFunction;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CubicBezierEasingFunction do
         Hr := this.m_ICompositor.all.CreateCubicBezierEasingFunction (controlPoint1, controlPoint2, m_ComRetVal'Access);
         Retval.m_ICubicBezierEasingFunction := new Windows.UI.Composition.ICubicBezierEasingFunction;
         Retval.m_ICubicBezierEasingFunction.all := m_ComRetVal;
      end return;
   end;

   function CreateEffectFactory
   (
      this : in out Compositor;
      graphicsEffect : Windows.Graphics.Effects.IGraphicsEffect
   )
   return WinRt.Windows.UI.Composition.CompositionEffectFactory'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionEffectFactory;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionEffectFactory do
         Hr := this.m_ICompositor.all.CreateEffectFactory (graphicsEffect, m_ComRetVal'Access);
         Retval.m_ICompositionEffectFactory := new Windows.UI.Composition.ICompositionEffectFactory;
         Retval.m_ICompositionEffectFactory.all := m_ComRetVal;
      end return;
   end;

   function CreateEffectFactory
   (
      this : in out Compositor;
      graphicsEffect : Windows.Graphics.Effects.IGraphicsEffect;
      animatableProperties : GenericObject
   )
   return WinRt.Windows.UI.Composition.CompositionEffectFactory'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionEffectFactory;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionEffectFactory do
         Hr := this.m_ICompositor.all.CreateEffectFactory (graphicsEffect, animatableProperties, m_ComRetVal'Access);
         Retval.m_ICompositionEffectFactory := new Windows.UI.Composition.ICompositionEffectFactory;
         Retval.m_ICompositionEffectFactory.all := m_ComRetVal;
      end return;
   end;

   function CreateExpressionAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_ICompositor.all.CreateExpressionAnimation (m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateExpressionAnimation
   (
      this : in out Compositor;
      expression : WinRt.WString
   )
   return WinRt.Windows.UI.Composition.ExpressionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IExpressionAnimation;
      HStr_expression : WinRt.HString := To_HString (expression);
   begin
      return RetVal : WinRt.Windows.UI.Composition.ExpressionAnimation do
         Hr := this.m_ICompositor.all.CreateExpressionAnimation (HStr_expression, m_ComRetVal'Access);
         Retval.m_IExpressionAnimation := new Windows.UI.Composition.IExpressionAnimation;
         Retval.m_IExpressionAnimation.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_expression);
      end return;
   end;

   function CreateInsetClip
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.InsetClip'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IInsetClip;
   begin
      return RetVal : WinRt.Windows.UI.Composition.InsetClip do
         Hr := this.m_ICompositor.all.CreateInsetClip (m_ComRetVal'Access);
         Retval.m_IInsetClip := new Windows.UI.Composition.IInsetClip;
         Retval.m_IInsetClip.all := m_ComRetVal;
      end return;
   end;

   function CreateInsetClip
   (
      this : in out Compositor;
      leftInset : WinRt.Single;
      topInset : WinRt.Single;
      rightInset : WinRt.Single;
      bottomInset : WinRt.Single
   )
   return WinRt.Windows.UI.Composition.InsetClip'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IInsetClip;
   begin
      return RetVal : WinRt.Windows.UI.Composition.InsetClip do
         Hr := this.m_ICompositor.all.CreateInsetClip (leftInset, topInset, rightInset, bottomInset, m_ComRetVal'Access);
         Retval.m_IInsetClip := new Windows.UI.Composition.IInsetClip;
         Retval.m_IInsetClip.all := m_ComRetVal;
      end return;
   end;

   function CreateLinearEasingFunction
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.LinearEasingFunction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ILinearEasingFunction;
   begin
      return RetVal : WinRt.Windows.UI.Composition.LinearEasingFunction do
         Hr := this.m_ICompositor.all.CreateLinearEasingFunction (m_ComRetVal'Access);
         Retval.m_ILinearEasingFunction := new Windows.UI.Composition.ILinearEasingFunction;
         Retval.m_ILinearEasingFunction.all := m_ComRetVal;
      end return;
   end;

   function CreatePropertySet
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionPropertySet;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionPropertySet do
         Hr := this.m_ICompositor.all.CreatePropertySet (m_ComRetVal'Access);
         Retval.m_ICompositionPropertySet := new Windows.UI.Composition.ICompositionPropertySet;
         Retval.m_ICompositionPropertySet.all := m_ComRetVal;
      end return;
   end;

   function CreateQuaternionKeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.QuaternionKeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IQuaternionKeyFrameAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.QuaternionKeyFrameAnimation do
         Hr := this.m_ICompositor.all.CreateQuaternionKeyFrameAnimation (m_ComRetVal'Access);
         Retval.m_IQuaternionKeyFrameAnimation := new Windows.UI.Composition.IQuaternionKeyFrameAnimation;
         Retval.m_IQuaternionKeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateScalarKeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.ScalarKeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IScalarKeyFrameAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ScalarKeyFrameAnimation do
         Hr := this.m_ICompositor.all.CreateScalarKeyFrameAnimation (m_ComRetVal'Access);
         Retval.m_IScalarKeyFrameAnimation := new Windows.UI.Composition.IScalarKeyFrameAnimation;
         Retval.m_IScalarKeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateScopedBatch
   (
      this : in out Compositor;
      batchType : Windows.UI.Composition.CompositionBatchTypes
   )
   return WinRt.Windows.UI.Composition.CompositionScopedBatch'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionScopedBatch;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionScopedBatch do
         Hr := this.m_ICompositor.all.CreateScopedBatch (batchType, m_ComRetVal'Access);
         Retval.m_ICompositionScopedBatch := new Windows.UI.Composition.ICompositionScopedBatch;
         Retval.m_ICompositionScopedBatch.all := m_ComRetVal;
      end return;
   end;

   function CreateSpriteVisual
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.SpriteVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ISpriteVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.SpriteVisual do
         Hr := this.m_ICompositor.all.CreateSpriteVisual (m_ComRetVal'Access);
         Retval.m_ISpriteVisual := new Windows.UI.Composition.ISpriteVisual;
         Retval.m_ISpriteVisual.all := m_ComRetVal;
      end return;
   end;

   function CreateSurfaceBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionSurfaceBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionSurfaceBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionSurfaceBrush do
         Hr := this.m_ICompositor.all.CreateSurfaceBrush (m_ComRetVal'Access);
         Retval.m_ICompositionSurfaceBrush := new Windows.UI.Composition.ICompositionSurfaceBrush;
         Retval.m_ICompositionSurfaceBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateSurfaceBrush
   (
      this : in out Compositor;
      surface : Windows.UI.Composition.ICompositionSurface
   )
   return WinRt.Windows.UI.Composition.CompositionSurfaceBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionSurfaceBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionSurfaceBrush do
         Hr := this.m_ICompositor.all.CreateSurfaceBrush (surface, m_ComRetVal'Access);
         Retval.m_ICompositionSurfaceBrush := new Windows.UI.Composition.ICompositionSurfaceBrush;
         Retval.m_ICompositionSurfaceBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateTargetForCurrentView
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionTarget'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionTarget;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionTarget do
         Hr := this.m_ICompositor.all.CreateTargetForCurrentView (m_ComRetVal'Access);
         Retval.m_ICompositionTarget := new Windows.UI.Composition.ICompositionTarget;
         Retval.m_ICompositionTarget.all := m_ComRetVal;
      end return;
   end;

   function CreateVector2KeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.Vector2KeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVector2KeyFrameAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Vector2KeyFrameAnimation do
         Hr := this.m_ICompositor.all.CreateVector2KeyFrameAnimation (m_ComRetVal'Access);
         Retval.m_IVector2KeyFrameAnimation := new Windows.UI.Composition.IVector2KeyFrameAnimation;
         Retval.m_IVector2KeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateVector3KeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.Vector3KeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVector3KeyFrameAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Vector3KeyFrameAnimation do
         Hr := this.m_ICompositor.all.CreateVector3KeyFrameAnimation (m_ComRetVal'Access);
         Retval.m_IVector3KeyFrameAnimation := new Windows.UI.Composition.IVector3KeyFrameAnimation;
         Retval.m_IVector3KeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateVector4KeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.Vector4KeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVector4KeyFrameAnimation;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Vector4KeyFrameAnimation do
         Hr := this.m_ICompositor.all.CreateVector4KeyFrameAnimation (m_ComRetVal'Access);
         Retval.m_IVector4KeyFrameAnimation := new Windows.UI.Composition.IVector4KeyFrameAnimation;
         Retval.m_IVector4KeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function GetCommitBatch
   (
      this : in out Compositor;
      batchType : Windows.UI.Composition.CompositionBatchTypes
   )
   return WinRt.Windows.UI.Composition.CompositionCommitBatch'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionCommitBatch;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionCommitBatch do
         Hr := this.m_ICompositor.all.GetCommitBatch (batchType, m_ComRetVal'Access);
         Retval.m_ICompositionCommitBatch := new Windows.UI.Composition.ICompositionCommitBatch;
         Retval.m_ICompositionCommitBatch.all := m_ComRetVal;
      end return;
   end;

   function CreateAmbientLight
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.AmbientLight'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IAmbientLight;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.AmbientLight do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateAmbientLight (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAmbientLight := new Windows.UI.Composition.IAmbientLight;
         Retval.m_IAmbientLight.all := m_ComRetVal;
      end return;
   end;

   function CreateAnimationGroup
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionAnimationGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionAnimationGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionAnimationGroup do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateAnimationGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionAnimationGroup := new Windows.UI.Composition.ICompositionAnimationGroup;
         Retval.m_ICompositionAnimationGroup.all := m_ComRetVal;
      end return;
   end;

   function CreateBackdropBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionBackdropBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBackdropBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBackdropBrush do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateBackdropBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionBackdropBrush := new Windows.UI.Composition.ICompositionBackdropBrush;
         Retval.m_ICompositionBackdropBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateDistantLight
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.DistantLight'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IDistantLight;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.DistantLight do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateDistantLight (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDistantLight := new Windows.UI.Composition.IDistantLight;
         Retval.m_IDistantLight.all := m_ComRetVal;
      end return;
   end;

   function CreateDropShadow
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.DropShadow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IDropShadow;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.DropShadow do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateDropShadow (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDropShadow := new Windows.UI.Composition.IDropShadow;
         Retval.m_IDropShadow.all := m_ComRetVal;
      end return;
   end;

   function CreateImplicitAnimationCollection
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.ImplicitAnimationCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IImplicitAnimationCollection;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.ImplicitAnimationCollection do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateImplicitAnimationCollection (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IImplicitAnimationCollection := new Windows.UI.Composition.IImplicitAnimationCollection;
         Retval.m_IImplicitAnimationCollection.all := m_ComRetVal;
      end return;
   end;

   function CreateLayerVisual
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.LayerVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ILayerVisual;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.LayerVisual do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateLayerVisual (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ILayerVisual := new Windows.UI.Composition.ILayerVisual;
         Retval.m_ILayerVisual.all := m_ComRetVal;
      end return;
   end;

   function CreateMaskBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionMaskBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionMaskBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionMaskBrush do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateMaskBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionMaskBrush := new Windows.UI.Composition.ICompositionMaskBrush;
         Retval.m_ICompositionMaskBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateNineGridBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionNineGridBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionNineGridBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionNineGridBrush do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateNineGridBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionNineGridBrush := new Windows.UI.Composition.ICompositionNineGridBrush;
         Retval.m_ICompositionNineGridBrush.all := m_ComRetVal;
      end return;
   end;

   function CreatePointLight
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.PointLight'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IPointLight;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.PointLight do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreatePointLight (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPointLight := new Windows.UI.Composition.IPointLight;
         Retval.m_IPointLight.all := m_ComRetVal;
      end return;
   end;

   function CreateSpotLight
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.SpotLight'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ISpotLight;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.SpotLight do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateSpotLight (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpotLight := new Windows.UI.Composition.ISpotLight;
         Retval.m_ISpotLight.all := m_ComRetVal;
      end return;
   end;

   function CreateStepEasingFunction
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.StepEasingFunction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IStepEasingFunction;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.StepEasingFunction do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateStepEasingFunction (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStepEasingFunction := new Windows.UI.Composition.IStepEasingFunction;
         Retval.m_IStepEasingFunction.all := m_ComRetVal;
      end return;
   end;

   function CreateStepEasingFunction
   (
      this : in out Compositor;
      stepCount : WinRt.Int32
   )
   return WinRt.Windows.UI.Composition.StepEasingFunction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IStepEasingFunction;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor2, WinRt.Windows.UI.Composition.IID_ICompositor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.StepEasingFunction do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateStepEasingFunction (stepCount, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStepEasingFunction := new Windows.UI.Composition.IStepEasingFunction;
         Retval.m_IStepEasingFunction.all := m_ComRetVal;
      end return;
   end;

   function CreateHostBackdropBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionBackdropBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBackdropBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor3, WinRt.Windows.UI.Composition.IID_ICompositor3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBackdropBrush do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateHostBackdropBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionBackdropBrush := new Windows.UI.Composition.ICompositionBackdropBrush;
         Retval.m_ICompositionBackdropBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateColorGradientStop
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionColorGradientStop'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionColorGradientStop;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor4, WinRt.Windows.UI.Composition.IID_ICompositor4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionColorGradientStop do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateColorGradientStop (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionColorGradientStop := new Windows.UI.Composition.ICompositionColorGradientStop;
         Retval.m_ICompositionColorGradientStop.all := m_ComRetVal;
      end return;
   end;

   function CreateColorGradientStop
   (
      this : in out Compositor;
      offset : WinRt.Single;
      color : Windows.UI.Color
   )
   return WinRt.Windows.UI.Composition.CompositionColorGradientStop'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionColorGradientStop;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor4, WinRt.Windows.UI.Composition.IID_ICompositor4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionColorGradientStop do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateColorGradientStop (offset, color, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionColorGradientStop := new Windows.UI.Composition.ICompositionColorGradientStop;
         Retval.m_ICompositionColorGradientStop.all := m_ComRetVal;
      end return;
   end;

   function CreateLinearGradientBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionLinearGradientBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionLinearGradientBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor4, WinRt.Windows.UI.Composition.IID_ICompositor4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionLinearGradientBrush do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateLinearGradientBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionLinearGradientBrush := new Windows.UI.Composition.ICompositionLinearGradientBrush;
         Retval.m_ICompositionLinearGradientBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateSpringScalarAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.SpringScalarNaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ISpringScalarNaturalMotionAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor4, WinRt.Windows.UI.Composition.IID_ICompositor4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.SpringScalarNaturalMotionAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateSpringScalarAnimation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpringScalarNaturalMotionAnimation := new Windows.UI.Composition.ISpringScalarNaturalMotionAnimation;
         Retval.m_ISpringScalarNaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateSpringVector2Animation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.SpringVector2NaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ISpringVector2NaturalMotionAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor4, WinRt.Windows.UI.Composition.IID_ICompositor4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.SpringVector2NaturalMotionAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateSpringVector2Animation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpringVector2NaturalMotionAnimation := new Windows.UI.Composition.ISpringVector2NaturalMotionAnimation;
         Retval.m_ISpringVector2NaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateSpringVector3Animation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.SpringVector3NaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ISpringVector3NaturalMotionAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor4, WinRt.Windows.UI.Composition.IID_ICompositor4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.SpringVector3NaturalMotionAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateSpringVector3Animation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpringVector3NaturalMotionAnimation := new Windows.UI.Composition.ISpringVector3NaturalMotionAnimation;
         Retval.m_ISpringVector3NaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   function get_Comment
   (
      this : in out Compositor
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositor.all);
      Hr := m_Interface.get_Comment (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Comment
   (
      this : in out Compositor;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositor.all);
      Hr := m_Interface.put_Comment (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_GlobalPlaybackRate
   (
      this : in out Compositor
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositor.all);
      Hr := m_Interface.get_GlobalPlaybackRate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_GlobalPlaybackRate
   (
      this : in out Compositor;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositor.all);
      Hr := m_Interface.put_GlobalPlaybackRate (value);
      m_RefCount := m_Interface.Release;
   end;

   function CreateBounceScalarAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.BounceScalarNaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IBounceScalarNaturalMotionAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.BounceScalarNaturalMotionAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateBounceScalarAnimation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBounceScalarNaturalMotionAnimation := new Windows.UI.Composition.IBounceScalarNaturalMotionAnimation;
         Retval.m_IBounceScalarNaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateBounceVector2Animation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.BounceVector2NaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IBounceVector2NaturalMotionAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.BounceVector2NaturalMotionAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateBounceVector2Animation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBounceVector2NaturalMotionAnimation := new Windows.UI.Composition.IBounceVector2NaturalMotionAnimation;
         Retval.m_IBounceVector2NaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateBounceVector3Animation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.BounceVector3NaturalMotionAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IBounceVector3NaturalMotionAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.BounceVector3NaturalMotionAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateBounceVector3Animation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBounceVector3NaturalMotionAnimation := new Windows.UI.Composition.IBounceVector3NaturalMotionAnimation;
         Retval.m_IBounceVector3NaturalMotionAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateContainerShape
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionContainerShape'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionContainerShape;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionContainerShape do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateContainerShape (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionContainerShape := new Windows.UI.Composition.ICompositionContainerShape;
         Retval.m_ICompositionContainerShape.all := m_ComRetVal;
      end return;
   end;

   function CreateEllipseGeometry
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionEllipseGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionEllipseGeometry;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionEllipseGeometry do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateEllipseGeometry (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionEllipseGeometry := new Windows.UI.Composition.ICompositionEllipseGeometry;
         Retval.m_ICompositionEllipseGeometry.all := m_ComRetVal;
      end return;
   end;

   function CreateLineGeometry
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionLineGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionLineGeometry;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionLineGeometry do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateLineGeometry (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionLineGeometry := new Windows.UI.Composition.ICompositionLineGeometry;
         Retval.m_ICompositionLineGeometry.all := m_ComRetVal;
      end return;
   end;

   function CreatePathGeometry
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionPathGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionPathGeometry;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionPathGeometry do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreatePathGeometry (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionPathGeometry := new Windows.UI.Composition.ICompositionPathGeometry;
         Retval.m_ICompositionPathGeometry.all := m_ComRetVal;
      end return;
   end;

   function CreatePathGeometry
   (
      this : in out Compositor;
      path : Windows.UI.Composition.CompositionPath'Class
   )
   return WinRt.Windows.UI.Composition.CompositionPathGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionPathGeometry;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionPathGeometry do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreatePathGeometry (path.m_ICompositionPath.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionPathGeometry := new Windows.UI.Composition.ICompositionPathGeometry;
         Retval.m_ICompositionPathGeometry.all := m_ComRetVal;
      end return;
   end;

   function CreatePathKeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.PathKeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IPathKeyFrameAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.PathKeyFrameAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreatePathKeyFrameAnimation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPathKeyFrameAnimation := new Windows.UI.Composition.IPathKeyFrameAnimation;
         Retval.m_IPathKeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateRectangleGeometry
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionRectangleGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionRectangleGeometry;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionRectangleGeometry do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateRectangleGeometry (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionRectangleGeometry := new Windows.UI.Composition.ICompositionRectangleGeometry;
         Retval.m_ICompositionRectangleGeometry.all := m_ComRetVal;
      end return;
   end;

   function CreateRoundedRectangleGeometry
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionRoundedRectangleGeometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionRoundedRectangleGeometry;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionRoundedRectangleGeometry do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateRoundedRectangleGeometry (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionRoundedRectangleGeometry := new Windows.UI.Composition.ICompositionRoundedRectangleGeometry;
         Retval.m_ICompositionRoundedRectangleGeometry.all := m_ComRetVal;
      end return;
   end;

   function CreateShapeVisual
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.ShapeVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IShapeVisual;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.ShapeVisual do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateShapeVisual (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IShapeVisual := new Windows.UI.Composition.IShapeVisual;
         Retval.m_IShapeVisual.all := m_ComRetVal;
      end return;
   end;

   function CreateSpriteShape
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionSpriteShape'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionSpriteShape;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionSpriteShape do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateSpriteShape (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionSpriteShape := new Windows.UI.Composition.ICompositionSpriteShape;
         Retval.m_ICompositionSpriteShape.all := m_ComRetVal;
      end return;
   end;

   function CreateSpriteShape
   (
      this : in out Compositor;
      geometry : Windows.UI.Composition.CompositionGeometry'Class
   )
   return WinRt.Windows.UI.Composition.CompositionSpriteShape'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionSpriteShape;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionSpriteShape do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateSpriteShape (geometry.m_ICompositionGeometry.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionSpriteShape := new Windows.UI.Composition.ICompositionSpriteShape;
         Retval.m_ICompositionSpriteShape.all := m_ComRetVal;
      end return;
   end;

   function CreateViewBox
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionViewBox'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionViewBox;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionViewBox do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateViewBox (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionViewBox := new Windows.UI.Composition.ICompositionViewBox;
         Retval.m_ICompositionViewBox.all := m_ComRetVal;
      end return;
   end;

   procedure RequestCommitAsync
   (
      this : in out Compositor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor5, WinRt.Windows.UI.Composition.IID_ICompositor5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositor.all);
      Hr := m_Interface.RequestCommitAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function CreateGeometricClip
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionGeometricClip'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionGeometricClip;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor6, WinRt.Windows.UI.Composition.IID_ICompositor6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionGeometricClip do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateGeometricClip (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionGeometricClip := new Windows.UI.Composition.ICompositionGeometricClip;
         Retval.m_ICompositionGeometricClip.all := m_ComRetVal;
      end return;
   end;

   function CreateGeometricClip
   (
      this : in out Compositor;
      geometry : Windows.UI.Composition.CompositionGeometry'Class
   )
   return WinRt.Windows.UI.Composition.CompositionGeometricClip'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionGeometricClip;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor6, WinRt.Windows.UI.Composition.IID_ICompositor6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionGeometricClip do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateGeometricClip (geometry.m_ICompositionGeometry.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionGeometricClip := new Windows.UI.Composition.ICompositionGeometricClip;
         Retval.m_ICompositionGeometricClip.all := m_ComRetVal;
      end return;
   end;

   function CreateRedirectVisual
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.RedirectVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IRedirectVisual;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor6, WinRt.Windows.UI.Composition.IID_ICompositor6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.RedirectVisual do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateRedirectVisual (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IRedirectVisual := new Windows.UI.Composition.IRedirectVisual;
         Retval.m_IRedirectVisual.all := m_ComRetVal;
      end return;
   end;

   function CreateRedirectVisual
   (
      this : in out Compositor;
      source : Windows.UI.Composition.Visual'Class
   )
   return WinRt.Windows.UI.Composition.RedirectVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IRedirectVisual;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor6, WinRt.Windows.UI.Composition.IID_ICompositor6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.RedirectVisual do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateRedirectVisual (source.m_IVisual.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IRedirectVisual := new Windows.UI.Composition.IRedirectVisual;
         Retval.m_IRedirectVisual.all := m_ComRetVal;
      end return;
   end;

   function CreateBooleanKeyFrameAnimation
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.BooleanKeyFrameAnimation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositor6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IBooleanKeyFrameAnimation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositor6, WinRt.Windows.UI.Composition.IID_ICompositor6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.BooleanKeyFrameAnimation do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateBooleanKeyFrameAnimation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBooleanKeyFrameAnimation := new Windows.UI.Composition.IBooleanKeyFrameAnimation;
         Retval.m_IBooleanKeyFrameAnimation.all := m_ComRetVal;
      end return;
   end;

   function CreateProjectedShadowCaster
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionProjectedShadowCaster'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositorWithProjectedShadow := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionProjectedShadowCaster;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositorWithProjectedShadow, WinRt.Windows.UI.Composition.IID_ICompositorWithProjectedShadow'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionProjectedShadowCaster do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateProjectedShadowCaster (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionProjectedShadowCaster := new Windows.UI.Composition.ICompositionProjectedShadowCaster;
         Retval.m_ICompositionProjectedShadowCaster.all := m_ComRetVal;
      end return;
   end;

   function CreateProjectedShadow
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionProjectedShadow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositorWithProjectedShadow := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionProjectedShadow;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositorWithProjectedShadow, WinRt.Windows.UI.Composition.IID_ICompositorWithProjectedShadow'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionProjectedShadow do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateProjectedShadow (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionProjectedShadow := new Windows.UI.Composition.ICompositionProjectedShadow;
         Retval.m_ICompositionProjectedShadow.all := m_ComRetVal;
      end return;
   end;

   function CreateProjectedShadowReceiver
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionProjectedShadowReceiver'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositorWithProjectedShadow := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionProjectedShadowReceiver;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositorWithProjectedShadow, WinRt.Windows.UI.Composition.IID_ICompositorWithProjectedShadow'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionProjectedShadowReceiver do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateProjectedShadowReceiver (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionProjectedShadowReceiver := new Windows.UI.Composition.ICompositionProjectedShadowReceiver;
         Retval.m_ICompositionProjectedShadowReceiver.all := m_ComRetVal;
      end return;
   end;

   function CreateRadialGradientBrush
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionRadialGradientBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositorWithRadialGradient := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionRadialGradientBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositorWithRadialGradient, WinRt.Windows.UI.Composition.IID_ICompositorWithRadialGradient'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionRadialGradientBrush do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateRadialGradientBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionRadialGradientBrush := new Windows.UI.Composition.ICompositionRadialGradientBrush;
         Retval.m_ICompositionRadialGradientBrush.all := m_ComRetVal;
      end return;
   end;

   function CreateVisualSurface
   (
      this : in out Compositor
   )
   return WinRt.Windows.UI.Composition.CompositionVisualSurface'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ICompositorWithVisualSurface := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionVisualSurface;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.UI.Composition.ICompositorWithVisualSurface, WinRt.Windows.UI.Composition.IID_ICompositorWithVisualSurface'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionVisualSurface do
         m_Interface := QInterface (this.m_ICompositor.all);
         Hr := m_Interface.CreateVisualSurface (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionVisualSurface := new Windows.UI.Composition.ICompositionVisualSurface;
         Retval.m_ICompositionVisualSurface.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out Compositor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ICompositor_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICompositor.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Visual

   procedure Initialize (this : in out Visual) is
   begin
      null;
   end;

   procedure Finalize (this : in out Visual) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVisual, IVisual_Ptr);
   begin
      if this.m_IVisual /= null then
         if this.m_IVisual.all /= null then
            RefCount := this.m_IVisual.all.Release;
            Free (this.m_IVisual);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Visual

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Visual

   function get_AnchorPoint
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_IVisual.all.get_AnchorPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AnchorPoint
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_AnchorPoint (value);
   end;

   function get_BackfaceVisibility
   (
      this : in out Visual
   )
   return WinRt.Windows.UI.Composition.CompositionBackfaceVisibility is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionBackfaceVisibility;
   begin
      Hr := this.m_IVisual.all.get_BackfaceVisibility (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BackfaceVisibility
   (
      this : in out Visual;
      value : Windows.UI.Composition.CompositionBackfaceVisibility
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_BackfaceVisibility (value);
   end;

   function get_BorderMode
   (
      this : in out Visual
   )
   return WinRt.Windows.UI.Composition.CompositionBorderMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionBorderMode;
   begin
      Hr := this.m_IVisual.all.get_BorderMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BorderMode
   (
      this : in out Visual;
      value : Windows.UI.Composition.CompositionBorderMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_BorderMode (value);
   end;

   function get_CenterPoint
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IVisual.all.get_CenterPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterPoint
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_CenterPoint (value);
   end;

   function get_Clip
   (
      this : in out Visual
   )
   return WinRt.Windows.UI.Composition.CompositionClip'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionClip;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionClip do
         Hr := this.m_IVisual.all.get_Clip (m_ComRetVal'Access);
         Retval.m_ICompositionClip := new Windows.UI.Composition.ICompositionClip;
         Retval.m_ICompositionClip.all := m_ComRetVal;
      end return;
   end;

   procedure put_Clip
   (
      this : in out Visual;
      value : Windows.UI.Composition.CompositionClip'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_Clip (value.m_ICompositionClip.all);
   end;

   function get_CompositeMode
   (
      this : in out Visual
   )
   return WinRt.Windows.UI.Composition.CompositionCompositeMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionCompositeMode;
   begin
      Hr := this.m_IVisual.all.get_CompositeMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CompositeMode
   (
      this : in out Visual;
      value : Windows.UI.Composition.CompositionCompositeMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_CompositeMode (value);
   end;

   function get_IsVisible
   (
      this : in out Visual
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVisual.all.get_IsVisible (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsVisible
   (
      this : in out Visual;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_IsVisible (value);
   end;

   function get_Offset
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IVisual.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_Offset (value);
   end;

   function get_Opacity
   (
      this : in out Visual
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IVisual.all.get_Opacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Opacity
   (
      this : in out Visual;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_Opacity (value);
   end;

   function get_Orientation
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_IVisual.all.get_Orientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Orientation
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_Orientation (value);
   end;

   function get_Parent
   (
      this : in out Visual
   )
   return WinRt.Windows.UI.Composition.ContainerVisual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IContainerVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.ContainerVisual do
         Hr := this.m_IVisual.all.get_Parent (m_ComRetVal'Access);
         Retval.m_IContainerVisual := new Windows.UI.Composition.IContainerVisual;
         Retval.m_IContainerVisual.all := m_ComRetVal;
      end return;
   end;

   function get_RotationAngle
   (
      this : in out Visual
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IVisual.all.get_RotationAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAngle
   (
      this : in out Visual;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_RotationAngle (value);
   end;

   function get_RotationAngleInDegrees
   (
      this : in out Visual
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IVisual.all.get_RotationAngleInDegrees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAngleInDegrees
   (
      this : in out Visual;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_RotationAngleInDegrees (value);
   end;

   function get_RotationAxis
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IVisual.all.get_RotationAxis (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationAxis
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_RotationAxis (value);
   end;

   function get_Scale
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IVisual.all.get_Scale (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Scale
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_Scale (value);
   end;

   function get_Size
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_IVisual.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_Size (value);
   end;

   function get_TransformMatrix
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Matrix4x4 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix4x4;
   begin
      Hr := this.m_IVisual.all.get_TransformMatrix (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TransformMatrix
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Matrix4x4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisual.all.put_TransformMatrix (value);
   end;

   function get_ParentForTransform
   (
      this : in out Visual
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual2, WinRt.Windows.UI.Composition.IID_IVisual2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         m_Interface := QInterface (this.m_IVisual.all);
         Hr := m_Interface.get_ParentForTransform (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_ParentForTransform
   (
      this : in out Visual;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual2, WinRt.Windows.UI.Composition.IID_IVisual2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisual.all);
      Hr := m_Interface.put_ParentForTransform (value.m_IVisual.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_RelativeOffsetAdjustment
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual2, WinRt.Windows.UI.Composition.IID_IVisual2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisual.all);
      Hr := m_Interface.get_RelativeOffsetAdjustment (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RelativeOffsetAdjustment
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual2, WinRt.Windows.UI.Composition.IID_IVisual2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisual.all);
      Hr := m_Interface.put_RelativeOffsetAdjustment (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RelativeSizeAdjustment
   (
      this : in out Visual
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual2, WinRt.Windows.UI.Composition.IID_IVisual2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisual.all);
      Hr := m_Interface.get_RelativeSizeAdjustment (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RelativeSizeAdjustment
   (
      this : in out Visual;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual2, WinRt.Windows.UI.Composition.IID_IVisual2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisual.all);
      Hr := m_Interface.put_RelativeSizeAdjustment (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsHitTestVisible
   (
      this : in out Visual
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual3, WinRt.Windows.UI.Composition.IID_IVisual3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisual.all);
      Hr := m_Interface.get_IsHitTestVisible (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsHitTestVisible
   (
      this : in out Visual;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IVisual3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisual_Interface, WinRt.Windows.UI.Composition.IVisual3, WinRt.Windows.UI.Composition.IID_IVisual3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisual.all);
      Hr := m_Interface.put_IsHitTestVisible (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContainerVisual

   procedure Initialize (this : in out ContainerVisual) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContainerVisual) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContainerVisual, IContainerVisual_Ptr);
   begin
      if this.m_IContainerVisual /= null then
         if this.m_IContainerVisual.all /= null then
            RefCount := this.m_IContainerVisual.all.Release;
            Free (this.m_IContainerVisual);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContainerVisual

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContainerVisual

   function get_Children
   (
      this : in out ContainerVisual
   )
   return WinRt.Windows.UI.Composition.VisualCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisualCollection;
   begin
      return RetVal : WinRt.Windows.UI.Composition.VisualCollection do
         Hr := this.m_IContainerVisual.all.get_Children (m_ComRetVal'Access);
         Retval.m_IVisualCollection := new Windows.UI.Composition.IVisualCollection;
         Retval.m_IVisualCollection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CubicBezierEasingFunction

   procedure Initialize (this : in out CubicBezierEasingFunction) is
   begin
      null;
   end;

   procedure Finalize (this : in out CubicBezierEasingFunction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICubicBezierEasingFunction, ICubicBezierEasingFunction_Ptr);
   begin
      if this.m_ICubicBezierEasingFunction /= null then
         if this.m_ICubicBezierEasingFunction.all /= null then
            RefCount := this.m_ICubicBezierEasingFunction.all.Release;
            Free (this.m_ICubicBezierEasingFunction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CubicBezierEasingFunction

   function get_ControlPoint1
   (
      this : in out CubicBezierEasingFunction
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICubicBezierEasingFunction.all.get_ControlPoint1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ControlPoint2
   (
      this : in out CubicBezierEasingFunction
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICubicBezierEasingFunction.all.get_ControlPoint2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DistantLight

   procedure Initialize (this : in out DistantLight) is
   begin
      null;
   end;

   procedure Finalize (this : in out DistantLight) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDistantLight, IDistantLight_Ptr);
   begin
      if this.m_IDistantLight /= null then
         if this.m_IDistantLight.all /= null then
            RefCount := this.m_IDistantLight.all.Release;
            Free (this.m_IDistantLight);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DistantLight

   function get_Color
   (
      this : in out DistantLight
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDistantLight.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out DistantLight;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDistantLight.all.put_Color (value);
   end;

   function get_CoordinateSpace
   (
      this : in out DistantLight
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_IDistantLight.all.get_CoordinateSpace (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_CoordinateSpace
   (
      this : in out DistantLight;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDistantLight.all.put_CoordinateSpace (value.m_IVisual.all);
   end;

   function get_Direction
   (
      this : in out DistantLight
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IDistantLight.all.get_Direction (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Direction
   (
      this : in out DistantLight;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDistantLight.all.put_Direction (value);
   end;

   function get_Intensity
   (
      this : in out DistantLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IDistantLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IDistantLight_Interface, WinRt.Windows.UI.Composition.IDistantLight2, WinRt.Windows.UI.Composition.IID_IDistantLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDistantLight.all);
      Hr := m_Interface.get_Intensity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Intensity
   (
      this : in out DistantLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IDistantLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IDistantLight_Interface, WinRt.Windows.UI.Composition.IDistantLight2, WinRt.Windows.UI.Composition.IID_IDistantLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDistantLight.all);
      Hr := m_Interface.put_Intensity (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DropShadow

   procedure Initialize (this : in out DropShadow) is
   begin
      null;
   end;

   procedure Finalize (this : in out DropShadow) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDropShadow, IDropShadow_Ptr);
   begin
      if this.m_IDropShadow /= null then
         if this.m_IDropShadow.all /= null then
            RefCount := this.m_IDropShadow.all.Release;
            Free (this.m_IDropShadow);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DropShadow

   function get_BlurRadius
   (
      this : in out DropShadow
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDropShadow.all.get_BlurRadius (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BlurRadius
   (
      this : in out DropShadow;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDropShadow.all.put_BlurRadius (value);
   end;

   function get_Color
   (
      this : in out DropShadow
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IDropShadow.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out DropShadow;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDropShadow.all.put_Color (value);
   end;

   function get_Mask
   (
      this : in out DropShadow
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_IDropShadow.all.get_Mask (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Mask
   (
      this : in out DropShadow;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDropShadow.all.put_Mask (value.m_ICompositionBrush.all);
   end;

   function get_Offset
   (
      this : in out DropShadow
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IDropShadow.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out DropShadow;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDropShadow.all.put_Offset (value);
   end;

   function get_Opacity
   (
      this : in out DropShadow
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDropShadow.all.get_Opacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Opacity
   (
      this : in out DropShadow;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDropShadow.all.put_Opacity (value);
   end;

   function get_SourcePolicy
   (
      this : in out DropShadow
   )
   return WinRt.Windows.UI.Composition.CompositionDropShadowSourcePolicy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IDropShadow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.CompositionDropShadowSourcePolicy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IDropShadow_Interface, WinRt.Windows.UI.Composition.IDropShadow2, WinRt.Windows.UI.Composition.IID_IDropShadow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDropShadow.all);
      Hr := m_Interface.get_SourcePolicy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SourcePolicy
   (
      this : in out DropShadow;
      value : Windows.UI.Composition.CompositionDropShadowSourcePolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IDropShadow2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IDropShadow_Interface, WinRt.Windows.UI.Composition.IDropShadow2, WinRt.Windows.UI.Composition.IID_IDropShadow2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDropShadow.all);
      Hr := m_Interface.put_SourcePolicy (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ExpressionAnimation

   procedure Initialize (this : in out ExpressionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ExpressionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IExpressionAnimation, IExpressionAnimation_Ptr);
   begin
      if this.m_IExpressionAnimation /= null then
         if this.m_IExpressionAnimation.all /= null then
            RefCount := this.m_IExpressionAnimation.all.Release;
            Free (this.m_IExpressionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ExpressionAnimation

   function get_Expression
   (
      this : in out ExpressionAnimation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IExpressionAnimation.all.get_Expression (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Expression
   (
      this : in out ExpressionAnimation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IExpressionAnimation.all.put_Expression (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImplicitAnimationCollection

   procedure Initialize (this : in out ImplicitAnimationCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImplicitAnimationCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImplicitAnimationCollection, IImplicitAnimationCollection_Ptr);
   begin
      if this.m_IImplicitAnimationCollection /= null then
         if this.m_IImplicitAnimationCollection.all /= null then
            RefCount := this.m_IImplicitAnimationCollection.all.Release;
            Free (this.m_IImplicitAnimationCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImplicitAnimationCollection

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,Windows.UI.Composition.ICompositionAnimationBase>
   function Lookup
   (
      this : in out ImplicitAnimationCollection;
      key : WinRt.WString
   )
   return WinRt.Windows.UI.Composition.ICompositionAnimationBase is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_ICompositionAnimationBase.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionAnimationBase;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (1269410333, 22444, 21726, (168, 7, 181, 46, 104, 155, 252, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IImplicitAnimationCollection_Interface, IMap_HString_ICompositionAnimationBase.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImplicitAnimationCollection.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out ImplicitAnimationCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_ICompositionAnimationBase.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1269410333, 22444, 21726, (168, 7, 181, 46, 104, 155, 252, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IImplicitAnimationCollection_Interface, IMap_HString_ICompositionAnimationBase.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImplicitAnimationCollection.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out ImplicitAnimationCollection;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_ICompositionAnimationBase.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (1269410333, 22444, 21726, (168, 7, 181, 46, 104, 155, 252, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IImplicitAnimationCollection_Interface, IMap_HString_ICompositionAnimationBase.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImplicitAnimationCollection.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out ImplicitAnimationCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_ICompositionAnimationBase.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1269410333, 22444, 21726, (168, 7, 181, 46, 104, 155, 252, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IImplicitAnimationCollection_Interface, IMap_HString_ICompositionAnimationBase.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImplicitAnimationCollection.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out ImplicitAnimationCollection;
      key : WinRt.WString;
      value : Windows.UI.Composition.ICompositionAnimationBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_ICompositionAnimationBase.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (1269410333, 22444, 21726, (168, 7, 181, 46, 104, 155, 252, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IImplicitAnimationCollection_Interface, IMap_HString_ICompositionAnimationBase.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImplicitAnimationCollection.all);
      Hr := m_Interface.Insert (HStr_key, value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out ImplicitAnimationCollection;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_ICompositionAnimationBase.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (1269410333, 22444, 21726, (168, 7, 181, 46, 104, 155, 252, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IImplicitAnimationCollection_Interface, IMap_HString_ICompositionAnimationBase.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImplicitAnimationCollection.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out ImplicitAnimationCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_ICompositionAnimationBase.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1269410333, 22444, 21726, (168, 7, 181, 46, 104, 155, 252, 4 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IImplicitAnimationCollection_Interface, IMap_HString_ICompositionAnimationBase.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImplicitAnimationCollection.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InitialValueExpressionCollection

   procedure Initialize (this : in out InitialValueExpressionCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out InitialValueExpressionCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InitialValueExpressionCollection

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,System.String>
   function Lookup
   (
      this : in out InitialValueExpressionCollection;
      key : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased HString;
      AdaRetval        : WString;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out InitialValueExpressionCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out InitialValueExpressionCollection;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out InitialValueExpressionCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out InitialValueExpressionCollection;
      key : WinRt.WString;
      value : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      HStr_value : WinRt.HString := To_HString (value);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Insert (HStr_key, HStr_value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out InitialValueExpressionCollection;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out InitialValueExpressionCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_HString.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4140955392, 18882, 21166, (129, 84, 130, 111, 153, 8, 119, 60 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_HString_HString.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InsetClip

   procedure Initialize (this : in out InsetClip) is
   begin
      null;
   end;

   procedure Finalize (this : in out InsetClip) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInsetClip, IInsetClip_Ptr);
   begin
      if this.m_IInsetClip /= null then
         if this.m_IInsetClip.all /= null then
            RefCount := this.m_IInsetClip.all.Release;
            Free (this.m_IInsetClip);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InsetClip

   function get_BottomInset
   (
      this : in out InsetClip
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInsetClip.all.get_BottomInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BottomInset
   (
      this : in out InsetClip;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInsetClip.all.put_BottomInset (value);
   end;

   function get_LeftInset
   (
      this : in out InsetClip
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInsetClip.all.get_LeftInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LeftInset
   (
      this : in out InsetClip;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInsetClip.all.put_LeftInset (value);
   end;

   function get_RightInset
   (
      this : in out InsetClip
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInsetClip.all.get_RightInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RightInset
   (
      this : in out InsetClip;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInsetClip.all.put_RightInset (value);
   end;

   function get_TopInset
   (
      this : in out InsetClip
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IInsetClip.all.get_TopInset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TopInset
   (
      this : in out InsetClip;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IInsetClip.all.put_TopInset (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LayerVisual

   procedure Initialize (this : in out LayerVisual) is
   begin
      null;
   end;

   procedure Finalize (this : in out LayerVisual) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILayerVisual, ILayerVisual_Ptr);
   begin
      if this.m_ILayerVisual /= null then
         if this.m_ILayerVisual.all /= null then
            RefCount := this.m_ILayerVisual.all.Release;
            Free (this.m_ILayerVisual);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LayerVisual

   function get_Effect
   (
      this : in out LayerVisual
   )
   return WinRt.Windows.UI.Composition.CompositionEffectBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionEffectBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionEffectBrush do
         Hr := this.m_ILayerVisual.all.get_Effect (m_ComRetVal'Access);
         Retval.m_ICompositionEffectBrush := new Windows.UI.Composition.ICompositionEffectBrush;
         Retval.m_ICompositionEffectBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Effect
   (
      this : in out LayerVisual;
      value : Windows.UI.Composition.CompositionEffectBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILayerVisual.all.put_Effect (value.m_ICompositionEffectBrush.all);
   end;

   function get_Shadow
   (
      this : in out LayerVisual
   )
   return WinRt.Windows.UI.Composition.CompositionShadow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ILayerVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionShadow;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ILayerVisual_Interface, WinRt.Windows.UI.Composition.ILayerVisual2, WinRt.Windows.UI.Composition.IID_ILayerVisual2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionShadow do
         m_Interface := QInterface (this.m_ILayerVisual.all);
         Hr := m_Interface.get_Shadow (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionShadow := new Windows.UI.Composition.ICompositionShadow;
         Retval.m_ICompositionShadow.all := m_ComRetVal;
      end return;
   end;

   procedure put_Shadow
   (
      this : in out LayerVisual;
      value : Windows.UI.Composition.CompositionShadow'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ILayerVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ILayerVisual_Interface, WinRt.Windows.UI.Composition.ILayerVisual2, WinRt.Windows.UI.Composition.IID_ILayerVisual2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILayerVisual.all);
      Hr := m_Interface.put_Shadow (value.m_ICompositionShadow.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LinearEasingFunction

   procedure Initialize (this : in out LinearEasingFunction) is
   begin
      null;
   end;

   procedure Finalize (this : in out LinearEasingFunction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILinearEasingFunction, ILinearEasingFunction_Ptr);
   begin
      if this.m_ILinearEasingFunction /= null then
         if this.m_ILinearEasingFunction.all /= null then
            RefCount := this.m_ILinearEasingFunction.all.Release;
            Free (this.m_ILinearEasingFunction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LinearEasingFunction

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PathKeyFrameAnimation

   procedure Initialize (this : in out PathKeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out PathKeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPathKeyFrameAnimation, IPathKeyFrameAnimation_Ptr);
   begin
      if this.m_IPathKeyFrameAnimation /= null then
         if this.m_IPathKeyFrameAnimation.all /= null then
            RefCount := this.m_IPathKeyFrameAnimation.all.Release;
            Free (this.m_IPathKeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PathKeyFrameAnimation

   procedure InsertKeyFrame
   (
      this : in out PathKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      path : Windows.UI.Composition.CompositionPath'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, path.m_ICompositionPath.all);
   end;

   procedure InsertKeyFrame
   (
      this : in out PathKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      path : Windows.UI.Composition.CompositionPath'Class;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPathKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, path.m_ICompositionPath.all, easingFunction.m_ICompositionEasingFunction.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PointLight

   procedure Initialize (this : in out PointLight) is
   begin
      null;
   end;

   procedure Finalize (this : in out PointLight) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPointLight, IPointLight_Ptr);
   begin
      if this.m_IPointLight /= null then
         if this.m_IPointLight.all /= null then
            RefCount := this.m_IPointLight.all.Release;
            Free (this.m_IPointLight);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PointLight

   function get_Color
   (
      this : in out PointLight
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IPointLight.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out PointLight;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPointLight.all.put_Color (value);
   end;

   function get_ConstantAttenuation
   (
      this : in out PointLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IPointLight.all.get_ConstantAttenuation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ConstantAttenuation
   (
      this : in out PointLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPointLight.all.put_ConstantAttenuation (value);
   end;

   function get_CoordinateSpace
   (
      this : in out PointLight
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_IPointLight.all.get_CoordinateSpace (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_CoordinateSpace
   (
      this : in out PointLight;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPointLight.all.put_CoordinateSpace (value.m_IVisual.all);
   end;

   function get_LinearAttenuation
   (
      this : in out PointLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IPointLight.all.get_LinearAttenuation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LinearAttenuation
   (
      this : in out PointLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPointLight.all.put_LinearAttenuation (value);
   end;

   function get_Offset
   (
      this : in out PointLight
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IPointLight.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out PointLight;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPointLight.all.put_Offset (value);
   end;

   function get_QuadraticAttenuation
   (
      this : in out PointLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IPointLight.all.get_QuadraticAttenuation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_QuadraticAttenuation
   (
      this : in out PointLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPointLight.all.put_QuadraticAttenuation (value);
   end;

   function get_Intensity
   (
      this : in out PointLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IPointLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IPointLight_Interface, WinRt.Windows.UI.Composition.IPointLight2, WinRt.Windows.UI.Composition.IID_IPointLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPointLight.all);
      Hr := m_Interface.get_Intensity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Intensity
   (
      this : in out PointLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IPointLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IPointLight_Interface, WinRt.Windows.UI.Composition.IPointLight2, WinRt.Windows.UI.Composition.IID_IPointLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPointLight.all);
      Hr := m_Interface.put_Intensity (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MinAttenuationCutoff
   (
      this : in out PointLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IPointLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IPointLight_Interface, WinRt.Windows.UI.Composition.IPointLight3, WinRt.Windows.UI.Composition.IID_IPointLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPointLight.all);
      Hr := m_Interface.get_MinAttenuationCutoff (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MinAttenuationCutoff
   (
      this : in out PointLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IPointLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IPointLight_Interface, WinRt.Windows.UI.Composition.IPointLight3, WinRt.Windows.UI.Composition.IID_IPointLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPointLight.all);
      Hr := m_Interface.put_MinAttenuationCutoff (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MaxAttenuationCutoff
   (
      this : in out PointLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IPointLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IPointLight_Interface, WinRt.Windows.UI.Composition.IPointLight3, WinRt.Windows.UI.Composition.IID_IPointLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPointLight.all);
      Hr := m_Interface.get_MaxAttenuationCutoff (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MaxAttenuationCutoff
   (
      this : in out PointLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.IPointLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IPointLight_Interface, WinRt.Windows.UI.Composition.IPointLight3, WinRt.Windows.UI.Composition.IID_IPointLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPointLight.all);
      Hr := m_Interface.put_MaxAttenuationCutoff (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for QuaternionKeyFrameAnimation

   procedure Initialize (this : in out QuaternionKeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out QuaternionKeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IQuaternionKeyFrameAnimation, IQuaternionKeyFrameAnimation_Ptr);
   begin
      if this.m_IQuaternionKeyFrameAnimation /= null then
         if this.m_IQuaternionKeyFrameAnimation.all /= null then
            RefCount := this.m_IQuaternionKeyFrameAnimation.all.Release;
            Free (this.m_IQuaternionKeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for QuaternionKeyFrameAnimation

   procedure InsertKeyFrame
   (
      this : in out QuaternionKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IQuaternionKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value);
   end;

   procedure InsertKeyFrame
   (
      this : in out QuaternionKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Quaternion;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IQuaternionKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value, easingFunction.m_ICompositionEasingFunction.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RedirectVisual

   procedure Initialize (this : in out RedirectVisual) is
   begin
      null;
   end;

   procedure Finalize (this : in out RedirectVisual) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRedirectVisual, IRedirectVisual_Ptr);
   begin
      if this.m_IRedirectVisual /= null then
         if this.m_IRedirectVisual.all /= null then
            RefCount := this.m_IRedirectVisual.all.Release;
            Free (this.m_IRedirectVisual);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RedirectVisual

   function get_Source
   (
      this : in out RedirectVisual
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_IRedirectVisual.all.get_Source (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_Source
   (
      this : in out RedirectVisual;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRedirectVisual.all.put_Source (value.m_IVisual.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RenderingDeviceReplacedEventArgs

   procedure Initialize (this : in out RenderingDeviceReplacedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RenderingDeviceReplacedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRenderingDeviceReplacedEventArgs, IRenderingDeviceReplacedEventArgs_Ptr);
   begin
      if this.m_IRenderingDeviceReplacedEventArgs /= null then
         if this.m_IRenderingDeviceReplacedEventArgs.all /= null then
            RefCount := this.m_IRenderingDeviceReplacedEventArgs.all.Release;
            Free (this.m_IRenderingDeviceReplacedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RenderingDeviceReplacedEventArgs

   function get_GraphicsDevice
   (
      this : in out RenderingDeviceReplacedEventArgs
   )
   return WinRt.Windows.UI.Composition.CompositionGraphicsDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionGraphicsDevice;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionGraphicsDevice do
         Hr := this.m_IRenderingDeviceReplacedEventArgs.all.get_GraphicsDevice (m_ComRetVal'Access);
         Retval.m_ICompositionGraphicsDevice := new Windows.UI.Composition.ICompositionGraphicsDevice;
         Retval.m_ICompositionGraphicsDevice.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScalarKeyFrameAnimation

   procedure Initialize (this : in out ScalarKeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScalarKeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScalarKeyFrameAnimation, IScalarKeyFrameAnimation_Ptr);
   begin
      if this.m_IScalarKeyFrameAnimation /= null then
         if this.m_IScalarKeyFrameAnimation.all /= null then
            RefCount := this.m_IScalarKeyFrameAnimation.all.Release;
            Free (this.m_IScalarKeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScalarKeyFrameAnimation

   procedure InsertKeyFrame
   (
      this : in out ScalarKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScalarKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value);
   end;

   procedure InsertKeyFrame
   (
      this : in out ScalarKeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : WinRt.Single;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScalarKeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value, easingFunction.m_ICompositionEasingFunction.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShapeVisual

   procedure Initialize (this : in out ShapeVisual) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShapeVisual) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShapeVisual, IShapeVisual_Ptr);
   begin
      if this.m_IShapeVisual /= null then
         if this.m_IShapeVisual.all /= null then
            RefCount := this.m_IShapeVisual.all.Release;
            Free (this.m_IShapeVisual);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShapeVisual

   function get_Shapes
   (
      this : in out ShapeVisual
   )
   return WinRt.Windows.UI.Composition.CompositionShapeCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionShapeCollection do
         Hr := this.m_IShapeVisual.all.get_Shapes (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_ViewBox
   (
      this : in out ShapeVisual
   )
   return WinRt.Windows.UI.Composition.CompositionViewBox'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionViewBox;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionViewBox do
         Hr := this.m_IShapeVisual.all.get_ViewBox (m_ComRetVal'Access);
         Retval.m_ICompositionViewBox := new Windows.UI.Composition.ICompositionViewBox;
         Retval.m_ICompositionViewBox.all := m_ComRetVal;
      end return;
   end;

   procedure put_ViewBox
   (
      this : in out ShapeVisual;
      value : Windows.UI.Composition.CompositionViewBox'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShapeVisual.all.put_ViewBox (value.m_ICompositionViewBox.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpotLight

   procedure Initialize (this : in out SpotLight) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpotLight) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpotLight, ISpotLight_Ptr);
   begin
      if this.m_ISpotLight /= null then
         if this.m_ISpotLight.all /= null then
            RefCount := this.m_ISpotLight.all.Release;
            Free (this.m_ISpotLight);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpotLight

   function get_ConstantAttenuation
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpotLight.all.get_ConstantAttenuation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ConstantAttenuation
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_ConstantAttenuation (value);
   end;

   function get_CoordinateSpace
   (
      this : in out SpotLight
   )
   return WinRt.Windows.UI.Composition.Visual'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.IVisual;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Visual do
         Hr := this.m_ISpotLight.all.get_CoordinateSpace (m_ComRetVal'Access);
         Retval.m_IVisual := new Windows.UI.Composition.IVisual;
         Retval.m_IVisual.all := m_ComRetVal;
      end return;
   end;

   procedure put_CoordinateSpace
   (
      this : in out SpotLight;
      value : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_CoordinateSpace (value.m_IVisual.all);
   end;

   function get_Direction
   (
      this : in out SpotLight
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpotLight.all.get_Direction (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Direction
   (
      this : in out SpotLight;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_Direction (value);
   end;

   function get_InnerConeAngle
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpotLight.all.get_InnerConeAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InnerConeAngle
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_InnerConeAngle (value);
   end;

   function get_InnerConeAngleInDegrees
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpotLight.all.get_InnerConeAngleInDegrees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InnerConeAngleInDegrees
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_InnerConeAngleInDegrees (value);
   end;

   function get_InnerConeColor
   (
      this : in out SpotLight
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ISpotLight.all.get_InnerConeColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InnerConeColor
   (
      this : in out SpotLight;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_InnerConeColor (value);
   end;

   function get_LinearAttenuation
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpotLight.all.get_LinearAttenuation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LinearAttenuation
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_LinearAttenuation (value);
   end;

   function get_Offset
   (
      this : in out SpotLight
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ISpotLight.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Offset
   (
      this : in out SpotLight;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_Offset (value);
   end;

   function get_OuterConeAngle
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpotLight.all.get_OuterConeAngle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OuterConeAngle
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_OuterConeAngle (value);
   end;

   function get_OuterConeAngleInDegrees
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpotLight.all.get_OuterConeAngleInDegrees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OuterConeAngleInDegrees
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_OuterConeAngleInDegrees (value);
   end;

   function get_OuterConeColor
   (
      this : in out SpotLight
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_ISpotLight.all.get_OuterConeColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OuterConeColor
   (
      this : in out SpotLight;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_OuterConeColor (value);
   end;

   function get_QuadraticAttenuation
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpotLight.all.get_QuadraticAttenuation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_QuadraticAttenuation
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpotLight.all.put_QuadraticAttenuation (value);
   end;

   function get_InnerConeIntensity
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight2, WinRt.Windows.UI.Composition.IID_ISpotLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.get_InnerConeIntensity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_InnerConeIntensity
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight2, WinRt.Windows.UI.Composition.IID_ISpotLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.put_InnerConeIntensity (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OuterConeIntensity
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight2, WinRt.Windows.UI.Composition.IID_ISpotLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.get_OuterConeIntensity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OuterConeIntensity
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight2, WinRt.Windows.UI.Composition.IID_ISpotLight2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.put_OuterConeIntensity (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MinAttenuationCutoff
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight3, WinRt.Windows.UI.Composition.IID_ISpotLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.get_MinAttenuationCutoff (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MinAttenuationCutoff
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight3, WinRt.Windows.UI.Composition.IID_ISpotLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.put_MinAttenuationCutoff (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MaxAttenuationCutoff
   (
      this : in out SpotLight
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight3, WinRt.Windows.UI.Composition.IID_ISpotLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.get_MaxAttenuationCutoff (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MaxAttenuationCutoff
   (
      this : in out SpotLight;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpotLight3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpotLight_Interface, WinRt.Windows.UI.Composition.ISpotLight3, WinRt.Windows.UI.Composition.IID_ISpotLight3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpotLight.all);
      Hr := m_Interface.put_MaxAttenuationCutoff (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpringScalarNaturalMotionAnimation

   procedure Initialize (this : in out SpringScalarNaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpringScalarNaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpringScalarNaturalMotionAnimation, ISpringScalarNaturalMotionAnimation_Ptr);
   begin
      if this.m_ISpringScalarNaturalMotionAnimation /= null then
         if this.m_ISpringScalarNaturalMotionAnimation.all /= null then
            RefCount := this.m_ISpringScalarNaturalMotionAnimation.all.Release;
            Free (this.m_ISpringScalarNaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpringScalarNaturalMotionAnimation

   function get_DampingRatio
   (
      this : in out SpringScalarNaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpringScalarNaturalMotionAnimation.all.get_DampingRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DampingRatio
   (
      this : in out SpringScalarNaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpringScalarNaturalMotionAnimation.all.put_DampingRatio (value);
   end;

   function get_Period
   (
      this : in out SpringScalarNaturalMotionAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISpringScalarNaturalMotionAnimation.all.get_Period (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Period
   (
      this : in out SpringScalarNaturalMotionAnimation;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpringScalarNaturalMotionAnimation.all.put_Period (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpringVector2NaturalMotionAnimation

   procedure Initialize (this : in out SpringVector2NaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpringVector2NaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpringVector2NaturalMotionAnimation, ISpringVector2NaturalMotionAnimation_Ptr);
   begin
      if this.m_ISpringVector2NaturalMotionAnimation /= null then
         if this.m_ISpringVector2NaturalMotionAnimation.all /= null then
            RefCount := this.m_ISpringVector2NaturalMotionAnimation.all.Release;
            Free (this.m_ISpringVector2NaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpringVector2NaturalMotionAnimation

   function get_DampingRatio
   (
      this : in out SpringVector2NaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpringVector2NaturalMotionAnimation.all.get_DampingRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DampingRatio
   (
      this : in out SpringVector2NaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpringVector2NaturalMotionAnimation.all.put_DampingRatio (value);
   end;

   function get_Period
   (
      this : in out SpringVector2NaturalMotionAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISpringVector2NaturalMotionAnimation.all.get_Period (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Period
   (
      this : in out SpringVector2NaturalMotionAnimation;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpringVector2NaturalMotionAnimation.all.put_Period (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpringVector3NaturalMotionAnimation

   procedure Initialize (this : in out SpringVector3NaturalMotionAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpringVector3NaturalMotionAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpringVector3NaturalMotionAnimation, ISpringVector3NaturalMotionAnimation_Ptr);
   begin
      if this.m_ISpringVector3NaturalMotionAnimation /= null then
         if this.m_ISpringVector3NaturalMotionAnimation.all /= null then
            RefCount := this.m_ISpringVector3NaturalMotionAnimation.all.Release;
            Free (this.m_ISpringVector3NaturalMotionAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpringVector3NaturalMotionAnimation

   function get_DampingRatio
   (
      this : in out SpringVector3NaturalMotionAnimation
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ISpringVector3NaturalMotionAnimation.all.get_DampingRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DampingRatio
   (
      this : in out SpringVector3NaturalMotionAnimation;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpringVector3NaturalMotionAnimation.all.put_DampingRatio (value);
   end;

   function get_Period
   (
      this : in out SpringVector3NaturalMotionAnimation
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISpringVector3NaturalMotionAnimation.all.get_Period (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Period
   (
      this : in out SpringVector3NaturalMotionAnimation;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpringVector3NaturalMotionAnimation.all.put_Period (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpriteVisual

   procedure Initialize (this : in out SpriteVisual) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpriteVisual) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpriteVisual, ISpriteVisual_Ptr);
   begin
      if this.m_ISpriteVisual /= null then
         if this.m_ISpriteVisual.all /= null then
            RefCount := this.m_ISpriteVisual.all.Release;
            Free (this.m_ISpriteVisual);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpriteVisual

   function get_Brush
   (
      this : in out SpriteVisual
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         Hr := this.m_ISpriteVisual.all.get_Brush (m_ComRetVal'Access);
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Brush
   (
      this : in out SpriteVisual;
      value : Windows.UI.Composition.CompositionBrush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpriteVisual.all.put_Brush (value.m_ICompositionBrush.all);
   end;

   function get_Shadow
   (
      this : in out SpriteVisual
   )
   return WinRt.Windows.UI.Composition.CompositionShadow'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpriteVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionShadow;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpriteVisual_Interface, WinRt.Windows.UI.Composition.ISpriteVisual2, WinRt.Windows.UI.Composition.IID_ISpriteVisual2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionShadow do
         m_Interface := QInterface (this.m_ISpriteVisual.all);
         Hr := m_Interface.get_Shadow (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionShadow := new Windows.UI.Composition.ICompositionShadow;
         Retval.m_ICompositionShadow.all := m_ComRetVal;
      end return;
   end;

   procedure put_Shadow
   (
      this : in out SpriteVisual;
      value : Windows.UI.Composition.CompositionShadow'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Composition.ISpriteVisual2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.ISpriteVisual_Interface, WinRt.Windows.UI.Composition.ISpriteVisual2, WinRt.Windows.UI.Composition.IID_ISpriteVisual2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpriteVisual.all);
      Hr := m_Interface.put_Shadow (value.m_ICompositionShadow.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StepEasingFunction

   procedure Initialize (this : in out StepEasingFunction) is
   begin
      null;
   end;

   procedure Finalize (this : in out StepEasingFunction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStepEasingFunction, IStepEasingFunction_Ptr);
   begin
      if this.m_IStepEasingFunction /= null then
         if this.m_IStepEasingFunction.all /= null then
            RefCount := this.m_IStepEasingFunction.all.Release;
            Free (this.m_IStepEasingFunction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StepEasingFunction

   function get_FinalStep
   (
      this : in out StepEasingFunction
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IStepEasingFunction.all.get_FinalStep (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FinalStep
   (
      this : in out StepEasingFunction;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStepEasingFunction.all.put_FinalStep (value);
   end;

   function get_InitialStep
   (
      this : in out StepEasingFunction
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IStepEasingFunction.all.get_InitialStep (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InitialStep
   (
      this : in out StepEasingFunction;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStepEasingFunction.all.put_InitialStep (value);
   end;

   function get_IsFinalStepSingleFrame
   (
      this : in out StepEasingFunction
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStepEasingFunction.all.get_IsFinalStepSingleFrame (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsFinalStepSingleFrame
   (
      this : in out StepEasingFunction;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStepEasingFunction.all.put_IsFinalStepSingleFrame (value);
   end;

   function get_IsInitialStepSingleFrame
   (
      this : in out StepEasingFunction
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStepEasingFunction.all.get_IsInitialStepSingleFrame (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsInitialStepSingleFrame
   (
      this : in out StepEasingFunction;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStepEasingFunction.all.put_IsInitialStepSingleFrame (value);
   end;

   function get_StepCount
   (
      this : in out StepEasingFunction
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IStepEasingFunction.all.get_StepCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StepCount
   (
      this : in out StepEasingFunction;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStepEasingFunction.all.put_StepCount (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Vector2KeyFrameAnimation

   procedure Initialize (this : in out Vector2KeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out Vector2KeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVector2KeyFrameAnimation, IVector2KeyFrameAnimation_Ptr);
   begin
      if this.m_IVector2KeyFrameAnimation /= null then
         if this.m_IVector2KeyFrameAnimation.all /= null then
            RefCount := this.m_IVector2KeyFrameAnimation.all.Release;
            Free (this.m_IVector2KeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Vector2KeyFrameAnimation

   procedure InsertKeyFrame
   (
      this : in out Vector2KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Vector2
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector2KeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value);
   end;

   procedure InsertKeyFrame
   (
      this : in out Vector2KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Vector2;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector2KeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value, easingFunction.m_ICompositionEasingFunction.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Vector3KeyFrameAnimation

   procedure Initialize (this : in out Vector3KeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out Vector3KeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVector3KeyFrameAnimation, IVector3KeyFrameAnimation_Ptr);
   begin
      if this.m_IVector3KeyFrameAnimation /= null then
         if this.m_IVector3KeyFrameAnimation.all /= null then
            RefCount := this.m_IVector3KeyFrameAnimation.all.Release;
            Free (this.m_IVector3KeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Vector3KeyFrameAnimation

   procedure InsertKeyFrame
   (
      this : in out Vector3KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Vector3
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector3KeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value);
   end;

   procedure InsertKeyFrame
   (
      this : in out Vector3KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Vector3;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector3KeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value, easingFunction.m_ICompositionEasingFunction.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Vector4KeyFrameAnimation

   procedure Initialize (this : in out Vector4KeyFrameAnimation) is
   begin
      null;
   end;

   procedure Finalize (this : in out Vector4KeyFrameAnimation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVector4KeyFrameAnimation, IVector4KeyFrameAnimation_Ptr);
   begin
      if this.m_IVector4KeyFrameAnimation /= null then
         if this.m_IVector4KeyFrameAnimation.all /= null then
            RefCount := this.m_IVector4KeyFrameAnimation.all.Release;
            Free (this.m_IVector4KeyFrameAnimation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Vector4KeyFrameAnimation

   procedure InsertKeyFrame
   (
      this : in out Vector4KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Vector4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector4KeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value);
   end;

   procedure InsertKeyFrame
   (
      this : in out Vector4KeyFrameAnimation;
      normalizedProgressKey : WinRt.Single;
      value : Windows.Foundation.Numerics.Vector4;
      easingFunction : Windows.UI.Composition.CompositionEasingFunction'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVector4KeyFrameAnimation.all.InsertKeyFrame (normalizedProgressKey, value, easingFunction.m_ICompositionEasingFunction.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VisualCollection

   procedure Initialize (this : in out VisualCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out VisualCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVisualCollection, IVisualCollection_Ptr);
   begin
      if this.m_IVisualCollection /= null then
         if this.m_IVisualCollection.all /= null then
            RefCount := this.m_IVisualCollection.all.Release;
            Free (this.m_IVisualCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VisualCollection

   function get_Count
   (
      this : in out VisualCollection
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IVisualCollection.all.get_Count (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure InsertAbove
   (
      this : in out VisualCollection;
      newChild : Windows.UI.Composition.Visual'Class;
      sibling : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualCollection.all.InsertAbove (newChild.m_IVisual.all, sibling.m_IVisual.all);
   end;

   procedure InsertAtBottom
   (
      this : in out VisualCollection;
      newChild : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualCollection.all.InsertAtBottom (newChild.m_IVisual.all);
   end;

   procedure InsertAtTop
   (
      this : in out VisualCollection;
      newChild : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualCollection.all.InsertAtTop (newChild.m_IVisual.all);
   end;

   procedure InsertBelow
   (
      this : in out VisualCollection;
      newChild : Windows.UI.Composition.Visual'Class;
      sibling : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualCollection.all.InsertBelow (newChild.m_IVisual.all, sibling.m_IVisual.all);
   end;

   procedure Remove
   (
      this : in out VisualCollection;
      child : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualCollection.all.Remove (child.m_IVisual.all);
   end;

   procedure RemoveAll
   (
      this : in out VisualCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualCollection.all.RemoveAll;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.Visual>
   function First
   (
      this : in out VisualCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IVisual.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1324187086, 58540, 22673, (155, 82, 121, 157, 112, 223, 71, 254 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisualCollection_Interface, IIterable_IVisual.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VisualUnorderedCollection

   procedure Initialize (this : in out VisualUnorderedCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out VisualUnorderedCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVisualUnorderedCollection, IVisualUnorderedCollection_Ptr);
   begin
      if this.m_IVisualUnorderedCollection /= null then
         if this.m_IVisualUnorderedCollection.all /= null then
            RefCount := this.m_IVisualUnorderedCollection.all.Release;
            Free (this.m_IVisualUnorderedCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VisualUnorderedCollection

   function get_Count
   (
      this : in out VisualUnorderedCollection
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IVisualUnorderedCollection.all.get_Count (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Add
   (
      this : in out VisualUnorderedCollection;
      newVisual : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualUnorderedCollection.all.Add (newVisual.m_IVisual.all);
   end;

   procedure Remove
   (
      this : in out VisualUnorderedCollection;
      visual_p : Windows.UI.Composition.Visual'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualUnorderedCollection.all.Remove (visual_p.m_IVisual.all);
   end;

   procedure RemoveAll
   (
      this : in out VisualUnorderedCollection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVisualUnorderedCollection.all.RemoveAll;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.Visual>
   function First
   (
      this : in out VisualUnorderedCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IVisual.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1324187086, 58540, 22673, (155, 82, 121, 157, 112, 223, 71, 254 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Composition.IVisualUnorderedCollection_Interface, IIterable_IVisual.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVisualUnorderedCollection.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

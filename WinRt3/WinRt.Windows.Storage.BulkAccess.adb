--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.FileProperties;
with WinRt.Windows.Storage.Search;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Storage.BulkAccess is

   package IAsyncOperation_IRandomAccessStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStream);
   package AsyncOperationCompletedHandler_IRandomAccessStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStream);

   package IAsyncOperation_StorageStreamTransaction is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageStreamTransaction);
   package AsyncOperationCompletedHandler_StorageStreamTransaction is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageStreamTransaction);

   package IAsyncOperation_StorageFile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFile);
   package AsyncOperationCompletedHandler_StorageFile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFile);

   package IAsyncOperation_IInputStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IInputStream);
   package AsyncOperationCompletedHandler_IInputStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IInputStream);

   package IAsyncOperation_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_BasicProperties is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.FileProperties.IBasicProperties);
   package AsyncOperationCompletedHandler_BasicProperties is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.FileProperties.IBasicProperties);

   package IAsyncOperation_StorageItemThumbnail is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_StorageItemThumbnail is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_StorageFolder is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFolder);
   package AsyncOperationCompletedHandler_StorageFolder is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFolder);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_IStorageItem is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageItem);
   package AsyncOperationCompletedHandler_IStorageItem is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageItem);

   package IAsyncOperation_IndexedState is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Search.IndexedState);
   package AsyncOperationCompletedHandler_IndexedState is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Search.IndexedState);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileInformation

   procedure Initialize (this : in out FileInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageItemInformation, IStorageItemInformation_Ptr);
   begin
      if this.m_IStorageItemInformation /= null then
         if this.m_IStorageItemInformation.all /= null then
            RefCount := this.m_IStorageItemInformation.all.Release;
            Free (this.m_IStorageItemInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileInformation

   function get_MusicProperties
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.MusicProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IMusicProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.MusicProperties do
         Hr := this.m_IStorageItemInformation.all.get_MusicProperties (m_ComRetVal'Access);
         Retval.m_IMusicProperties := new Windows.Storage.FileProperties.IMusicProperties;
         Retval.m_IMusicProperties.all := m_ComRetVal;
      end return;
   end;

   function get_VideoProperties
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.VideoProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IVideoProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.VideoProperties do
         Hr := this.m_IStorageItemInformation.all.get_VideoProperties (m_ComRetVal'Access);
         Retval.m_IVideoProperties := new Windows.Storage.FileProperties.IVideoProperties;
         Retval.m_IVideoProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ImageProperties
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.ImageProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IImageProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.ImageProperties do
         Hr := this.m_IStorageItemInformation.all.get_ImageProperties (m_ComRetVal'Access);
         Retval.m_IImageProperties := new Windows.Storage.FileProperties.IImageProperties;
         Retval.m_IImageProperties.all := m_ComRetVal;
      end return;
   end;

   function get_DocumentProperties
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.DocumentProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IDocumentProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.DocumentProperties do
         Hr := this.m_IStorageItemInformation.all.get_DocumentProperties (m_ComRetVal'Access);
         Retval.m_IDocumentProperties := new Windows.Storage.FileProperties.IDocumentProperties;
         Retval.m_IDocumentProperties.all := m_ComRetVal;
      end return;
   end;

   function get_BasicProperties
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.BasicProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IBasicProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.BasicProperties do
         Hr := this.m_IStorageItemInformation.all.get_BasicProperties (m_ComRetVal'Access);
         Retval.m_IBasicProperties := new Windows.Storage.FileProperties.IBasicProperties;
         Retval.m_IBasicProperties.all := m_ComRetVal;
      end return;
   end;

   function get_Thumbnail
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         Hr := this.m_IStorageItemInformation.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
         Retval.m_IRandomAccessStreamWithContentType.all := m_ComRetVal;
      end return;
   end;

   function add_ThumbnailUpdated
   (
      this : in out FileInformation;
      changedHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStorageItemInformation.all.add_ThumbnailUpdated (changedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ThumbnailUpdated
   (
      this : in out FileInformation;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageItemInformation.all.remove_ThumbnailUpdated (eventCookie);
   end;

   function add_PropertiesUpdated
   (
      this : in out FileInformation;
      changedHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStorageItemInformation.all.add_PropertiesUpdated (changedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PropertiesUpdated
   (
      this : in out FileInformation;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageItemInformation.all.remove_PropertiesUpdated (eventCookie);
   end;

   function get_FileType
   (
      this : in out FileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_FileType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContentType
   (
      this : in out FileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_ContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function OpenAsync
   (
      this : in out FileInformation;
      accessMode : Windows.Storage.FileAccessMode
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.OpenAsync (accessMode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function OpenTransactedWriteAsync
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.StorageStreamTransaction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageStreamTransaction.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageStreamTransaction.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageStreamTransaction;
      m_IID            : aliased WinRt.IID := (226574426, 39891, 24199, (130, 244, 155, 65, 40, 168, 135, 235 )); -- Windows.Storage.StorageStreamTransaction;
      m_HandlerIID     : aliased WinRt.IID := (3507960294, 10645, 23859, (191, 255, 81, 182, 4, 31, 104, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageStreamTransaction.Kind := new AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageStreamTransaction.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate, AsyncOperationCompletedHandler_StorageStreamTransaction.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageStreamTransaction do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.OpenTransactedWriteAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageStreamTransaction := new Windows.Storage.IStorageStreamTransaction;
                  Retval.m_IStorageStreamTransaction.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CopyAsync
   (
      this : in out FileInformation;
      destinationFolder : Windows.Storage.IStorageFolder
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CopyAsync (destinationFolder, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CopyAsync
   (
      this : in out FileInformation;
      destinationFolder : Windows.Storage.IStorageFolder;
      desiredNewName : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredNewName : WinRt.HString := To_HString (desiredNewName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CopyAsync (destinationFolder, HStr_desiredNewName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_desiredNewName);
      end return;
   end;

   function CopyAsync
   (
      this : in out FileInformation;
      destinationFolder : Windows.Storage.IStorageFolder;
      desiredNewName : WinRt.WString;
      option : Windows.Storage.NameCollisionOption
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredNewName : WinRt.HString := To_HString (desiredNewName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CopyAsync (destinationFolder, HStr_desiredNewName, option, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_desiredNewName);
      end return;
   end;

   procedure CopyAndReplaceAsync
   (
      this : in out FileInformation;
      fileToReplace : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.CopyAndReplaceAsync (fileToReplace, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure MoveAsync
   (
      this : in out FileInformation;
      destinationFolder : Windows.Storage.IStorageFolder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.MoveAsync (destinationFolder, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure MoveAsync
   (
      this : in out FileInformation;
      destinationFolder : Windows.Storage.IStorageFolder;
      desiredNewName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredNewName : WinRt.HString := To_HString (desiredNewName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.MoveAsync (destinationFolder, HStr_desiredNewName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_desiredNewName);
   end;

   procedure MoveAsync
   (
      this : in out FileInformation;
      destinationFolder : Windows.Storage.IStorageFolder;
      desiredNewName : WinRt.WString;
      option : Windows.Storage.NameCollisionOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredNewName : WinRt.HString := To_HString (desiredNewName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.MoveAsync (destinationFolder, HStr_desiredNewName, option, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_desiredNewName);
   end;

   procedure MoveAndReplaceAsync
   (
      this : in out FileInformation;
      fileToReplace : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile, WinRt.Windows.Storage.IID_IStorageFile'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.MoveAndReplaceAsync (fileToReplace, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function OpenSequentialReadAsync
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStreamReference := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (2835220274, 21869, 22593, (183, 238, 179, 69, 15, 181, 38, 102 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (3502047525, 36937, 22435, (189, 102, 226, 82, 93, 152, 200, 20 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Streams.IInputStreamReference, WinRt.Windows.Storage.Streams.IID_IInputStreamReference'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.OpenSequentialReadAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function OpenReadAsync
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStreamReference := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamWithContentType.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamWithContentType.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3299179614, 12976, 21939, (173, 19, 206, 28, 35, 4, 30, 214 )); -- Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_HandlerIID     : aliased WinRt.IID := (1037954292, 7481, 22760, (131, 177, 219, 237, 84, 28, 127, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamWithContentType.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStreamReference, WinRt.Windows.Storage.Streams.IID_IRandomAccessStreamReference'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.OpenReadAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure RenameAsync
   (
      this : in out FileInformation;
      desiredName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.RenameAsync (HStr_desiredName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_desiredName);
   end;

   procedure RenameAsync
   (
      this : in out FileInformation;
      desiredName : WinRt.WString;
      option : Windows.Storage.NameCollisionOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.RenameAsync (HStr_desiredName, option, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_desiredName);
   end;

   procedure DeleteAsync
   (
      this : in out FileInformation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.DeleteAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteAsync
   (
      this : in out FileInformation;
      option : Windows.Storage.StorageDeleteOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.DeleteAsync (option, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetBasicPropertiesAsync
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.BasicProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BasicProperties.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BasicProperties.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.FileProperties.IBasicProperties;
      m_IID            : aliased WinRt.IID := (1367741210, 17511, 20555, (151, 122, 7, 133, 168, 35, 4, 133 )); -- Windows.Storage.FileProperties.BasicProperties;
      m_HandlerIID     : aliased WinRt.IID := (3362101934, 18726, 21165, (143, 96, 216, 159, 229, 168, 223, 95 ));
      m_Handler        : AsyncOperationCompletedHandler_BasicProperties.Kind := new AsyncOperationCompletedHandler_BasicProperties.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BasicProperties.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BasicProperties.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BasicProperties.Kind_Delegate, AsyncOperationCompletedHandler_BasicProperties.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.BasicProperties do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetBasicPropertiesAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBasicProperties := new Windows.Storage.FileProperties.IBasicProperties;
                  Retval.m_IBasicProperties.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Name
   (
      this : in out FileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Path
   (
      this : in out FileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_Path (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Attributes
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileAttributes is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileAttributes;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DateCreated
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_DateCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsOfType
   (
      this : in out FileInformation;
      type_x : Windows.Storage.StorageItemTypes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.IsOfType (type_x, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetThumbnailAsync
   (
      this : in out FileInformation;
      mode : Windows.Storage.FileProperties.ThumbnailMode
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageItemThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageItemThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (298306654, 49230, 20711, (166, 94, 111, 105, 3, 105, 12, 22 )); -- Windows.Storage.FileProperties.StorageItemThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (1828730610, 43176, 20573, (176, 66, 208, 135, 220, 31, 193, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageItemThumbnail.Kind := new AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageItemThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_StorageItemThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetThumbnailAsync (mode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetThumbnailAsync
   (
      this : in out FileInformation;
      mode : Windows.Storage.FileProperties.ThumbnailMode;
      requestedSize : WinRt.UInt32
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageItemThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageItemThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (298306654, 49230, 20711, (166, 94, 111, 105, 3, 105, 12, 22 )); -- Windows.Storage.FileProperties.StorageItemThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (1828730610, 43176, 20573, (176, 66, 208, 135, 220, 31, 193, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageItemThumbnail.Kind := new AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageItemThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_StorageItemThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetThumbnailAsync (mode, requestedSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetThumbnailAsync
   (
      this : in out FileInformation;
      mode : Windows.Storage.FileProperties.ThumbnailMode;
      requestedSize : WinRt.UInt32;
      options : Windows.Storage.FileProperties.ThumbnailOptions
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageItemThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageItemThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (298306654, 49230, 20711, (166, 94, 111, 105, 3, 105, 12, 22 )); -- Windows.Storage.FileProperties.StorageItemThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (1828730610, 43176, 20573, (176, 66, 208, 135, 220, 31, 193, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageItemThumbnail.Kind := new AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageItemThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_StorageItemThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetThumbnailAsync (mode, requestedSize, options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_DisplayName
   (
      this : in out FileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayType
   (
      this : in out FileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_DisplayType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FolderRelativeId
   (
      this : in out FileInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_FolderRelativeId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemContentProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IStorageItemContentProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemContentProperties do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageItemContentProperties := new Windows.Storage.FileProperties.IStorageItemContentProperties;
         Retval.m_IStorageItemContentProperties.all := m_ComRetVal;
      end return;
   end;

   function GetParentAsync
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem2, WinRt.Windows.Storage.IID_IStorageItem2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetParentAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function IsEqual
   (
      this : in out FileInformation;
      item : Windows.Storage.IStorageItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem2, WinRt.Windows.Storage.IID_IStorageItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.IsEqual (item, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Provider
   (
      this : in out FileInformation
   )
   return WinRt.Windows.Storage.StorageProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemPropertiesWithProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageProvider;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemPropertiesWithProvider, WinRt.Windows.Storage.IID_IStorageItemPropertiesWithProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageProvider do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.get_Provider (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageProvider := new Windows.Storage.IStorageProvider;
         Retval.m_IStorageProvider.all := m_ComRetVal;
      end return;
   end;

   function get_IsAvailable
   (
      this : in out FileInformation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFilePropertiesWithAvailability := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFilePropertiesWithAvailability, WinRt.Windows.Storage.IID_IStorageFilePropertiesWithAvailability'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_IsAvailable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function OpenAsync
   (
      this : in out FileInformation;
      accessMode : Windows.Storage.FileAccessMode;
      options : Windows.Storage.StorageOpenOptions
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile2, WinRt.Windows.Storage.IID_IStorageFile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.OpenAsync (accessMode, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function OpenTransactedWriteAsync
   (
      this : in out FileInformation;
      options : Windows.Storage.StorageOpenOptions
   )
   return WinRt.Windows.Storage.StorageStreamTransaction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageStreamTransaction.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageStreamTransaction.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageStreamTransaction;
      m_IID            : aliased WinRt.IID := (226574426, 39891, 24199, (130, 244, 155, 65, 40, 168, 135, 235 )); -- Windows.Storage.StorageStreamTransaction;
      m_HandlerIID     : aliased WinRt.IID := (3507960294, 10645, 23859, (191, 255, 81, 182, 4, 31, 104, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageStreamTransaction.Kind := new AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageStreamTransaction.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate, AsyncOperationCompletedHandler_StorageStreamTransaction.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFile2, WinRt.Windows.Storage.IID_IStorageFile2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageStreamTransaction do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.OpenTransactedWriteAsync (options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageStreamTransaction := new Windows.Storage.IStorageStreamTransaction;
                  Retval.m_IStorageStreamTransaction.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileInformationFactory

   procedure Initialize (this : in out FileInformationFactory) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileInformationFactory) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileInformationFactory, IFileInformationFactory_Ptr);
   begin
      if this.m_IFileInformationFactory /= null then
         if this.m_IFileInformationFactory.all /= null then
            RefCount := this.m_IFileInformationFactory.all.Release;
            Free (this.m_IFileInformationFactory);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FileInformationFactory

   function Constructor
   (
      queryResult : Windows.Storage.Search.IStorageQueryResultBase;
      mode : Windows.Storage.FileProperties.ThumbnailMode
   )
   return FileInformationFactory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.BulkAccess.FileInformationFactory");
      m_Factory    : access IFileInformationFactoryFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.BulkAccess.IFileInformationFactory;
   begin
      return RetVal : FileInformationFactory do
         Hr := RoGetActivationFactory (m_hString, IID_IFileInformationFactoryFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMode (queryResult, mode, m_ComRetVal'Access);
            Retval.m_IFileInformationFactory := new Windows.Storage.BulkAccess.IFileInformationFactory;
            Retval.m_IFileInformationFactory.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      queryResult : Windows.Storage.Search.IStorageQueryResultBase;
      mode : Windows.Storage.FileProperties.ThumbnailMode;
      requestedThumbnailSize : WinRt.UInt32
   )
   return FileInformationFactory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.BulkAccess.FileInformationFactory");
      m_Factory    : access IFileInformationFactoryFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.BulkAccess.IFileInformationFactory;
   begin
      return RetVal : FileInformationFactory do
         Hr := RoGetActivationFactory (m_hString, IID_IFileInformationFactoryFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithModeAndSize (queryResult, mode, requestedThumbnailSize, m_ComRetVal'Access);
            Retval.m_IFileInformationFactory := new Windows.Storage.BulkAccess.IFileInformationFactory;
            Retval.m_IFileInformationFactory.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      queryResult : Windows.Storage.Search.IStorageQueryResultBase;
      mode : Windows.Storage.FileProperties.ThumbnailMode;
      requestedThumbnailSize : WinRt.UInt32;
      thumbnailOptions : Windows.Storage.FileProperties.ThumbnailOptions
   )
   return FileInformationFactory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.BulkAccess.FileInformationFactory");
      m_Factory    : access IFileInformationFactoryFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.BulkAccess.IFileInformationFactory;
   begin
      return RetVal : FileInformationFactory do
         Hr := RoGetActivationFactory (m_hString, IID_IFileInformationFactoryFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithModeAndSizeAndOptions (queryResult, mode, requestedThumbnailSize, thumbnailOptions, m_ComRetVal'Access);
            Retval.m_IFileInformationFactory := new Windows.Storage.BulkAccess.IFileInformationFactory;
            Retval.m_IFileInformationFactory.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      queryResult : Windows.Storage.Search.IStorageQueryResultBase;
      mode : Windows.Storage.FileProperties.ThumbnailMode;
      requestedThumbnailSize : WinRt.UInt32;
      thumbnailOptions : Windows.Storage.FileProperties.ThumbnailOptions;
      delayLoad : WinRt.Boolean
   )
   return FileInformationFactory is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.BulkAccess.FileInformationFactory");
      m_Factory    : access IFileInformationFactoryFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.BulkAccess.IFileInformationFactory;
   begin
      return RetVal : FileInformationFactory do
         Hr := RoGetActivationFactory (m_hString, IID_IFileInformationFactoryFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithModeAndSizeAndOptionsAndFlags (queryResult, mode, requestedThumbnailSize, thumbnailOptions, delayLoad, m_ComRetVal'Access);
            Retval.m_IFileInformationFactory := new Windows.Storage.BulkAccess.IFileInformationFactory;
            Retval.m_IFileInformationFactory.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileInformationFactory

   function GetItemsAsync
   (
      this : in out FileInformationFactory;
      startIndex : WinRt.UInt32;
      maxItemsToRetrieve : WinRt.UInt32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1094522380, 15898, 22019, (172, 186, 30, 23, 109, 106, 96, 130 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4279644212, 60649, 21950, (166, 248, 8, 199, 42, 174, 86, 180 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFileInformationFactory.all.GetItemsAsync (startIndex, maxItemsToRetrieve, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetItemsAsync
   (
      this : in out FileInformationFactory
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1094522380, 15898, 22019, (172, 186, 30, 23, 109, 106, 96, 130 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4279644212, 60649, 21950, (166, 248, 8, 199, 42, 174, 86, 180 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFileInformationFactory.all.GetItemsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFilesAsync
   (
      this : in out FileInformationFactory;
      startIndex : WinRt.UInt32;
      maxItemsToRetrieve : WinRt.UInt32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (573533110, 59166, 21963, (136, 93, 224, 81, 227, 89, 149, 220 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3957009541, 53882, 23699, (161, 179, 108, 163, 101, 26, 218, 93 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFileInformationFactory.all.GetFilesAsync (startIndex, maxItemsToRetrieve, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFilesAsync
   (
      this : in out FileInformationFactory
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (573533110, 59166, 21963, (136, 93, 224, 81, 227, 89, 149, 220 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3957009541, 53882, 23699, (161, 179, 108, 163, 101, 26, 218, 93 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFileInformationFactory.all.GetFilesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFoldersAsync
   (
      this : in out FileInformationFactory;
      startIndex : WinRt.UInt32;
      maxItemsToRetrieve : WinRt.UInt32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2131813737, 11255, 22354, (143, 117, 96, 40, 9, 167, 211, 4 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (34018284, 24650, 24133, (176, 63, 27, 158, 101, 37, 56, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFileInformationFactory.all.GetFoldersAsync (startIndex, maxItemsToRetrieve, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFoldersAsync
   (
      this : in out FileInformationFactory
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2131813737, 11255, 22354, (143, 117, 96, 40, 9, 167, 211, 4 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (34018284, 24650, 24133, (176, 63, 27, 158, 101, 37, 56, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IFileInformationFactory.all.GetFoldersAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetVirtualizedItemsVector
   (
      this : in out FileInformationFactory
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IFileInformationFactory.all.GetVirtualizedItemsVector (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetVirtualizedFilesVector
   (
      this : in out FileInformationFactory
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IFileInformationFactory.all.GetVirtualizedFilesVector (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetVirtualizedFoldersVector
   (
      this : in out FileInformationFactory
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IFileInformationFactory.all.GetVirtualizedFoldersVector (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FolderInformation

   procedure Initialize (this : in out FolderInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out FolderInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageItemInformation, IStorageItemInformation_Ptr);
   begin
      if this.m_IStorageItemInformation /= null then
         if this.m_IStorageItemInformation.all /= null then
            RefCount := this.m_IStorageItemInformation.all.Release;
            Free (this.m_IStorageItemInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FolderInformation

   function get_MusicProperties
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.MusicProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IMusicProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.MusicProperties do
         Hr := this.m_IStorageItemInformation.all.get_MusicProperties (m_ComRetVal'Access);
         Retval.m_IMusicProperties := new Windows.Storage.FileProperties.IMusicProperties;
         Retval.m_IMusicProperties.all := m_ComRetVal;
      end return;
   end;

   function get_VideoProperties
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.VideoProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IVideoProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.VideoProperties do
         Hr := this.m_IStorageItemInformation.all.get_VideoProperties (m_ComRetVal'Access);
         Retval.m_IVideoProperties := new Windows.Storage.FileProperties.IVideoProperties;
         Retval.m_IVideoProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ImageProperties
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.ImageProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IImageProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.ImageProperties do
         Hr := this.m_IStorageItemInformation.all.get_ImageProperties (m_ComRetVal'Access);
         Retval.m_IImageProperties := new Windows.Storage.FileProperties.IImageProperties;
         Retval.m_IImageProperties.all := m_ComRetVal;
      end return;
   end;

   function get_DocumentProperties
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.DocumentProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IDocumentProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.DocumentProperties do
         Hr := this.m_IStorageItemInformation.all.get_DocumentProperties (m_ComRetVal'Access);
         Retval.m_IDocumentProperties := new Windows.Storage.FileProperties.IDocumentProperties;
         Retval.m_IDocumentProperties.all := m_ComRetVal;
      end return;
   end;

   function get_BasicProperties
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.BasicProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IBasicProperties;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.BasicProperties do
         Hr := this.m_IStorageItemInformation.all.get_BasicProperties (m_ComRetVal'Access);
         Retval.m_IBasicProperties := new Windows.Storage.FileProperties.IBasicProperties;
         Retval.m_IBasicProperties.all := m_ComRetVal;
      end return;
   end;

   function get_Thumbnail
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         Hr := this.m_IStorageItemInformation.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
         Retval.m_IRandomAccessStreamWithContentType.all := m_ComRetVal;
      end return;
   end;

   function add_ThumbnailUpdated
   (
      this : in out FolderInformation;
      changedHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStorageItemInformation.all.add_ThumbnailUpdated (changedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ThumbnailUpdated
   (
      this : in out FolderInformation;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageItemInformation.all.remove_ThumbnailUpdated (eventCookie);
   end;

   function add_PropertiesUpdated
   (
      this : in out FolderInformation;
      changedHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStorageItemInformation.all.add_PropertiesUpdated (changedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PropertiesUpdated
   (
      this : in out FolderInformation;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStorageItemInformation.all.remove_PropertiesUpdated (eventCookie);
   end;

   function CreateFileAsync
   (
      this : in out FolderInformation;
      desiredName : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFileAsync (HStr_desiredName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_desiredName);
      end return;
   end;

   function CreateFileAsync
   (
      this : in out FolderInformation;
      desiredName : WinRt.WString;
      options : Windows.Storage.CreationCollisionOption
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFileAsync (HStr_desiredName, options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_desiredName);
      end return;
   end;

   function CreateFolderAsync
   (
      this : in out FolderInformation;
      desiredName : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFolderAsync (HStr_desiredName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_desiredName);
      end return;
   end;

   function CreateFolderAsync
   (
      this : in out FolderInformation;
      desiredName : WinRt.WString;
      options : Windows.Storage.CreationCollisionOption
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFolderAsync (HStr_desiredName, options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_desiredName);
      end return;
   end;

   function GetFileAsync
   (
      this : in out FolderInformation;
      name : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetFileAsync (HStr_name, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetFolderAsync
   (
      this : in out FolderInformation;
      name : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetFolderAsync (HStr_name, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetItemAsync
   (
      this : in out FolderInformation;
      name : WinRt.WString
   )
   return WinRt.Windows.Storage.IStorageItem is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IStorageItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IStorageItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageItem;
      m_IID            : aliased WinRt.IID := (1607057719, 60343, 24172, (156, 186, 104, 111, 46, 194, 176, 187 )); -- Windows.Storage.IStorageItem;
      m_HandlerIID     : aliased WinRt.IID := (2462257199, 41767, 21272, (166, 193, 118, 246, 178, 160, 171, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_IStorageItem.Kind := new AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IStorageItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IStorageItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate, AsyncOperationCompletedHandler_IStorageItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetItemAsync (HStr_name, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_name);
      return m_RetVal;
   end;

   function GetFilesAsync
   (
      this : in out FolderInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (53882419, 58387, 24361, (151, 208, 72, 164, 120, 9, 53, 249 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3410101957, 2440, 20740, (175, 169, 37, 60, 41, 143, 134, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetFilesAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFoldersAsync
   (
      this : in out FolderInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3393237531, 44721, 23137, (158, 8, 59, 213, 217, 89, 64, 35 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3979156891, 9964, 23527, (168, 163, 86, 69, 137, 51, 210, 95 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetFoldersAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetItemsAsync
   (
      this : in out FolderInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1260130263, 31233, 24186, (166, 254, 190, 69, 0, 40, 63, 35 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1363373685, 44257, 23144, (178, 96, 248, 67, 184, 70, 240, 219 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder, WinRt.Windows.Storage.IID_IStorageFolder'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetItemsAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure RenameAsync
   (
      this : in out FolderInformation;
      desiredName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.RenameAsync (HStr_desiredName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_desiredName);
   end;

   procedure RenameAsync
   (
      this : in out FolderInformation;
      desiredName : WinRt.WString;
      option : Windows.Storage.NameCollisionOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.RenameAsync (HStr_desiredName, option, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_desiredName);
   end;

   procedure DeleteAsync
   (
      this : in out FolderInformation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.DeleteAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DeleteAsync
   (
      this : in out FolderInformation;
      option : Windows.Storage.StorageDeleteOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.DeleteAsync (option, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetBasicPropertiesAsync
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.BasicProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BasicProperties.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BasicProperties.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.FileProperties.IBasicProperties;
      m_IID            : aliased WinRt.IID := (1367741210, 17511, 20555, (151, 122, 7, 133, 168, 35, 4, 133 )); -- Windows.Storage.FileProperties.BasicProperties;
      m_HandlerIID     : aliased WinRt.IID := (3362101934, 18726, 21165, (143, 96, 216, 159, 229, 168, 223, 95 ));
      m_Handler        : AsyncOperationCompletedHandler_BasicProperties.Kind := new AsyncOperationCompletedHandler_BasicProperties.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BasicProperties.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BasicProperties.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BasicProperties.Kind_Delegate, AsyncOperationCompletedHandler_BasicProperties.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.BasicProperties do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetBasicPropertiesAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IBasicProperties := new Windows.Storage.FileProperties.IBasicProperties;
                  Retval.m_IBasicProperties.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Name
   (
      this : in out FolderInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_Name (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Path
   (
      this : in out FolderInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_Path (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Attributes
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileAttributes is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileAttributes;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_Attributes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DateCreated
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_DateCreated (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsOfType
   (
      this : in out FolderInformation;
      type_x : Windows.Storage.StorageItemTypes
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem, WinRt.Windows.Storage.IID_IStorageItem'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.IsOfType (type_x, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetThumbnailAsync
   (
      this : in out FolderInformation;
      mode : Windows.Storage.FileProperties.ThumbnailMode
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageItemThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageItemThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (298306654, 49230, 20711, (166, 94, 111, 105, 3, 105, 12, 22 )); -- Windows.Storage.FileProperties.StorageItemThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (1828730610, 43176, 20573, (176, 66, 208, 135, 220, 31, 193, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageItemThumbnail.Kind := new AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageItemThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_StorageItemThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetThumbnailAsync (mode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetThumbnailAsync
   (
      this : in out FolderInformation;
      mode : Windows.Storage.FileProperties.ThumbnailMode;
      requestedSize : WinRt.UInt32
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageItemThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageItemThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (298306654, 49230, 20711, (166, 94, 111, 105, 3, 105, 12, 22 )); -- Windows.Storage.FileProperties.StorageItemThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (1828730610, 43176, 20573, (176, 66, 208, 135, 220, 31, 193, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageItemThumbnail.Kind := new AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageItemThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_StorageItemThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetThumbnailAsync (mode, requestedSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetThumbnailAsync
   (
      this : in out FolderInformation;
      mode : Windows.Storage.FileProperties.ThumbnailMode;
      requestedSize : WinRt.UInt32;
      options : Windows.Storage.FileProperties.ThumbnailOptions
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemThumbnail'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageItemThumbnail.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageItemThumbnail.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (298306654, 49230, 20711, (166, 94, 111, 105, 3, 105, 12, 22 )); -- Windows.Storage.FileProperties.StorageItemThumbnail;
      m_HandlerIID     : aliased WinRt.IID := (1828730610, 43176, 20573, (176, 66, 208, 135, 220, 31, 193, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageItemThumbnail.Kind := new AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageItemThumbnail.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageItemThumbnail.Kind_Delegate, AsyncOperationCompletedHandler_StorageItemThumbnail.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemThumbnail do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetThumbnailAsync (mode, requestedSize, options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_DisplayName
   (
      this : in out FolderInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayType
   (
      this : in out FolderInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_DisplayType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FolderRelativeId
   (
      this : in out FolderInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.get_FolderRelativeId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.FileProperties.StorageItemContentProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.FileProperties.IStorageItemContentProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemProperties, WinRt.Windows.Storage.IID_IStorageItemProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.FileProperties.StorageItemContentProperties do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageItemContentProperties := new Windows.Storage.FileProperties.IStorageItemContentProperties;
         Retval.m_IStorageItemContentProperties.all := m_ComRetVal;
      end return;
   end;

   function GetIndexedStateAsync
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.Search.IndexedState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IndexedState.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IndexedState.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Search.IndexedState;
      m_IID            : aliased WinRt.IID := (2288601887, 62336, 22349, (138, 5, 79, 103, 189, 82, 205, 17 )); -- Windows.Storage.Search.IndexedState;
      m_HandlerIID     : aliased WinRt.IID := (3061464250, 62967, 24145, (150, 138, 56, 81, 38, 209, 249, 24 ));
      m_Handler        : AsyncOperationCompletedHandler_IndexedState.Kind := new AsyncOperationCompletedHandler_IndexedState.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IndexedState.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IndexedState.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IndexedState.Kind_Delegate, AsyncOperationCompletedHandler_IndexedState.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetIndexedStateAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function CreateFileQuery
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.Search.StorageFileQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFileQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFileQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFileQuery (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFileQueryResult := new Windows.Storage.Search.IStorageFileQueryResult;
         Retval.m_IStorageFileQueryResult.all := m_ComRetVal;
      end return;
   end;

   function CreateFileQuery
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFileQuery
   )
   return WinRt.Windows.Storage.Search.StorageFileQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFileQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFileQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFileQuery (query, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFileQueryResult := new Windows.Storage.Search.IStorageFileQueryResult;
         Retval.m_IStorageFileQueryResult.all := m_ComRetVal;
      end return;
   end;

   function CreateFileQueryWithOptions
   (
      this : in out FolderInformation;
      queryOptions : Windows.Storage.Search.QueryOptions'Class
   )
   return WinRt.Windows.Storage.Search.StorageFileQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFileQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFileQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFileQueryWithOptions (queryOptions.m_IQueryOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFileQueryResult := new Windows.Storage.Search.IStorageFileQueryResult;
         Retval.m_IStorageFileQueryResult.all := m_ComRetVal;
      end return;
   end;

   function CreateFolderQuery
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.Search.StorageFolderQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFolderQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFolderQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFolderQuery (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolderQueryResult := new Windows.Storage.Search.IStorageFolderQueryResult;
         Retval.m_IStorageFolderQueryResult.all := m_ComRetVal;
      end return;
   end;

   function CreateFolderQuery
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFolderQuery
   )
   return WinRt.Windows.Storage.Search.StorageFolderQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFolderQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFolderQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFolderQuery (query, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolderQueryResult := new Windows.Storage.Search.IStorageFolderQueryResult;
         Retval.m_IStorageFolderQueryResult.all := m_ComRetVal;
      end return;
   end;

   function CreateFolderQueryWithOptions
   (
      this : in out FolderInformation;
      queryOptions : Windows.Storage.Search.QueryOptions'Class
   )
   return WinRt.Windows.Storage.Search.StorageFolderQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageFolderQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageFolderQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateFolderQueryWithOptions (queryOptions.m_IQueryOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolderQueryResult := new Windows.Storage.Search.IStorageFolderQueryResult;
         Retval.m_IStorageFolderQueryResult.all := m_ComRetVal;
      end return;
   end;

   function CreateItemQuery
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.Search.StorageItemQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageItemQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageItemQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateItemQuery (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageItemQueryResult := new Windows.Storage.Search.IStorageItemQueryResult;
         Retval.m_IStorageItemQueryResult.all := m_ComRetVal;
      end return;
   end;

   function CreateItemQueryWithOptions
   (
      this : in out FolderInformation;
      queryOptions : Windows.Storage.Search.QueryOptions'Class
   )
   return WinRt.Windows.Storage.Search.StorageItemQueryResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Search.IStorageItemQueryResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Search.StorageItemQueryResult do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.CreateItemQueryWithOptions (queryOptions.m_IQueryOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageItemQueryResult := new Windows.Storage.Search.IStorageItemQueryResult;
         Retval.m_IStorageItemQueryResult.all := m_ComRetVal;
      end return;
   end;

   function GetFilesAsync
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFileQuery;
      startIndex : WinRt.UInt32;
      maxItemsToRetrieve : WinRt.UInt32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (53882419, 58387, 24361, (151, 208, 72, 164, 120, 9, 53, 249 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3410101957, 2440, 20740, (175, 169, 37, 60, 41, 143, 134, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetFilesAsync (query, startIndex, maxItemsToRetrieve, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFilesAsync
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFileQuery
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (53882419, 58387, 24361, (151, 208, 72, 164, 120, 9, 53, 249 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3410101957, 2440, 20740, (175, 169, 37, 60, 41, 143, 134, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetFilesAsync (query, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFoldersAsync
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFolderQuery;
      startIndex : WinRt.UInt32;
      maxItemsToRetrieve : WinRt.UInt32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3393237531, 44721, 23137, (158, 8, 59, 213, 217, 89, 64, 35 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3979156891, 9964, 23527, (168, 163, 86, 69, 137, 51, 210, 95 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetFoldersAsync (query, startIndex, maxItemsToRetrieve, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetFoldersAsync
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFolderQuery
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3393237531, 44721, 23137, (158, 8, 59, 213, 217, 89, 64, 35 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3979156891, 9964, 23527, (168, 163, 86, 69, 137, 51, 210, 95 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetFoldersAsync (query, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetItemsAsync
   (
      this : in out FolderInformation;
      startIndex : WinRt.UInt32;
      maxItemsToRetrieve : WinRt.UInt32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1260130263, 31233, 24186, (166, 254, 190, 69, 0, 40, 63, 35 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1363373685, 44257, 23144, (178, 96, 248, 67, 184, 70, 240, 219 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.GetItemsAsync (startIndex, maxItemsToRetrieve, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function AreQueryOptionsSupported
   (
      this : in out FolderInformation;
      queryOptions : Windows.Storage.Search.QueryOptions'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.AreQueryOptionsSupported (queryOptions.m_IQueryOptions.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsCommonFolderQuerySupported
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFolderQuery
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.IsCommonFolderQuerySupported (query, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsCommonFileQuerySupported
   (
      this : in out FolderInformation;
      query : Windows.Storage.Search.CommonFileQuery
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Search.IStorageFolderQueryOperations := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.Search.IStorageFolderQueryOperations, WinRt.Windows.Storage.Search.IID_IStorageFolderQueryOperations'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.IsCommonFileQuerySupported (query, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetParentAsync
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFolder.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFolder.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFolder;
      m_IID            : aliased WinRt.IID := (1810491351, 59450, 23740, (128, 44, 23, 104, 150, 11, 82, 195 )); -- Windows.Storage.StorageFolder;
      m_HandlerIID     : aliased WinRt.IID := (3255894638, 40547, 21586, (186, 84, 58, 7, 214, 169, 104, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFolder.Kind := new AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFolder.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFolder.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFolder.Kind_Delegate, AsyncOperationCompletedHandler_StorageFolder.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem2, WinRt.Windows.Storage.IID_IStorageItem2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.GetParentAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
                  Retval.m_IStorageFolder.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function IsEqual
   (
      this : in out FolderInformation;
      item : Windows.Storage.IStorageItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItem2, WinRt.Windows.Storage.IID_IStorageItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.IsEqual (item, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryGetItemAsync
   (
      this : in out FolderInformation;
      name : WinRt.WString
   )
   return WinRt.Windows.Storage.IStorageItem is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageFolder2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IStorageItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IStorageItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageItem;
      m_IID            : aliased WinRt.IID := (1607057719, 60343, 24172, (156, 186, 104, 111, 46, 194, 176, 187 )); -- Windows.Storage.IStorageItem;
      m_HandlerIID     : aliased WinRt.IID := (2462257199, 41767, 21272, (166, 193, 118, 246, 178, 160, 171, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_IStorageItem.Kind := new AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IStorageItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IStorageItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IStorageItem.Kind_Delegate, AsyncOperationCompletedHandler_IStorageItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageFolder2, WinRt.Windows.Storage.IID_IStorageFolder2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStorageItemInformation.all);
      Hr := m_Interface.TryGetItemAsync (HStr_name, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_name);
      return m_RetVal;
   end;

   function get_Provider
   (
      this : in out FolderInformation
   )
   return WinRt.Windows.Storage.StorageProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.IStorageItemPropertiesWithProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageProvider;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.BulkAccess.IStorageItemInformation_Interface, WinRt.Windows.Storage.IStorageItemPropertiesWithProvider, WinRt.Windows.Storage.IID_IStorageItemPropertiesWithProvider'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageProvider do
         m_Interface := QInterface (this.m_IStorageItemInformation.all);
         Hr := m_Interface.get_Provider (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageProvider := new Windows.Storage.IStorageProvider;
         Retval.m_IStorageProvider.all := m_ComRetVal;
      end return;
   end;

end;

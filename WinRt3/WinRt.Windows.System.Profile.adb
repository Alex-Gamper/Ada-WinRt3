--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.System.Profile is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AnalyticsInfo is

      function GetSystemPropertiesAsync
      (
         attributeNames : GenericObject
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.AnalyticsInfo");
         m_Factory        : access WinRt.Windows.System.Profile.IAnalyticsInfoStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_GenericObject.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.GenericObject;
         m_IID            : aliased WinRt.IID := (2172208310, 61510, 21393, (187, 11, 76, 195, 77, 128, 64, 243 )); -- GenericObject;
         m_HandlerIID     : aliased WinRt.IID := (1977817132, 59105, 22684, (171, 115, 232, 100, 75, 194, 133, 191 ));
         m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAnalyticsInfoStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetSystemPropertiesAsync (attributeNames, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function get_VersionInfo
      return WinRt.Windows.System.Profile.AnalyticsVersionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.AnalyticsInfo");
         m_Factory        : access WinRt.Windows.System.Profile.IAnalyticsInfoStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Profile.IAnalyticsVersionInfo;
      begin
         return RetVal : WinRt.Windows.System.Profile.AnalyticsVersionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IAnalyticsInfoStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_VersionInfo (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAnalyticsVersionInfo := new Windows.System.Profile.IAnalyticsVersionInfo;
               Retval.m_IAnalyticsVersionInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_DeviceForm
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.AnalyticsInfo");
         m_Factory        : access WinRt.Windows.System.Profile.IAnalyticsInfoStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAnalyticsInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DeviceForm (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end AnalyticsInfo;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AnalyticsVersionInfo

   procedure Initialize (this : in out AnalyticsVersionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AnalyticsVersionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAnalyticsVersionInfo, IAnalyticsVersionInfo_Ptr);
   begin
      if this.m_IAnalyticsVersionInfo /= null then
         if this.m_IAnalyticsVersionInfo.all /= null then
            RefCount := this.m_IAnalyticsVersionInfo.all.Release;
            Free (this.m_IAnalyticsVersionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AnalyticsVersionInfo

   function get_DeviceFamily
   (
      this : in out AnalyticsVersionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAnalyticsVersionInfo.all.get_DeviceFamily (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceFamilyVersion
   (
      this : in out AnalyticsVersionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAnalyticsVersionInfo.all.get_DeviceFamilyVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AppApplicability is

      function GetUnsupportedAppRequirements
      (
         capabilities : GenericObject
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.AppApplicability");
         m_Factory        : access WinRt.Windows.System.Profile.IAppApplicabilityStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppApplicabilityStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetUnsupportedAppRequirements (capabilities, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end AppApplicability;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body EducationSettings is

      function get_IsEducationEnvironment
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.EducationSettings");
         m_Factory        : access WinRt.Windows.System.Profile.IEducationSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IEducationSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsEducationEnvironment (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end EducationSettings;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body HardwareIdentification is

      function GetPackageSpecificToken
      (
         nonce : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.System.Profile.HardwareToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.HardwareIdentification");
         m_Factory        : access WinRt.Windows.System.Profile.IHardwareIdentificationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Profile.IHardwareToken;
      begin
         return RetVal : WinRt.Windows.System.Profile.HardwareToken do
            Hr := RoGetActivationFactory (m_hString, IID_IHardwareIdentificationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetPackageSpecificToken (nonce, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IHardwareToken := new Windows.System.Profile.IHardwareToken;
               Retval.m_IHardwareToken.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end HardwareIdentification;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HardwareToken

   procedure Initialize (this : in out HardwareToken) is
   begin
      null;
   end;

   procedure Finalize (this : in out HardwareToken) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHardwareToken, IHardwareToken_Ptr);
   begin
      if this.m_IHardwareToken /= null then
         if this.m_IHardwareToken.all /= null then
            RefCount := this.m_IHardwareToken.all.Release;
            Free (this.m_IHardwareToken);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HardwareToken

   function get_Id
   (
      this : in out HardwareToken
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHardwareToken.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Signature
   (
      this : in out HardwareToken
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHardwareToken.all.get_Signature (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Certificate
   (
      this : in out HardwareToken
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHardwareToken.all.get_Certificate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownRetailInfoProperties is

      function get_RetailAccessCode
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RetailAccessCode (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ManufacturerName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ManufacturerName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ModelName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ModelName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DisplayModelName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisplayModelName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Price
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Price (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IsFeatured
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsFeatured (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FormFactor
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FormFactor (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ScreenSize
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScreenSize (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Weight
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Weight (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DisplayDescription
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisplayDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BatteryLifeDescription
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BatteryLifeDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ProcessorDescription
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProcessorDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Memory
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Memory (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_StorageDescription
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StorageDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GraphicsDescription
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GraphicsDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FrontCameraDescription
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FrontCameraDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RearCameraDescription
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RearCameraDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HasNfc
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HasNfc (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HasSdSlot
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HasSdSlot (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HasOpticalDrive
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HasOpticalDrive (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IsOfficeInstalled
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsOfficeInstalled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_WindowsEdition
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.KnownRetailInfoProperties");
         m_Factory        : access WinRt.Windows.System.Profile.IKnownRetailInfoPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRetailInfoPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_WindowsEdition (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownRetailInfoProperties;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PlatformDiagnosticsAndUsageDataSettings is

      function get_CollectionLevel
      return WinRt.Windows.System.Profile.PlatformDataCollectionLevel is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings");
         m_Factory        : access WinRt.Windows.System.Profile.IPlatformDiagnosticsAndUsageDataSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Profile.PlatformDataCollectionLevel;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticsAndUsageDataSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CollectionLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_CollectionLevelChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings");
         m_Factory        : access WinRt.Windows.System.Profile.IPlatformDiagnosticsAndUsageDataSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticsAndUsageDataSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_CollectionLevelChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_CollectionLevelChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings");
         m_Factory        : access WinRt.Windows.System.Profile.IPlatformDiagnosticsAndUsageDataSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticsAndUsageDataSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_CollectionLevelChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function CanCollectDiagnostics
      (
         level : Windows.System.Profile.PlatformDataCollectionLevel
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.PlatformDiagnosticsAndUsageDataSettings");
         m_Factory        : access WinRt.Windows.System.Profile.IPlatformDiagnosticsAndUsageDataSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPlatformDiagnosticsAndUsageDataSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CanCollectDiagnostics (level, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end PlatformDiagnosticsAndUsageDataSettings;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body RetailInfo is

      function get_IsDemoModeEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.RetailInfo");
         m_Factory        : access WinRt.Windows.System.Profile.IRetailInfoStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRetailInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsDemoModeEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Properties
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.RetailInfo");
         m_Factory        : access WinRt.Windows.System.Profile.IRetailInfoStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRetailInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Properties (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end RetailInfo;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SharedModeSettings is

      function get_ShouldAvoidLocalStorage
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.SharedModeSettings");
         m_Factory        : access WinRt.Windows.System.Profile.ISharedModeSettingsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISharedModeSettingsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShouldAvoidLocalStorage (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IsEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.SharedModeSettings");
         m_Factory        : access WinRt.Windows.System.Profile.ISharedModeSettingsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISharedModeSettingsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end SharedModeSettings;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SystemIdentification is

      function GetSystemIdForPublisher
      return WinRt.Windows.System.Profile.SystemIdentificationInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.SystemIdentification");
         m_Factory        : access WinRt.Windows.System.Profile.ISystemIdentificationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Profile.ISystemIdentificationInfo;
      begin
         return RetVal : WinRt.Windows.System.Profile.SystemIdentificationInfo do
            Hr := RoGetActivationFactory (m_hString, IID_ISystemIdentificationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetSystemIdForPublisher (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISystemIdentificationInfo := new Windows.System.Profile.ISystemIdentificationInfo;
               Retval.m_ISystemIdentificationInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetSystemIdForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.System.Profile.SystemIdentificationInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.SystemIdentification");
         m_Factory        : access WinRt.Windows.System.Profile.ISystemIdentificationStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Profile.ISystemIdentificationInfo;
      begin
         return RetVal : WinRt.Windows.System.Profile.SystemIdentificationInfo do
            Hr := RoGetActivationFactory (m_hString, IID_ISystemIdentificationStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetSystemIdForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ISystemIdentificationInfo := new Windows.System.Profile.ISystemIdentificationInfo;
               Retval.m_ISystemIdentificationInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end SystemIdentification;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemIdentificationInfo

   procedure Initialize (this : in out SystemIdentificationInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemIdentificationInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemIdentificationInfo, ISystemIdentificationInfo_Ptr);
   begin
      if this.m_ISystemIdentificationInfo /= null then
         if this.m_ISystemIdentificationInfo.all /= null then
            RefCount := this.m_ISystemIdentificationInfo.all.Release;
            Free (this.m_ISystemIdentificationInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemIdentificationInfo

   function get_Id
   (
      this : in out SystemIdentificationInfo
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISystemIdentificationInfo.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Source
   (
      this : in out SystemIdentificationInfo
   )
   return WinRt.Windows.System.Profile.SystemIdentificationSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Profile.SystemIdentificationSource;
   begin
      Hr := this.m_ISystemIdentificationInfo.all.get_Source (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SystemSetupInfo is

      function get_OutOfBoxExperienceState
      return WinRt.Windows.System.Profile.SystemOutOfBoxExperienceState is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.SystemSetupInfo");
         m_Factory        : access WinRt.Windows.System.Profile.ISystemSetupInfoStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.System.Profile.SystemOutOfBoxExperienceState;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISystemSetupInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OutOfBoxExperienceState (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_OutOfBoxExperienceStateChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.SystemSetupInfo");
         m_Factory        : access WinRt.Windows.System.Profile.ISystemSetupInfoStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISystemSetupInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_OutOfBoxExperienceStateChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_OutOfBoxExperienceStateChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.SystemSetupInfo");
         m_Factory        : access WinRt.Windows.System.Profile.ISystemSetupInfoStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISystemSetupInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_OutOfBoxExperienceStateChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end SystemSetupInfo;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UnsupportedAppRequirement

   procedure Initialize (this : in out UnsupportedAppRequirement) is
   begin
      null;
   end;

   procedure Finalize (this : in out UnsupportedAppRequirement) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUnsupportedAppRequirement, IUnsupportedAppRequirement_Ptr);
   begin
      if this.m_IUnsupportedAppRequirement /= null then
         if this.m_IUnsupportedAppRequirement.all /= null then
            RefCount := this.m_IUnsupportedAppRequirement.all.Release;
            Free (this.m_IUnsupportedAppRequirement);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UnsupportedAppRequirement

   function get_Requirement
   (
      this : in out UnsupportedAppRequirement
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUnsupportedAppRequirement.all.get_Requirement (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Reasons
   (
      this : in out UnsupportedAppRequirement
   )
   return WinRt.Windows.System.Profile.UnsupportedAppRequirementReasons is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.Profile.UnsupportedAppRequirementReasons;
   begin
      Hr := this.m_IUnsupportedAppRequirement.all.get_Reasons (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WindowsIntegrityPolicy is

      function get_IsEnabled_WindowsIntegrityPolicy
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.WindowsIntegrityPolicy");
         m_Factory        : access WinRt.Windows.System.Profile.IWindowsIntegrityPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWindowsIntegrityPolicyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IsEnabledForTrial
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.WindowsIntegrityPolicy");
         m_Factory        : access WinRt.Windows.System.Profile.IWindowsIntegrityPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWindowsIntegrityPolicyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsEnabledForTrial (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CanDisable
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.WindowsIntegrityPolicy");
         m_Factory        : access WinRt.Windows.System.Profile.IWindowsIntegrityPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWindowsIntegrityPolicyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CanDisable (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IsDisableSupported
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.WindowsIntegrityPolicy");
         m_Factory        : access WinRt.Windows.System.Profile.IWindowsIntegrityPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWindowsIntegrityPolicyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsDisableSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function add_PolicyChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.WindowsIntegrityPolicy");
         m_Factory        : access WinRt.Windows.System.Profile.IWindowsIntegrityPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWindowsIntegrityPolicyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_PolicyChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_PolicyChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.System.Profile.WindowsIntegrityPolicy");
         m_Factory        : access WinRt.Windows.System.Profile.IWindowsIntegrityPolicyStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWindowsIntegrityPolicyStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_PolicyChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end WindowsIntegrityPolicy;

end;

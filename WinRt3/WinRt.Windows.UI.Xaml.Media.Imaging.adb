--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Background;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Media.Imaging is

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IBuffer);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer);

   package IAsyncOperation_SvgImageSourceLoadStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus);
   package AsyncOperationCompletedHandler_SvgImageSourceLoadStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapSource

   procedure Initialize (this : in out BitmapSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapSource, IBitmapSource_Ptr);
   begin
      if this.m_IBitmapSource /= null then
         if this.m_IBitmapSource.all /= null then
            RefCount := this.m_IBitmapSource.all.Release;
            Free (this.m_IBitmapSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BitmapSource

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return BitmapSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapSource");
      m_Factory    : access IBitmapSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IBitmapSource;
   begin
      return RetVal : BitmapSource do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IBitmapSource := new Windows.UI.Xaml.Media.Imaging.IBitmapSource;
            Retval.m_IBitmapSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BitmapSource

   function get_PixelWidthProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PixelWidthProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PixelHeightProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PixelHeightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapSource

   function get_PixelWidth
   (
      this : in out BitmapSource
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IBitmapSource.all.get_PixelWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelHeight
   (
      this : in out BitmapSource
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IBitmapSource.all.get_PixelHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetSource
   (
      this : in out BitmapSource;
      streamSource : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapSource.all.SetSource (streamSource);
   end;

   procedure SetSourceAsync
   (
      this : in out BitmapSource;
      streamSource : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IBitmapSource.all.SetSourceAsync (streamSource, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BitmapImage

   procedure Initialize (this : in out BitmapImage) is
   begin
      null;
   end;

   procedure Finalize (this : in out BitmapImage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBitmapImage, IBitmapImage_Ptr);
   begin
      if this.m_IBitmapImage /= null then
         if this.m_IBitmapImage.all /= null then
            RefCount := this.m_IBitmapImage.all.Release;
            Free (this.m_IBitmapImage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BitmapImage

   function Constructor
   (
      uriSource : Windows.Foundation.Uri'Class
   )
   return BitmapImage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory    : access IBitmapImageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IBitmapImage;
   begin
      return RetVal : BitmapImage do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithUriSource (uriSource.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IBitmapImage := new Windows.UI.Xaml.Media.Imaging.IBitmapImage;
            Retval.m_IBitmapImage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return BitmapImage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IBitmapImage;
   begin
      return RetVal : BitmapImage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBitmapImage := new Windows.UI.Xaml.Media.Imaging.IBitmapImage;
            Retval.m_IBitmapImage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BitmapImage

   function get_DecodePixelTypeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DecodePixelTypeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsAnimatedBitmapProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsAnimatedBitmapProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsPlayingProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsPlayingProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AutoPlayProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AutoPlayProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CreateOptionsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CreateOptionsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_UriSourceProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UriSourceProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DecodePixelWidthProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DecodePixelWidthProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DecodePixelHeightProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.BitmapImage");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IBitmapImageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DecodePixelHeightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BitmapImage

   function get_CreateOptions
   (
      this : in out BitmapImage
   )
   return WinRt.Windows.UI.Xaml.Media.Imaging.BitmapCreateOptions is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Imaging.BitmapCreateOptions;
   begin
      Hr := this.m_IBitmapImage.all.get_CreateOptions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CreateOptions
   (
      this : in out BitmapImage;
      value : Windows.UI.Xaml.Media.Imaging.BitmapCreateOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapImage.all.put_CreateOptions (value);
   end;

   function get_UriSource
   (
      this : in out BitmapImage
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IBitmapImage.all.get_UriSource (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_UriSource
   (
      this : in out BitmapImage;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapImage.all.put_UriSource (value.m_IUriRuntimeClass.all);
   end;

   function get_DecodePixelWidth
   (
      this : in out BitmapImage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IBitmapImage.all.get_DecodePixelWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DecodePixelWidth
   (
      this : in out BitmapImage;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapImage.all.put_DecodePixelWidth (value);
   end;

   function get_DecodePixelHeight
   (
      this : in out BitmapImage
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IBitmapImage.all.get_DecodePixelHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DecodePixelHeight
   (
      this : in out BitmapImage;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapImage.all.put_DecodePixelHeight (value);
   end;

   function add_DownloadProgress
   (
      this : in out BitmapImage;
      handler : Windows.UI.Xaml.Media.Imaging.DownloadProgressEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBitmapImage.all.add_DownloadProgress (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadProgress
   (
      this : in out BitmapImage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapImage.all.remove_DownloadProgress (token);
   end;

   function add_ImageOpened
   (
      this : in out BitmapImage;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBitmapImage.all.add_ImageOpened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ImageOpened
   (
      this : in out BitmapImage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapImage.all.remove_ImageOpened (token);
   end;

   function add_ImageFailed
   (
      this : in out BitmapImage;
      handler : Windows.UI.Xaml.ExceptionRoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBitmapImage.all.add_ImageFailed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ImageFailed
   (
      this : in out BitmapImage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBitmapImage.all.remove_ImageFailed (token);
   end;

   function get_DecodePixelType
   (
      this : in out BitmapImage
   )
   return WinRt.Windows.UI.Xaml.Media.Imaging.DecodePixelType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Imaging.DecodePixelType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage2, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.get_DecodePixelType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DecodePixelType
   (
      this : in out BitmapImage;
      value : Windows.UI.Xaml.Media.Imaging.DecodePixelType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage2, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.put_DecodePixelType (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsAnimatedBitmap
   (
      this : in out BitmapImage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.get_IsAnimatedBitmap (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsPlaying
   (
      this : in out BitmapImage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.get_IsPlaying (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AutoPlay
   (
      this : in out BitmapImage
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.get_AutoPlay (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutoPlay
   (
      this : in out BitmapImage;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.put_AutoPlay (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Play
   (
      this : in out BitmapImage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.Play;
      m_RefCount := m_Interface.Release;
   end;

   procedure Stop
   (
      this : in out BitmapImage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IBitmapImage3, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IBitmapImage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBitmapImage.all);
      Hr := m_Interface.Stop;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DownloadProgressEventArgs

   procedure Initialize (this : in out DownloadProgressEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DownloadProgressEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDownloadProgressEventArgs, IDownloadProgressEventArgs_Ptr);
   begin
      if this.m_IDownloadProgressEventArgs /= null then
         if this.m_IDownloadProgressEventArgs.all /= null then
            RefCount := this.m_IDownloadProgressEventArgs.all.Release;
            Free (this.m_IDownloadProgressEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DownloadProgressEventArgs

   function get_Progress
   (
      this : in out DownloadProgressEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IDownloadProgressEventArgs.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Progress
   (
      this : in out DownloadProgressEventArgs;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDownloadProgressEventArgs.all.put_Progress (value);
   end;

   -----------------------------------------------------------------------------
   -- Delegate DownloadProgressEventHandler

   function Invoke
   (
      this : access DownloadProgressEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RenderTargetBitmap

   procedure Initialize (this : in out RenderTargetBitmap) is
   begin
      null;
   end;

   procedure Finalize (this : in out RenderTargetBitmap) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRenderTargetBitmap, IRenderTargetBitmap_Ptr);
   begin
      if this.m_IRenderTargetBitmap /= null then
         if this.m_IRenderTargetBitmap.all /= null then
            RefCount := this.m_IRenderTargetBitmap.all.Release;
            Free (this.m_IRenderTargetBitmap);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RenderTargetBitmap

   function Constructor return RenderTargetBitmap is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IRenderTargetBitmap;
   begin
      return RetVal : RenderTargetBitmap do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRenderTargetBitmap := new Windows.UI.Xaml.Media.Imaging.IRenderTargetBitmap;
            Retval.m_IRenderTargetBitmap.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RenderTargetBitmap

   function get_PixelWidthProperty_RenderTargetBitmap
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IRenderTargetBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRenderTargetBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PixelWidthProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PixelHeightProperty_RenderTargetBitmap
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.IRenderTargetBitmapStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRenderTargetBitmapStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PixelHeightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RenderTargetBitmap

   function get_PixelWidth
   (
      this : in out RenderTargetBitmap
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRenderTargetBitmap.all.get_PixelWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PixelHeight
   (
      this : in out RenderTargetBitmap
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRenderTargetBitmap.all.get_PixelHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure RenderAsync
   (
      this : in out RenderTargetBitmap;
      element : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IRenderTargetBitmap.all.RenderAsync (element.m_IUIElement.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RenderAsync
   (
      this : in out RenderTargetBitmap;
      element : Windows.UI.Xaml.UIElement'Class;
      scaledWidth : WinRt.Int32;
      scaledHeight : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IRenderTargetBitmap.all.RenderAsync (element.m_IUIElement.all, scaledWidth, scaledHeight, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetPixelsAsync
   (
      this : in out RenderTargetBitmap
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRenderTargetBitmap.all.GetPixelsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SoftwareBitmapSource

   procedure Initialize (this : in out SoftwareBitmapSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out SoftwareBitmapSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISoftwareBitmapSource, ISoftwareBitmapSource_Ptr);
   begin
      if this.m_ISoftwareBitmapSource /= null then
         if this.m_ISoftwareBitmapSource.all /= null then
            RefCount := this.m_ISoftwareBitmapSource.all.Release;
            Free (this.m_ISoftwareBitmapSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SoftwareBitmapSource

   function Constructor return SoftwareBitmapSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.ISoftwareBitmapSource;
   begin
      return RetVal : SoftwareBitmapSource do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISoftwareBitmapSource := new Windows.UI.Xaml.Media.Imaging.ISoftwareBitmapSource;
            Retval.m_ISoftwareBitmapSource.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SoftwareBitmapSource

   procedure SetBitmapAsync
   (
      this : in out SoftwareBitmapSource;
      softwareBitmap : Windows.Graphics.Imaging.SoftwareBitmap'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISoftwareBitmapSource.all.SetBitmapAsync (softwareBitmap.m_ISoftwareBitmap.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out SoftwareBitmapSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.ISoftwareBitmapSource_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISoftwareBitmapSource.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SurfaceImageSource

   procedure Initialize (this : in out SurfaceImageSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out SurfaceImageSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISurfaceImageSource, ISurfaceImageSource_Ptr);
   begin
      if this.m_ISurfaceImageSource /= null then
         if this.m_ISurfaceImageSource.all /= null then
            RefCount := this.m_ISurfaceImageSource.all.Release;
            Free (this.m_ISurfaceImageSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SurfaceImageSource

   function Constructor
   (
      pixelWidth : WinRt.Int32;
      pixelHeight : WinRt.Int32;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SurfaceImageSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SurfaceImageSource");
      m_Factory    : access ISurfaceImageSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.ISurfaceImageSource;
   begin
      return RetVal : SurfaceImageSource do
         Hr := RoGetActivationFactory (m_hString, IID_ISurfaceImageSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithDimensions (pixelWidth, pixelHeight, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISurfaceImageSource := new Windows.UI.Xaml.Media.Imaging.ISurfaceImageSource;
            Retval.m_ISurfaceImageSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      pixelWidth : WinRt.Int32;
      pixelHeight : WinRt.Int32;
      isOpaque : WinRt.Boolean;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SurfaceImageSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SurfaceImageSource");
      m_Factory    : access ISurfaceImageSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.ISurfaceImageSource;
   begin
      return RetVal : SurfaceImageSource do
         Hr := RoGetActivationFactory (m_hString, IID_ISurfaceImageSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithDimensionsAndOpacity (pixelWidth, pixelHeight, isOpaque, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISurfaceImageSource := new Windows.UI.Xaml.Media.Imaging.ISurfaceImageSource;
            Retval.m_ISurfaceImageSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SurfaceImageSource

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SvgImageSource

   procedure Initialize (this : in out SvgImageSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out SvgImageSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISvgImageSource, ISvgImageSource_Ptr);
   begin
      if this.m_ISvgImageSource /= null then
         if this.m_ISvgImageSource.all /= null then
            RefCount := this.m_ISvgImageSource.all.Release;
            Free (this.m_ISvgImageSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SvgImageSource

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SvgImageSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SvgImageSource");
      m_Factory    : access ISvgImageSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.ISvgImageSource;
   begin
      return RetVal : SvgImageSource do
         Hr := RoGetActivationFactory (m_hString, IID_ISvgImageSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISvgImageSource := new Windows.UI.Xaml.Media.Imaging.ISvgImageSource;
            Retval.m_ISvgImageSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      uriSource : Windows.Foundation.Uri'Class;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SvgImageSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SvgImageSource");
      m_Factory    : access ISvgImageSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.ISvgImageSource;
   begin
      return RetVal : SvgImageSource do
         Hr := RoGetActivationFactory (m_hString, IID_ISvgImageSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithUriSource (uriSource.m_IUriRuntimeClass.all, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISvgImageSource := new Windows.UI.Xaml.Media.Imaging.ISvgImageSource;
            Retval.m_ISvgImageSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SvgImageSource

   function get_UriSourceProperty_SvgImageSource
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SvgImageSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.ISvgImageSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISvgImageSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UriSourceProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RasterizePixelWidthProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SvgImageSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.ISvgImageSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISvgImageSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RasterizePixelWidthProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RasterizePixelHeightProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.SvgImageSource");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Imaging.ISvgImageSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISvgImageSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RasterizePixelHeightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SvgImageSource

   function get_UriSource
   (
      this : in out SvgImageSource
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ISvgImageSource.all.get_UriSource (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_UriSource
   (
      this : in out SvgImageSource;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISvgImageSource.all.put_UriSource (value.m_IUriRuntimeClass.all);
   end;

   function get_RasterizePixelWidth
   (
      this : in out SvgImageSource
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISvgImageSource.all.get_RasterizePixelWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RasterizePixelWidth
   (
      this : in out SvgImageSource;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISvgImageSource.all.put_RasterizePixelWidth (value);
   end;

   function get_RasterizePixelHeight
   (
      this : in out SvgImageSource
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISvgImageSource.all.get_RasterizePixelHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RasterizePixelHeight
   (
      this : in out SvgImageSource;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISvgImageSource.all.put_RasterizePixelHeight (value);
   end;

   function add_Opened
   (
      this : in out SvgImageSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISvgImageSource.all.add_Opened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Opened
   (
      this : in out SvgImageSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISvgImageSource.all.remove_Opened (token);
   end;

   function add_OpenFailed
   (
      this : in out SvgImageSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISvgImageSource.all.add_OpenFailed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_OpenFailed
   (
      this : in out SvgImageSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISvgImageSource.all.remove_OpenFailed (token);
   end;

   function SetSourceAsync
   (
      this : in out SvgImageSource;
      streamSource : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SvgImageSourceLoadStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SvgImageSourceLoadStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus;
      m_IID            : aliased WinRt.IID := (4053661122, 11128, 21417, (141, 56, 92, 168, 219, 181, 219, 198 )); -- Windows.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus;
      m_HandlerIID     : aliased WinRt.IID := (2089535080, 19979, 22820, (183, 231, 35, 74, 17, 214, 61, 97 ));
      m_Handler        : AsyncOperationCompletedHandler_SvgImageSourceLoadStatus.Kind := new AsyncOperationCompletedHandler_SvgImageSourceLoadStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SvgImageSourceLoadStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SvgImageSourceLoadStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SvgImageSourceLoadStatus.Kind_Delegate, AsyncOperationCompletedHandler_SvgImageSourceLoadStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISvgImageSource.all.SetSourceAsync (streamSource, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SvgImageSourceFailedEventArgs

   procedure Initialize (this : in out SvgImageSourceFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SvgImageSourceFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISvgImageSourceFailedEventArgs, ISvgImageSourceFailedEventArgs_Ptr);
   begin
      if this.m_ISvgImageSourceFailedEventArgs /= null then
         if this.m_ISvgImageSourceFailedEventArgs.all /= null then
            RefCount := this.m_ISvgImageSourceFailedEventArgs.all.Release;
            Free (this.m_ISvgImageSourceFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SvgImageSourceFailedEventArgs

   function get_Status
   (
      this : in out SvgImageSourceFailedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus;
   begin
      Hr := this.m_ISvgImageSourceFailedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SvgImageSourceOpenedEventArgs

   procedure Initialize (this : in out SvgImageSourceOpenedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SvgImageSourceOpenedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISvgImageSourceOpenedEventArgs, ISvgImageSourceOpenedEventArgs_Ptr);
   begin
      if this.m_ISvgImageSourceOpenedEventArgs /= null then
         if this.m_ISvgImageSourceOpenedEventArgs.all /= null then
            RefCount := this.m_ISvgImageSourceOpenedEventArgs.all.Release;
            Free (this.m_ISvgImageSourceOpenedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SvgImageSourceOpenedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VirtualSurfaceImageSource

   procedure Initialize (this : in out VirtualSurfaceImageSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out VirtualSurfaceImageSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVirtualSurfaceImageSource, IVirtualSurfaceImageSource_Ptr);
   begin
      if this.m_IVirtualSurfaceImageSource /= null then
         if this.m_IVirtualSurfaceImageSource.all /= null then
            RefCount := this.m_IVirtualSurfaceImageSource.all.Release;
            Free (this.m_IVirtualSurfaceImageSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VirtualSurfaceImageSource

   function Constructor
   (
      pixelWidth : WinRt.Int32;
      pixelHeight : WinRt.Int32
   )
   return VirtualSurfaceImageSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource");
      m_Factory    : access IVirtualSurfaceImageSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource;
   begin
      return RetVal : VirtualSurfaceImageSource do
         Hr := RoGetActivationFactory (m_hString, IID_IVirtualSurfaceImageSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithDimensions (pixelWidth, pixelHeight, m_ComRetVal'Access);
            Retval.m_IVirtualSurfaceImageSource := new Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource;
            Retval.m_IVirtualSurfaceImageSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      pixelWidth : WinRt.Int32;
      pixelHeight : WinRt.Int32;
      isOpaque : WinRt.Boolean
   )
   return VirtualSurfaceImageSource is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource");
      m_Factory    : access IVirtualSurfaceImageSourceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource;
   begin
      return RetVal : VirtualSurfaceImageSource do
         Hr := RoGetActivationFactory (m_hString, IID_IVirtualSurfaceImageSourceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithDimensionsAndOpacity (pixelWidth, pixelHeight, isOpaque, m_ComRetVal'Access);
            Retval.m_IVirtualSurfaceImageSource := new Windows.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource;
            Retval.m_IVirtualSurfaceImageSource.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VirtualSurfaceImageSource

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WriteableBitmap

   procedure Initialize (this : in out WriteableBitmap) is
   begin
      null;
   end;

   procedure Finalize (this : in out WriteableBitmap) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWriteableBitmap, IWriteableBitmap_Ptr);
   begin
      if this.m_IWriteableBitmap /= null then
         if this.m_IWriteableBitmap.all /= null then
            RefCount := this.m_IWriteableBitmap.all.Release;
            Free (this.m_IWriteableBitmap);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WriteableBitmap

   function Constructor
   (
      pixelWidth : WinRt.Int32;
      pixelHeight : WinRt.Int32
   )
   return WriteableBitmap is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.WriteableBitmap");
      m_Factory    : access IWriteableBitmapFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IWriteableBitmap;
   begin
      return RetVal : WriteableBitmap do
         Hr := RoGetActivationFactory (m_hString, IID_IWriteableBitmapFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithDimensions (pixelWidth, pixelHeight, m_ComRetVal'Access);
            Retval.m_IWriteableBitmap := new Windows.UI.Xaml.Media.Imaging.IWriteableBitmap;
            Retval.m_IWriteableBitmap.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WriteableBitmap

   function get_PixelBuffer
   (
      this : in out WriteableBitmap
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWriteableBitmap.all.get_PixelBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Invalidate
   (
      this : in out WriteableBitmap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWriteableBitmap.all.Invalidate;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XamlRenderingBackgroundTask

   procedure Initialize (this : in out XamlRenderingBackgroundTask) is
   begin
      null;
   end;

   procedure Finalize (this : in out XamlRenderingBackgroundTask) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXamlRenderingBackgroundTask, IXamlRenderingBackgroundTask_Ptr);
   begin
      if this.m_IXamlRenderingBackgroundTask /= null then
         if this.m_IXamlRenderingBackgroundTask.all /= null then
            RefCount := this.m_IXamlRenderingBackgroundTask.all.Release;
            Free (this.m_IXamlRenderingBackgroundTask);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for XamlRenderingBackgroundTask

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return XamlRenderingBackgroundTask is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask");
      m_Factory    : access IXamlRenderingBackgroundTaskFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask;
   begin
      return RetVal : XamlRenderingBackgroundTask do
         Hr := RoGetActivationFactory (m_hString, IID_IXamlRenderingBackgroundTaskFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IXamlRenderingBackgroundTask := new Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask;
            Retval.m_IXamlRenderingBackgroundTask.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XamlRenderingBackgroundTask

   procedure OnRun
   (
      this : in out XamlRenderingBackgroundTask;
      taskInstance : Windows.ApplicationModel.Background.IBackgroundTaskInstance
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask_Interface, WinRt.Windows.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides, WinRt.Windows.UI.Xaml.Media.Imaging.IID_IXamlRenderingBackgroundTaskOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXamlRenderingBackgroundTask.all);
      Hr := m_Interface.OnRun (taskInstance);
      m_RefCount := m_Interface.Release;
   end;

end;

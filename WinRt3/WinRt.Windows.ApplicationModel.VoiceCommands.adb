--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.AppService;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Globalization;
with WinRt.Windows.Media.SpeechRecognition;
with WinRt.Windows.Storage;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.VoiceCommands is

   package IAsyncOperation_VoiceCommand is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommand);
   package AsyncOperationCompletedHandler_VoiceCommand is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommand);

   package IAsyncOperation_VoiceCommandConfirmationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandConfirmationResult);
   package AsyncOperationCompletedHandler_VoiceCommandConfirmationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandConfirmationResult);

   package IAsyncOperation_VoiceCommandDisambiguationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandDisambiguationResult);
   package AsyncOperationCompletedHandler_VoiceCommandDisambiguationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandDisambiguationResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommand

   procedure Initialize (this : in out VoiceCommand) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommand) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommand, IVoiceCommand_Ptr);
   begin
      if this.m_IVoiceCommand /= null then
         if this.m_IVoiceCommand.all /= null then
            RefCount := this.m_IVoiceCommand.all.Release;
            Free (this.m_IVoiceCommand);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommand

   function get_CommandName
   (
      this : in out VoiceCommand
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommand.all.get_CommandName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out VoiceCommand
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IVoiceCommand.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SpeechRecognitionResult
   (
      this : in out VoiceCommand
   )
   return WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
   begin
      return RetVal : WinRt.Windows.Media.SpeechRecognition.SpeechRecognitionResult do
         Hr := this.m_IVoiceCommand.all.get_SpeechRecognitionResult (m_ComRetVal'Access);
         Retval.m_ISpeechRecognitionResult := new Windows.Media.SpeechRecognition.ISpeechRecognitionResult;
         Retval.m_ISpeechRecognitionResult.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandCompletedEventArgs

   procedure Initialize (this : in out VoiceCommandCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandCompletedEventArgs, IVoiceCommandCompletedEventArgs_Ptr);
   begin
      if this.m_IVoiceCommandCompletedEventArgs /= null then
         if this.m_IVoiceCommandCompletedEventArgs.all /= null then
            RefCount := this.m_IVoiceCommandCompletedEventArgs.all.Release;
            Free (this.m_IVoiceCommandCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandCompletedEventArgs

   function get_Reason
   (
      this : in out VoiceCommandCompletedEventArgs
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandCompletionReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.VoiceCommandCompletionReason;
   begin
      Hr := this.m_IVoiceCommandCompletedEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandConfirmationResult

   procedure Initialize (this : in out VoiceCommandConfirmationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandConfirmationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandConfirmationResult, IVoiceCommandConfirmationResult_Ptr);
   begin
      if this.m_IVoiceCommandConfirmationResult /= null then
         if this.m_IVoiceCommandConfirmationResult.all /= null then
            RefCount := this.m_IVoiceCommandConfirmationResult.all.Release;
            Free (this.m_IVoiceCommandConfirmationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandConfirmationResult

   function get_Confirmed
   (
      this : in out VoiceCommandConfirmationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVoiceCommandConfirmationResult.all.get_Confirmed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandContentTile

   procedure Initialize (this : in out VoiceCommandContentTile) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandContentTile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandContentTile, IVoiceCommandContentTile_Ptr);
   begin
      if this.m_IVoiceCommandContentTile /= null then
         if this.m_IVoiceCommandContentTile.all /= null then
            RefCount := this.m_IVoiceCommandContentTile.all.Release;
            Free (this.m_IVoiceCommandContentTile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VoiceCommandContentTile

   function Constructor return VoiceCommandContentTile is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile");
      m_ComRetVal  : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandContentTile;
   begin
      return RetVal : VoiceCommandContentTile do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVoiceCommandContentTile := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandContentTile;
            Retval.m_IVoiceCommandContentTile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandContentTile

   function get_Title
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out VoiceCommandContentTile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TextLine1
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_TextLine1 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TextLine1
   (
      this : in out VoiceCommandContentTile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_TextLine1 (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TextLine2
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_TextLine2 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TextLine2
   (
      this : in out VoiceCommandContentTile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_TextLine2 (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TextLine3
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_TextLine3 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TextLine3
   (
      this : in out VoiceCommandContentTile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_TextLine3 (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Image
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.Windows.Storage.IStorageFile is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_Image (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Image
   (
      this : in out VoiceCommandContentTile;
      value : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_Image (value);
   end;

   function get_AppContext
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_AppContext (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AppContext
   (
      this : in out VoiceCommandContentTile;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_AppContext (value);
   end;

   function get_AppLaunchArgument
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_AppLaunchArgument (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AppLaunchArgument
   (
      this : in out VoiceCommandContentTile;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_AppLaunchArgument (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ContentTileType
   (
      this : in out VoiceCommandContentTile
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTileType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTileType;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.get_ContentTileType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ContentTileType
   (
      this : in out VoiceCommandContentTile;
      value : Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTileType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoiceCommandContentTile.all.put_ContentTileType (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandDefinition

   procedure Initialize (this : in out VoiceCommandDefinition) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandDefinition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandDefinition, IVoiceCommandDefinition_Ptr);
   begin
      if this.m_IVoiceCommandDefinition /= null then
         if this.m_IVoiceCommandDefinition.all /= null then
            RefCount := this.m_IVoiceCommandDefinition.all.Release;
            Free (this.m_IVoiceCommandDefinition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandDefinition

   function get_Language
   (
      this : in out VoiceCommandDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandDefinition.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out VoiceCommandDefinition
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandDefinition.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetPhraseListAsync
   (
      this : in out VoiceCommandDefinition;
      phraseListName : WinRt.WString;
      phraseList : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_phraseListName : WinRt.HString := To_HString (phraseListName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IVoiceCommandDefinition.all.SetPhraseListAsync (HStr_phraseListName, phraseList, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_phraseListName);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body VoiceCommandDefinitionManager is

      procedure InstallCommandDefinitionsFromStorageFileAsync
      (
         file : Windows.Storage.StorageFile'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandDefinitionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandDefinitionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandDefinitionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.InstallCommandDefinitionsFromStorageFileAsync (file.m_IStorageFile.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_InstalledCommandDefinitions
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandDefinitionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandDefinitionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandDefinitionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InstalledCommandDefinitions (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end VoiceCommandDefinitionManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandDisambiguationResult

   procedure Initialize (this : in out VoiceCommandDisambiguationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandDisambiguationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandDisambiguationResult, IVoiceCommandDisambiguationResult_Ptr);
   begin
      if this.m_IVoiceCommandDisambiguationResult /= null then
         if this.m_IVoiceCommandDisambiguationResult.all /= null then
            RefCount := this.m_IVoiceCommandDisambiguationResult.all.Release;
            Free (this.m_IVoiceCommandDisambiguationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandDisambiguationResult

   function get_SelectedItem
   (
      this : in out VoiceCommandDisambiguationResult
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandContentTile;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandContentTile do
         Hr := this.m_IVoiceCommandDisambiguationResult.all.get_SelectedItem (m_ComRetVal'Access);
         Retval.m_IVoiceCommandContentTile := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandContentTile;
         Retval.m_IVoiceCommandContentTile.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandResponse

   procedure Initialize (this : in out VoiceCommandResponse) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandResponse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandResponse, IVoiceCommandResponse_Ptr);
   begin
      if this.m_IVoiceCommandResponse /= null then
         if this.m_IVoiceCommandResponse.all /= null then
            RefCount := this.m_IVoiceCommandResponse.all.Release;
            Free (this.m_IVoiceCommandResponse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VoiceCommandResponse

   function get_MaxSupportedVoiceCommandContentTiles
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse");
      m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandResponseStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxSupportedVoiceCommandContentTiles (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function CreateResponse
   (
      userMessage : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse");
      m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandResponseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateResponse (userMessage.m_IVoiceCommandUserMessage.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVoiceCommandResponse := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
            Retval.m_IVoiceCommandResponse.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateResponse
   (
      message : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class;
      contentTiles : GenericObject
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse");
      m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandResponseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateResponse (message.m_IVoiceCommandUserMessage.all, contentTiles, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVoiceCommandResponse := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
            Retval.m_IVoiceCommandResponse.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateResponseForPrompt
   (
      message : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class;
      repeatMessage : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse");
      m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandResponseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateResponseForPrompt (message.m_IVoiceCommandUserMessage.all, repeatMessage.m_IVoiceCommandUserMessage.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVoiceCommandResponse := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
            Retval.m_IVoiceCommandResponse.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateResponseForPrompt
   (
      message : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class;
      repeatMessage : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class;
      contentTiles : GenericObject
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse");
      m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandResponseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateResponseForPrompt (message.m_IVoiceCommandUserMessage.all, repeatMessage.m_IVoiceCommandUserMessage.all, contentTiles, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVoiceCommandResponse := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandResponse;
            Retval.m_IVoiceCommandResponse.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandResponse

   function get_Message
   (
      this : in out VoiceCommandResponse
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandUserMessage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage do
         Hr := this.m_IVoiceCommandResponse.all.get_Message (m_ComRetVal'Access);
         Retval.m_IVoiceCommandUserMessage := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandUserMessage;
         Retval.m_IVoiceCommandUserMessage.all := m_ComRetVal;
      end return;
   end;

   procedure put_Message
   (
      this : in out VoiceCommandResponse;
      value : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoiceCommandResponse.all.put_Message (value.m_IVoiceCommandUserMessage.all);
   end;

   function get_RepeatMessage
   (
      this : in out VoiceCommandResponse
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandUserMessage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage do
         Hr := this.m_IVoiceCommandResponse.all.get_RepeatMessage (m_ComRetVal'Access);
         Retval.m_IVoiceCommandUserMessage := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandUserMessage;
         Retval.m_IVoiceCommandUserMessage.all := m_ComRetVal;
      end return;
   end;

   procedure put_RepeatMessage
   (
      this : in out VoiceCommandResponse;
      value : Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoiceCommandResponse.all.put_RepeatMessage (value.m_IVoiceCommandUserMessage.all);
   end;

   function get_AppLaunchArgument
   (
      this : in out VoiceCommandResponse
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandResponse.all.get_AppLaunchArgument (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AppLaunchArgument
   (
      this : in out VoiceCommandResponse;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandResponse.all.put_AppLaunchArgument (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_VoiceCommandContentTiles
   (
      this : in out VoiceCommandResponse
   )
   return IVector_IVoiceCommandContentTile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IVoiceCommandContentTile.Kind;
   begin
      Hr := this.m_IVoiceCommandResponse.all.get_VoiceCommandContentTiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IVoiceCommandContentTile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandServiceConnection

   procedure Initialize (this : in out VoiceCommandServiceConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandServiceConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandServiceConnection, IVoiceCommandServiceConnection_Ptr);
   begin
      if this.m_IVoiceCommandServiceConnection /= null then
         if this.m_IVoiceCommandServiceConnection.all /= null then
            RefCount := this.m_IVoiceCommandServiceConnection.all.Release;
            Free (this.m_IVoiceCommandServiceConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VoiceCommandServiceConnection

   function FromAppServiceTriggerDetails
   (
      triggerDetails : Windows.ApplicationModel.AppService.AppServiceTriggerDetails'Class
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection");
      m_Factory        : access WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandServiceConnectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandServiceConnection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandServiceConnection do
         Hr := RoGetActivationFactory (m_hString, IID_IVoiceCommandServiceConnectionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromAppServiceTriggerDetails (triggerDetails.m_IAppServiceTriggerDetails.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVoiceCommandServiceConnection := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandServiceConnection;
            Retval.m_IVoiceCommandServiceConnection.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandServiceConnection

   function GetVoiceCommandAsync
   (
      this : in out VoiceCommandServiceConnection
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommand'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VoiceCommand.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VoiceCommand.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommand;
      m_IID            : aliased WinRt.IID := (2170493012, 19833, 22285, (155, 87, 91, 71, 226, 130, 205, 102 )); -- Windows.ApplicationModel.VoiceCommands.VoiceCommand;
      m_HandlerIID     : aliased WinRt.IID := (270858313, 46241, 21222, (183, 113, 109, 47, 8, 195, 14, 99 ));
      m_Handler        : AsyncOperationCompletedHandler_VoiceCommand.Kind := new AsyncOperationCompletedHandler_VoiceCommand.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VoiceCommand.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VoiceCommand.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VoiceCommand.Kind_Delegate, AsyncOperationCompletedHandler_VoiceCommand.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommand do
         Hr := this.m_IVoiceCommandServiceConnection.all.GetVoiceCommandAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVoiceCommand := new Windows.ApplicationModel.VoiceCommands.IVoiceCommand;
                  Retval.m_IVoiceCommand.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestConfirmationAsync
   (
      this : in out VoiceCommandServiceConnection;
      response : Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse'Class
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandConfirmationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VoiceCommandConfirmationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VoiceCommandConfirmationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandConfirmationResult;
      m_IID            : aliased WinRt.IID := (993647455, 53924, 23944, (133, 31, 233, 160, 234, 13, 148, 126 )); -- Windows.ApplicationModel.VoiceCommands.VoiceCommandConfirmationResult;
      m_HandlerIID     : aliased WinRt.IID := (4112796856, 63762, 20681, (178, 24, 215, 160, 64, 57, 113, 170 ));
      m_Handler        : AsyncOperationCompletedHandler_VoiceCommandConfirmationResult.Kind := new AsyncOperationCompletedHandler_VoiceCommandConfirmationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VoiceCommandConfirmationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VoiceCommandConfirmationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VoiceCommandConfirmationResult.Kind_Delegate, AsyncOperationCompletedHandler_VoiceCommandConfirmationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandConfirmationResult do
         Hr := this.m_IVoiceCommandServiceConnection.all.RequestConfirmationAsync (response.m_IVoiceCommandResponse.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVoiceCommandConfirmationResult := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandConfirmationResult;
                  Retval.m_IVoiceCommandConfirmationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestDisambiguationAsync
   (
      this : in out VoiceCommandServiceConnection;
      response : Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse'Class
   )
   return WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandDisambiguationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VoiceCommandDisambiguationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VoiceCommandDisambiguationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.VoiceCommands.IVoiceCommandDisambiguationResult;
      m_IID            : aliased WinRt.IID := (2956805320, 1551, 23448, (149, 58, 253, 30, 177, 212, 106, 188 )); -- Windows.ApplicationModel.VoiceCommands.VoiceCommandDisambiguationResult;
      m_HandlerIID     : aliased WinRt.IID := (1186556048, 10562, 21860, (130, 216, 49, 164, 133, 27, 215, 184 ));
      m_Handler        : AsyncOperationCompletedHandler_VoiceCommandDisambiguationResult.Kind := new AsyncOperationCompletedHandler_VoiceCommandDisambiguationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VoiceCommandDisambiguationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VoiceCommandDisambiguationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VoiceCommandDisambiguationResult.Kind_Delegate, AsyncOperationCompletedHandler_VoiceCommandDisambiguationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.VoiceCommands.VoiceCommandDisambiguationResult do
         Hr := this.m_IVoiceCommandServiceConnection.all.RequestDisambiguationAsync (response.m_IVoiceCommandResponse.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVoiceCommandDisambiguationResult := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandDisambiguationResult;
                  Retval.m_IVoiceCommandDisambiguationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure ReportProgressAsync
   (
      this : in out VoiceCommandServiceConnection;
      response : Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IVoiceCommandServiceConnection.all.ReportProgressAsync (response.m_IVoiceCommandResponse.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportSuccessAsync
   (
      this : in out VoiceCommandServiceConnection;
      response : Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IVoiceCommandServiceConnection.all.ReportSuccessAsync (response.m_IVoiceCommandResponse.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailureAsync
   (
      this : in out VoiceCommandServiceConnection;
      response : Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IVoiceCommandServiceConnection.all.ReportFailureAsync (response.m_IVoiceCommandResponse.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RequestAppLaunchAsync
   (
      this : in out VoiceCommandServiceConnection;
      response : Windows.ApplicationModel.VoiceCommands.VoiceCommandResponse'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IVoiceCommandServiceConnection.all.RequestAppLaunchAsync (response.m_IVoiceCommandResponse.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Language
   (
      this : in out VoiceCommandServiceConnection
   )
   return WinRt.Windows.Globalization.Language'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         Hr := this.m_IVoiceCommandServiceConnection.all.get_Language (m_ComRetVal'Access);
         Retval.m_ILanguage := new Windows.Globalization.ILanguage;
         Retval.m_ILanguage.all := m_ComRetVal;
      end return;
   end;

   function add_VoiceCommandCompleted
   (
      this : in out VoiceCommandServiceConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IVoiceCommandServiceConnection.all.add_VoiceCommandCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VoiceCommandCompleted
   (
      this : in out VoiceCommandServiceConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVoiceCommandServiceConnection.all.remove_VoiceCommandCompleted (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceCommandUserMessage

   procedure Initialize (this : in out VoiceCommandUserMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceCommandUserMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceCommandUserMessage, IVoiceCommandUserMessage_Ptr);
   begin
      if this.m_IVoiceCommandUserMessage /= null then
         if this.m_IVoiceCommandUserMessage.all /= null then
            RefCount := this.m_IVoiceCommandUserMessage.all.Release;
            Free (this.m_IVoiceCommandUserMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VoiceCommandUserMessage

   function Constructor return VoiceCommandUserMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage");
      m_ComRetVal  : aliased Windows.ApplicationModel.VoiceCommands.IVoiceCommandUserMessage;
   begin
      return RetVal : VoiceCommandUserMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVoiceCommandUserMessage := new Windows.ApplicationModel.VoiceCommands.IVoiceCommandUserMessage;
            Retval.m_IVoiceCommandUserMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceCommandUserMessage

   function get_DisplayMessage
   (
      this : in out VoiceCommandUserMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandUserMessage.all.get_DisplayMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayMessage
   (
      this : in out VoiceCommandUserMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandUserMessage.all.put_DisplayMessage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SpokenMessage
   (
      this : in out VoiceCommandUserMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceCommandUserMessage.all.get_SpokenMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SpokenMessage
   (
      this : in out VoiceCommandUserMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVoiceCommandUserMessage.all.put_SpokenMessage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

end;

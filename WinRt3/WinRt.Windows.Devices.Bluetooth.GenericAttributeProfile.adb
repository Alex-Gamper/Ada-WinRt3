--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile is

   package IAsyncOperation_GattReadResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult);
   package AsyncOperationCompletedHandler_GattReadResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult);

   package IAsyncOperation_GattCommunicationStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus);
   package AsyncOperationCompletedHandler_GattCommunicationStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus);

   package IAsyncOperation_GattReadClientCharacteristicConfigurationDescriptorResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadClientCharacteristicConfigurationDescriptorResult);
   package AsyncOperationCompletedHandler_GattReadClientCharacteristicConfigurationDescriptorResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadClientCharacteristicConfigurationDescriptorResult);

   package IAsyncOperation_GattDescriptorsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult);
   package AsyncOperationCompletedHandler_GattDescriptorsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult);

   package IAsyncOperation_GattWriteResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult);
   package AsyncOperationCompletedHandler_GattWriteResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult);

   package IAsyncOperation_DeviceAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);
   package AsyncOperationCompletedHandler_DeviceAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Enumeration.DeviceAccessStatus);

   package IAsyncOperation_GattOpenStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattOpenStatus);
   package AsyncOperationCompletedHandler_GattOpenStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattOpenStatus);

   package IAsyncOperation_GattCharacteristicsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult);
   package AsyncOperationCompletedHandler_GattCharacteristicsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult);

   package IAsyncOperation_GattDeviceServicesResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult);
   package AsyncOperationCompletedHandler_GattDeviceServicesResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult);

   package IAsyncOperation_GattDeviceService is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService);
   package AsyncOperationCompletedHandler_GattDeviceService is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService);

   package IAsyncOperation_GattLocalDescriptorResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptorResult);
   package AsyncOperationCompletedHandler_GattLocalDescriptorResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptorResult);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_GattClientNotificationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattClientNotificationResult);
   package AsyncOperationCompletedHandler_GattClientNotificationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattClientNotificationResult);

   package IAsyncOperation_GattLocalCharacteristicResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristicResult);
   package AsyncOperationCompletedHandler_GattLocalCharacteristicResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristicResult);

   package IAsyncOperation_GattReadRequest is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadRequest);
   package AsyncOperationCompletedHandler_GattReadRequest is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadRequest);

   package IAsyncOperation_GattServiceProviderResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderResult);
   package AsyncOperationCompletedHandler_GattServiceProviderResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderResult);

   package IAsyncOperation_GattSession is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession);
   package AsyncOperationCompletedHandler_GattSession is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession);

   package IAsyncOperation_GattWriteRequest is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteRequest);
   package AsyncOperationCompletedHandler_GattWriteRequest is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteRequest);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattCharacteristic

   procedure Initialize (this : in out GattCharacteristic) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattCharacteristic) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattCharacteristic, IGattCharacteristic_Ptr);
   begin
      if this.m_IGattCharacteristic /= null then
         if this.m_IGattCharacteristic.all /= null then
            RefCount := this.m_IGattCharacteristic.all.Release;
            Free (this.m_IGattCharacteristic);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattCharacteristic

   function ConvertShortIdToUuid
   (
      shortId : WinRt.UInt16
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ConvertShortIdToUuid (shortId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattCharacteristic

   function GetDescriptors
   (
      this : in out GattCharacteristic;
      descriptorUuid : WinRt.Guid
   )
   return IVectorView_IGattDescriptor.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattDescriptor.Kind;
   begin
      Hr := this.m_IGattCharacteristic.all.GetDescriptors (descriptorUuid, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattDescriptor (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CharacteristicProperties
   (
      this : in out GattCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicProperties is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicProperties;
   begin
      Hr := this.m_IGattCharacteristic.all.get_CharacteristicProperties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtectionLevel
   (
      this : in out GattCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattCharacteristic.all.get_ProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProtectionLevel
   (
      this : in out GattCharacteristic;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattCharacteristic.all.put_ProtectionLevel (value);
   end;

   function get_UserDescription
   (
      this : in out GattCharacteristic
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGattCharacteristic.all.get_UserDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Uuid
   (
      this : in out GattCharacteristic
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IGattCharacteristic.all.get_Uuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttributeHandle
   (
      this : in out GattCharacteristic
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IGattCharacteristic.all.get_AttributeHandle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PresentationFormats
   (
      this : in out GattCharacteristic
   )
   return IVectorView_IGattPresentationFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattPresentationFormat.Kind;
   begin
      Hr := this.m_IGattCharacteristic.all.get_PresentationFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattPresentationFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function ReadValueAsync
   (
      this : in out GattCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattReadResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattReadResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
      m_IID            : aliased WinRt.IID := (3557044904, 7700, 20944, (180, 155, 174, 44, 225, 170, 5, 229 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult;
      m_HandlerIID     : aliased WinRt.IID := (3633916576, 60098, 21943, (146, 197, 137, 72, 134, 190, 176, 202 ));
      m_Handler        : AsyncOperationCompletedHandler_GattReadResult.Kind := new AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattReadResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattReadResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate, AsyncOperationCompletedHandler_GattReadResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult do
         Hr := this.m_IGattCharacteristic.all.ReadValueAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattReadResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
                  Retval.m_IGattReadResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ReadValueAsync
   (
      this : in out GattCharacteristic;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattReadResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattReadResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
      m_IID            : aliased WinRt.IID := (3557044904, 7700, 20944, (180, 155, 174, 44, 225, 170, 5, 229 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult;
      m_HandlerIID     : aliased WinRt.IID := (3633916576, 60098, 21943, (146, 197, 137, 72, 134, 190, 176, 202 ));
      m_Handler        : AsyncOperationCompletedHandler_GattReadResult.Kind := new AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattReadResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattReadResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate, AsyncOperationCompletedHandler_GattReadResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult do
         Hr := this.m_IGattCharacteristic.all.ReadValueAsync (cacheMode, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattReadResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
                  Retval.m_IGattReadResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function WriteValueAsync
   (
      this : in out GattCharacteristic;
      value : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCommunicationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCommunicationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_IID            : aliased WinRt.IID := (1073124630, 7163, 21225, (158, 230, 229, 205, 183, 142, 22, 131 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_HandlerIID     : aliased WinRt.IID := (559157626, 38797, 23003, (153, 207, 107, 105, 12, 179, 56, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCommunicationStatus.Kind := new AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCommunicationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate, AsyncOperationCompletedHandler_GattCommunicationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGattCharacteristic.all.WriteValueAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function WriteValueAsync
   (
      this : in out GattCharacteristic;
      value : Windows.Storage.Streams.IBuffer;
      writeOption : Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteOption
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCommunicationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCommunicationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_IID            : aliased WinRt.IID := (1073124630, 7163, 21225, (158, 230, 229, 205, 183, 142, 22, 131 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_HandlerIID     : aliased WinRt.IID := (559157626, 38797, 23003, (153, 207, 107, 105, 12, 179, 56, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCommunicationStatus.Kind := new AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCommunicationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate, AsyncOperationCompletedHandler_GattCommunicationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGattCharacteristic.all.WriteValueAsync (value, writeOption, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ReadClientCharacteristicConfigurationDescriptorAsync
   (
      this : in out GattCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadClientCharacteristicConfigurationDescriptorResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattReadClientCharacteristicConfigurationDescriptorResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattReadClientCharacteristicConfigurationDescriptorResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadClientCharacteristicConfigurationDescriptorResult;
      m_IID            : aliased WinRt.IID := (3477357772, 16503, 22297, (131, 102, 70, 232, 107, 152, 54, 133 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadClientCharacteristicConfigurationDescriptorResult;
      m_HandlerIID     : aliased WinRt.IID := (2566498035, 19753, 21329, (139, 18, 117, 29, 201, 119, 163, 49 ));
      m_Handler        : AsyncOperationCompletedHandler_GattReadClientCharacteristicConfigurationDescriptorResult.Kind := new AsyncOperationCompletedHandler_GattReadClientCharacteristicConfigurationDescriptorResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattReadClientCharacteristicConfigurationDescriptorResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattReadClientCharacteristicConfigurationDescriptorResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattReadClientCharacteristicConfigurationDescriptorResult.Kind_Delegate, AsyncOperationCompletedHandler_GattReadClientCharacteristicConfigurationDescriptorResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadClientCharacteristicConfigurationDescriptorResult do
         Hr := this.m_IGattCharacteristic.all.ReadClientCharacteristicConfigurationDescriptorAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattReadClientCharacteristicConfigurationDescriptorResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadClientCharacteristicConfigurationDescriptorResult;
                  Retval.m_IGattReadClientCharacteristicConfigurationDescriptorResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function WriteClientCharacteristicConfigurationDescriptorAsync
   (
      this : in out GattCharacteristic;
      clientCharacteristicConfigurationDescriptorValue : Windows.Devices.Bluetooth.GenericAttributeProfile.GattClientCharacteristicConfigurationDescriptorValue
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCommunicationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCommunicationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_IID            : aliased WinRt.IID := (1073124630, 7163, 21225, (158, 230, 229, 205, 183, 142, 22, 131 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_HandlerIID     : aliased WinRt.IID := (559157626, 38797, 23003, (153, 207, 107, 105, 12, 179, 56, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCommunicationStatus.Kind := new AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCommunicationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate, AsyncOperationCompletedHandler_GattCommunicationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGattCharacteristic.all.WriteClientCharacteristicConfigurationDescriptorAsync (clientCharacteristicConfigurationDescriptorValue, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_ValueChanged
   (
      this : in out GattCharacteristic;
      valueChangedHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattCharacteristic.all.add_ValueChanged (valueChangedHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ValueChanged
   (
      this : in out GattCharacteristic;
      valueChangedEventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattCharacteristic.all.remove_ValueChanged (valueChangedEventCookie);
   end;

   function get_Service
   (
      this : in out GattCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.get_Service (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IGattDeviceService := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
         Retval.m_IGattDeviceService.all := m_ComRetVal;
      end return;
   end;

   function GetAllDescriptors
   (
      this : in out GattCharacteristic
   )
   return IVectorView_IGattDescriptor.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattDescriptor.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattCharacteristic.all);
      Hr := m_Interface.GetAllDescriptors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IGattDescriptor (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDescriptorsAsync
   (
      this : in out GattCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDescriptorsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDescriptorsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
      m_IID            : aliased WinRt.IID := (3467591879, 48695, 21157, (154, 27, 99, 57, 133, 19, 229, 151 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult;
      m_HandlerIID     : aliased WinRt.IID := (3741953655, 62982, 21476, (139, 166, 121, 159, 89, 146, 200, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDescriptorsResult.Kind := new AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDescriptorsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDescriptorsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.GetDescriptorsAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDescriptorsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
                  Retval.m_IGattDescriptorsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetDescriptorsAsync
   (
      this : in out GattCharacteristic;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDescriptorsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDescriptorsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
      m_IID            : aliased WinRt.IID := (3467591879, 48695, 21157, (154, 27, 99, 57, 133, 19, 229, 151 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult;
      m_HandlerIID     : aliased WinRt.IID := (3741953655, 62982, 21476, (139, 166, 121, 159, 89, 146, 200, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDescriptorsResult.Kind := new AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDescriptorsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDescriptorsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.GetDescriptorsAsync (cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDescriptorsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
                  Retval.m_IGattDescriptorsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetDescriptorsForUuidAsync
   (
      this : in out GattCharacteristic;
      descriptorUuid : WinRt.Guid
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDescriptorsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDescriptorsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
      m_IID            : aliased WinRt.IID := (3467591879, 48695, 21157, (154, 27, 99, 57, 133, 19, 229, 151 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult;
      m_HandlerIID     : aliased WinRt.IID := (3741953655, 62982, 21476, (139, 166, 121, 159, 89, 146, 200, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDescriptorsResult.Kind := new AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDescriptorsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDescriptorsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.GetDescriptorsForUuidAsync (descriptorUuid, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDescriptorsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
                  Retval.m_IGattDescriptorsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetDescriptorsForUuidAsync
   (
      this : in out GattCharacteristic;
      descriptorUuid : WinRt.Guid;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDescriptorsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDescriptorsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
      m_IID            : aliased WinRt.IID := (3467591879, 48695, 21157, (154, 27, 99, 57, 133, 19, 229, 151 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult;
      m_HandlerIID     : aliased WinRt.IID := (3741953655, 62982, 21476, (139, 166, 121, 159, 89, 146, 200, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDescriptorsResult.Kind := new AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDescriptorsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDescriptorsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDescriptorsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorsResult do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.GetDescriptorsForUuidAsync (descriptorUuid, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDescriptorsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorsResult;
                  Retval.m_IGattDescriptorsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function WriteValueWithResultAsync
   (
      this : in out GattCharacteristic;
      value : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattWriteResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattWriteResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
      m_IID            : aliased WinRt.IID := (3896198452, 48404, 23195, (165, 59, 23, 204, 2, 162, 168, 168 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult;
      m_HandlerIID     : aliased WinRt.IID := (1873332675, 65406, 24481, (162, 243, 39, 20, 207, 4, 184, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_GattWriteResult.Kind := new AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattWriteResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattWriteResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate, AsyncOperationCompletedHandler_GattWriteResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.WriteValueWithResultAsync (value, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattWriteResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
                  Retval.m_IGattWriteResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function WriteValueWithResultAsync
   (
      this : in out GattCharacteristic;
      value : Windows.Storage.Streams.IBuffer;
      writeOption : Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteOption
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattWriteResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattWriteResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
      m_IID            : aliased WinRt.IID := (3896198452, 48404, 23195, (165, 59, 23, 204, 2, 162, 168, 168 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult;
      m_HandlerIID     : aliased WinRt.IID := (1873332675, 65406, 24481, (162, 243, 39, 20, 207, 4, 184, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_GattWriteResult.Kind := new AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattWriteResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattWriteResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate, AsyncOperationCompletedHandler_GattWriteResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.WriteValueWithResultAsync (value, writeOption, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattWriteResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
                  Retval.m_IGattWriteResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function WriteClientCharacteristicConfigurationDescriptorWithResultAsync
   (
      this : in out GattCharacteristic;
      clientCharacteristicConfigurationDescriptorValue : Windows.Devices.Bluetooth.GenericAttributeProfile.GattClientCharacteristicConfigurationDescriptorValue
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattWriteResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattWriteResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
      m_IID            : aliased WinRt.IID := (3896198452, 48404, 23195, (165, 59, 23, 204, 2, 162, 168, 168 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult;
      m_HandlerIID     : aliased WinRt.IID := (1873332675, 65406, 24481, (162, 243, 39, 20, 207, 4, 184, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_GattWriteResult.Kind := new AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattWriteResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattWriteResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate, AsyncOperationCompletedHandler_GattWriteResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattCharacteristic3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult do
         m_Interface := QInterface (this.m_IGattCharacteristic.all);
         Hr := m_Interface.WriteClientCharacteristicConfigurationDescriptorWithResultAsync (clientCharacteristicConfigurationDescriptorValue, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattWriteResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
                  Retval.m_IGattWriteResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body GattCharacteristicUuids is

      function get_BatteryLevel
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BatteryLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BloodPressureFeature
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BloodPressureFeature (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BloodPressureMeasurement
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BloodPressureMeasurement (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BodySensorLocation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BodySensorLocation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CscFeature
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CscFeature (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CscMeasurement
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CscMeasurement (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GlucoseFeature
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GlucoseFeature (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GlucoseMeasurement
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GlucoseMeasurement (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GlucoseMeasurementContext
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GlucoseMeasurementContext (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HeartRateControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeartRateControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HeartRateMeasurement
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeartRateMeasurement (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IntermediateCuffPressure
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IntermediateCuffPressure (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_IntermediateTemperature
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IntermediateTemperature (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MeasurementInterval
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MeasurementInterval (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RecordAccessControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RecordAccessControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RscFeature
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RscFeature (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RscMeasurement
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RscMeasurement (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SCControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SCControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SensorLocation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SensorLocation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TemperatureMeasurement
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TemperatureMeasurement (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TemperatureType
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TemperatureType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AlertCategoryId
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlertCategoryId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AlertCategoryIdBitMask
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlertCategoryIdBitMask (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AlertLevel
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlertLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AlertNotificationControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlertNotificationControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AlertStatus
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlertStatus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GapAppearance
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GapAppearance (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BootKeyboardInputReport
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BootKeyboardInputReport (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BootKeyboardOutputReport
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BootKeyboardOutputReport (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BootMouseInputReport
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BootMouseInputReport (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CurrentTime
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CurrentTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingPowerControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingPowerControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingPowerFeature
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingPowerFeature (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingPowerMeasurement
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingPowerMeasurement (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingPowerVector
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingPowerVector (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DateTime
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DateTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DayDateTime
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DayDateTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DayOfWeek
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DayOfWeek (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GapDeviceName
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GapDeviceName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DstOffset
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DstOffset (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ExactTime256
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExactTime256 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_FirmwareRevisionString
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FirmwareRevisionString (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HardwareRevisionString
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HardwareRevisionString (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HidControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HidControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HidInformation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HidInformation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Ieee1107320601RegulatoryCertificationDataList
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ieee1107320601RegulatoryCertificationDataList (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LnControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LnControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LnFeature
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LnFeature (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LocalTimeInformation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocalTimeInformation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LocationAndSpeed
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocationAndSpeed (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ManufacturerNameString
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ManufacturerNameString (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ModelNumberString
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ModelNumberString (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Navigation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Navigation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_NewAlert
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NewAlert (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GapPeripheralPreferredConnectionParameters
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GapPeripheralPreferredConnectionParameters (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GapPeripheralPrivacyFlag
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GapPeripheralPrivacyFlag (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PnpId
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PnpId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PositionQuality
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PositionQuality (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ProtocolMode
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProtocolMode (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GapReconnectionAddress
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GapReconnectionAddress (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ReferenceTimeInformation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReferenceTimeInformation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Report
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Report (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ReportMap
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReportMap (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RingerControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RingerControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RingerSetting
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RingerSetting (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ScanIntervalWindow
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScanIntervalWindow (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ScanRefresh
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScanRefresh (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SerialNumberString
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SerialNumberString (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GattServiceChanged
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GattServiceChanged (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SoftwareRevisionString
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SoftwareRevisionString (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SupportedNewAlertCategory
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SupportedNewAlertCategory (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SupportUnreadAlertCategory
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SupportUnreadAlertCategory (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SystemId
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SystemId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TimeAccuracy
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TimeAccuracy (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TimeSource
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TimeSource (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TimeUpdateControlPoint
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TimeUpdateControlPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TimeUpdateState
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TimeUpdateState (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TimeWithDst
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TimeWithDst (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TimeZone
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TimeZone (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TxPowerLevel
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TxPowerLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UnreadAlertStatus
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UnreadAlertStatus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end GattCharacteristicUuids;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattCharacteristicsResult

   procedure Initialize (this : in out GattCharacteristicsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattCharacteristicsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattCharacteristicsResult, IGattCharacteristicsResult_Ptr);
   begin
      if this.m_IGattCharacteristicsResult /= null then
         if this.m_IGattCharacteristicsResult.all /= null then
            RefCount := this.m_IGattCharacteristicsResult.all.Release;
            Free (this.m_IGattCharacteristicsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattCharacteristicsResult

   function get_Status
   (
      this : in out GattCharacteristicsResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
   begin
      Hr := this.m_IGattCharacteristicsResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolError
   (
      this : in out GattCharacteristicsResult
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
   begin
      Hr := this.m_IGattCharacteristicsResult.all.get_ProtocolError (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Characteristics
   (
      this : in out GattCharacteristicsResult
   )
   return IVectorView_IGattCharacteristic.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattCharacteristic.Kind;
   begin
      Hr := this.m_IGattCharacteristicsResult.all.get_Characteristics (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattCharacteristic (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattClientNotificationResult

   procedure Initialize (this : in out GattClientNotificationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattClientNotificationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattClientNotificationResult, IGattClientNotificationResult_Ptr);
   begin
      if this.m_IGattClientNotificationResult /= null then
         if this.m_IGattClientNotificationResult.all /= null then
            RefCount := this.m_IGattClientNotificationResult.all.Release;
            Free (this.m_IGattClientNotificationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattClientNotificationResult

   function get_SubscribedClient
   (
      this : in out GattClientNotificationResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSubscribedClient;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient do
         Hr := this.m_IGattClientNotificationResult.all.get_SubscribedClient (m_ComRetVal'Access);
         Retval.m_IGattSubscribedClient := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSubscribedClient;
         Retval.m_IGattSubscribedClient.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out GattClientNotificationResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
   begin
      Hr := this.m_IGattClientNotificationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolError
   (
      this : in out GattClientNotificationResult
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
   begin
      Hr := this.m_IGattClientNotificationResult.all.get_ProtocolError (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BytesSent
   (
      this : in out GattClientNotificationResult
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattClientNotificationResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattClientNotificationResult_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattClientNotificationResult2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattClientNotificationResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattClientNotificationResult.all);
      Hr := m_Interface.get_BytesSent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattDescriptor

   procedure Initialize (this : in out GattDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattDescriptor, IGattDescriptor_Ptr);
   begin
      if this.m_IGattDescriptor /= null then
         if this.m_IGattDescriptor.all /= null then
            RefCount := this.m_IGattDescriptor.all.Release;
            Free (this.m_IGattDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattDescriptor

   function ConvertShortIdToUuid_GattDescriptor
   (
      shortId : WinRt.UInt16
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDescriptorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ConvertShortIdToUuid (shortId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattDescriptor

   function get_ProtectionLevel
   (
      this : in out GattDescriptor
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattDescriptor.all.get_ProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProtectionLevel
   (
      this : in out GattDescriptor;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattDescriptor.all.put_ProtectionLevel (value);
   end;

   function get_Uuid
   (
      this : in out GattDescriptor
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IGattDescriptor.all.get_Uuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttributeHandle
   (
      this : in out GattDescriptor
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IGattDescriptor.all.get_AttributeHandle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadValueAsync
   (
      this : in out GattDescriptor
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattReadResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattReadResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
      m_IID            : aliased WinRt.IID := (3557044904, 7700, 20944, (180, 155, 174, 44, 225, 170, 5, 229 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult;
      m_HandlerIID     : aliased WinRt.IID := (3633916576, 60098, 21943, (146, 197, 137, 72, 134, 190, 176, 202 ));
      m_Handler        : AsyncOperationCompletedHandler_GattReadResult.Kind := new AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattReadResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattReadResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate, AsyncOperationCompletedHandler_GattReadResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult do
         Hr := this.m_IGattDescriptor.all.ReadValueAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattReadResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
                  Retval.m_IGattReadResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ReadValueAsync
   (
      this : in out GattDescriptor;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattReadResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattReadResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
      m_IID            : aliased WinRt.IID := (3557044904, 7700, 20944, (180, 155, 174, 44, 225, 170, 5, 229 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult;
      m_HandlerIID     : aliased WinRt.IID := (3633916576, 60098, 21943, (146, 197, 137, 72, 134, 190, 176, 202 ));
      m_Handler        : AsyncOperationCompletedHandler_GattReadResult.Kind := new AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattReadResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattReadResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattReadResult.Kind_Delegate, AsyncOperationCompletedHandler_GattReadResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult do
         Hr := this.m_IGattDescriptor.all.ReadValueAsync (cacheMode, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattReadResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult;
                  Retval.m_IGattReadResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function WriteValueAsync
   (
      this : in out GattDescriptor;
      value : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCommunicationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCommunicationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_IID            : aliased WinRt.IID := (1073124630, 7163, 21225, (158, 230, 229, 205, 183, 142, 22, 131 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_HandlerIID     : aliased WinRt.IID := (559157626, 38797, 23003, (153, 207, 107, 105, 12, 179, 56, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCommunicationStatus.Kind := new AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCommunicationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate, AsyncOperationCompletedHandler_GattCommunicationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGattDescriptor.all.WriteValueAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function WriteValueWithResultAsync
   (
      this : in out GattDescriptor;
      value : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattWriteResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattWriteResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
      m_IID            : aliased WinRt.IID := (3896198452, 48404, 23195, (165, 59, 23, 204, 2, 162, 168, 168 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult;
      m_HandlerIID     : aliased WinRt.IID := (1873332675, 65406, 24481, (162, 243, 39, 20, 207, 4, 184, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_GattWriteResult.Kind := new AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattWriteResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattWriteResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate, AsyncOperationCompletedHandler_GattWriteResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptor_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptor2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDescriptor2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult do
         m_Interface := QInterface (this.m_IGattDescriptor.all);
         Hr := m_Interface.WriteValueWithResultAsync (value, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattWriteResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
                  Retval.m_IGattWriteResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body GattDescriptorUuids is

      function get_CharacteristicAggregateFormat
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattDescriptorUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CharacteristicAggregateFormat (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CharacteristicExtendedProperties
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattDescriptorUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CharacteristicExtendedProperties (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CharacteristicPresentationFormat
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattDescriptorUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CharacteristicPresentationFormat (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CharacteristicUserDescription
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattDescriptorUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CharacteristicUserDescription (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ClientCharacteristicConfiguration
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattDescriptorUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ClientCharacteristicConfiguration (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ServerCharacteristicConfiguration
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDescriptorUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattDescriptorUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ServerCharacteristicConfiguration (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end GattDescriptorUuids;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattDescriptorsResult

   procedure Initialize (this : in out GattDescriptorsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattDescriptorsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattDescriptorsResult, IGattDescriptorsResult_Ptr);
   begin
      if this.m_IGattDescriptorsResult /= null then
         if this.m_IGattDescriptorsResult.all /= null then
            RefCount := this.m_IGattDescriptorsResult.all.Release;
            Free (this.m_IGattDescriptorsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattDescriptorsResult

   function get_Status
   (
      this : in out GattDescriptorsResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
   begin
      Hr := this.m_IGattDescriptorsResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolError
   (
      this : in out GattDescriptorsResult
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
   begin
      Hr := this.m_IGattDescriptorsResult.all.get_ProtocolError (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Descriptors
   (
      this : in out GattDescriptorsResult
   )
   return IVectorView_IGattDescriptor.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattDescriptor.Kind;
   begin
      Hr := this.m_IGattDescriptorsResult.all.get_Descriptors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattDescriptor (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattDeviceService

   procedure Initialize (this : in out GattDeviceService) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattDeviceService) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattDeviceService, IGattDeviceService_Ptr);
   begin
      if this.m_IGattDeviceService /= null then
         if this.m_IGattDeviceService.all /= null then
            RefCount := this.m_IGattDeviceService.all.Release;
            Free (this.m_IGattDeviceService);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattDeviceService

   function FromIdAsync
   (
      deviceId : WinRt.WString;
      sharingMode : Windows.Devices.Bluetooth.GenericAttributeProfile.GattSharingMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceService.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceService.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
      m_IID            : aliased WinRt.IID := (3857252978, 16527, 20565, (155, 211, 136, 64, 137, 130, 211, 1 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService;
      m_HandlerIID     : aliased WinRt.IID := (767358538, 9771, 22280, (173, 177, 195, 184, 117, 11, 214, 128 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceService.Kind := new AsyncOperationCompletedHandler_GattDeviceService.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceService.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceService.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceService.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceService.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService do
         Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, sharingMode, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IGattDeviceService := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
                     Retval.m_IGattDeviceService.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelectorForBluetoothDeviceId
   (
      bluetoothDeviceId : Windows.Devices.Bluetooth.BluetoothDeviceId'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDeviceId (bluetoothDeviceId.m_IBluetoothDeviceId.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorForBluetoothDeviceId
   (
      bluetoothDeviceId : Windows.Devices.Bluetooth.BluetoothDeviceId'Class;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDeviceId (bluetoothDeviceId.m_IBluetoothDeviceId.all, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorForBluetoothDeviceIdAndUuid
   (
      bluetoothDeviceId : Windows.Devices.Bluetooth.BluetoothDeviceId'Class;
      serviceUuid : WinRt.Guid
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDeviceIdAndUuid (bluetoothDeviceId.m_IBluetoothDeviceId.all, serviceUuid, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorForBluetoothDeviceIdAndUuid
   (
      bluetoothDeviceId : Windows.Devices.Bluetooth.BluetoothDeviceId'Class;
      serviceUuid : WinRt.Guid;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorForBluetoothDeviceIdAndUuid (bluetoothDeviceId.m_IBluetoothDeviceId.all, serviceUuid, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceService.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceService.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
      m_IID            : aliased WinRt.IID := (3857252978, 16527, 20565, (155, 211, 136, 64, 137, 130, 211, 1 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService;
      m_HandlerIID     : aliased WinRt.IID := (767358538, 9771, 22280, (173, 177, 195, 184, 117, 11, 214, 128 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceService.Kind := new AsyncOperationCompletedHandler_GattDeviceService.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceService.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceService.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceService.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceService.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService do
         Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IGattDeviceService := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService;
                     Retval.m_IGattDeviceService.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelectorFromUuid
   (
      serviceUuid : WinRt.Guid
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromUuid (serviceUuid, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelectorFromShortId
   (
      serviceShortId : WinRt.UInt16
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelectorFromShortId (serviceShortId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ConvertShortIdToUuid_GattDeviceService
   (
      shortId : WinRt.UInt16
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattDeviceServiceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ConvertShortIdToUuid (shortId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattDeviceService

   function GetCharacteristics
   (
      this : in out GattDeviceService;
      characteristicUuid : WinRt.Guid
   )
   return IVectorView_IGattCharacteristic.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattCharacteristic.Kind;
   begin
      Hr := this.m_IGattDeviceService.all.GetCharacteristics (characteristicUuid, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattCharacteristic (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetIncludedServices
   (
      this : in out GattDeviceService;
      serviceUuid : WinRt.Guid
   )
   return IVectorView_IGattDeviceService.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattDeviceService.Kind;
   begin
      Hr := this.m_IGattDeviceService.all.GetIncludedServices (serviceUuid, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattDeviceService (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DeviceId
   (
      this : in out GattDeviceService
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGattDeviceService.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Uuid
   (
      this : in out GattDeviceService
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IGattDeviceService.all.get_Uuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttributeHandle
   (
      this : in out GattDeviceService
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IGattDeviceService.all.get_AttributeHandle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out GattDeviceService
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattDeviceService.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Device
   (
      this : in out GattDeviceService
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothLEDevice;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothLEDevice do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.get_Device (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBluetoothLEDevice := new Windows.Devices.Bluetooth.IBluetoothLEDevice;
         Retval.m_IBluetoothLEDevice.all := m_ComRetVal;
      end return;
   end;

   function get_ParentServices
   (
      this : in out GattDeviceService
   )
   return IVectorView_IGattDeviceService.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattDeviceService.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattDeviceService.all);
      Hr := m_Interface.get_ParentServices (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IGattDeviceService (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetAllCharacteristics
   (
      this : in out GattDeviceService
   )
   return IVectorView_IGattCharacteristic.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattCharacteristic.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattDeviceService.all);
      Hr := m_Interface.GetAllCharacteristics (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IGattCharacteristic (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetAllIncludedServices
   (
      this : in out GattDeviceService
   )
   return IVectorView_IGattDeviceService.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattDeviceService.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattDeviceService.all);
      Hr := m_Interface.GetAllIncludedServices (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IGattDeviceService (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DeviceAccessInformation
   (
      this : in out GattDeviceService
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceAccessInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceAccessInformation do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.get_DeviceAccessInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceAccessInformation := new Windows.Devices.Enumeration.IDeviceAccessInformation;
         Retval.m_IDeviceAccessInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Session
   (
      this : in out GattDeviceService
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.get_Session (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IGattSession := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
         Retval.m_IGattSession.all := m_ComRetVal;
      end return;
   end;

   function get_SharingMode
   (
      this : in out GattDeviceService
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSharingMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattSharingMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattDeviceService.all);
      Hr := m_Interface.get_SharingMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RequestAccessAsync
   (
      this : in out GattDeviceService
   )
   return WinRt.Windows.Devices.Enumeration.DeviceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Enumeration.DeviceAccessStatus;
      m_IID            : aliased WinRt.IID := (3221996274, 43000, 24383, (128, 209, 40, 8, 239, 107, 202, 16 )); -- Windows.Devices.Enumeration.DeviceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (3994373507, 32859, 21480, (132, 105, 144, 113, 80, 54, 208, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceAccessStatus.Kind := new AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_DeviceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattDeviceService.all);
      Hr := m_Interface.RequestAccessAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function OpenAsync
   (
      this : in out GattDeviceService;
      sharingMode : Windows.Devices.Bluetooth.GenericAttributeProfile.GattSharingMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattOpenStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattOpenStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattOpenStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattOpenStatus;
      m_IID            : aliased WinRt.IID := (2553414060, 34679, 21480, (134, 224, 99, 250, 104, 75, 225, 189 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattOpenStatus;
      m_HandlerIID     : aliased WinRt.IID := (1418411216, 56552, 23869, (152, 171, 105, 72, 221, 127, 144, 184 ));
      m_Handler        : AsyncOperationCompletedHandler_GattOpenStatus.Kind := new AsyncOperationCompletedHandler_GattOpenStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattOpenStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattOpenStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattOpenStatus.Kind_Delegate, AsyncOperationCompletedHandler_GattOpenStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattDeviceService.all);
      Hr := m_Interface.OpenAsync (sharingMode, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetCharacteristicsAsync
   (
      this : in out GattDeviceService
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (158472522, 44060, 21814, (152, 134, 39, 229, 138, 24, 242, 115 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (3600897141, 7794, 23638, (152, 232, 136, 244, 188, 62, 3, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetCharacteristicsAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattCharacteristicsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
                  Retval.m_IGattCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetCharacteristicsAsync
   (
      this : in out GattDeviceService;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (158472522, 44060, 21814, (152, 134, 39, 229, 138, 24, 242, 115 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (3600897141, 7794, 23638, (152, 232, 136, 244, 188, 62, 3, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetCharacteristicsAsync (cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattCharacteristicsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
                  Retval.m_IGattCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetCharacteristicsForUuidAsync
   (
      this : in out GattDeviceService;
      characteristicUuid : WinRt.Guid
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (158472522, 44060, 21814, (152, 134, 39, 229, 138, 24, 242, 115 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (3600897141, 7794, 23638, (152, 232, 136, 244, 188, 62, 3, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetCharacteristicsForUuidAsync (characteristicUuid, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattCharacteristicsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
                  Retval.m_IGattCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetCharacteristicsForUuidAsync
   (
      this : in out GattDeviceService;
      characteristicUuid : WinRt.Guid;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (158472522, 44060, 21814, (152, 134, 39, 229, 138, 24, 242, 115 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (3600897141, 7794, 23638, (152, 232, 136, 244, 188, 62, 3, 19 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_GattCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicsResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetCharacteristicsForUuidAsync (characteristicUuid, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattCharacteristicsResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicsResult;
                  Retval.m_IGattCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetIncludedServicesAsync
   (
      this : in out GattDeviceService
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetIncludedServicesAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetIncludedServicesAsync
   (
      this : in out GattDeviceService;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetIncludedServicesAsync (cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetIncludedServicesForUuidAsync
   (
      this : in out GattDeviceService;
      serviceUuid : WinRt.Guid
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetIncludedServicesForUuidAsync (serviceUuid, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetIncludedServicesForUuidAsync
   (
      this : in out GattDeviceService;
      serviceUuid : WinRt.Guid;
      cacheMode : Windows.Devices.Bluetooth.BluetoothCacheMode
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattDeviceServicesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattDeviceServicesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
      m_IID            : aliased WinRt.IID := (3888539638, 59508, 20495, (134, 255, 118, 12, 166, 240, 122, 88 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult;
      m_HandlerIID     : aliased WinRt.IID := (1957365906, 42545, 23916, (177, 180, 189, 46, 26, 116, 26, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind := new AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattDeviceServicesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind_Delegate, AsyncOperationCompletedHandler_GattDeviceServicesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceService3, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattDeviceService3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult do
         m_Interface := QInterface (this.m_IGattDeviceService.all);
         Hr := m_Interface.GetIncludedServicesForUuidAsync (serviceUuid, cacheMode, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattDeviceServicesResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattDeviceServicesResult;
                  Retval.m_IGattDeviceServicesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattDeviceServicesResult

   procedure Initialize (this : in out GattDeviceServicesResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattDeviceServicesResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattDeviceServicesResult, IGattDeviceServicesResult_Ptr);
   begin
      if this.m_IGattDeviceServicesResult /= null then
         if this.m_IGattDeviceServicesResult.all /= null then
            RefCount := this.m_IGattDeviceServicesResult.all.Release;
            Free (this.m_IGattDeviceServicesResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattDeviceServicesResult

   function get_Status
   (
      this : in out GattDeviceServicesResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
   begin
      Hr := this.m_IGattDeviceServicesResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolError
   (
      this : in out GattDeviceServicesResult
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
   begin
      Hr := this.m_IGattDeviceServicesResult.all.get_ProtocolError (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Services
   (
      this : in out GattDeviceServicesResult
   )
   return IVectorView_IGattDeviceService.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattDeviceService.Kind;
   begin
      Hr := this.m_IGattDeviceServicesResult.all.get_Services (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattDeviceService (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattLocalCharacteristic

   procedure Initialize (this : in out GattLocalCharacteristic) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattLocalCharacteristic) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattLocalCharacteristic, IGattLocalCharacteristic_Ptr);
   begin
      if this.m_IGattLocalCharacteristic /= null then
         if this.m_IGattLocalCharacteristic.all /= null then
            RefCount := this.m_IGattLocalCharacteristic.all.Release;
            Free (this.m_IGattLocalCharacteristic);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattLocalCharacteristic

   function get_Uuid
   (
      this : in out GattLocalCharacteristic
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_Uuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StaticValue
   (
      this : in out GattLocalCharacteristic
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_StaticValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CharacteristicProperties
   (
      this : in out GattLocalCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicProperties is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicProperties;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_CharacteristicProperties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReadProtectionLevel
   (
      this : in out GattLocalCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_ReadProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WriteProtectionLevel
   (
      this : in out GattLocalCharacteristic
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_WriteProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateDescriptorAsync
   (
      this : in out GattLocalCharacteristic;
      descriptorUuid : WinRt.Guid;
      parameters : Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptorParameters'Class
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptorResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattLocalDescriptorResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattLocalDescriptorResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptorResult;
      m_IID            : aliased WinRt.IID := (1056364552, 30031, 20544, (151, 172, 7, 3, 48, 156, 87, 79 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptorResult;
      m_HandlerIID     : aliased WinRt.IID := (4069687020, 18393, 21304, (155, 165, 91, 232, 70, 26, 212, 16 ));
      m_Handler        : AsyncOperationCompletedHandler_GattLocalDescriptorResult.Kind := new AsyncOperationCompletedHandler_GattLocalDescriptorResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattLocalDescriptorResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattLocalDescriptorResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattLocalDescriptorResult.Kind_Delegate, AsyncOperationCompletedHandler_GattLocalDescriptorResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptorResult do
         Hr := this.m_IGattLocalCharacteristic.all.CreateDescriptorAsync (descriptorUuid, parameters.m_IGattLocalDescriptorParameters.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattLocalDescriptorResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptorResult;
                  Retval.m_IGattLocalDescriptorResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Descriptors
   (
      this : in out GattLocalCharacteristic
   )
   return IVectorView_IGattLocalDescriptor.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattLocalDescriptor.Kind;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_Descriptors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattLocalDescriptor (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_UserDescription
   (
      this : in out GattLocalCharacteristic
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_UserDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PresentationFormats
   (
      this : in out GattLocalCharacteristic
   )
   return IVectorView_IGattPresentationFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattPresentationFormat.Kind;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_PresentationFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattPresentationFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SubscribedClients
   (
      this : in out GattLocalCharacteristic
   )
   return IVectorView_IGattSubscribedClient.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattSubscribedClient.Kind;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.get_SubscribedClients (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattSubscribedClient (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_SubscribedClientsChanged
   (
      this : in out GattLocalCharacteristic;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.add_SubscribedClientsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SubscribedClientsChanged
   (
      this : in out GattLocalCharacteristic;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.remove_SubscribedClientsChanged (token);
   end;

   function add_ReadRequested
   (
      this : in out GattLocalCharacteristic;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.add_ReadRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReadRequested
   (
      this : in out GattLocalCharacteristic;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.remove_ReadRequested (token);
   end;

   function add_WriteRequested
   (
      this : in out GattLocalCharacteristic;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.add_WriteRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WriteRequested
   (
      this : in out GattLocalCharacteristic;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalCharacteristic.all.remove_WriteRequested (token);
   end;

   function NotifyValueAsync
   (
      this : in out GattLocalCharacteristic;
      value : Windows.Storage.Streams.IBuffer
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3069859912, 44237, 21355, (163, 126, 36, 68, 216, 111, 44, 31 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (795624259, 26239, 23924, (142, 231, 179, 157, 227, 53, 169, 96 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGattLocalCharacteristic.all.NotifyValueAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function NotifyValueAsync
   (
      this : in out GattLocalCharacteristic;
      value : Windows.Storage.Streams.IBuffer;
      subscribedClient : Windows.Devices.Bluetooth.GenericAttributeProfile.GattSubscribedClient'Class
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattClientNotificationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattClientNotificationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattClientNotificationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattClientNotificationResult;
      m_IID            : aliased WinRt.IID := (3727148495, 25127, 22569, (185, 151, 136, 229, 117, 173, 6, 128 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattClientNotificationResult;
      m_HandlerIID     : aliased WinRt.IID := (2542010097, 7010, 21528, (152, 152, 147, 49, 56, 194, 189, 20 ));
      m_Handler        : AsyncOperationCompletedHandler_GattClientNotificationResult.Kind := new AsyncOperationCompletedHandler_GattClientNotificationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattClientNotificationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattClientNotificationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattClientNotificationResult.Kind_Delegate, AsyncOperationCompletedHandler_GattClientNotificationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattClientNotificationResult do
         Hr := this.m_IGattLocalCharacteristic.all.NotifyValueAsync (value, subscribedClient.m_IGattSubscribedClient.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattClientNotificationResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattClientNotificationResult;
                  Retval.m_IGattClientNotificationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattLocalCharacteristicParameters

   procedure Initialize (this : in out GattLocalCharacteristicParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattLocalCharacteristicParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattLocalCharacteristicParameters, IGattLocalCharacteristicParameters_Ptr);
   begin
      if this.m_IGattLocalCharacteristicParameters /= null then
         if this.m_IGattLocalCharacteristicParameters.all /= null then
            RefCount := this.m_IGattLocalCharacteristicParameters.all.Release;
            Free (this.m_IGattLocalCharacteristicParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GattLocalCharacteristicParameters

   function Constructor return GattLocalCharacteristicParameters is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristicParameters");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristicParameters;
   begin
      return RetVal : GattLocalCharacteristicParameters do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGattLocalCharacteristicParameters := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristicParameters;
            Retval.m_IGattLocalCharacteristicParameters.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattLocalCharacteristicParameters

   procedure put_StaticValue
   (
      this : in out GattLocalCharacteristicParameters;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.put_StaticValue (value);
   end;

   function get_StaticValue
   (
      this : in out GattLocalCharacteristicParameters
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.get_StaticValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CharacteristicProperties
   (
      this : in out GattLocalCharacteristicParameters;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicProperties
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.put_CharacteristicProperties (value);
   end;

   function get_CharacteristicProperties
   (
      this : in out GattLocalCharacteristicParameters
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicProperties is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicProperties;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.get_CharacteristicProperties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReadProtectionLevel
   (
      this : in out GattLocalCharacteristicParameters;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.put_ReadProtectionLevel (value);
   end;

   function get_ReadProtectionLevel
   (
      this : in out GattLocalCharacteristicParameters
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.get_ReadProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_WriteProtectionLevel
   (
      this : in out GattLocalCharacteristicParameters;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.put_WriteProtectionLevel (value);
   end;

   function get_WriteProtectionLevel
   (
      this : in out GattLocalCharacteristicParameters
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.get_WriteProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UserDescription
   (
      this : in out GattLocalCharacteristicParameters;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.put_UserDescription (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_UserDescription
   (
      this : in out GattLocalCharacteristicParameters
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.get_UserDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PresentationFormats
   (
      this : in out GattLocalCharacteristicParameters
   )
   return IVector_IGattPresentationFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IGattPresentationFormat.Kind;
   begin
      Hr := this.m_IGattLocalCharacteristicParameters.all.get_PresentationFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IGattPresentationFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattLocalCharacteristicResult

   procedure Initialize (this : in out GattLocalCharacteristicResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattLocalCharacteristicResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattLocalCharacteristicResult, IGattLocalCharacteristicResult_Ptr);
   begin
      if this.m_IGattLocalCharacteristicResult /= null then
         if this.m_IGattLocalCharacteristicResult.all /= null then
            RefCount := this.m_IGattLocalCharacteristicResult.all.Release;
            Free (this.m_IGattLocalCharacteristicResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattLocalCharacteristicResult

   function get_Characteristic
   (
      this : in out GattLocalCharacteristicResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristic;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristic do
         Hr := this.m_IGattLocalCharacteristicResult.all.get_Characteristic (m_ComRetVal'Access);
         Retval.m_IGattLocalCharacteristic := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristic;
         Retval.m_IGattLocalCharacteristic.all := m_ComRetVal;
      end return;
   end;

   function get_Error
   (
      this : in out GattLocalCharacteristicResult
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IGattLocalCharacteristicResult.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattLocalDescriptor

   procedure Initialize (this : in out GattLocalDescriptor) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattLocalDescriptor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattLocalDescriptor, IGattLocalDescriptor_Ptr);
   begin
      if this.m_IGattLocalDescriptor /= null then
         if this.m_IGattLocalDescriptor.all /= null then
            RefCount := this.m_IGattLocalDescriptor.all.Release;
            Free (this.m_IGattLocalDescriptor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattLocalDescriptor

   function get_Uuid
   (
      this : in out GattLocalDescriptor
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IGattLocalDescriptor.all.get_Uuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StaticValue
   (
      this : in out GattLocalDescriptor
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattLocalDescriptor.all.get_StaticValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReadProtectionLevel
   (
      this : in out GattLocalDescriptor
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalDescriptor.all.get_ReadProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WriteProtectionLevel
   (
      this : in out GattLocalDescriptor
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalDescriptor.all.get_WriteProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ReadRequested
   (
      this : in out GattLocalDescriptor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattLocalDescriptor.all.add_ReadRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ReadRequested
   (
      this : in out GattLocalDescriptor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalDescriptor.all.remove_ReadRequested (token);
   end;

   function add_WriteRequested
   (
      this : in out GattLocalDescriptor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattLocalDescriptor.all.add_WriteRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_WriteRequested
   (
      this : in out GattLocalDescriptor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalDescriptor.all.remove_WriteRequested (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattLocalDescriptorParameters

   procedure Initialize (this : in out GattLocalDescriptorParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattLocalDescriptorParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattLocalDescriptorParameters, IGattLocalDescriptorParameters_Ptr);
   begin
      if this.m_IGattLocalDescriptorParameters /= null then
         if this.m_IGattLocalDescriptorParameters.all /= null then
            RefCount := this.m_IGattLocalDescriptorParameters.all.Release;
            Free (this.m_IGattLocalDescriptorParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GattLocalDescriptorParameters

   function Constructor return GattLocalDescriptorParameters is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptorParameters");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptorParameters;
   begin
      return RetVal : GattLocalDescriptorParameters do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGattLocalDescriptorParameters := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptorParameters;
            Retval.m_IGattLocalDescriptorParameters.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattLocalDescriptorParameters

   procedure put_StaticValue
   (
      this : in out GattLocalDescriptorParameters;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalDescriptorParameters.all.put_StaticValue (value);
   end;

   function get_StaticValue
   (
      this : in out GattLocalDescriptorParameters
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattLocalDescriptorParameters.all.get_StaticValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReadProtectionLevel
   (
      this : in out GattLocalDescriptorParameters;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalDescriptorParameters.all.put_ReadProtectionLevel (value);
   end;

   function get_ReadProtectionLevel
   (
      this : in out GattLocalDescriptorParameters
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalDescriptorParameters.all.get_ReadProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_WriteProtectionLevel
   (
      this : in out GattLocalDescriptorParameters;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattLocalDescriptorParameters.all.put_WriteProtectionLevel (value);
   end;

   function get_WriteProtectionLevel
   (
      this : in out GattLocalDescriptorParameters
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtectionLevel;
   begin
      Hr := this.m_IGattLocalDescriptorParameters.all.get_WriteProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattLocalDescriptorResult

   procedure Initialize (this : in out GattLocalDescriptorResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattLocalDescriptorResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattLocalDescriptorResult, IGattLocalDescriptorResult_Ptr);
   begin
      if this.m_IGattLocalDescriptorResult /= null then
         if this.m_IGattLocalDescriptorResult.all /= null then
            RefCount := this.m_IGattLocalDescriptorResult.all.Release;
            Free (this.m_IGattLocalDescriptorResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattLocalDescriptorResult

   function get_Descriptor
   (
      this : in out GattLocalDescriptorResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptor;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalDescriptor do
         Hr := this.m_IGattLocalDescriptorResult.all.get_Descriptor (m_ComRetVal'Access);
         Retval.m_IGattLocalDescriptor := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalDescriptor;
         Retval.m_IGattLocalDescriptor.all := m_ComRetVal;
      end return;
   end;

   function get_Error
   (
      this : in out GattLocalDescriptorResult
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IGattLocalDescriptorResult.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattLocalService

   procedure Initialize (this : in out GattLocalService) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattLocalService) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattLocalService, IGattLocalService_Ptr);
   begin
      if this.m_IGattLocalService /= null then
         if this.m_IGattLocalService.all /= null then
            RefCount := this.m_IGattLocalService.all.Release;
            Free (this.m_IGattLocalService);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattLocalService

   function get_Uuid
   (
      this : in out GattLocalService
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IGattLocalService.all.get_Uuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateCharacteristicAsync
   (
      this : in out GattLocalService;
      characteristicUuid : WinRt.Guid;
      parameters : Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristicParameters'Class
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristicResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattLocalCharacteristicResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattLocalCharacteristicResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristicResult;
      m_IID            : aliased WinRt.IID := (529995342, 35029, 22141, (144, 249, 117, 212, 246, 69, 82, 116 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristicResult;
      m_HandlerIID     : aliased WinRt.IID := (2244415197, 55317, 21124, (140, 132, 88, 168, 247, 105, 227, 136 ));
      m_Handler        : AsyncOperationCompletedHandler_GattLocalCharacteristicResult.Kind := new AsyncOperationCompletedHandler_GattLocalCharacteristicResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattLocalCharacteristicResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattLocalCharacteristicResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattLocalCharacteristicResult.Kind_Delegate, AsyncOperationCompletedHandler_GattLocalCharacteristicResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalCharacteristicResult do
         Hr := this.m_IGattLocalService.all.CreateCharacteristicAsync (characteristicUuid, parameters.m_IGattLocalCharacteristicParameters.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattLocalCharacteristicResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalCharacteristicResult;
                  Retval.m_IGattLocalCharacteristicResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Characteristics
   (
      this : in out GattLocalService
   )
   return IVectorView_IGattLocalCharacteristic.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGattLocalCharacteristic.Kind;
   begin
      Hr := this.m_IGattLocalService.all.get_Characteristics (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGattLocalCharacteristic (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattPresentationFormat

   procedure Initialize (this : in out GattPresentationFormat) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattPresentationFormat) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattPresentationFormat, IGattPresentationFormat_Ptr);
   begin
      if this.m_IGattPresentationFormat /= null then
         if this.m_IGattPresentationFormat.all /= null then
            RefCount := this.m_IGattPresentationFormat.all.Release;
            Free (this.m_IGattPresentationFormat);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattPresentationFormat

   function FromParts
   (
      formatType : WinRt.Byte;
      exponent : WinRt.Int32;
      unit : WinRt.UInt16;
      namespaceId : WinRt.Byte;
      description : WinRt.UInt16
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormat is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormat");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormat;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormat do
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromParts (formatType, exponent, unit, namespaceId, description, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IGattPresentationFormat := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormat;
            Retval.m_IGattPresentationFormat.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_BluetoothSigAssignedNumbers
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormat");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_BluetoothSigAssignedNumbers (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattPresentationFormat

   function get_FormatType
   (
      this : in out GattPresentationFormat
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IGattPresentationFormat.all.get_FormatType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Exponent
   (
      this : in out GattPresentationFormat
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IGattPresentationFormat.all.get_Exponent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Unit
   (
      this : in out GattPresentationFormat
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IGattPresentationFormat.all.get_Unit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Namespace
   (
      this : in out GattPresentationFormat
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IGattPresentationFormat.all.get_Namespace (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Description
   (
      this : in out GattPresentationFormat
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IGattPresentationFormat.all.get_Description (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body GattPresentationFormatTypes is

      function get_Boolean
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Boolean (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Bit2
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bit2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Nibble
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Nibble (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt8
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt12
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt12 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt16
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt16 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt24
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt24 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt32
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt32 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt48
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt48 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt64
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt64 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UInt128
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UInt128 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt8
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt12
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt12 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt16
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt16 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt24
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt24 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt32
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt32 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt48
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt48 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt64
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt64 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SInt128
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SInt128 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Float32
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Float32 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Float64
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Float64 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SFloat
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SFloat (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Float
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Float (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DUInt16
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DUInt16 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Utf8
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Utf8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Utf16
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Utf16 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Struct
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattPresentationFormatTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattPresentationFormatTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Struct (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end GattPresentationFormatTypes;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body GattProtocolError is

      function get_InvalidHandle
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidHandle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ReadNotPermitted
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReadNotPermitted (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_WriteNotPermitted
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_WriteNotPermitted (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidPdu
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidPdu (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InsufficientAuthentication
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InsufficientAuthentication (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RequestNotSupported
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RequestNotSupported (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidOffset
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidOffset (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InsufficientAuthorization
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InsufficientAuthorization (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PrepareQueueFull
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PrepareQueueFull (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AttributeNotFound
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AttributeNotFound (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AttributeNotLong
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AttributeNotLong (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InsufficientEncryptionKeySize
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InsufficientEncryptionKeySize (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InvalidAttributeValueLength
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InvalidAttributeValueLength (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UnlikelyError
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UnlikelyError (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InsufficientEncryption
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InsufficientEncryption (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UnsupportedGroupType
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UnsupportedGroupType (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_InsufficientResources
      return WinRt.Byte is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Byte;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattProtocolErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InsufficientResources (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end GattProtocolError;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattReadClientCharacteristicConfigurationDescriptorResult

   procedure Initialize (this : in out GattReadClientCharacteristicConfigurationDescriptorResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattReadClientCharacteristicConfigurationDescriptorResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattReadClientCharacteristicConfigurationDescriptorResult, IGattReadClientCharacteristicConfigurationDescriptorResult_Ptr);
   begin
      if this.m_IGattReadClientCharacteristicConfigurationDescriptorResult /= null then
         if this.m_IGattReadClientCharacteristicConfigurationDescriptorResult.all /= null then
            RefCount := this.m_IGattReadClientCharacteristicConfigurationDescriptorResult.all.Release;
            Free (this.m_IGattReadClientCharacteristicConfigurationDescriptorResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattReadClientCharacteristicConfigurationDescriptorResult

   function get_Status
   (
      this : in out GattReadClientCharacteristicConfigurationDescriptorResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
   begin
      Hr := this.m_IGattReadClientCharacteristicConfigurationDescriptorResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ClientCharacteristicConfigurationDescriptor
   (
      this : in out GattReadClientCharacteristicConfigurationDescriptorResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattClientCharacteristicConfigurationDescriptorValue is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattClientCharacteristicConfigurationDescriptorValue;
   begin
      Hr := this.m_IGattReadClientCharacteristicConfigurationDescriptorResult.all.get_ClientCharacteristicConfigurationDescriptor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolError
   (
      this : in out GattReadClientCharacteristicConfigurationDescriptorResult
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadClientCharacteristicConfigurationDescriptorResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadClientCharacteristicConfigurationDescriptorResult_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadClientCharacteristicConfigurationDescriptorResult2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattReadClientCharacteristicConfigurationDescriptorResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattReadClientCharacteristicConfigurationDescriptorResult.all);
      Hr := m_Interface.get_ProtocolError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattReadRequest

   procedure Initialize (this : in out GattReadRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattReadRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattReadRequest, IGattReadRequest_Ptr);
   begin
      if this.m_IGattReadRequest /= null then
         if this.m_IGattReadRequest.all /= null then
            RefCount := this.m_IGattReadRequest.all.Release;
            Free (this.m_IGattReadRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattReadRequest

   function get_Offset
   (
      this : in out GattReadRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IGattReadRequest.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Length
   (
      this : in out GattReadRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IGattReadRequest.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_State
   (
      this : in out GattReadRequest
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestState;
   begin
      Hr := this.m_IGattReadRequest.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_StateChanged
   (
      this : in out GattReadRequest;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattReadRequest.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out GattReadRequest;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattReadRequest.all.remove_StateChanged (token);
   end;

   procedure RespondWithValue
   (
      this : in out GattReadRequest;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattReadRequest.all.RespondWithValue (value);
   end;

   procedure RespondWithProtocolError
   (
      this : in out GattReadRequest;
      protocolError : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattReadRequest.all.RespondWithProtocolError (protocolError);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattReadRequestedEventArgs

   procedure Initialize (this : in out GattReadRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattReadRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattReadRequestedEventArgs, IGattReadRequestedEventArgs_Ptr);
   begin
      if this.m_IGattReadRequestedEventArgs /= null then
         if this.m_IGattReadRequestedEventArgs.all /= null then
            RefCount := this.m_IGattReadRequestedEventArgs.all.Release;
            Free (this.m_IGattReadRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattReadRequestedEventArgs

   function get_Session
   (
      this : in out GattReadRequestedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession do
         Hr := this.m_IGattReadRequestedEventArgs.all.get_Session (m_ComRetVal'Access);
         Retval.m_IGattSession := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
         Retval.m_IGattSession.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out GattReadRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IGattReadRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   function GetRequestAsync
   (
      this : in out GattReadRequestedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattReadRequest.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattReadRequest.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadRequest;
      m_IID            : aliased WinRt.IID := (1194512066, 55619, 23787, (130, 129, 141, 84, 162, 27, 154, 69 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest;
      m_HandlerIID     : aliased WinRt.IID := (830617672, 15026, 21626, (131, 3, 150, 77, 204, 55, 124, 156 ));
      m_Handler        : AsyncOperationCompletedHandler_GattReadRequest.Kind := new AsyncOperationCompletedHandler_GattReadRequest.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattReadRequest.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattReadRequest.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattReadRequest.Kind_Delegate, AsyncOperationCompletedHandler_GattReadRequest.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadRequest do
         Hr := this.m_IGattReadRequestedEventArgs.all.GetRequestAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattReadRequest := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadRequest;
                  Retval.m_IGattReadRequest.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattReadResult

   procedure Initialize (this : in out GattReadResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattReadResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattReadResult, IGattReadResult_Ptr);
   begin
      if this.m_IGattReadResult /= null then
         if this.m_IGattReadResult.all /= null then
            RefCount := this.m_IGattReadResult.all.Release;
            Free (this.m_IGattReadResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattReadResult

   function get_Status
   (
      this : in out GattReadResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
   begin
      Hr := this.m_IGattReadResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out GattReadResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattReadResult.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolError
   (
      this : in out GattReadResult
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReadResult2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattReadResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattReadResult.all);
      Hr := m_Interface.get_ProtocolError (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattReliableWriteTransaction

   procedure Initialize (this : in out GattReliableWriteTransaction) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattReliableWriteTransaction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattReliableWriteTransaction, IGattReliableWriteTransaction_Ptr);
   begin
      if this.m_IGattReliableWriteTransaction /= null then
         if this.m_IGattReliableWriteTransaction.all /= null then
            RefCount := this.m_IGattReliableWriteTransaction.all.Release;
            Free (this.m_IGattReliableWriteTransaction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GattReliableWriteTransaction

   function Constructor return GattReliableWriteTransaction is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattReliableWriteTransaction");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReliableWriteTransaction;
   begin
      return RetVal : GattReliableWriteTransaction do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGattReliableWriteTransaction := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReliableWriteTransaction;
            Retval.m_IGattReliableWriteTransaction.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattReliableWriteTransaction

   procedure WriteValue
   (
      this : in out GattReliableWriteTransaction;
      characteristic : Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic'Class;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattReliableWriteTransaction.all.WriteValue (characteristic.m_IGattCharacteristic.all, value);
   end;

   function CommitAsync
   (
      this : in out GattReliableWriteTransaction
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattCommunicationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattCommunicationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_IID            : aliased WinRt.IID := (1073124630, 7163, 21225, (158, 230, 229, 205, 183, 142, 22, 131 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
      m_HandlerIID     : aliased WinRt.IID := (559157626, 38797, 23003, (153, 207, 107, 105, 12, 179, 56, 155 ));
      m_Handler        : AsyncOperationCompletedHandler_GattCommunicationStatus.Kind := new AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattCommunicationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattCommunicationStatus.Kind_Delegate, AsyncOperationCompletedHandler_GattCommunicationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IGattReliableWriteTransaction.all.CommitAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function CommitWithResultAsync
   (
      this : in out GattReliableWriteTransaction
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReliableWriteTransaction2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattWriteResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattWriteResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
      m_IID            : aliased WinRt.IID := (3896198452, 48404, 23195, (165, 59, 23, 204, 2, 162, 168, 168 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult;
      m_HandlerIID     : aliased WinRt.IID := (1873332675, 65406, 24481, (162, 243, 39, 20, 207, 4, 184, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_GattWriteResult.Kind := new AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattWriteResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattWriteResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattWriteResult.Kind_Delegate, AsyncOperationCompletedHandler_GattWriteResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReliableWriteTransaction_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattReliableWriteTransaction2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattReliableWriteTransaction2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteResult do
         m_Interface := QInterface (this.m_IGattReliableWriteTransaction.all);
         Hr := m_Interface.CommitWithResultAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattWriteResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteResult;
                  Retval.m_IGattWriteResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattRequestStateChangedEventArgs

   procedure Initialize (this : in out GattRequestStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattRequestStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattRequestStateChangedEventArgs, IGattRequestStateChangedEventArgs_Ptr);
   begin
      if this.m_IGattRequestStateChangedEventArgs /= null then
         if this.m_IGattRequestStateChangedEventArgs.all /= null then
            RefCount := this.m_IGattRequestStateChangedEventArgs.all.Release;
            Free (this.m_IGattRequestStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattRequestStateChangedEventArgs

   function get_State
   (
      this : in out GattRequestStateChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestState;
   begin
      Hr := this.m_IGattRequestStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Error
   (
      this : in out GattRequestStateChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IGattRequestStateChangedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProvider

   procedure Initialize (this : in out GattServiceProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProvider, IGattServiceProvider_Ptr);
   begin
      if this.m_IGattServiceProvider /= null then
         if this.m_IGattServiceProvider.all /= null then
            RefCount := this.m_IGattServiceProvider.all.Release;
            Free (this.m_IGattServiceProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattServiceProvider

   function CreateAsync
   (
      serviceUuid : WinRt.Guid
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattServiceProviderResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattServiceProviderResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderResult;
      m_IID            : aliased WinRt.IID := (561516584, 62882, 23961, (165, 171, 188, 230, 85, 79, 188, 2 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderResult;
      m_HandlerIID     : aliased WinRt.IID := (4187125914, 59777, 22906, (145, 151, 31, 189, 152, 111, 116, 199 ));
      m_Handler        : AsyncOperationCompletedHandler_GattServiceProviderResult.Kind := new AsyncOperationCompletedHandler_GattServiceProviderResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattServiceProviderResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattServiceProviderResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattServiceProviderResult.Kind_Delegate, AsyncOperationCompletedHandler_GattServiceProviderResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderResult do
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceProviderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (serviceUuid, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IGattServiceProviderResult := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderResult;
                     Retval.m_IGattServiceProviderResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProvider

   function get_Service
   (
      this : in out GattServiceProvider
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalService'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalService;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalService do
         Hr := this.m_IGattServiceProvider.all.get_Service (m_ComRetVal'Access);
         Retval.m_IGattLocalService := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalService;
         Retval.m_IGattLocalService.all := m_ComRetVal;
      end return;
   end;

   function get_AdvertisementStatus
   (
      this : in out GattServiceProvider
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatus;
   begin
      Hr := this.m_IGattServiceProvider.all.get_AdvertisementStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_AdvertisementStatusChanged
   (
      this : in out GattServiceProvider;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattServiceProvider.all.add_AdvertisementStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AdvertisementStatusChanged
   (
      this : in out GattServiceProvider;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProvider.all.remove_AdvertisementStatusChanged (token);
   end;

   procedure StartAdvertising
   (
      this : in out GattServiceProvider
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProvider.all.StartAdvertising;
   end;

   procedure StartAdvertising
   (
      this : in out GattServiceProvider;
      parameters : Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisingParameters'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProvider.all.StartAdvertising (parameters.m_IGattServiceProviderAdvertisingParameters.all);
   end;

   procedure StopAdvertising
   (
      this : in out GattServiceProvider
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProvider.all.StopAdvertising;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProviderAdvertisementStatusChangedEventArgs

   procedure Initialize (this : in out GattServiceProviderAdvertisementStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProviderAdvertisementStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProviderAdvertisementStatusChangedEventArgs, IGattServiceProviderAdvertisementStatusChangedEventArgs_Ptr);
   begin
      if this.m_IGattServiceProviderAdvertisementStatusChangedEventArgs /= null then
         if this.m_IGattServiceProviderAdvertisementStatusChangedEventArgs.all /= null then
            RefCount := this.m_IGattServiceProviderAdvertisementStatusChangedEventArgs.all.Release;
            Free (this.m_IGattServiceProviderAdvertisementStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProviderAdvertisementStatusChangedEventArgs

   function get_Error
   (
      this : in out GattServiceProviderAdvertisementStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IGattServiceProviderAdvertisementStatusChangedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out GattServiceProviderAdvertisementStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisementStatus;
   begin
      Hr := this.m_IGattServiceProviderAdvertisementStatusChangedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProviderAdvertisingParameters

   procedure Initialize (this : in out GattServiceProviderAdvertisingParameters) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProviderAdvertisingParameters) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProviderAdvertisingParameters, IGattServiceProviderAdvertisingParameters_Ptr);
   begin
      if this.m_IGattServiceProviderAdvertisingParameters /= null then
         if this.m_IGattServiceProviderAdvertisingParameters.all /= null then
            RefCount := this.m_IGattServiceProviderAdvertisingParameters.all.Release;
            Free (this.m_IGattServiceProviderAdvertisingParameters);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GattServiceProviderAdvertisingParameters

   function Constructor return GattServiceProviderAdvertisingParameters is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisingParameters");
      m_ComRetVal  : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters;
   begin
      return RetVal : GattServiceProviderAdvertisingParameters do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGattServiceProviderAdvertisingParameters := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters;
            Retval.m_IGattServiceProviderAdvertisingParameters.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProviderAdvertisingParameters

   procedure put_IsConnectable
   (
      this : in out GattServiceProviderAdvertisingParameters;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProviderAdvertisingParameters.all.put_IsConnectable (value);
   end;

   function get_IsConnectable
   (
      this : in out GattServiceProviderAdvertisingParameters
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGattServiceProviderAdvertisingParameters.all.get_IsConnectable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsDiscoverable
   (
      this : in out GattServiceProviderAdvertisingParameters;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProviderAdvertisingParameters.all.put_IsDiscoverable (value);
   end;

   function get_IsDiscoverable
   (
      this : in out GattServiceProviderAdvertisingParameters
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGattServiceProviderAdvertisingParameters.all.get_IsDiscoverable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ServiceData
   (
      this : in out GattServiceProviderAdvertisingParameters;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattServiceProviderAdvertisingParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattServiceProviderAdvertisingParameters.all);
      Hr := m_Interface.put_ServiceData (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ServiceData
   (
      this : in out GattServiceProviderAdvertisingParameters
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters_Interface, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters2, WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IID_IGattServiceProviderAdvertisingParameters2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattServiceProviderAdvertisingParameters.all);
      Hr := m_Interface.get_ServiceData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProviderResult

   procedure Initialize (this : in out GattServiceProviderResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProviderResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProviderResult, IGattServiceProviderResult_Ptr);
   begin
      if this.m_IGattServiceProviderResult /= null then
         if this.m_IGattServiceProviderResult.all /= null then
            RefCount := this.m_IGattServiceProviderResult.all.Release;
            Free (this.m_IGattServiceProviderResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProviderResult

   function get_Error
   (
      this : in out GattServiceProviderResult
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IGattServiceProviderResult.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceProvider
   (
      this : in out GattServiceProviderResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProvider;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProvider do
         Hr := this.m_IGattServiceProviderResult.all.get_ServiceProvider (m_ComRetVal'Access);
         Retval.m_IGattServiceProvider := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProvider;
         Retval.m_IGattServiceProvider.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body GattServiceUuids is

      function get_Battery
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Battery (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_BloodPressure
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BloodPressure (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingSpeedAndCadence
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingSpeedAndCadence (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GenericAccess
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GenericAccess (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_GenericAttribute
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GenericAttribute (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Glucose
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Glucose (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HealthThermometer
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HealthThermometer (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HeartRate
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HeartRate (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_RunningSpeedAndCadence
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RunningSpeedAndCadence (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_AlertNotification
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AlertNotification (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CurrentTime_GattServiceUuids
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CurrentTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CyclingPower
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CyclingPower (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DeviceInformation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DeviceInformation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_HumanInterfaceDevice
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HumanInterfaceDevice (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ImmediateAlert
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ImmediateAlert (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LinkLoss
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LinkLoss (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_LocationAndNavigation
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LocationAndNavigation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_NextDstChange
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NextDstChange (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_PhoneAlertStatus
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhoneAlertStatus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ReferenceTimeUpdate
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReferenceTimeUpdate (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ScanParameters
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScanParameters (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_TxPower
      return WinRt.Guid is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids");
         m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceUuidsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Guid;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceUuidsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TxPower (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end GattServiceUuids;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattSession

   procedure Initialize (this : in out GattSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattSession, IGattSession_Ptr);
   begin
      if this.m_IGattSession /= null then
         if this.m_IGattSession.all /= null then
            RefCount := this.m_IGattSession.all.Release;
            Free (this.m_IGattSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattSession

   function FromDeviceIdAsync
   (
      deviceId : Windows.Devices.Bluetooth.BluetoothDeviceId'Class
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
      m_IID            : aliased WinRt.IID := (1832957031, 18105, 20847, (130, 8, 219, 35, 183, 134, 234, 72 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession;
      m_HandlerIID     : aliased WinRt.IID := (3403684392, 64819, 21550, (165, 173, 61, 135, 143, 115, 219, 144 ));
      m_Handler        : AsyncOperationCompletedHandler_GattSession.Kind := new AsyncOperationCompletedHandler_GattSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattSession.Kind_Delegate, AsyncOperationCompletedHandler_GattSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession do
         Hr := RoGetActivationFactory (m_hString, IID_IGattSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromDeviceIdAsync (deviceId.m_IBluetoothDeviceId.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IGattSession := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
                     Retval.m_IGattSession.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattSession

   function get_DeviceId
   (
      this : in out GattSession
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothDeviceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDeviceId do
         Hr := this.m_IGattSession.all.get_DeviceId (m_ComRetVal'Access);
         Retval.m_IBluetoothDeviceId := new Windows.Devices.Bluetooth.IBluetoothDeviceId;
         Retval.m_IBluetoothDeviceId.all := m_ComRetVal;
      end return;
   end;

   function get_CanMaintainConnection
   (
      this : in out GattSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGattSession.all.get_CanMaintainConnection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaintainConnection
   (
      this : in out GattSession;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattSession.all.put_MaintainConnection (value);
   end;

   function get_MaintainConnection
   (
      this : in out GattSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGattSession.all.get_MaintainConnection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxPduSize
   (
      this : in out GattSession
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IGattSession.all.get_MaxPduSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SessionStatus
   (
      this : in out GattSession
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatus;
   begin
      Hr := this.m_IGattSession.all.get_SessionStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_MaxPduSizeChanged
   (
      this : in out GattSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattSession.all.add_MaxPduSizeChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MaxPduSizeChanged
   (
      this : in out GattSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattSession.all.remove_MaxPduSizeChanged (token);
   end;

   function add_SessionStatusChanged
   (
      this : in out GattSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattSession.all.add_SessionStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SessionStatusChanged
   (
      this : in out GattSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattSession.all.remove_SessionStatusChanged (token);
   end;

   procedure Close
   (
      this : in out GattSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattSessionStatusChangedEventArgs

   procedure Initialize (this : in out GattSessionStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattSessionStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattSessionStatusChangedEventArgs, IGattSessionStatusChangedEventArgs_Ptr);
   begin
      if this.m_IGattSessionStatusChangedEventArgs /= null then
         if this.m_IGattSessionStatusChangedEventArgs.all /= null then
            RefCount := this.m_IGattSessionStatusChangedEventArgs.all.Release;
            Free (this.m_IGattSessionStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattSessionStatusChangedEventArgs

   function get_Error
   (
      this : in out GattSessionStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IGattSessionStatusChangedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out GattSessionStatusChangedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattSessionStatus;
   begin
      Hr := this.m_IGattSessionStatusChangedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattSubscribedClient

   procedure Initialize (this : in out GattSubscribedClient) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattSubscribedClient) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattSubscribedClient, IGattSubscribedClient_Ptr);
   begin
      if this.m_IGattSubscribedClient /= null then
         if this.m_IGattSubscribedClient.all /= null then
            RefCount := this.m_IGattSubscribedClient.all.Release;
            Free (this.m_IGattSubscribedClient);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattSubscribedClient

   function get_Session
   (
      this : in out GattSubscribedClient
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession do
         Hr := this.m_IGattSubscribedClient.all.get_Session (m_ComRetVal'Access);
         Retval.m_IGattSession := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
         Retval.m_IGattSession.all := m_ComRetVal;
      end return;
   end;

   function get_MaxNotificationSize
   (
      this : in out GattSubscribedClient
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IGattSubscribedClient.all.get_MaxNotificationSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_MaxNotificationSizeChanged
   (
      this : in out GattSubscribedClient;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattSubscribedClient.all.add_MaxNotificationSizeChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MaxNotificationSizeChanged
   (
      this : in out GattSubscribedClient;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattSubscribedClient.all.remove_MaxNotificationSizeChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattValueChangedEventArgs

   procedure Initialize (this : in out GattValueChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattValueChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattValueChangedEventArgs, IGattValueChangedEventArgs_Ptr);
   begin
      if this.m_IGattValueChangedEventArgs /= null then
         if this.m_IGattValueChangedEventArgs.all /= null then
            RefCount := this.m_IGattValueChangedEventArgs.all.Release;
            Free (this.m_IGattValueChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattValueChangedEventArgs

   function get_CharacteristicValue
   (
      this : in out GattValueChangedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattValueChangedEventArgs.all.get_CharacteristicValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out GattValueChangedEventArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IGattValueChangedEventArgs.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattWriteRequest

   procedure Initialize (this : in out GattWriteRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattWriteRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattWriteRequest, IGattWriteRequest_Ptr);
   begin
      if this.m_IGattWriteRequest /= null then
         if this.m_IGattWriteRequest.all /= null then
            RefCount := this.m_IGattWriteRequest.all.Release;
            Free (this.m_IGattWriteRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattWriteRequest

   function get_Value
   (
      this : in out GattWriteRequest
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattWriteRequest.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Offset
   (
      this : in out GattWriteRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IGattWriteRequest.all.get_Offset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Option
   (
      this : in out GattWriteRequest
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteOption;
   begin
      Hr := this.m_IGattWriteRequest.all.get_Option (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_State
   (
      this : in out GattWriteRequest
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattRequestState;
   begin
      Hr := this.m_IGattWriteRequest.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_StateChanged
   (
      this : in out GattWriteRequest;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGattWriteRequest.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out GattWriteRequest;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattWriteRequest.all.remove_StateChanged (token);
   end;

   procedure Respond
   (
      this : in out GattWriteRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattWriteRequest.all.Respond;
   end;

   procedure RespondWithProtocolError
   (
      this : in out GattWriteRequest;
      protocolError : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattWriteRequest.all.RespondWithProtocolError (protocolError);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattWriteRequestedEventArgs

   procedure Initialize (this : in out GattWriteRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattWriteRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattWriteRequestedEventArgs, IGattWriteRequestedEventArgs_Ptr);
   begin
      if this.m_IGattWriteRequestedEventArgs /= null then
         if this.m_IGattWriteRequestedEventArgs.all /= null then
            RefCount := this.m_IGattWriteRequestedEventArgs.all.Release;
            Free (this.m_IGattWriteRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattWriteRequestedEventArgs

   function get_Session
   (
      this : in out GattWriteRequestedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession do
         Hr := this.m_IGattWriteRequestedEventArgs.all.get_Session (m_ComRetVal'Access);
         Retval.m_IGattSession := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession;
         Retval.m_IGattSession.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out GattWriteRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IGattWriteRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   function GetRequestAsync
   (
      this : in out GattWriteRequestedEventArgs
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattWriteRequest.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattWriteRequest.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteRequest;
      m_IID            : aliased WinRt.IID := (4220206104, 12128, 23363, (183, 115, 20, 96, 69, 129, 110, 3 )); -- Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest;
      m_HandlerIID     : aliased WinRt.IID := (632764406, 12543, 21902, (186, 22, 181, 100, 196, 95, 220, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_GattWriteRequest.Kind := new AsyncOperationCompletedHandler_GattWriteRequest.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattWriteRequest.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattWriteRequest.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattWriteRequest.Kind_Delegate, AsyncOperationCompletedHandler_GattWriteRequest.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattWriteRequest do
         Hr := this.m_IGattWriteRequestedEventArgs.all.GetRequestAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGattWriteRequest := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattWriteRequest;
                  Retval.m_IGattWriteRequest.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattWriteResult

   procedure Initialize (this : in out GattWriteResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattWriteResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattWriteResult, IGattWriteResult_Ptr);
   begin
      if this.m_IGattWriteResult /= null then
         if this.m_IGattWriteResult.all /= null then
            RefCount := this.m_IGattWriteResult.all.Release;
            Free (this.m_IGattWriteResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattWriteResult

   function get_Status
   (
      this : in out GattWriteResult
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.GattCommunicationStatus;
   begin
      Hr := this.m_IGattWriteResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtocolError
   (
      this : in out GattWriteResult
   )
   return IReference_Byte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Byte.Kind;
   begin
      Hr := this.m_IGattWriteResult.all.get_ProtocolError (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Byte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

end;

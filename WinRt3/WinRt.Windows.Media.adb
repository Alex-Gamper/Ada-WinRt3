--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.AppService;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.DirectX;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioBuffer

   procedure Initialize (this : in out AudioBuffer) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioBuffer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioBuffer, IAudioBuffer_Ptr);
   begin
      if this.m_IAudioBuffer /= null then
         if this.m_IAudioBuffer.all /= null then
            RefCount := this.m_IAudioBuffer.all.Release;
            Free (this.m_IAudioBuffer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioBuffer

   function get_Capacity
   (
      this : in out AudioBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioBuffer.all.get_Capacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Length
   (
      this : in out AudioBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioBuffer.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Length
   (
      this : in out AudioBuffer;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioBuffer.all.put_Length (value);
   end;

   function CreateReference
   (
      this : in out AudioBuffer
   )
   return WinRt.Windows.Foundation.IMemoryBufferReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IMemoryBuffer := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBufferReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioBuffer_Interface, WinRt.Windows.Foundation.IMemoryBuffer, WinRt.Windows.Foundation.IID_IMemoryBuffer'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioBuffer.all);
      Hr := m_Interface.CreateReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out AudioBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioBuffer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioBuffer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioFrame

   procedure Initialize (this : in out AudioFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioFrame, IAudioFrame_Ptr);
   begin
      if this.m_IAudioFrame /= null then
         if this.m_IAudioFrame.all /= null then
            RefCount := this.m_IAudioFrame.all.Release;
            Free (this.m_IAudioFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioFrame

   function Constructor
   (
      capacity : WinRt.UInt32
   )
   return AudioFrame is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.AudioFrame");
      m_Factory    : access IAudioFrameFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.IAudioFrame;
   begin
      return RetVal : AudioFrame do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioFrameFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (capacity, m_ComRetVal'Access);
            Retval.m_IAudioFrame := new Windows.Media.IAudioFrame;
            Retval.m_IAudioFrame.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioFrame

   function LockBuffer
   (
      this : in out AudioFrame;
      mode : Windows.Media.AudioBufferAccessMode
   )
   return WinRt.Windows.Media.AudioBuffer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IAudioBuffer;
   begin
      return RetVal : WinRt.Windows.Media.AudioBuffer do
         Hr := this.m_IAudioFrame.all.LockBuffer (mode, m_ComRetVal'Access);
         Retval.m_IAudioBuffer := new Windows.Media.IAudioBuffer;
         Retval.m_IAudioBuffer.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out AudioFrame
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsReadOnly
   (
      this : in out AudioFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.get_IsReadOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RelativeTime
   (
      this : in out AudioFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.put_RelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RelativeTime
   (
      this : in out AudioFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.get_RelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SystemRelativeTime
   (
      this : in out AudioFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.put_SystemRelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SystemRelativeTime
   (
      this : in out AudioFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.get_SystemRelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Duration
   (
      this : in out AudioFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out AudioFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsDiscontinuous
   (
      this : in out AudioFrame;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.put_IsDiscontinuous (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDiscontinuous
   (
      this : in out AudioFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.get_IsDiscontinuous (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ExtendedProperties
   (
      this : in out AudioFrame
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.get_ExtendedProperties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out AudioFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IAudioFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AutoRepeatModeChangeRequestedEventArgs

   procedure Initialize (this : in out AutoRepeatModeChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AutoRepeatModeChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAutoRepeatModeChangeRequestedEventArgs, IAutoRepeatModeChangeRequestedEventArgs_Ptr);
   begin
      if this.m_IAutoRepeatModeChangeRequestedEventArgs /= null then
         if this.m_IAutoRepeatModeChangeRequestedEventArgs.all /= null then
            RefCount := this.m_IAutoRepeatModeChangeRequestedEventArgs.all.Release;
            Free (this.m_IAutoRepeatModeChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AutoRepeatModeChangeRequestedEventArgs

   function get_RequestedAutoRepeatMode
   (
      this : in out AutoRepeatModeChangeRequestedEventArgs
   )
   return WinRt.Windows.Media.MediaPlaybackAutoRepeatMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaPlaybackAutoRepeatMode;
   begin
      Hr := this.m_IAutoRepeatModeChangeRequestedEventArgs.all.get_RequestedAutoRepeatMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageDisplayProperties

   procedure Initialize (this : in out ImageDisplayProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageDisplayProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageDisplayProperties, IImageDisplayProperties_Ptr);
   begin
      if this.m_IImageDisplayProperties /= null then
         if this.m_IImageDisplayProperties.all /= null then
            RefCount := this.m_IImageDisplayProperties.all.Release;
            Free (this.m_IImageDisplayProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageDisplayProperties

   function get_Title
   (
      this : in out ImageDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IImageDisplayProperties.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out ImageDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IImageDisplayProperties.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subtitle
   (
      this : in out ImageDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IImageDisplayProperties.all.get_Subtitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subtitle
   (
      this : in out ImageDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IImageDisplayProperties.all.put_Subtitle (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MediaControl is

      function add_SoundLevelChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_SoundLevelChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_SoundLevelChanged
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_SoundLevelChanged (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_PlayPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_PlayPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_PlayPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_PlayPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_PausePressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_PausePressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_PausePressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_PausePressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_StopPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_StopPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_StopPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_StopPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_PlayPauseTogglePressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_PlayPauseTogglePressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_PlayPauseTogglePressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_PlayPauseTogglePressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_RecordPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_RecordPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_RecordPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_RecordPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_NextTrackPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_NextTrackPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_NextTrackPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_NextTrackPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_PreviousTrackPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_PreviousTrackPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_PreviousTrackPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_PreviousTrackPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_FastForwardPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_FastForwardPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_FastForwardPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_FastForwardPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_RewindPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_RewindPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_RewindPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_RewindPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_ChannelUpPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ChannelUpPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ChannelUpPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ChannelUpPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_ChannelDownPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ChannelDownPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ChannelDownPressed
      (
         cookie : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ChannelDownPressed (cookie);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_SoundLevel
      return WinRt.Windows.Media.SoundLevel is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.SoundLevel;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SoundLevel (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_TrackName
      (
         value : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_value : WinRt.HString := To_HString (value);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_TrackName (HStr_value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end;

      function get_TrackName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TrackName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      procedure put_ArtistName
      (
         value : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_value : WinRt.HString := To_HString (value);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_ArtistName (HStr_value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end;

      function get_ArtistName
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ArtistName (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      procedure put_IsPlaying
      (
         value : WinRt.Boolean
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_IsPlaying (value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_IsPlaying
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsPlaying (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_AlbumArt
      (
         value : Windows.Foundation.Uri'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_AlbumArt (value.m_IUriRuntimeClass.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_AlbumArt
      return WinRt.Windows.Foundation.Uri is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaControl");
         m_Factory        : access WinRt.Windows.Media.IMediaControl_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      begin
         return RetVal : WinRt.Windows.Foundation.Uri do
            Hr := RoGetActivationFactory (m_hString, IID_IMediaControl'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_AlbumArt (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
               Retval.m_IUriRuntimeClass.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end MediaControl;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaExtensionManager

   procedure Initialize (this : in out MediaExtensionManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaExtensionManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaExtensionManager, IMediaExtensionManager_Ptr);
   begin
      if this.m_IMediaExtensionManager /= null then
         if this.m_IMediaExtensionManager.all /= null then
            RefCount := this.m_IMediaExtensionManager.all.Release;
            Free (this.m_IMediaExtensionManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaExtensionManager

   function Constructor return MediaExtensionManager is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaExtensionManager");
      m_ComRetVal  : aliased Windows.Media.IMediaExtensionManager;
   begin
      return RetVal : MediaExtensionManager do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaExtensionManager := new Windows.Media.IMediaExtensionManager;
            Retval.m_IMediaExtensionManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaExtensionManager

   procedure RegisterSchemeHandler
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      scheme : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
      HStr_scheme : WinRt.HString := To_HString (scheme);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterSchemeHandler (HStr_activatableClassId, HStr_scheme);
      Hr := WindowsDeleteString (HStr_activatableClassId);
      Hr := WindowsDeleteString (HStr_scheme);
   end;

   procedure RegisterSchemeHandler
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      scheme : WinRt.WString;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
      HStr_scheme : WinRt.HString := To_HString (scheme);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterSchemeHandler (HStr_activatableClassId, HStr_scheme, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
      Hr := WindowsDeleteString (HStr_scheme);
   end;

   procedure RegisterByteStreamHandler
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      fileExtension : WinRt.WString;
      mimeType : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
      HStr_fileExtension : WinRt.HString := To_HString (fileExtension);
      HStr_mimeType : WinRt.HString := To_HString (mimeType);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterByteStreamHandler (HStr_activatableClassId, HStr_fileExtension, HStr_mimeType);
      Hr := WindowsDeleteString (HStr_activatableClassId);
      Hr := WindowsDeleteString (HStr_fileExtension);
      Hr := WindowsDeleteString (HStr_mimeType);
   end;

   procedure RegisterByteStreamHandler
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      fileExtension : WinRt.WString;
      mimeType : WinRt.WString;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
      HStr_fileExtension : WinRt.HString := To_HString (fileExtension);
      HStr_mimeType : WinRt.HString := To_HString (mimeType);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterByteStreamHandler (HStr_activatableClassId, HStr_fileExtension, HStr_mimeType, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
      Hr := WindowsDeleteString (HStr_fileExtension);
      Hr := WindowsDeleteString (HStr_mimeType);
   end;

   procedure RegisterAudioDecoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterAudioDecoder (HStr_activatableClassId, inputSubtype, outputSubtype);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterAudioDecoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterAudioDecoder (HStr_activatableClassId, inputSubtype, outputSubtype, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterAudioEncoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterAudioEncoder (HStr_activatableClassId, inputSubtype, outputSubtype);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterAudioEncoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterAudioEncoder (HStr_activatableClassId, inputSubtype, outputSubtype, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterVideoDecoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterVideoDecoder (HStr_activatableClassId, inputSubtype, outputSubtype);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterVideoDecoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterVideoDecoder (HStr_activatableClassId, inputSubtype, outputSubtype, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterVideoEncoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterVideoEncoder (HStr_activatableClassId, inputSubtype, outputSubtype);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterVideoEncoder
   (
      this : in out MediaExtensionManager;
      activatableClassId : WinRt.WString;
      inputSubtype : WinRt.Guid;
      outputSubtype : WinRt.Guid;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
   begin
      Hr := this.m_IMediaExtensionManager.all.RegisterVideoEncoder (HStr_activatableClassId, inputSubtype, outputSubtype, configuration);
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RegisterMediaExtensionForAppService
   (
      this : in out MediaExtensionManager;
      extension : Windows.Media.IMediaExtension;
      connection : Windows.ApplicationModel.AppService.AppServiceConnection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaExtensionManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaExtensionManager_Interface, WinRt.Windows.Media.IMediaExtensionManager2, WinRt.Windows.Media.IID_IMediaExtensionManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaExtensionManager.all);
      Hr := m_Interface.RegisterMediaExtensionForAppService (extension, connection.m_IAppServiceConnection.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MediaMarkerTypes is

      function get_Bookmark
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaMarkerTypes");
         m_Factory        : access WinRt.Windows.Media.IMediaMarkerTypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaMarkerTypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bookmark (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end MediaMarkerTypes;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaProcessingTriggerDetails

   procedure Initialize (this : in out MediaProcessingTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaProcessingTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaProcessingTriggerDetails, IMediaProcessingTriggerDetails_Ptr);
   begin
      if this.m_IMediaProcessingTriggerDetails /= null then
         if this.m_IMediaProcessingTriggerDetails.all /= null then
            RefCount := this.m_IMediaProcessingTriggerDetails.all.Release;
            Free (this.m_IMediaProcessingTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaProcessingTriggerDetails

   function get_Arguments
   (
      this : in out MediaProcessingTriggerDetails
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IMediaProcessingTriggerDetails.all.get_Arguments (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaTimelineController

   procedure Initialize (this : in out MediaTimelineController) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaTimelineController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaTimelineController, IMediaTimelineController_Ptr);
   begin
      if this.m_IMediaTimelineController /= null then
         if this.m_IMediaTimelineController.all /= null then
            RefCount := this.m_IMediaTimelineController.all.Release;
            Free (this.m_IMediaTimelineController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaTimelineController

   function Constructor return MediaTimelineController is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaTimelineController");
      m_ComRetVal  : aliased Windows.Media.IMediaTimelineController;
   begin
      return RetVal : MediaTimelineController do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaTimelineController := new Windows.Media.IMediaTimelineController;
            Retval.m_IMediaTimelineController.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaTimelineController

   procedure Start
   (
      this : in out MediaTimelineController
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTimelineController.all.Start;
   end;

   procedure Resume
   (
      this : in out MediaTimelineController
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTimelineController.all.Resume;
   end;

   procedure Pause
   (
      this : in out MediaTimelineController
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTimelineController.all.Pause;
   end;

   function get_Position
   (
      this : in out MediaTimelineController
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaTimelineController.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out MediaTimelineController;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTimelineController.all.put_Position (value);
   end;

   function get_ClockRate
   (
      this : in out MediaTimelineController
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaTimelineController.all.get_ClockRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ClockRate
   (
      this : in out MediaTimelineController;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTimelineController.all.put_ClockRate (value);
   end;

   function get_State
   (
      this : in out MediaTimelineController
   )
   return WinRt.Windows.Media.MediaTimelineControllerState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaTimelineControllerState;
   begin
      Hr := this.m_IMediaTimelineController.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_PositionChanged
   (
      this : in out MediaTimelineController;
      positionChangedEventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaTimelineController.all.add_PositionChanged (positionChangedEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PositionChanged
   (
      this : in out MediaTimelineController;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTimelineController.all.remove_PositionChanged (eventCookie);
   end;

   function add_StateChanged
   (
      this : in out MediaTimelineController;
      stateChangedEventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaTimelineController.all.add_StateChanged (stateChangedEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out MediaTimelineController;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaTimelineController.all.remove_StateChanged (eventCookie);
   end;

   function get_Duration
   (
      this : in out MediaTimelineController
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Duration
   (
      this : in out MediaTimelineController;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsLoopingEnabled
   (
      this : in out MediaTimelineController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.get_IsLoopingEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsLoopingEnabled
   (
      this : in out MediaTimelineController;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.put_IsLoopingEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function add_Failed
   (
      this : in out MediaTimelineController;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.add_Failed (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Failed
   (
      this : in out MediaTimelineController;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.remove_Failed (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_Ended
   (
      this : in out MediaTimelineController;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.add_Ended (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Ended
   (
      this : in out MediaTimelineController;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaTimelineController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMediaTimelineController_Interface, WinRt.Windows.Media.IMediaTimelineController2, WinRt.Windows.Media.IID_IMediaTimelineController2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaTimelineController.all);
      Hr := m_Interface.remove_Ended (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaTimelineControllerFailedEventArgs

   procedure Initialize (this : in out MediaTimelineControllerFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaTimelineControllerFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaTimelineControllerFailedEventArgs, IMediaTimelineControllerFailedEventArgs_Ptr);
   begin
      if this.m_IMediaTimelineControllerFailedEventArgs /= null then
         if this.m_IMediaTimelineControllerFailedEventArgs.all /= null then
            RefCount := this.m_IMediaTimelineControllerFailedEventArgs.all.Release;
            Free (this.m_IMediaTimelineControllerFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaTimelineControllerFailedEventArgs

   function get_ExtendedError
   (
      this : in out MediaTimelineControllerFailedEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IMediaTimelineControllerFailedEventArgs.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MusicDisplayProperties

   procedure Initialize (this : in out MusicDisplayProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out MusicDisplayProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMusicDisplayProperties, IMusicDisplayProperties_Ptr);
   begin
      if this.m_IMusicDisplayProperties /= null then
         if this.m_IMusicDisplayProperties.all /= null then
            RefCount := this.m_IMusicDisplayProperties.all.Release;
            Free (this.m_IMusicDisplayProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MusicDisplayProperties

   function get_Title
   (
      this : in out MusicDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMusicDisplayProperties.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out MusicDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMusicDisplayProperties.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AlbumArtist
   (
      this : in out MusicDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMusicDisplayProperties.all.get_AlbumArtist (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AlbumArtist
   (
      this : in out MusicDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMusicDisplayProperties.all.put_AlbumArtist (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Artist
   (
      this : in out MusicDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMusicDisplayProperties.all.get_Artist (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Artist
   (
      this : in out MusicDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMusicDisplayProperties.all.put_Artist (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AlbumTitle
   (
      this : in out MusicDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMusicDisplayProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMusicDisplayProperties_Interface, WinRt.Windows.Media.IMusicDisplayProperties2, WinRt.Windows.Media.IID_IMusicDisplayProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMusicDisplayProperties.all);
      Hr := m_Interface.get_AlbumTitle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AlbumTitle
   (
      this : in out MusicDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMusicDisplayProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMusicDisplayProperties_Interface, WinRt.Windows.Media.IMusicDisplayProperties2, WinRt.Windows.Media.IID_IMusicDisplayProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMusicDisplayProperties.all);
      Hr := m_Interface.put_AlbumTitle (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TrackNumber
   (
      this : in out MusicDisplayProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMusicDisplayProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMusicDisplayProperties_Interface, WinRt.Windows.Media.IMusicDisplayProperties2, WinRt.Windows.Media.IID_IMusicDisplayProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMusicDisplayProperties.all);
      Hr := m_Interface.get_TrackNumber (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TrackNumber
   (
      this : in out MusicDisplayProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMusicDisplayProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMusicDisplayProperties_Interface, WinRt.Windows.Media.IMusicDisplayProperties2, WinRt.Windows.Media.IID_IMusicDisplayProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMusicDisplayProperties.all);
      Hr := m_Interface.put_TrackNumber (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Genres
   (
      this : in out MusicDisplayProperties
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMusicDisplayProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMusicDisplayProperties_Interface, WinRt.Windows.Media.IMusicDisplayProperties2, WinRt.Windows.Media.IID_IMusicDisplayProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMusicDisplayProperties.all);
      Hr := m_Interface.get_Genres (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AlbumTrackCount
   (
      this : in out MusicDisplayProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMusicDisplayProperties3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMusicDisplayProperties_Interface, WinRt.Windows.Media.IMusicDisplayProperties3, WinRt.Windows.Media.IID_IMusicDisplayProperties3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMusicDisplayProperties.all);
      Hr := m_Interface.get_AlbumTrackCount (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AlbumTrackCount
   (
      this : in out MusicDisplayProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMusicDisplayProperties3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IMusicDisplayProperties_Interface, WinRt.Windows.Media.IMusicDisplayProperties3, WinRt.Windows.Media.IID_IMusicDisplayProperties3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMusicDisplayProperties.all);
      Hr := m_Interface.put_AlbumTrackCount (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaybackPositionChangeRequestedEventArgs

   procedure Initialize (this : in out PlaybackPositionChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaybackPositionChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaybackPositionChangeRequestedEventArgs, IPlaybackPositionChangeRequestedEventArgs_Ptr);
   begin
      if this.m_IPlaybackPositionChangeRequestedEventArgs /= null then
         if this.m_IPlaybackPositionChangeRequestedEventArgs.all /= null then
            RefCount := this.m_IPlaybackPositionChangeRequestedEventArgs.all.Release;
            Free (this.m_IPlaybackPositionChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaybackPositionChangeRequestedEventArgs

   function get_RequestedPlaybackPosition
   (
      this : in out PlaybackPositionChangeRequestedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPlaybackPositionChangeRequestedEventArgs.all.get_RequestedPlaybackPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaybackRateChangeRequestedEventArgs

   procedure Initialize (this : in out PlaybackRateChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaybackRateChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaybackRateChangeRequestedEventArgs, IPlaybackRateChangeRequestedEventArgs_Ptr);
   begin
      if this.m_IPlaybackRateChangeRequestedEventArgs /= null then
         if this.m_IPlaybackRateChangeRequestedEventArgs.all /= null then
            RefCount := this.m_IPlaybackRateChangeRequestedEventArgs.all.Release;
            Free (this.m_IPlaybackRateChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaybackRateChangeRequestedEventArgs

   function get_RequestedPlaybackRate
   (
      this : in out PlaybackRateChangeRequestedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaybackRateChangeRequestedEventArgs.all.get_RequestedPlaybackRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ShuffleEnabledChangeRequestedEventArgs

   procedure Initialize (this : in out ShuffleEnabledChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ShuffleEnabledChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShuffleEnabledChangeRequestedEventArgs, IShuffleEnabledChangeRequestedEventArgs_Ptr);
   begin
      if this.m_IShuffleEnabledChangeRequestedEventArgs /= null then
         if this.m_IShuffleEnabledChangeRequestedEventArgs.all /= null then
            RefCount := this.m_IShuffleEnabledChangeRequestedEventArgs.all.Release;
            Free (this.m_IShuffleEnabledChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ShuffleEnabledChangeRequestedEventArgs

   function get_RequestedShuffleEnabled
   (
      this : in out ShuffleEnabledChangeRequestedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IShuffleEnabledChangeRequestedEventArgs.all.get_RequestedShuffleEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemMediaTransportControls

   procedure Initialize (this : in out SystemMediaTransportControls) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemMediaTransportControls) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemMediaTransportControls, ISystemMediaTransportControls_Ptr);
   begin
      if this.m_ISystemMediaTransportControls /= null then
         if this.m_ISystemMediaTransportControls.all /= null then
            RefCount := this.m_ISystemMediaTransportControls.all.Release;
            Free (this.m_ISystemMediaTransportControls);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SystemMediaTransportControls

   function GetForCurrentView
   return WinRt.Windows.Media.SystemMediaTransportControls is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SystemMediaTransportControls");
      m_Factory        : access WinRt.Windows.Media.ISystemMediaTransportControlsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.ISystemMediaTransportControls;
   begin
      return RetVal : WinRt.Windows.Media.SystemMediaTransportControls do
         Hr := RoGetActivationFactory (m_hString, IID_ISystemMediaTransportControlsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISystemMediaTransportControls := new Windows.Media.ISystemMediaTransportControls;
            Retval.m_ISystemMediaTransportControls.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemMediaTransportControls

   function get_PlaybackStatus
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Windows.Media.MediaPlaybackStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaPlaybackStatus;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_PlaybackStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PlaybackStatus
   (
      this : in out SystemMediaTransportControls;
      value : Windows.Media.MediaPlaybackStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_PlaybackStatus (value);
   end;

   function get_DisplayUpdater
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Windows.Media.SystemMediaTransportControlsDisplayUpdater'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.ISystemMediaTransportControlsDisplayUpdater;
   begin
      return RetVal : WinRt.Windows.Media.SystemMediaTransportControlsDisplayUpdater do
         Hr := this.m_ISystemMediaTransportControls.all.get_DisplayUpdater (m_ComRetVal'Access);
         Retval.m_ISystemMediaTransportControlsDisplayUpdater := new Windows.Media.ISystemMediaTransportControlsDisplayUpdater;
         Retval.m_ISystemMediaTransportControlsDisplayUpdater.all := m_ComRetVal;
      end return;
   end;

   function get_SoundLevel
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Windows.Media.SoundLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SoundLevel;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_SoundLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsEnabled (value);
   end;

   function get_IsPlayEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsPlayEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPlayEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsPlayEnabled (value);
   end;

   function get_IsStopEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsStopEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsStopEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsStopEnabled (value);
   end;

   function get_IsPauseEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsPauseEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPauseEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsPauseEnabled (value);
   end;

   function get_IsRecordEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsRecordEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsRecordEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsRecordEnabled (value);
   end;

   function get_IsFastForwardEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsFastForwardEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsFastForwardEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsFastForwardEnabled (value);
   end;

   function get_IsRewindEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsRewindEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsRewindEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsRewindEnabled (value);
   end;

   function get_IsPreviousEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsPreviousEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPreviousEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsPreviousEnabled (value);
   end;

   function get_IsNextEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsNextEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsNextEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsNextEnabled (value);
   end;

   function get_IsChannelUpEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsChannelUpEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsChannelUpEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsChannelUpEnabled (value);
   end;

   function get_IsChannelDownEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.get_IsChannelDownEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsChannelDownEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.put_IsChannelDownEnabled (value);
   end;

   function add_ButtonPressed
   (
      this : in out SystemMediaTransportControls;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.add_ButtonPressed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ButtonPressed
   (
      this : in out SystemMediaTransportControls;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.remove_ButtonPressed (token);
   end;

   function add_PropertyChanged
   (
      this : in out SystemMediaTransportControls;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.add_PropertyChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PropertyChanged
   (
      this : in out SystemMediaTransportControls;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControls.all.remove_PropertyChanged (token);
   end;

   function get_AutoRepeatMode
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Windows.Media.MediaPlaybackAutoRepeatMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaPlaybackAutoRepeatMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.get_AutoRepeatMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutoRepeatMode
   (
      this : in out SystemMediaTransportControls;
      value : Windows.Media.MediaPlaybackAutoRepeatMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.put_AutoRepeatMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ShuffleEnabled
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.get_ShuffleEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ShuffleEnabled
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.put_ShuffleEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PlaybackRate
   (
      this : in out SystemMediaTransportControls
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.get_PlaybackRate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PlaybackRate
   (
      this : in out SystemMediaTransportControls;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.put_PlaybackRate (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure UpdateTimelineProperties
   (
      this : in out SystemMediaTransportControls;
      timelineProperties : Windows.Media.SystemMediaTransportControlsTimelineProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.UpdateTimelineProperties (timelineProperties.m_ISystemMediaTransportControlsTimelineProperties.all);
      m_RefCount := m_Interface.Release;
   end;

   function add_PlaybackPositionChangeRequested
   (
      this : in out SystemMediaTransportControls;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.add_PlaybackPositionChangeRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PlaybackPositionChangeRequested
   (
      this : in out SystemMediaTransportControls;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.remove_PlaybackPositionChangeRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_PlaybackRateChangeRequested
   (
      this : in out SystemMediaTransportControls;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.add_PlaybackRateChangeRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PlaybackRateChangeRequested
   (
      this : in out SystemMediaTransportControls;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.remove_PlaybackRateChangeRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_ShuffleEnabledChangeRequested
   (
      this : in out SystemMediaTransportControls;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.add_ShuffleEnabledChangeRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ShuffleEnabledChangeRequested
   (
      this : in out SystemMediaTransportControls;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.remove_ShuffleEnabledChangeRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_AutoRepeatModeChangeRequested
   (
      this : in out SystemMediaTransportControls;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.add_AutoRepeatModeChangeRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AutoRepeatModeChangeRequested
   (
      this : in out SystemMediaTransportControls;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.ISystemMediaTransportControls2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.ISystemMediaTransportControls_Interface, WinRt.Windows.Media.ISystemMediaTransportControls2, WinRt.Windows.Media.IID_ISystemMediaTransportControls2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISystemMediaTransportControls.all);
      Hr := m_Interface.remove_AutoRepeatModeChangeRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemMediaTransportControlsButtonPressedEventArgs

   procedure Initialize (this : in out SystemMediaTransportControlsButtonPressedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemMediaTransportControlsButtonPressedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemMediaTransportControlsButtonPressedEventArgs, ISystemMediaTransportControlsButtonPressedEventArgs_Ptr);
   begin
      if this.m_ISystemMediaTransportControlsButtonPressedEventArgs /= null then
         if this.m_ISystemMediaTransportControlsButtonPressedEventArgs.all /= null then
            RefCount := this.m_ISystemMediaTransportControlsButtonPressedEventArgs.all.Release;
            Free (this.m_ISystemMediaTransportControlsButtonPressedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemMediaTransportControlsButtonPressedEventArgs

   function get_Button
   (
      this : in out SystemMediaTransportControlsButtonPressedEventArgs
   )
   return WinRt.Windows.Media.SystemMediaTransportControlsButton is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SystemMediaTransportControlsButton;
   begin
      Hr := this.m_ISystemMediaTransportControlsButtonPressedEventArgs.all.get_Button (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemMediaTransportControlsDisplayUpdater

   procedure Initialize (this : in out SystemMediaTransportControlsDisplayUpdater) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemMediaTransportControlsDisplayUpdater) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemMediaTransportControlsDisplayUpdater, ISystemMediaTransportControlsDisplayUpdater_Ptr);
   begin
      if this.m_ISystemMediaTransportControlsDisplayUpdater /= null then
         if this.m_ISystemMediaTransportControlsDisplayUpdater.all /= null then
            RefCount := this.m_ISystemMediaTransportControlsDisplayUpdater.all.Release;
            Free (this.m_ISystemMediaTransportControlsDisplayUpdater);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemMediaTransportControlsDisplayUpdater

   function get_Type
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   )
   return WinRt.Windows.Media.MediaPlaybackType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaPlaybackType;
   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Type
   (
      this : in out SystemMediaTransportControlsDisplayUpdater;
      value : Windows.Media.MediaPlaybackType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.put_Type (value);
   end;

   function get_AppMediaId
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.get_AppMediaId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AppMediaId
   (
      this : in out SystemMediaTransportControlsDisplayUpdater;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.put_AppMediaId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Thumbnail
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
         Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
      end return;
   end;

   procedure put_Thumbnail
   (
      this : in out SystemMediaTransportControlsDisplayUpdater;
      value : Windows.Storage.Streams.RandomAccessStreamReference'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.put_Thumbnail (value.m_IRandomAccessStreamReference.all);
   end;

   function get_MusicProperties
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   )
   return WinRt.Windows.Media.MusicDisplayProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IMusicDisplayProperties;
   begin
      return RetVal : WinRt.Windows.Media.MusicDisplayProperties do
         Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.get_MusicProperties (m_ComRetVal'Access);
         Retval.m_IMusicDisplayProperties := new Windows.Media.IMusicDisplayProperties;
         Retval.m_IMusicDisplayProperties.all := m_ComRetVal;
      end return;
   end;

   function get_VideoProperties
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   )
   return WinRt.Windows.Media.VideoDisplayProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoDisplayProperties;
   begin
      return RetVal : WinRt.Windows.Media.VideoDisplayProperties do
         Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.get_VideoProperties (m_ComRetVal'Access);
         Retval.m_IVideoDisplayProperties := new Windows.Media.IVideoDisplayProperties;
         Retval.m_IVideoDisplayProperties.all := m_ComRetVal;
      end return;
   end;

   function get_ImageProperties
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   )
   return WinRt.Windows.Media.ImageDisplayProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IImageDisplayProperties;
   begin
      return RetVal : WinRt.Windows.Media.ImageDisplayProperties do
         Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.get_ImageProperties (m_ComRetVal'Access);
         Retval.m_IImageDisplayProperties := new Windows.Media.IImageDisplayProperties;
         Retval.m_IImageDisplayProperties.all := m_ComRetVal;
      end return;
   end;

   function CopyFromFileAsync
   (
      this : in out SystemMediaTransportControlsDisplayUpdater;
      type_x : Windows.Media.MediaPlaybackType;
      source : Windows.Storage.StorageFile'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.CopyFromFileAsync (type_x, source.m_IStorageFile.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure ClearAll
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.ClearAll;
   end;

   procedure Update
   (
      this : in out SystemMediaTransportControlsDisplayUpdater
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsDisplayUpdater.all.Update;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemMediaTransportControlsPropertyChangedEventArgs

   procedure Initialize (this : in out SystemMediaTransportControlsPropertyChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemMediaTransportControlsPropertyChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemMediaTransportControlsPropertyChangedEventArgs, ISystemMediaTransportControlsPropertyChangedEventArgs_Ptr);
   begin
      if this.m_ISystemMediaTransportControlsPropertyChangedEventArgs /= null then
         if this.m_ISystemMediaTransportControlsPropertyChangedEventArgs.all /= null then
            RefCount := this.m_ISystemMediaTransportControlsPropertyChangedEventArgs.all.Release;
            Free (this.m_ISystemMediaTransportControlsPropertyChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemMediaTransportControlsPropertyChangedEventArgs

   function get_Property
   (
      this : in out SystemMediaTransportControlsPropertyChangedEventArgs
   )
   return WinRt.Windows.Media.SystemMediaTransportControlsProperty is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SystemMediaTransportControlsProperty;
   begin
      Hr := this.m_ISystemMediaTransportControlsPropertyChangedEventArgs.all.get_Property (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemMediaTransportControlsTimelineProperties

   procedure Initialize (this : in out SystemMediaTransportControlsTimelineProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemMediaTransportControlsTimelineProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemMediaTransportControlsTimelineProperties, ISystemMediaTransportControlsTimelineProperties_Ptr);
   begin
      if this.m_ISystemMediaTransportControlsTimelineProperties /= null then
         if this.m_ISystemMediaTransportControlsTimelineProperties.all /= null then
            RefCount := this.m_ISystemMediaTransportControlsTimelineProperties.all.Release;
            Free (this.m_ISystemMediaTransportControlsTimelineProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SystemMediaTransportControlsTimelineProperties

   function Constructor return SystemMediaTransportControlsTimelineProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SystemMediaTransportControlsTimelineProperties");
      m_ComRetVal  : aliased Windows.Media.ISystemMediaTransportControlsTimelineProperties;
   begin
      return RetVal : SystemMediaTransportControlsTimelineProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISystemMediaTransportControlsTimelineProperties := new Windows.Media.ISystemMediaTransportControlsTimelineProperties;
            Retval.m_ISystemMediaTransportControlsTimelineProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemMediaTransportControlsTimelineProperties

   function get_StartTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.put_StartTime (value);
   end;

   function get_EndTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.get_EndTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EndTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.put_EndTime (value);
   end;

   function get_MinSeekTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.get_MinSeekTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinSeekTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.put_MinSeekTime (value);
   end;

   function get_MaxSeekTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.get_MaxSeekTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxSeekTime
   (
      this : in out SystemMediaTransportControlsTimelineProperties;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.put_MaxSeekTime (value);
   end;

   function get_Position
   (
      this : in out SystemMediaTransportControlsTimelineProperties
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out SystemMediaTransportControlsTimelineProperties;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISystemMediaTransportControlsTimelineProperties.all.put_Position (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoDisplayProperties

   procedure Initialize (this : in out VideoDisplayProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoDisplayProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoDisplayProperties, IVideoDisplayProperties_Ptr);
   begin
      if this.m_IVideoDisplayProperties /= null then
         if this.m_IVideoDisplayProperties.all /= null then
            RefCount := this.m_IVideoDisplayProperties.all.Release;
            Free (this.m_IVideoDisplayProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoDisplayProperties

   function get_Title
   (
      this : in out VideoDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoDisplayProperties.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out VideoDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVideoDisplayProperties.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subtitle
   (
      this : in out VideoDisplayProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVideoDisplayProperties.all.get_Subtitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subtitle
   (
      this : in out VideoDisplayProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IVideoDisplayProperties.all.put_Subtitle (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Genres
   (
      this : in out VideoDisplayProperties
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IVideoDisplayProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoDisplayProperties_Interface, WinRt.Windows.Media.IVideoDisplayProperties2, WinRt.Windows.Media.IID_IVideoDisplayProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoDisplayProperties.all);
      Hr := m_Interface.get_Genres (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body VideoEffects is

      function get_VideoStabilization
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.VideoEffects");
         m_Factory        : access WinRt.Windows.Media.IVideoEffectsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IVideoEffectsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoStabilization (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end VideoEffects;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoFrame

   procedure Initialize (this : in out VideoFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoFrame, IVideoFrame_Ptr);
   begin
      if this.m_IVideoFrame /= null then
         if this.m_IVideoFrame.all /= null then
            RefCount := this.m_IVideoFrame.all.Release;
            Free (this.m_IVideoFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VideoFrame

   function Constructor
   (
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32
   )
   return VideoFrame is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.VideoFrame");
      m_Factory    : access IVideoFrameFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : VideoFrame do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoFrameFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (format, width, height, m_ComRetVal'Access);
            Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
            Retval.m_IVideoFrame.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      format : Windows.Graphics.Imaging.BitmapPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32;
      alpha : Windows.Graphics.Imaging.BitmapAlphaMode
   )
   return VideoFrame is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.VideoFrame");
      m_Factory    : access IVideoFrameFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : VideoFrame do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoFrameFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithAlpha (format, width, height, alpha, m_ComRetVal'Access);
            Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
            Retval.m_IVideoFrame.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VideoFrame

   function CreateAsDirect3D11SurfaceBacked
   (
      format : Windows.Graphics.DirectX.DirectXPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32
   )
   return WinRt.Windows.Media.VideoFrame is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.VideoFrame");
      m_Factory        : access WinRt.Windows.Media.IVideoFrameStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoFrameStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsDirect3D11SurfaceBacked (format, width, height, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
            Retval.m_IVideoFrame.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAsDirect3D11SurfaceBacked
   (
      format : Windows.Graphics.DirectX.DirectXPixelFormat;
      width : WinRt.Int32;
      height : WinRt.Int32;
      device : Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
   )
   return WinRt.Windows.Media.VideoFrame is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.VideoFrame");
      m_Factory        : access WinRt.Windows.Media.IVideoFrameStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoFrameStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsDirect3D11SurfaceBacked (format, width, height, device, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
            Retval.m_IVideoFrame.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWithSoftwareBitmap
   (
      bitmap : Windows.Graphics.Imaging.SoftwareBitmap'Class
   )
   return WinRt.Windows.Media.VideoFrame is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.VideoFrame");
      m_Factory        : access WinRt.Windows.Media.IVideoFrameStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoFrameStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSoftwareBitmap (bitmap.m_ISoftwareBitmap.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
            Retval.m_IVideoFrame.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWithDirect3D11Surface
   (
      surface : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
   )
   return WinRt.Windows.Media.VideoFrame is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.VideoFrame");
      m_Factory        : access WinRt.Windows.Media.IVideoFrameStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoFrameStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithDirect3D11Surface (surface, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
            Retval.m_IVideoFrame.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoFrame

   function get_SoftwareBitmap
   (
      this : in out VideoFrame
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         Hr := this.m_IVideoFrame.all.get_SoftwareBitmap (m_ComRetVal'Access);
         Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
         Retval.m_ISoftwareBitmap.all := m_ComRetVal;
      end return;
   end;

   procedure CopyToAsync
   (
      this : in out VideoFrame;
      frame : Windows.Media.VideoFrame'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IVideoFrame.all.CopyToAsync (frame.m_IVideoFrame.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Direct3DSurface
   (
      this : in out VideoFrame
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
   begin
      Hr := this.m_IVideoFrame.all.get_Direct3DSurface (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out VideoFrame
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsReadOnly
   (
      this : in out VideoFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.get_IsReadOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RelativeTime
   (
      this : in out VideoFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.put_RelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RelativeTime
   (
      this : in out VideoFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.get_RelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_SystemRelativeTime
   (
      this : in out VideoFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.put_SystemRelativeTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SystemRelativeTime
   (
      this : in out VideoFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.get_SystemRelativeTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Duration
   (
      this : in out VideoFrame;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.put_Duration (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Duration
   (
      this : in out VideoFrame
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.get_Duration (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsDiscontinuous
   (
      this : in out VideoFrame;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.put_IsDiscontinuous (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDiscontinuous
   (
      this : in out VideoFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.get_IsDiscontinuous (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ExtendedProperties
   (
      this : in out VideoFrame
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IMediaFrame := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IMediaFrame, WinRt.Windows.Media.IID_IMediaFrame'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.get_ExtendedProperties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out VideoFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure CopyToAsync
   (
      this : in out VideoFrame;
      frame : Windows.Media.VideoFrame'Class;
      sourceBounds : GenericObject;
      destinationBounds : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.IVideoFrame2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.IVideoFrame_Interface, WinRt.Windows.Media.IVideoFrame2, WinRt.Windows.Media.IID_IVideoFrame2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoFrame.all);
      Hr := m_Interface.CopyToAsync (frame.m_IVideoFrame.all, sourceBounds, destinationBounds, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Media;
with WinRt.Windows.Media.Devices.Core;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Perception is

   package IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics);
   package AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics);

   package IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper);
   package AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper);

   package IAsyncOperation_PerceptionFrameSourcePropertyChangeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult);
   package AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_PerceptionColorFrameSource is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Perception.IPerceptionColorFrameSource);
   package AsyncOperationCompletedHandler_PerceptionColorFrameSource is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Perception.IPerceptionColorFrameSource);

   package IAsyncOperation_PerceptionFrameSourceAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus);
   package AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus);

   package IAsyncOperation_PerceptionDepthFrameSource is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSource);
   package AsyncOperationCompletedHandler_PerceptionDepthFrameSource is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSource);

   package IAsyncOperation_PerceptionInfraredFrameSource is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSource);
   package AsyncOperationCompletedHandler_PerceptionInfraredFrameSource is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSource);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownCameraIntrinsicsProperties is

      function get_FocalLength
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownCameraIntrinsicsProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownCameraIntrinsicsPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownCameraIntrinsicsPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FocalLength (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PrincipalPoint
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownCameraIntrinsicsProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownCameraIntrinsicsPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownCameraIntrinsicsPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PrincipalPoint (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RadialDistortion
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownCameraIntrinsicsProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownCameraIntrinsicsPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownCameraIntrinsicsPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RadialDistortion (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TangentialDistortion
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownCameraIntrinsicsProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownCameraIntrinsicsPropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownCameraIntrinsicsPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TangentialDistortion (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownCameraIntrinsicsProperties;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownPerceptionColorFrameSourceProperties is

      function get_Exposure
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionColorFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionColorFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionColorFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Exposure (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AutoExposureEnabled
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionColorFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionColorFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionColorFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AutoExposureEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ExposureCompensation
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionColorFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionColorFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionColorFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExposureCompensation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownPerceptionColorFrameSourceProperties;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownPerceptionDepthFrameSourceProperties is

      function get_MinDepth
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionDepthFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionDepthFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionDepthFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MinDepth (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MaxDepth
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionDepthFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionDepthFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionDepthFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaxDepth (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownPerceptionDepthFrameSourceProperties;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownPerceptionFrameSourceProperties is

      function get_Id
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Id (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PhysicalDeviceIds
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PhysicalDeviceIds (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FrameKind
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FrameKind (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DeviceModelVersion
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DeviceModelVersion (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_EnclosureLocation
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EnclosureLocation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DeviceId
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionFrameSourcePropertiesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionFrameSourcePropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DeviceId (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownPerceptionFrameSourceProperties;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownPerceptionInfraredFrameSourceProperties is

      function get_Exposure_KnownPerceptionInfraredFrameSourceProperties
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionInfraredFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionInfraredFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionInfraredFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Exposure (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AutoExposureEnabled_KnownPerceptionInfraredFrameSourceProperties
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionInfraredFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionInfraredFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionInfraredFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AutoExposureEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ExposureCompensation_KnownPerceptionInfraredFrameSourceProperties
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionInfraredFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionInfraredFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionInfraredFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ExposureCompensation (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ActiveIlluminationEnabled
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionInfraredFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionInfraredFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionInfraredFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ActiveIlluminationEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AmbientSubtractionEnabled
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionInfraredFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionInfraredFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionInfraredFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AmbientSubtractionEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_StructureLightPatternEnabled
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionInfraredFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionInfraredFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionInfraredFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StructureLightPatternEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_InterleavedIlluminationEnabled
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionInfraredFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionInfraredFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionInfraredFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InterleavedIlluminationEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownPerceptionInfraredFrameSourceProperties;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownPerceptionVideoFrameSourceProperties is

      function get_VideoProfile
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VideoProfile (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SupportedVideoProfiles
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SupportedVideoProfiles (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AvailableVideoProfiles
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AvailableVideoProfiles (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IsMirrored
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsMirrored (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CameraIntrinsics
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoFrameSourceProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoFrameSourcePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoFrameSourcePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CameraIntrinsics (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownPerceptionVideoFrameSourceProperties;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownPerceptionVideoProfileProperties is

      function get_BitmapPixelFormat
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoProfileProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoProfilePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoProfilePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BitmapPixelFormat (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BitmapAlphaMode
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoProfileProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoProfilePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoProfilePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BitmapAlphaMode (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Width
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoProfileProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoProfilePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoProfilePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Width (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Height
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoProfileProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoProfilePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoProfilePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Height (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FrameDuration
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.KnownPerceptionVideoProfileProperties");
         m_Factory        : access WinRt.Windows.Devices.Perception.IKnownPerceptionVideoProfilePropertiesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownPerceptionVideoProfilePropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FrameDuration (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end KnownPerceptionVideoProfileProperties;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionColorFrame

   procedure Initialize (this : in out PerceptionColorFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionColorFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionColorFrame, IPerceptionColorFrame_Ptr);
   begin
      if this.m_IPerceptionColorFrame /= null then
         if this.m_IPerceptionColorFrame.all /= null then
            RefCount := this.m_IPerceptionColorFrame.all.Release;
            Free (this.m_IPerceptionColorFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionColorFrame

   function get_VideoFrame
   (
      this : in out PerceptionColorFrame
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IPerceptionColorFrame.all.get_VideoFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionColorFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionColorFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionColorFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionColorFrameArrivedEventArgs

   procedure Initialize (this : in out PerceptionColorFrameArrivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionColorFrameArrivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionColorFrameArrivedEventArgs, IPerceptionColorFrameArrivedEventArgs_Ptr);
   begin
      if this.m_IPerceptionColorFrameArrivedEventArgs /= null then
         if this.m_IPerceptionColorFrameArrivedEventArgs.all /= null then
            RefCount := this.m_IPerceptionColorFrameArrivedEventArgs.all.Release;
            Free (this.m_IPerceptionColorFrameArrivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionColorFrameArrivedEventArgs

   function get_RelativeTime
   (
      this : in out PerceptionColorFrameArrivedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPerceptionColorFrameArrivedEventArgs.all.get_RelativeTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryOpenFrame
   (
      this : in out PerceptionColorFrameArrivedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionColorFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionColorFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrame do
         Hr := this.m_IPerceptionColorFrameArrivedEventArgs.all.TryOpenFrame (m_ComRetVal'Access);
         Retval.m_IPerceptionColorFrame := new Windows.Devices.Perception.IPerceptionColorFrame;
         Retval.m_IPerceptionColorFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionColorFrameReader

   procedure Initialize (this : in out PerceptionColorFrameReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionColorFrameReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionColorFrameReader, IPerceptionColorFrameReader_Ptr);
   begin
      if this.m_IPerceptionColorFrameReader /= null then
         if this.m_IPerceptionColorFrameReader.all /= null then
            RefCount := this.m_IPerceptionColorFrameReader.all.Release;
            Free (this.m_IPerceptionColorFrameReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionColorFrameReader

   function add_FrameArrived
   (
      this : in out PerceptionColorFrameReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameReader.all.add_FrameArrived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameArrived
   (
      this : in out PerceptionColorFrameReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameReader.all.remove_FrameArrived (token);
   end;

   function get_Source
   (
      this : in out PerceptionColorFrameReader
   )
   return WinRt.Windows.Devices.Perception.PerceptionColorFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionColorFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrameSource do
         Hr := this.m_IPerceptionColorFrameReader.all.get_Source (m_ComRetVal'Access);
         Retval.m_IPerceptionColorFrameSource := new Windows.Devices.Perception.IPerceptionColorFrameSource;
         Retval.m_IPerceptionColorFrameSource.all := m_ComRetVal;
      end return;
   end;

   function get_IsPaused
   (
      this : in out PerceptionColorFrameReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionColorFrameReader.all.get_IsPaused (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPaused
   (
      this : in out PerceptionColorFrameReader;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameReader.all.put_IsPaused (value);
   end;

   function TryReadLatestFrame
   (
      this : in out PerceptionColorFrameReader
   )
   return WinRt.Windows.Devices.Perception.PerceptionColorFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionColorFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrame do
         Hr := this.m_IPerceptionColorFrameReader.all.TryReadLatestFrame (m_ComRetVal'Access);
         Retval.m_IPerceptionColorFrame := new Windows.Devices.Perception.IPerceptionColorFrame;
         Retval.m_IPerceptionColorFrame.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionColorFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionColorFrameReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionColorFrameReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionColorFrameSource

   procedure Initialize (this : in out PerceptionColorFrameSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionColorFrameSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionColorFrameSource, IPerceptionColorFrameSource_Ptr);
   begin
      if this.m_IPerceptionColorFrameSource /= null then
         if this.m_IPerceptionColorFrameSource.all /= null then
            RefCount := this.m_IPerceptionColorFrameSource.all.Release;
            Free (this.m_IPerceptionColorFrameSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PerceptionColorFrameSource

   function CreateWatcher
   return WinRt.Windows.Devices.Perception.PerceptionColorFrameSourceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionColorFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionColorFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionColorFrameSourceWatcher;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrameSourceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionColorFrameSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPerceptionColorFrameSourceWatcher := new Windows.Devices.Perception.IPerceptionColorFrameSourceWatcher;
            Retval.m_IPerceptionColorFrameSourceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindAllAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionColorFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionColorFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (864312159, 54686, 21105, (187, 104, 247, 78, 157, 106, 83, 141 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (171354031, 55966, 21823, (141, 197, 232, 157, 112, 91, 180, 11 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPerceptionColorFrameSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function FromIdAsync
   (
      id : WinRt.WString
   )
   return WinRt.Windows.Devices.Perception.PerceptionColorFrameSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionColorFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionColorFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionColorFrameSource.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionColorFrameSource.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionColorFrameSource;
      m_IID            : aliased WinRt.IID := (2521300680, 11350, 21320, (134, 200, 169, 195, 169, 127, 185, 68 )); -- Windows.Devices.Perception.PerceptionColorFrameSource;
      m_HandlerIID     : aliased WinRt.IID := (995536066, 57973, 21755, (190, 8, 159, 220, 143, 26, 30, 16 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionColorFrameSource.Kind := new AsyncOperationCompletedHandler_PerceptionColorFrameSource.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionColorFrameSource.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionColorFrameSource.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionColorFrameSource.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionColorFrameSource.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrameSource do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionColorFrameSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_id, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPerceptionColorFrameSource := new Windows.Devices.Perception.IPerceptionColorFrameSource;
                     Retval.m_IPerceptionColorFrameSource.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function RequestAccessAsync
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionColorFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionColorFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus;
      m_IID            : aliased WinRt.IID := (741286568, 62339, 22530, (186, 44, 12, 187, 205, 152, 156, 154 )); -- Windows.Devices.Perception.PerceptionFrameSourceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1651789476, 13383, 22306, (171, 94, 2, 86, 123, 79, 206, 235 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind := new AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPerceptionColorFrameSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionColorFrameSource

   function add_AvailableChanged
   (
      this : in out PerceptionColorFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.add_AvailableChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AvailableChanged
   (
      this : in out PerceptionColorFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.remove_AvailableChanged (token);
   end;

   function add_ActiveChanged
   (
      this : in out PerceptionColorFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.add_ActiveChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ActiveChanged
   (
      this : in out PerceptionColorFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.remove_ActiveChanged (token);
   end;

   function add_PropertiesChanged
   (
      this : in out PerceptionColorFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.add_PropertiesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PropertiesChanged
   (
      this : in out PerceptionColorFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.remove_PropertiesChanged (token);
   end;

   function add_VideoProfileChanged
   (
      this : in out PerceptionColorFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.add_VideoProfileChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoProfileChanged
   (
      this : in out PerceptionColorFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.remove_VideoProfileChanged (token);
   end;

   function add_CameraIntrinsicsChanged
   (
      this : in out PerceptionColorFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.add_CameraIntrinsicsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CameraIntrinsicsChanged
   (
      this : in out PerceptionColorFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.remove_CameraIntrinsicsChanged (token);
   end;

   function get_Id
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceKind
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_DeviceKind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Available
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_Available (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Active
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_Active (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsControlled
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_IsControlled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out PerceptionColorFrameSource
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedVideoProfiles
   (
      this : in out PerceptionColorFrameSource
   )
   return IVectorView_IPerceptionVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPerceptionVideoProfile.Kind;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_SupportedVideoProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPerceptionVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AvailableVideoProfiles
   (
      this : in out PerceptionColorFrameSource
   )
   return IVectorView_IPerceptionVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPerceptionVideoProfile.Kind;
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.get_AvailableVideoProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPerceptionVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_VideoProfile
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionVideoProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionVideoProfile;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionVideoProfile do
         Hr := this.m_IPerceptionColorFrameSource.all.get_VideoProfile (m_ComRetVal'Access);
         Retval.m_IPerceptionVideoProfile := new Windows.Devices.Perception.IPerceptionVideoProfile;
         Retval.m_IPerceptionVideoProfile.all := m_ComRetVal;
      end return;
   end;

   function get_CameraIntrinsics
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.Windows.Media.Devices.Core.CameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.ICameraIntrinsics;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.CameraIntrinsics do
         Hr := this.m_IPerceptionColorFrameSource.all.get_CameraIntrinsics (m_ComRetVal'Access);
         Retval.m_ICameraIntrinsics := new Windows.Media.Devices.Core.ICameraIntrinsics;
         Retval.m_ICameraIntrinsics.all := m_ComRetVal;
      end return;
   end;

   function AcquireControlSession
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionControlSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionControlSession;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionControlSession do
         Hr := this.m_IPerceptionColorFrameSource.all.AcquireControlSession (m_ComRetVal'Access);
         Retval.m_IPerceptionControlSession := new Windows.Devices.Perception.IPerceptionControlSession;
         Retval.m_IPerceptionControlSession.all := m_ComRetVal;
      end return;
   end;

   function CanControlIndependentlyFrom
   (
      this : in out PerceptionColorFrameSource;
      targetId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.CanControlIndependentlyFrom (HStr_targetId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function IsCorrelatedWith
   (
      this : in out PerceptionColorFrameSource;
      targetId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.IsCorrelatedWith (HStr_targetId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function TryGetTransformTo
   (
      this : in out PerceptionColorFrameSource;
      targetId : WinRt.WString;
      result : Windows.Foundation.Numerics.Matrix4x4_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionColorFrameSource.all.TryGetTransformTo (HStr_targetId, result, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function TryGetDepthCorrelatedCameraIntrinsicsAsync
   (
      this : in out PerceptionColorFrameSource;
      correlatedDepthFrameSource : Windows.Devices.Perception.PerceptionDepthFrameSource'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics;
      m_IID            : aliased WinRt.IID := (1881870153, 42818, 23610, (171, 214, 119, 249, 153, 155, 138, 9 )); -- Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics;
      m_HandlerIID     : aliased WinRt.IID := (4086718506, 15757, 24533, (153, 227, 29, 54, 48, 190, 89, 56 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind := new AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics do
         Hr := this.m_IPerceptionColorFrameSource.all.TryGetDepthCorrelatedCameraIntrinsicsAsync (correlatedDepthFrameSource.m_IPerceptionDepthFrameSource.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionDepthCorrelatedCameraIntrinsics := new Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics;
                  Retval.m_IPerceptionDepthCorrelatedCameraIntrinsics.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetDepthCorrelatedCoordinateMapperAsync
   (
      this : in out PerceptionColorFrameSource;
      targetSourceId : WinRt.WString;
      correlatedDepthFrameSource : Windows.Devices.Perception.PerceptionDepthFrameSource'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_targetSourceId : WinRt.HString := To_HString (targetSourceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper;
      m_IID            : aliased WinRt.IID := (4031487385, 49365, 23368, (154, 229, 152, 2, 9, 60, 180, 94 )); -- Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper;
      m_HandlerIID     : aliased WinRt.IID := (1222569376, 26701, 20966, (176, 124, 210, 52, 209, 0, 107, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind := new AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper do
         Hr := this.m_IPerceptionColorFrameSource.all.TryGetDepthCorrelatedCoordinateMapperAsync (HStr_targetSourceId, correlatedDepthFrameSource.m_IPerceptionDepthFrameSource.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionDepthCorrelatedCoordinateMapper := new Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper;
                  Retval.m_IPerceptionDepthCorrelatedCoordinateMapper.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_targetSourceId);
      end return;
   end;

   function TrySetVideoProfileAsync
   (
      this : in out PerceptionColorFrameSource;
      controlSession : Windows.Devices.Perception.PerceptionControlSession'Class;
      profile : Windows.Devices.Perception.PerceptionVideoProfile'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
      m_IID            : aliased WinRt.IID := (1249626985, 11017, 21969, (175, 104, 181, 170, 92, 44, 100, 113 )); -- Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (973474204, 56230, 22693, (132, 100, 226, 50, 104, 150, 132, 26 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind := new AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult do
         Hr := this.m_IPerceptionColorFrameSource.all.TrySetVideoProfileAsync (controlSession.m_IPerceptionControlSession.all, profile.m_IPerceptionVideoProfile.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult := new Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function OpenReader
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionColorFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionColorFrameReader;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrameReader do
         Hr := this.m_IPerceptionColorFrameSource.all.OpenReader (m_ComRetVal'Access);
         Retval.m_IPerceptionColorFrameReader := new Windows.Devices.Perception.IPerceptionColorFrameReader;
         Retval.m_IPerceptionColorFrameReader.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceId
   (
      this : in out PerceptionColorFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Perception.IPerceptionColorFrameSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionColorFrameSource_Interface, WinRt.Windows.Devices.Perception.IPerceptionColorFrameSource2, WinRt.Windows.Devices.Perception.IID_IPerceptionColorFrameSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionColorFrameSource.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionColorFrameSourceAddedEventArgs

   procedure Initialize (this : in out PerceptionColorFrameSourceAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionColorFrameSourceAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionColorFrameSourceAddedEventArgs, IPerceptionColorFrameSourceAddedEventArgs_Ptr);
   begin
      if this.m_IPerceptionColorFrameSourceAddedEventArgs /= null then
         if this.m_IPerceptionColorFrameSourceAddedEventArgs.all /= null then
            RefCount := this.m_IPerceptionColorFrameSourceAddedEventArgs.all.Release;
            Free (this.m_IPerceptionColorFrameSourceAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionColorFrameSourceAddedEventArgs

   function get_FrameSource
   (
      this : in out PerceptionColorFrameSourceAddedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionColorFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionColorFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrameSource do
         Hr := this.m_IPerceptionColorFrameSourceAddedEventArgs.all.get_FrameSource (m_ComRetVal'Access);
         Retval.m_IPerceptionColorFrameSource := new Windows.Devices.Perception.IPerceptionColorFrameSource;
         Retval.m_IPerceptionColorFrameSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionColorFrameSourceRemovedEventArgs

   procedure Initialize (this : in out PerceptionColorFrameSourceRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionColorFrameSourceRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionColorFrameSourceRemovedEventArgs, IPerceptionColorFrameSourceRemovedEventArgs_Ptr);
   begin
      if this.m_IPerceptionColorFrameSourceRemovedEventArgs /= null then
         if this.m_IPerceptionColorFrameSourceRemovedEventArgs.all /= null then
            RefCount := this.m_IPerceptionColorFrameSourceRemovedEventArgs.all.Release;
            Free (this.m_IPerceptionColorFrameSourceRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionColorFrameSourceRemovedEventArgs

   function get_FrameSource
   (
      this : in out PerceptionColorFrameSourceRemovedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionColorFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionColorFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionColorFrameSource do
         Hr := this.m_IPerceptionColorFrameSourceRemovedEventArgs.all.get_FrameSource (m_ComRetVal'Access);
         Retval.m_IPerceptionColorFrameSource := new Windows.Devices.Perception.IPerceptionColorFrameSource;
         Retval.m_IPerceptionColorFrameSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionColorFrameSourceWatcher

   procedure Initialize (this : in out PerceptionColorFrameSourceWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionColorFrameSourceWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionColorFrameSourceWatcher, IPerceptionColorFrameSourceWatcher_Ptr);
   begin
      if this.m_IPerceptionColorFrameSourceWatcher /= null then
         if this.m_IPerceptionColorFrameSourceWatcher.all /= null then
            RefCount := this.m_IPerceptionColorFrameSourceWatcher.all.Release;
            Free (this.m_IPerceptionColorFrameSourceWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionColorFrameSourceWatcher

   function add_SourceAdded
   (
      this : in out PerceptionColorFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.add_SourceAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceAdded
   (
      this : in out PerceptionColorFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.remove_SourceAdded (token);
   end;

   function add_SourceRemoved
   (
      this : in out PerceptionColorFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.add_SourceRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceRemoved
   (
      this : in out PerceptionColorFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.remove_SourceRemoved (token);
   end;

   function add_Stopped
   (
      this : in out PerceptionColorFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out PerceptionColorFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.remove_Stopped (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out PerceptionColorFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out PerceptionColorFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.remove_EnumerationCompleted (token);
   end;

   function get_Status
   (
      this : in out PerceptionColorFrameSourceWatcher
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceWatcherStatus;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out PerceptionColorFrameSourceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out PerceptionColorFrameSourceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionColorFrameSourceWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionControlSession

   procedure Initialize (this : in out PerceptionControlSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionControlSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionControlSession, IPerceptionControlSession_Ptr);
   begin
      if this.m_IPerceptionControlSession /= null then
         if this.m_IPerceptionControlSession.all /= null then
            RefCount := this.m_IPerceptionControlSession.all.Release;
            Free (this.m_IPerceptionControlSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionControlSession

   function add_ControlLost
   (
      this : in out PerceptionControlSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionControlSession.all.add_ControlLost (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ControlLost
   (
      this : in out PerceptionControlSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionControlSession.all.remove_ControlLost (token);
   end;

   function TrySetPropertyAsync
   (
      this : in out PerceptionControlSession;
      name : WinRt.WString;
      value : WinRt.IInspectable
   )
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
      m_IID            : aliased WinRt.IID := (1249626985, 11017, 21969, (175, 104, 181, 170, 92, 44, 100, 113 )); -- Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (973474204, 56230, 22693, (132, 100, 226, 50, 104, 150, 132, 26 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind := new AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult do
         Hr := this.m_IPerceptionControlSession.all.TrySetPropertyAsync (HStr_name, value, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult := new Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionControlSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionControlSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionControlSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthCorrelatedCameraIntrinsics

   procedure Initialize (this : in out PerceptionDepthCorrelatedCameraIntrinsics) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthCorrelatedCameraIntrinsics) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthCorrelatedCameraIntrinsics, IPerceptionDepthCorrelatedCameraIntrinsics_Ptr);
   begin
      if this.m_IPerceptionDepthCorrelatedCameraIntrinsics /= null then
         if this.m_IPerceptionDepthCorrelatedCameraIntrinsics.all /= null then
            RefCount := this.m_IPerceptionDepthCorrelatedCameraIntrinsics.all.Release;
            Free (this.m_IPerceptionDepthCorrelatedCameraIntrinsics);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthCorrelatedCameraIntrinsics

   function UnprojectPixelAtCorrelatedDepth
   (
      this : in out PerceptionDepthCorrelatedCameraIntrinsics;
      pixelCoordinate : Windows.Foundation.Point;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCameraIntrinsics.all.UnprojectPixelAtCorrelatedDepth (pixelCoordinate, depthFrame.m_IPerceptionDepthFrame.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure UnprojectPixelsAtCorrelatedDepth
   (
      this : in out PerceptionDepthCorrelatedCameraIntrinsics;
      sourceCoordinates : Windows.Foundation.Point_Array;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class;
      results : Windows.Foundation.Numerics.Vector3_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_sourceCoordinates is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Numerics.Vector3_Ptr);
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCameraIntrinsics.all.UnprojectPixelsAtCorrelatedDepth (WinRt.UInt32(sourceCoordinates'Length), Convert_sourceCoordinates (sourceCoordinates (sourceCoordinates'First)'Address), depthFrame.m_IPerceptionDepthFrame.all, WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
   end;

   procedure UnprojectRegionPixelsAtCorrelatedDepthAsync
   (
      this : in out PerceptionDepthCorrelatedCameraIntrinsics;
      region : Windows.Foundation.Rect;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class;
      results : Windows.Foundation.Numerics.Vector3_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Numerics.Vector3_Ptr);
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCameraIntrinsics.all.UnprojectRegionPixelsAtCorrelatedDepthAsync (region, depthFrame.m_IPerceptionDepthFrame.all, WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure UnprojectAllPixelsAtCorrelatedDepthAsync
   (
      this : in out PerceptionDepthCorrelatedCameraIntrinsics;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class;
      results : Windows.Foundation.Numerics.Vector3_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Numerics.Vector3_Ptr);
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCameraIntrinsics.all.UnprojectAllPixelsAtCorrelatedDepthAsync (depthFrame.m_IPerceptionDepthFrame.all, WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthCorrelatedCoordinateMapper

   procedure Initialize (this : in out PerceptionDepthCorrelatedCoordinateMapper) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthCorrelatedCoordinateMapper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthCorrelatedCoordinateMapper, IPerceptionDepthCorrelatedCoordinateMapper_Ptr);
   begin
      if this.m_IPerceptionDepthCorrelatedCoordinateMapper /= null then
         if this.m_IPerceptionDepthCorrelatedCoordinateMapper.all /= null then
            RefCount := this.m_IPerceptionDepthCorrelatedCoordinateMapper.all.Release;
            Free (this.m_IPerceptionDepthCorrelatedCoordinateMapper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthCorrelatedCoordinateMapper

   function MapPixelToTarget
   (
      this : in out PerceptionDepthCorrelatedCoordinateMapper;
      sourcePixelCoordinate : Windows.Foundation.Point;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCoordinateMapper.all.MapPixelToTarget (sourcePixelCoordinate, depthFrame.m_IPerceptionDepthFrame.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure MapPixelsToTarget
   (
      this : in out PerceptionDepthCorrelatedCoordinateMapper;
      sourceCoordinates : Windows.Foundation.Point_Array;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class;
      results : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_sourceCoordinates is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCoordinateMapper.all.MapPixelsToTarget (WinRt.UInt32(sourceCoordinates'Length), Convert_sourceCoordinates (sourceCoordinates (sourceCoordinates'First)'Address), depthFrame.m_IPerceptionDepthFrame.all, WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
   end;

   procedure MapRegionOfPixelsToTargetAsync
   (
      this : in out PerceptionDepthCorrelatedCoordinateMapper;
      region : Windows.Foundation.Rect;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class;
      targetCoordinates : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function Convert_targetCoordinates is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCoordinateMapper.all.MapRegionOfPixelsToTargetAsync (region, depthFrame.m_IPerceptionDepthFrame.all, WinRt.UInt32(targetCoordinates'Length), Convert_targetCoordinates (targetCoordinates (targetCoordinates'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure MapAllPixelsToTargetAsync
   (
      this : in out PerceptionDepthCorrelatedCoordinateMapper;
      depthFrame : Windows.Devices.Perception.PerceptionDepthFrame'Class;
      targetCoordinates : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function Convert_targetCoordinates is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_IPerceptionDepthCorrelatedCoordinateMapper.all.MapAllPixelsToTargetAsync (depthFrame.m_IPerceptionDepthFrame.all, WinRt.UInt32(targetCoordinates'Length), Convert_targetCoordinates (targetCoordinates (targetCoordinates'First)'Address), m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthFrame

   procedure Initialize (this : in out PerceptionDepthFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthFrame, IPerceptionDepthFrame_Ptr);
   begin
      if this.m_IPerceptionDepthFrame /= null then
         if this.m_IPerceptionDepthFrame.all /= null then
            RefCount := this.m_IPerceptionDepthFrame.all.Release;
            Free (this.m_IPerceptionDepthFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthFrame

   function get_VideoFrame
   (
      this : in out PerceptionDepthFrame
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IPerceptionDepthFrame.all.get_VideoFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionDepthFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionDepthFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionDepthFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthFrameArrivedEventArgs

   procedure Initialize (this : in out PerceptionDepthFrameArrivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthFrameArrivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthFrameArrivedEventArgs, IPerceptionDepthFrameArrivedEventArgs_Ptr);
   begin
      if this.m_IPerceptionDepthFrameArrivedEventArgs /= null then
         if this.m_IPerceptionDepthFrameArrivedEventArgs.all /= null then
            RefCount := this.m_IPerceptionDepthFrameArrivedEventArgs.all.Release;
            Free (this.m_IPerceptionDepthFrameArrivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthFrameArrivedEventArgs

   function get_RelativeTime
   (
      this : in out PerceptionDepthFrameArrivedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPerceptionDepthFrameArrivedEventArgs.all.get_RelativeTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryOpenFrame
   (
      this : in out PerceptionDepthFrameArrivedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionDepthFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrame do
         Hr := this.m_IPerceptionDepthFrameArrivedEventArgs.all.TryOpenFrame (m_ComRetVal'Access);
         Retval.m_IPerceptionDepthFrame := new Windows.Devices.Perception.IPerceptionDepthFrame;
         Retval.m_IPerceptionDepthFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthFrameReader

   procedure Initialize (this : in out PerceptionDepthFrameReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthFrameReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthFrameReader, IPerceptionDepthFrameReader_Ptr);
   begin
      if this.m_IPerceptionDepthFrameReader /= null then
         if this.m_IPerceptionDepthFrameReader.all /= null then
            RefCount := this.m_IPerceptionDepthFrameReader.all.Release;
            Free (this.m_IPerceptionDepthFrameReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthFrameReader

   function add_FrameArrived
   (
      this : in out PerceptionDepthFrameReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameReader.all.add_FrameArrived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameArrived
   (
      this : in out PerceptionDepthFrameReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameReader.all.remove_FrameArrived (token);
   end;

   function get_Source
   (
      this : in out PerceptionDepthFrameReader
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionDepthFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource do
         Hr := this.m_IPerceptionDepthFrameReader.all.get_Source (m_ComRetVal'Access);
         Retval.m_IPerceptionDepthFrameSource := new Windows.Devices.Perception.IPerceptionDepthFrameSource;
         Retval.m_IPerceptionDepthFrameSource.all := m_ComRetVal;
      end return;
   end;

   function get_IsPaused
   (
      this : in out PerceptionDepthFrameReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionDepthFrameReader.all.get_IsPaused (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPaused
   (
      this : in out PerceptionDepthFrameReader;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameReader.all.put_IsPaused (value);
   end;

   function TryReadLatestFrame
   (
      this : in out PerceptionDepthFrameReader
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionDepthFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrame do
         Hr := this.m_IPerceptionDepthFrameReader.all.TryReadLatestFrame (m_ComRetVal'Access);
         Retval.m_IPerceptionDepthFrame := new Windows.Devices.Perception.IPerceptionDepthFrame;
         Retval.m_IPerceptionDepthFrame.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionDepthFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionDepthFrameReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionDepthFrameReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthFrameSource

   procedure Initialize (this : in out PerceptionDepthFrameSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthFrameSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthFrameSource, IPerceptionDepthFrameSource_Ptr);
   begin
      if this.m_IPerceptionDepthFrameSource /= null then
         if this.m_IPerceptionDepthFrameSource.all /= null then
            RefCount := this.m_IPerceptionDepthFrameSource.all.Release;
            Free (this.m_IPerceptionDepthFrameSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PerceptionDepthFrameSource

   function CreateWatcher
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionDepthFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionDepthFrameSourceWatcher;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrameSourceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionDepthFrameSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPerceptionDepthFrameSourceWatcher := new Windows.Devices.Perception.IPerceptionDepthFrameSourceWatcher;
            Retval.m_IPerceptionDepthFrameSourceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindAllAsync_PerceptionDepthFrameSource
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionDepthFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3792327501, 54278, 22884, (132, 101, 230, 220, 117, 197, 130, 29 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3228459684, 38491, 23081, (151, 50, 138, 200, 102, 155, 88, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPerceptionDepthFrameSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function FromIdAsync_PerceptionDepthFrameSource
   (
      id : WinRt.WString
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionDepthFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionDepthFrameSource.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionDepthFrameSource.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSource;
      m_IID            : aliased WinRt.IID := (1132638264, 54449, 21515, (133, 154, 112, 22, 98, 107, 185, 157 )); -- Windows.Devices.Perception.PerceptionDepthFrameSource;
      m_HandlerIID     : aliased WinRt.IID := (3029121158, 13430, 22745, (183, 109, 253, 166, 179, 232, 31, 84 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionDepthFrameSource.Kind := new AsyncOperationCompletedHandler_PerceptionDepthFrameSource.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionDepthFrameSource.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionDepthFrameSource.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionDepthFrameSource.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionDepthFrameSource.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionDepthFrameSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_id, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPerceptionDepthFrameSource := new Windows.Devices.Perception.IPerceptionDepthFrameSource;
                     Retval.m_IPerceptionDepthFrameSource.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function RequestAccessAsync_PerceptionDepthFrameSource
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionDepthFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus;
      m_IID            : aliased WinRt.IID := (741286568, 62339, 22530, (186, 44, 12, 187, 205, 152, 156, 154 )); -- Windows.Devices.Perception.PerceptionFrameSourceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1651789476, 13383, 22306, (171, 94, 2, 86, 123, 79, 206, 235 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind := new AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPerceptionDepthFrameSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthFrameSource

   function add_AvailableChanged
   (
      this : in out PerceptionDepthFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.add_AvailableChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AvailableChanged
   (
      this : in out PerceptionDepthFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.remove_AvailableChanged (token);
   end;

   function add_ActiveChanged
   (
      this : in out PerceptionDepthFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.add_ActiveChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ActiveChanged
   (
      this : in out PerceptionDepthFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.remove_ActiveChanged (token);
   end;

   function add_PropertiesChanged
   (
      this : in out PerceptionDepthFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.add_PropertiesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PropertiesChanged
   (
      this : in out PerceptionDepthFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.remove_PropertiesChanged (token);
   end;

   function add_VideoProfileChanged
   (
      this : in out PerceptionDepthFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.add_VideoProfileChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoProfileChanged
   (
      this : in out PerceptionDepthFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.remove_VideoProfileChanged (token);
   end;

   function add_CameraIntrinsicsChanged
   (
      this : in out PerceptionDepthFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.add_CameraIntrinsicsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CameraIntrinsicsChanged
   (
      this : in out PerceptionDepthFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.remove_CameraIntrinsicsChanged (token);
   end;

   function get_Id
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceKind
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_DeviceKind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Available
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_Available (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Active
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_Active (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsControlled
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_IsControlled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out PerceptionDepthFrameSource
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedVideoProfiles
   (
      this : in out PerceptionDepthFrameSource
   )
   return IVectorView_IPerceptionVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPerceptionVideoProfile.Kind;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_SupportedVideoProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPerceptionVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AvailableVideoProfiles
   (
      this : in out PerceptionDepthFrameSource
   )
   return IVectorView_IPerceptionVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPerceptionVideoProfile.Kind;
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.get_AvailableVideoProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPerceptionVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_VideoProfile
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionVideoProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionVideoProfile;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionVideoProfile do
         Hr := this.m_IPerceptionDepthFrameSource.all.get_VideoProfile (m_ComRetVal'Access);
         Retval.m_IPerceptionVideoProfile := new Windows.Devices.Perception.IPerceptionVideoProfile;
         Retval.m_IPerceptionVideoProfile.all := m_ComRetVal;
      end return;
   end;

   function get_CameraIntrinsics
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.Windows.Media.Devices.Core.CameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.ICameraIntrinsics;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.CameraIntrinsics do
         Hr := this.m_IPerceptionDepthFrameSource.all.get_CameraIntrinsics (m_ComRetVal'Access);
         Retval.m_ICameraIntrinsics := new Windows.Media.Devices.Core.ICameraIntrinsics;
         Retval.m_ICameraIntrinsics.all := m_ComRetVal;
      end return;
   end;

   function AcquireControlSession
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionControlSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionControlSession;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionControlSession do
         Hr := this.m_IPerceptionDepthFrameSource.all.AcquireControlSession (m_ComRetVal'Access);
         Retval.m_IPerceptionControlSession := new Windows.Devices.Perception.IPerceptionControlSession;
         Retval.m_IPerceptionControlSession.all := m_ComRetVal;
      end return;
   end;

   function CanControlIndependentlyFrom
   (
      this : in out PerceptionDepthFrameSource;
      targetId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.CanControlIndependentlyFrom (HStr_targetId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function IsCorrelatedWith
   (
      this : in out PerceptionDepthFrameSource;
      targetId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.IsCorrelatedWith (HStr_targetId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function TryGetTransformTo
   (
      this : in out PerceptionDepthFrameSource;
      targetId : WinRt.WString;
      result : Windows.Foundation.Numerics.Matrix4x4_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionDepthFrameSource.all.TryGetTransformTo (HStr_targetId, result, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function TryGetDepthCorrelatedCameraIntrinsicsAsync
   (
      this : in out PerceptionDepthFrameSource;
      target : Windows.Devices.Perception.PerceptionDepthFrameSource'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics;
      m_IID            : aliased WinRt.IID := (1881870153, 42818, 23610, (171, 214, 119, 249, 153, 155, 138, 9 )); -- Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics;
      m_HandlerIID     : aliased WinRt.IID := (4086718506, 15757, 24533, (153, 227, 29, 54, 48, 190, 89, 56 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind := new AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics do
         Hr := this.m_IPerceptionDepthFrameSource.all.TryGetDepthCorrelatedCameraIntrinsicsAsync (target.m_IPerceptionDepthFrameSource.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionDepthCorrelatedCameraIntrinsics := new Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics;
                  Retval.m_IPerceptionDepthCorrelatedCameraIntrinsics.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetDepthCorrelatedCoordinateMapperAsync
   (
      this : in out PerceptionDepthFrameSource;
      targetId : WinRt.WString;
      depthFrameSourceToMapWith : Windows.Devices.Perception.PerceptionDepthFrameSource'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_targetId : WinRt.HString := To_HString (targetId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper;
      m_IID            : aliased WinRt.IID := (4031487385, 49365, 23368, (154, 229, 152, 2, 9, 60, 180, 94 )); -- Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper;
      m_HandlerIID     : aliased WinRt.IID := (1222569376, 26701, 20966, (176, 124, 210, 52, 209, 0, 107, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind := new AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper do
         Hr := this.m_IPerceptionDepthFrameSource.all.TryGetDepthCorrelatedCoordinateMapperAsync (HStr_targetId, depthFrameSourceToMapWith.m_IPerceptionDepthFrameSource.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionDepthCorrelatedCoordinateMapper := new Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper;
                  Retval.m_IPerceptionDepthCorrelatedCoordinateMapper.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_targetId);
      end return;
   end;

   function TrySetVideoProfileAsync
   (
      this : in out PerceptionDepthFrameSource;
      controlSession : Windows.Devices.Perception.PerceptionControlSession'Class;
      profile : Windows.Devices.Perception.PerceptionVideoProfile'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
      m_IID            : aliased WinRt.IID := (1249626985, 11017, 21969, (175, 104, 181, 170, 92, 44, 100, 113 )); -- Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (973474204, 56230, 22693, (132, 100, 226, 50, 104, 150, 132, 26 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind := new AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult do
         Hr := this.m_IPerceptionDepthFrameSource.all.TrySetVideoProfileAsync (controlSession.m_IPerceptionControlSession.all, profile.m_IPerceptionVideoProfile.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult := new Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function OpenReader
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionDepthFrameReader;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrameReader do
         Hr := this.m_IPerceptionDepthFrameSource.all.OpenReader (m_ComRetVal'Access);
         Retval.m_IPerceptionDepthFrameReader := new Windows.Devices.Perception.IPerceptionDepthFrameReader;
         Retval.m_IPerceptionDepthFrameReader.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceId
   (
      this : in out PerceptionDepthFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSource_Interface, WinRt.Windows.Devices.Perception.IPerceptionDepthFrameSource2, WinRt.Windows.Devices.Perception.IID_IPerceptionDepthFrameSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionDepthFrameSource.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthFrameSourceAddedEventArgs

   procedure Initialize (this : in out PerceptionDepthFrameSourceAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthFrameSourceAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthFrameSourceAddedEventArgs, IPerceptionDepthFrameSourceAddedEventArgs_Ptr);
   begin
      if this.m_IPerceptionDepthFrameSourceAddedEventArgs /= null then
         if this.m_IPerceptionDepthFrameSourceAddedEventArgs.all /= null then
            RefCount := this.m_IPerceptionDepthFrameSourceAddedEventArgs.all.Release;
            Free (this.m_IPerceptionDepthFrameSourceAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthFrameSourceAddedEventArgs

   function get_FrameSource
   (
      this : in out PerceptionDepthFrameSourceAddedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionDepthFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource do
         Hr := this.m_IPerceptionDepthFrameSourceAddedEventArgs.all.get_FrameSource (m_ComRetVal'Access);
         Retval.m_IPerceptionDepthFrameSource := new Windows.Devices.Perception.IPerceptionDepthFrameSource;
         Retval.m_IPerceptionDepthFrameSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthFrameSourceRemovedEventArgs

   procedure Initialize (this : in out PerceptionDepthFrameSourceRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthFrameSourceRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthFrameSourceRemovedEventArgs, IPerceptionDepthFrameSourceRemovedEventArgs_Ptr);
   begin
      if this.m_IPerceptionDepthFrameSourceRemovedEventArgs /= null then
         if this.m_IPerceptionDepthFrameSourceRemovedEventArgs.all /= null then
            RefCount := this.m_IPerceptionDepthFrameSourceRemovedEventArgs.all.Release;
            Free (this.m_IPerceptionDepthFrameSourceRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthFrameSourceRemovedEventArgs

   function get_FrameSource
   (
      this : in out PerceptionDepthFrameSourceRemovedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionDepthFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthFrameSource do
         Hr := this.m_IPerceptionDepthFrameSourceRemovedEventArgs.all.get_FrameSource (m_ComRetVal'Access);
         Retval.m_IPerceptionDepthFrameSource := new Windows.Devices.Perception.IPerceptionDepthFrameSource;
         Retval.m_IPerceptionDepthFrameSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionDepthFrameSourceWatcher

   procedure Initialize (this : in out PerceptionDepthFrameSourceWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionDepthFrameSourceWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionDepthFrameSourceWatcher, IPerceptionDepthFrameSourceWatcher_Ptr);
   begin
      if this.m_IPerceptionDepthFrameSourceWatcher /= null then
         if this.m_IPerceptionDepthFrameSourceWatcher.all /= null then
            RefCount := this.m_IPerceptionDepthFrameSourceWatcher.all.Release;
            Free (this.m_IPerceptionDepthFrameSourceWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionDepthFrameSourceWatcher

   function add_SourceAdded
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.add_SourceAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceAdded
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.remove_SourceAdded (token);
   end;

   function add_SourceRemoved
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.add_SourceRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceRemoved
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.remove_SourceRemoved (token);
   end;

   function add_Stopped
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.remove_Stopped (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out PerceptionDepthFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.remove_EnumerationCompleted (token);
   end;

   function get_Status
   (
      this : in out PerceptionDepthFrameSourceWatcher
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceWatcherStatus;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out PerceptionDepthFrameSourceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out PerceptionDepthFrameSourceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionDepthFrameSourceWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionFrameSourcePropertiesChangedEventArgs

   procedure Initialize (this : in out PerceptionFrameSourcePropertiesChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionFrameSourcePropertiesChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionFrameSourcePropertiesChangedEventArgs, IPerceptionFrameSourcePropertiesChangedEventArgs_Ptr);
   begin
      if this.m_IPerceptionFrameSourcePropertiesChangedEventArgs /= null then
         if this.m_IPerceptionFrameSourcePropertiesChangedEventArgs.all /= null then
            RefCount := this.m_IPerceptionFrameSourcePropertiesChangedEventArgs.all.Release;
            Free (this.m_IPerceptionFrameSourcePropertiesChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionFrameSourcePropertiesChangedEventArgs

   function get_CollectionChange
   (
      this : in out PerceptionFrameSourcePropertiesChangedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.CollectionChange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.CollectionChange;
   begin
      Hr := this.m_IPerceptionFrameSourcePropertiesChangedEventArgs.all.get_CollectionChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Key
   (
      this : in out PerceptionFrameSourcePropertiesChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionFrameSourcePropertiesChangedEventArgs.all.get_Key (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionFrameSourcePropertyChangeResult

   procedure Initialize (this : in out PerceptionFrameSourcePropertyChangeResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionFrameSourcePropertyChangeResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionFrameSourcePropertyChangeResult, IPerceptionFrameSourcePropertyChangeResult_Ptr);
   begin
      if this.m_IPerceptionFrameSourcePropertyChangeResult /= null then
         if this.m_IPerceptionFrameSourcePropertyChangeResult.all /= null then
            RefCount := this.m_IPerceptionFrameSourcePropertyChangeResult.all.Release;
            Free (this.m_IPerceptionFrameSourcePropertyChangeResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionFrameSourcePropertyChangeResult

   function get_Status
   (
      this : in out PerceptionFrameSourcePropertyChangeResult
   )
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeStatus;
   begin
      Hr := this.m_IPerceptionFrameSourcePropertyChangeResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewValue
   (
      this : in out PerceptionFrameSourcePropertyChangeResult
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IPerceptionFrameSourcePropertyChangeResult.all.get_NewValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionInfraredFrame

   procedure Initialize (this : in out PerceptionInfraredFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionInfraredFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionInfraredFrame, IPerceptionInfraredFrame_Ptr);
   begin
      if this.m_IPerceptionInfraredFrame /= null then
         if this.m_IPerceptionInfraredFrame.all /= null then
            RefCount := this.m_IPerceptionInfraredFrame.all.Release;
            Free (this.m_IPerceptionInfraredFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionInfraredFrame

   function get_VideoFrame
   (
      this : in out PerceptionInfraredFrame
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IPerceptionInfraredFrame.all.get_VideoFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionInfraredFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionInfraredFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionInfraredFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionInfraredFrameArrivedEventArgs

   procedure Initialize (this : in out PerceptionInfraredFrameArrivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionInfraredFrameArrivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionInfraredFrameArrivedEventArgs, IPerceptionInfraredFrameArrivedEventArgs_Ptr);
   begin
      if this.m_IPerceptionInfraredFrameArrivedEventArgs /= null then
         if this.m_IPerceptionInfraredFrameArrivedEventArgs.all /= null then
            RefCount := this.m_IPerceptionInfraredFrameArrivedEventArgs.all.Release;
            Free (this.m_IPerceptionInfraredFrameArrivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionInfraredFrameArrivedEventArgs

   function get_RelativeTime
   (
      this : in out PerceptionInfraredFrameArrivedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPerceptionInfraredFrameArrivedEventArgs.all.get_RelativeTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryOpenFrame
   (
      this : in out PerceptionInfraredFrameArrivedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionInfraredFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrame do
         Hr := this.m_IPerceptionInfraredFrameArrivedEventArgs.all.TryOpenFrame (m_ComRetVal'Access);
         Retval.m_IPerceptionInfraredFrame := new Windows.Devices.Perception.IPerceptionInfraredFrame;
         Retval.m_IPerceptionInfraredFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionInfraredFrameReader

   procedure Initialize (this : in out PerceptionInfraredFrameReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionInfraredFrameReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionInfraredFrameReader, IPerceptionInfraredFrameReader_Ptr);
   begin
      if this.m_IPerceptionInfraredFrameReader /= null then
         if this.m_IPerceptionInfraredFrameReader.all /= null then
            RefCount := this.m_IPerceptionInfraredFrameReader.all.Release;
            Free (this.m_IPerceptionInfraredFrameReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionInfraredFrameReader

   function add_FrameArrived
   (
      this : in out PerceptionInfraredFrameReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameReader.all.add_FrameArrived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FrameArrived
   (
      this : in out PerceptionInfraredFrameReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameReader.all.remove_FrameArrived (token);
   end;

   function get_Source
   (
      this : in out PerceptionInfraredFrameReader
   )
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionInfraredFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource do
         Hr := this.m_IPerceptionInfraredFrameReader.all.get_Source (m_ComRetVal'Access);
         Retval.m_IPerceptionInfraredFrameSource := new Windows.Devices.Perception.IPerceptionInfraredFrameSource;
         Retval.m_IPerceptionInfraredFrameSource.all := m_ComRetVal;
      end return;
   end;

   function get_IsPaused
   (
      this : in out PerceptionInfraredFrameReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionInfraredFrameReader.all.get_IsPaused (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsPaused
   (
      this : in out PerceptionInfraredFrameReader;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameReader.all.put_IsPaused (value);
   end;

   function TryReadLatestFrame
   (
      this : in out PerceptionInfraredFrameReader
   )
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionInfraredFrame;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrame do
         Hr := this.m_IPerceptionInfraredFrameReader.all.TryReadLatestFrame (m_ComRetVal'Access);
         Retval.m_IPerceptionInfraredFrame := new Windows.Devices.Perception.IPerceptionInfraredFrame;
         Retval.m_IPerceptionInfraredFrame.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out PerceptionInfraredFrameReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionInfraredFrameReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionInfraredFrameSource

   procedure Initialize (this : in out PerceptionInfraredFrameSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionInfraredFrameSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionInfraredFrameSource, IPerceptionInfraredFrameSource_Ptr);
   begin
      if this.m_IPerceptionInfraredFrameSource /= null then
         if this.m_IPerceptionInfraredFrameSource.all /= null then
            RefCount := this.m_IPerceptionInfraredFrameSource.all.Release;
            Free (this.m_IPerceptionInfraredFrameSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PerceptionInfraredFrameSource

   function CreateWatcher
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionInfraredFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionInfraredFrameSourceWatcher;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSourceWatcher do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionInfraredFrameSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWatcher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPerceptionInfraredFrameSourceWatcher := new Windows.Devices.Perception.IPerceptionInfraredFrameSourceWatcher;
            Retval.m_IPerceptionInfraredFrameSourceWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindAllAsync_PerceptionInfraredFrameSource
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionInfraredFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2971593898, 28556, 20544, (141, 70, 195, 32, 76, 86, 37, 130 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (984373416, 17492, 22501, (169, 11, 36, 73, 197, 183, 223, 232 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPerceptionInfraredFrameSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function FromIdAsync_PerceptionInfraredFrameSource
   (
      id : WinRt.WString
   )
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionInfraredFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionInfraredFrameSource.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionInfraredFrameSource.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSource;
      m_IID            : aliased WinRt.IID := (1427254850, 52325, 23757, (143, 108, 132, 206, 208, 157, 178, 78 )); -- Windows.Devices.Perception.PerceptionInfraredFrameSource;
      m_HandlerIID     : aliased WinRt.IID := (2832518542, 45584, 21751, (174, 43, 119, 112, 225, 155, 62, 54 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionInfraredFrameSource.Kind := new AsyncOperationCompletedHandler_PerceptionInfraredFrameSource.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionInfraredFrameSource.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionInfraredFrameSource.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionInfraredFrameSource.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionInfraredFrameSource.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource do
         Hr := RoGetActivationFactory (m_hString, IID_IPerceptionInfraredFrameSourceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_id, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPerceptionInfraredFrameSource := new Windows.Devices.Perception.IPerceptionInfraredFrameSource;
                     Retval.m_IPerceptionInfraredFrameSource.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function RequestAccessAsync_PerceptionInfraredFrameSource
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Perception.PerceptionInfraredFrameSource");
      m_Factory        : access WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSourceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.PerceptionFrameSourceAccessStatus;
      m_IID            : aliased WinRt.IID := (741286568, 62339, 22530, (186, 44, 12, 187, 205, 152, 156, 154 )); -- Windows.Devices.Perception.PerceptionFrameSourceAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1651789476, 13383, 22306, (171, 94, 2, 86, 123, 79, 206, 235 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind := new AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionFrameSourceAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionFrameSourceAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPerceptionInfraredFrameSourceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionInfraredFrameSource

   function add_AvailableChanged
   (
      this : in out PerceptionInfraredFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.add_AvailableChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AvailableChanged
   (
      this : in out PerceptionInfraredFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.remove_AvailableChanged (token);
   end;

   function add_ActiveChanged
   (
      this : in out PerceptionInfraredFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.add_ActiveChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ActiveChanged
   (
      this : in out PerceptionInfraredFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.remove_ActiveChanged (token);
   end;

   function add_PropertiesChanged
   (
      this : in out PerceptionInfraredFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.add_PropertiesChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PropertiesChanged
   (
      this : in out PerceptionInfraredFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.remove_PropertiesChanged (token);
   end;

   function add_VideoProfileChanged
   (
      this : in out PerceptionInfraredFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.add_VideoProfileChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoProfileChanged
   (
      this : in out PerceptionInfraredFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.remove_VideoProfileChanged (token);
   end;

   function add_CameraIntrinsicsChanged
   (
      this : in out PerceptionInfraredFrameSource;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.add_CameraIntrinsicsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CameraIntrinsicsChanged
   (
      this : in out PerceptionInfraredFrameSource;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.remove_CameraIntrinsicsChanged (token);
   end;

   function get_Id
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceKind
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_DeviceKind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Available
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_Available (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Active
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_Active (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsControlled
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_IsControlled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out PerceptionInfraredFrameSource
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedVideoProfiles
   (
      this : in out PerceptionInfraredFrameSource
   )
   return IVectorView_IPerceptionVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPerceptionVideoProfile.Kind;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_SupportedVideoProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPerceptionVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AvailableVideoProfiles
   (
      this : in out PerceptionInfraredFrameSource
   )
   return IVectorView_IPerceptionVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPerceptionVideoProfile.Kind;
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.get_AvailableVideoProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPerceptionVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_VideoProfile
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionVideoProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionVideoProfile;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionVideoProfile do
         Hr := this.m_IPerceptionInfraredFrameSource.all.get_VideoProfile (m_ComRetVal'Access);
         Retval.m_IPerceptionVideoProfile := new Windows.Devices.Perception.IPerceptionVideoProfile;
         Retval.m_IPerceptionVideoProfile.all := m_ComRetVal;
      end return;
   end;

   function get_CameraIntrinsics
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.Windows.Media.Devices.Core.CameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.ICameraIntrinsics;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.CameraIntrinsics do
         Hr := this.m_IPerceptionInfraredFrameSource.all.get_CameraIntrinsics (m_ComRetVal'Access);
         Retval.m_ICameraIntrinsics := new Windows.Media.Devices.Core.ICameraIntrinsics;
         Retval.m_ICameraIntrinsics.all := m_ComRetVal;
      end return;
   end;

   function AcquireControlSession
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionControlSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionControlSession;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionControlSession do
         Hr := this.m_IPerceptionInfraredFrameSource.all.AcquireControlSession (m_ComRetVal'Access);
         Retval.m_IPerceptionControlSession := new Windows.Devices.Perception.IPerceptionControlSession;
         Retval.m_IPerceptionControlSession.all := m_ComRetVal;
      end return;
   end;

   function CanControlIndependentlyFrom
   (
      this : in out PerceptionInfraredFrameSource;
      targetId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.CanControlIndependentlyFrom (HStr_targetId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function IsCorrelatedWith
   (
      this : in out PerceptionInfraredFrameSource;
      targetId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.IsCorrelatedWith (HStr_targetId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function TryGetTransformTo
   (
      this : in out PerceptionInfraredFrameSource;
      targetId : WinRt.WString;
      result : Windows.Foundation.Numerics.Matrix4x4_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_targetId : WinRt.HString := To_HString (targetId);
   begin
      Hr := this.m_IPerceptionInfraredFrameSource.all.TryGetTransformTo (HStr_targetId, result, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_targetId);
      return m_ComRetVal;
   end;

   function TryGetDepthCorrelatedCameraIntrinsicsAsync
   (
      this : in out PerceptionInfraredFrameSource;
      target : Windows.Devices.Perception.PerceptionDepthFrameSource'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics;
      m_IID            : aliased WinRt.IID := (1881870153, 42818, 23610, (171, 214, 119, 249, 153, 155, 138, 9 )); -- Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics;
      m_HandlerIID     : aliased WinRt.IID := (4086718506, 15757, 24533, (153, 227, 29, 54, 48, 190, 89, 56 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind := new AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionDepthCorrelatedCameraIntrinsics.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCameraIntrinsics.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCameraIntrinsics do
         Hr := this.m_IPerceptionInfraredFrameSource.all.TryGetDepthCorrelatedCameraIntrinsicsAsync (target.m_IPerceptionDepthFrameSource.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionDepthCorrelatedCameraIntrinsics := new Windows.Devices.Perception.IPerceptionDepthCorrelatedCameraIntrinsics;
                  Retval.m_IPerceptionDepthCorrelatedCameraIntrinsics.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function TryGetDepthCorrelatedCoordinateMapperAsync
   (
      this : in out PerceptionInfraredFrameSource;
      targetId : WinRt.WString;
      depthFrameSourceToMapWith : Windows.Devices.Perception.PerceptionDepthFrameSource'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_targetId : WinRt.HString := To_HString (targetId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper;
      m_IID            : aliased WinRt.IID := (4031487385, 49365, 23368, (154, 229, 152, 2, 9, 60, 180, 94 )); -- Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper;
      m_HandlerIID     : aliased WinRt.IID := (1222569376, 26701, 20966, (176, 124, 210, 52, 209, 0, 107, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind := new AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionDepthCorrelatedCoordinateMapper.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionDepthCorrelatedCoordinateMapper.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionDepthCorrelatedCoordinateMapper do
         Hr := this.m_IPerceptionInfraredFrameSource.all.TryGetDepthCorrelatedCoordinateMapperAsync (HStr_targetId, depthFrameSourceToMapWith.m_IPerceptionDepthFrameSource.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionDepthCorrelatedCoordinateMapper := new Windows.Devices.Perception.IPerceptionDepthCorrelatedCoordinateMapper;
                  Retval.m_IPerceptionDepthCorrelatedCoordinateMapper.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_targetId);
      end return;
   end;

   function TrySetVideoProfileAsync
   (
      this : in out PerceptionInfraredFrameSource;
      controlSession : Windows.Devices.Perception.PerceptionControlSession'Class;
      profile : Windows.Devices.Perception.PerceptionVideoProfile'Class
   )
   return WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
      m_IID            : aliased WinRt.IID := (1249626985, 11017, 21969, (175, 104, 181, 170, 92, 44, 100, 113 )); -- Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (973474204, 56230, 22693, (132, 100, 226, 50, 104, 150, 132, 26 ));
      m_Handler        : AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind := new AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PerceptionFrameSourcePropertyChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_PerceptionFrameSourcePropertyChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionFrameSourcePropertyChangeResult do
         Hr := this.m_IPerceptionInfraredFrameSource.all.TrySetVideoProfileAsync (controlSession.m_IPerceptionControlSession.all, profile.m_IPerceptionVideoProfile.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult := new Windows.Devices.Perception.IPerceptionFrameSourcePropertyChangeResult;
                  Retval.m_IPerceptionFrameSourcePropertyChangeResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function OpenReader
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionInfraredFrameReader;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrameReader do
         Hr := this.m_IPerceptionInfraredFrameSource.all.OpenReader (m_ComRetVal'Access);
         Retval.m_IPerceptionInfraredFrameReader := new Windows.Devices.Perception.IPerceptionInfraredFrameReader;
         Retval.m_IPerceptionInfraredFrameReader.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceId
   (
      this : in out PerceptionInfraredFrameSource
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSource_Interface, WinRt.Windows.Devices.Perception.IPerceptionInfraredFrameSource2, WinRt.Windows.Devices.Perception.IID_IPerceptionInfraredFrameSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPerceptionInfraredFrameSource.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionInfraredFrameSourceAddedEventArgs

   procedure Initialize (this : in out PerceptionInfraredFrameSourceAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionInfraredFrameSourceAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionInfraredFrameSourceAddedEventArgs, IPerceptionInfraredFrameSourceAddedEventArgs_Ptr);
   begin
      if this.m_IPerceptionInfraredFrameSourceAddedEventArgs /= null then
         if this.m_IPerceptionInfraredFrameSourceAddedEventArgs.all /= null then
            RefCount := this.m_IPerceptionInfraredFrameSourceAddedEventArgs.all.Release;
            Free (this.m_IPerceptionInfraredFrameSourceAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionInfraredFrameSourceAddedEventArgs

   function get_FrameSource
   (
      this : in out PerceptionInfraredFrameSourceAddedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionInfraredFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource do
         Hr := this.m_IPerceptionInfraredFrameSourceAddedEventArgs.all.get_FrameSource (m_ComRetVal'Access);
         Retval.m_IPerceptionInfraredFrameSource := new Windows.Devices.Perception.IPerceptionInfraredFrameSource;
         Retval.m_IPerceptionInfraredFrameSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionInfraredFrameSourceRemovedEventArgs

   procedure Initialize (this : in out PerceptionInfraredFrameSourceRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionInfraredFrameSourceRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionInfraredFrameSourceRemovedEventArgs, IPerceptionInfraredFrameSourceRemovedEventArgs_Ptr);
   begin
      if this.m_IPerceptionInfraredFrameSourceRemovedEventArgs /= null then
         if this.m_IPerceptionInfraredFrameSourceRemovedEventArgs.all /= null then
            RefCount := this.m_IPerceptionInfraredFrameSourceRemovedEventArgs.all.Release;
            Free (this.m_IPerceptionInfraredFrameSourceRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionInfraredFrameSourceRemovedEventArgs

   function get_FrameSource
   (
      this : in out PerceptionInfraredFrameSourceRemovedEventArgs
   )
   return WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Perception.IPerceptionInfraredFrameSource;
   begin
      return RetVal : WinRt.Windows.Devices.Perception.PerceptionInfraredFrameSource do
         Hr := this.m_IPerceptionInfraredFrameSourceRemovedEventArgs.all.get_FrameSource (m_ComRetVal'Access);
         Retval.m_IPerceptionInfraredFrameSource := new Windows.Devices.Perception.IPerceptionInfraredFrameSource;
         Retval.m_IPerceptionInfraredFrameSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionInfraredFrameSourceWatcher

   procedure Initialize (this : in out PerceptionInfraredFrameSourceWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionInfraredFrameSourceWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionInfraredFrameSourceWatcher, IPerceptionInfraredFrameSourceWatcher_Ptr);
   begin
      if this.m_IPerceptionInfraredFrameSourceWatcher /= null then
         if this.m_IPerceptionInfraredFrameSourceWatcher.all /= null then
            RefCount := this.m_IPerceptionInfraredFrameSourceWatcher.all.Release;
            Free (this.m_IPerceptionInfraredFrameSourceWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionInfraredFrameSourceWatcher

   function add_SourceAdded
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.add_SourceAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceAdded
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.remove_SourceAdded (token);
   end;

   function add_SourceRemoved
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.add_SourceRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceRemoved
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.remove_SourceRemoved (token);
   end;

   function add_Stopped
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.remove_Stopped (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out PerceptionInfraredFrameSourceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.remove_EnumerationCompleted (token);
   end;

   function get_Status
   (
      this : in out PerceptionInfraredFrameSourceWatcher
   )
   return WinRt.Windows.Devices.Enumeration.DeviceWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.DeviceWatcherStatus;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out PerceptionInfraredFrameSourceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out PerceptionInfraredFrameSourceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerceptionInfraredFrameSourceWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerceptionVideoProfile

   procedure Initialize (this : in out PerceptionVideoProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerceptionVideoProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerceptionVideoProfile, IPerceptionVideoProfile_Ptr);
   begin
      if this.m_IPerceptionVideoProfile /= null then
         if this.m_IPerceptionVideoProfile.all /= null then
            RefCount := this.m_IPerceptionVideoProfile.all.Release;
            Free (this.m_IPerceptionVideoProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerceptionVideoProfile

   function get_BitmapPixelFormat
   (
      this : in out PerceptionVideoProfile
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
   begin
      Hr := this.m_IPerceptionVideoProfile.all.get_BitmapPixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BitmapAlphaMode
   (
      this : in out PerceptionVideoProfile
   )
   return WinRt.Windows.Graphics.Imaging.BitmapAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapAlphaMode;
   begin
      Hr := this.m_IPerceptionVideoProfile.all.get_BitmapAlphaMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Width
   (
      this : in out PerceptionVideoProfile
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPerceptionVideoProfile.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out PerceptionVideoProfile
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPerceptionVideoProfile.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameDuration
   (
      this : in out PerceptionVideoProfile
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPerceptionVideoProfile.all.get_FrameDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsEqual
   (
      this : in out PerceptionVideoProfile;
      other : Windows.Devices.Perception.PerceptionVideoProfile'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPerceptionVideoProfile.all.IsEqual (other.m_IPerceptionVideoProfile.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

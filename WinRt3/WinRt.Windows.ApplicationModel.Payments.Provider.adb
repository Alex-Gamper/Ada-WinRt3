--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Payments.Provider is

   package IAsyncOperation_PaymentRequestChangedResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Payments.IPaymentRequestChangedResult);
   package AsyncOperationCompletedHandler_PaymentRequestChangedResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Payments.IPaymentRequestChangedResult);

   package IAsyncOperation_PaymentTransactionAcceptResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentTransactionAcceptResult);
   package AsyncOperationCompletedHandler_PaymentTransactionAcceptResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentTransactionAcceptResult);

   package IAsyncOperation_PaymentTransaction is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentTransaction);
   package AsyncOperationCompletedHandler_PaymentTransaction is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentTransaction);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentAppCanMakePaymentTriggerDetails

   procedure Initialize (this : in out PaymentAppCanMakePaymentTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentAppCanMakePaymentTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentAppCanMakePaymentTriggerDetails, IPaymentAppCanMakePaymentTriggerDetails_Ptr);
   begin
      if this.m_IPaymentAppCanMakePaymentTriggerDetails /= null then
         if this.m_IPaymentAppCanMakePaymentTriggerDetails.all /= null then
            RefCount := this.m_IPaymentAppCanMakePaymentTriggerDetails.all.Release;
            Free (this.m_IPaymentAppCanMakePaymentTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentAppCanMakePaymentTriggerDetails

   function get_Request
   (
      this : in out PaymentAppCanMakePaymentTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentRequest do
         Hr := this.m_IPaymentAppCanMakePaymentTriggerDetails.all.get_Request (m_ComRetVal'Access);
         Retval.m_IPaymentRequest := new Windows.ApplicationModel.Payments.IPaymentRequest;
         Retval.m_IPaymentRequest.all := m_ComRetVal;
      end return;
   end;

   procedure ReportCanMakePaymentResult
   (
      this : in out PaymentAppCanMakePaymentTriggerDetails;
      value : Windows.ApplicationModel.Payments.PaymentCanMakePaymentResult'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentAppCanMakePaymentTriggerDetails.all.ReportCanMakePaymentResult (value.m_IPaymentCanMakePaymentResult.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentAppManager

   procedure Initialize (this : in out PaymentAppManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentAppManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentAppManager, IPaymentAppManager_Ptr);
   begin
      if this.m_IPaymentAppManager /= null then
         if this.m_IPaymentAppManager.all /= null then
            RefCount := this.m_IPaymentAppManager.all.Release;
            Free (this.m_IPaymentAppManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PaymentAppManager

   function get_Current
   return WinRt.Windows.ApplicationModel.Payments.Provider.PaymentAppManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.Provider.PaymentAppManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentAppManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.Provider.IPaymentAppManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.Provider.PaymentAppManager do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentAppManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPaymentAppManager := new Windows.ApplicationModel.Payments.Provider.IPaymentAppManager;
            Retval.m_IPaymentAppManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentAppManager

   procedure RegisterAsync
   (
      this : in out PaymentAppManager;
      supportedPaymentMethodIds : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPaymentAppManager.all.RegisterAsync (supportedPaymentMethodIds, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure UnregisterAsync
   (
      this : in out PaymentAppManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPaymentAppManager.all.UnregisterAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentTransaction

   procedure Initialize (this : in out PaymentTransaction) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentTransaction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentTransaction, IPaymentTransaction_Ptr);
   begin
      if this.m_IPaymentTransaction /= null then
         if this.m_IPaymentTransaction.all /= null then
            RefCount := this.m_IPaymentTransaction.all.Release;
            Free (this.m_IPaymentTransaction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PaymentTransaction

   function FromIdAsync
   (
      id : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Payments.Provider.PaymentTransaction is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.Provider.PaymentTransaction");
      m_Factory        : access WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentTransactionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PaymentTransaction.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PaymentTransaction.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentTransaction;
      m_IID            : aliased WinRt.IID := (3768205181, 27344, 22735, (171, 76, 46, 76, 156, 121, 24, 115 )); -- Windows.ApplicationModel.Payments.Provider.PaymentTransaction;
      m_HandlerIID     : aliased WinRt.IID := (3176895205, 4230, 23613, (157, 225, 153, 130, 231, 118, 209, 147 ));
      m_Handler        : AsyncOperationCompletedHandler_PaymentTransaction.Kind := new AsyncOperationCompletedHandler_PaymentTransaction.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PaymentTransaction.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PaymentTransaction.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PaymentTransaction.Kind_Delegate, AsyncOperationCompletedHandler_PaymentTransaction.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.Provider.PaymentTransaction do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentTransactionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_id, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IPaymentTransaction := new Windows.ApplicationModel.Payments.Provider.IPaymentTransaction;
                     Retval.m_IPaymentTransaction.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentTransaction

   function get_PaymentRequest
   (
      this : in out PaymentTransaction
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentRequest do
         Hr := this.m_IPaymentTransaction.all.get_PaymentRequest (m_ComRetVal'Access);
         Retval.m_IPaymentRequest := new Windows.ApplicationModel.Payments.IPaymentRequest;
         Retval.m_IPaymentRequest.all := m_ComRetVal;
      end return;
   end;

   function get_PayerEmail
   (
      this : in out PaymentTransaction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentTransaction.all.get_PayerEmail (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PayerEmail
   (
      this : in out PaymentTransaction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentTransaction.all.put_PayerEmail (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PayerName
   (
      this : in out PaymentTransaction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentTransaction.all.get_PayerName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PayerName
   (
      this : in out PaymentTransaction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentTransaction.all.put_PayerName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PayerPhoneNumber
   (
      this : in out PaymentTransaction
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentTransaction.all.get_PayerPhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PayerPhoneNumber
   (
      this : in out PaymentTransaction;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentTransaction.all.put_PayerPhoneNumber (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function UpdateShippingAddressAsync
   (
      this : in out PaymentTransaction;
      shippingAddress : Windows.ApplicationModel.Payments.PaymentAddress'Class
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequestChangedResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PaymentRequestChangedResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PaymentRequestChangedResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
      m_IID            : aliased WinRt.IID := (214114341, 44135, 22498, (160, 246, 58, 142, 17, 108, 239, 76 )); -- Windows.ApplicationModel.Payments.PaymentRequestChangedResult;
      m_HandlerIID     : aliased WinRt.IID := (3200825126, 36950, 24135, (178, 42, 13, 160, 154, 168, 74, 254 ));
      m_Handler        : AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind := new AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PaymentRequestChangedResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind_Delegate, AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentRequestChangedResult do
         Hr := this.m_IPaymentTransaction.all.UpdateShippingAddressAsync (shippingAddress.m_IPaymentAddress.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPaymentRequestChangedResult := new Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
                  Retval.m_IPaymentRequestChangedResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function UpdateSelectedShippingOptionAsync
   (
      this : in out PaymentTransaction;
      selectedShippingOption : Windows.ApplicationModel.Payments.PaymentShippingOption'Class
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequestChangedResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PaymentRequestChangedResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PaymentRequestChangedResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
      m_IID            : aliased WinRt.IID := (214114341, 44135, 22498, (160, 246, 58, 142, 17, 108, 239, 76 )); -- Windows.ApplicationModel.Payments.PaymentRequestChangedResult;
      m_HandlerIID     : aliased WinRt.IID := (3200825126, 36950, 24135, (178, 42, 13, 160, 154, 168, 74, 254 ));
      m_Handler        : AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind := new AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PaymentRequestChangedResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind_Delegate, AsyncOperationCompletedHandler_PaymentRequestChangedResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentRequestChangedResult do
         Hr := this.m_IPaymentTransaction.all.UpdateSelectedShippingOptionAsync (selectedShippingOption.m_IPaymentShippingOption.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPaymentRequestChangedResult := new Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
                  Retval.m_IPaymentRequestChangedResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function AcceptAsync
   (
      this : in out PaymentTransaction;
      paymentToken : Windows.ApplicationModel.Payments.PaymentToken'Class
   )
   return WinRt.Windows.ApplicationModel.Payments.Provider.PaymentTransactionAcceptResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PaymentTransactionAcceptResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PaymentTransactionAcceptResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Payments.Provider.IPaymentTransactionAcceptResult;
      m_IID            : aliased WinRt.IID := (3326470383, 2147, 21940, (138, 237, 66, 189, 21, 45, 128, 4 )); -- Windows.ApplicationModel.Payments.Provider.PaymentTransactionAcceptResult;
      m_HandlerIID     : aliased WinRt.IID := (1161361546, 35247, 20665, (129, 101, 126, 98, 105, 99, 152, 132 ));
      m_Handler        : AsyncOperationCompletedHandler_PaymentTransactionAcceptResult.Kind := new AsyncOperationCompletedHandler_PaymentTransactionAcceptResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PaymentTransactionAcceptResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PaymentTransactionAcceptResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PaymentTransactionAcceptResult.Kind_Delegate, AsyncOperationCompletedHandler_PaymentTransactionAcceptResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.Provider.PaymentTransactionAcceptResult do
         Hr := this.m_IPaymentTransaction.all.AcceptAsync (paymentToken.m_IPaymentToken.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPaymentTransactionAcceptResult := new Windows.ApplicationModel.Payments.Provider.IPaymentTransactionAcceptResult;
                  Retval.m_IPaymentTransactionAcceptResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Reject
   (
      this : in out PaymentTransaction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentTransaction.all.Reject;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentTransactionAcceptResult

   procedure Initialize (this : in out PaymentTransactionAcceptResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentTransactionAcceptResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentTransactionAcceptResult, IPaymentTransactionAcceptResult_Ptr);
   begin
      if this.m_IPaymentTransactionAcceptResult /= null then
         if this.m_IPaymentTransactionAcceptResult.all /= null then
            RefCount := this.m_IPaymentTransactionAcceptResult.all.Release;
            Free (this.m_IPaymentTransactionAcceptResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentTransactionAcceptResult

   function get_Status
   (
      this : in out PaymentTransactionAcceptResult
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequestCompletionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentRequestCompletionStatus;
   begin
      Hr := this.m_IPaymentTransactionAcceptResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

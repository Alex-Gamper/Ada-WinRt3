--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Activation;
with WinRt.Windows.ApplicationModel.Core;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_PackageContentGroup is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.IPackageContentGroup);
   package AsyncOperationCompletedHandler_PackageContentGroup is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.IPackageContentGroup);

   package IAsyncOperation_PackageUpdateAvailabilityResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.IPackageUpdateAvailabilityResult);
   package AsyncOperationCompletedHandler_PackageUpdateAvailabilityResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.IPackageUpdateAvailabilityResult);

   package IAsyncOperation_PackageCatalogAddOptionalPackageResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.IPackageCatalogAddOptionalPackageResult);
   package AsyncOperationCompletedHandler_PackageCatalogAddOptionalPackageResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.IPackageCatalogAddOptionalPackageResult);

   package IAsyncOperation_PackageCatalogRemoveOptionalPackagesResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.IPackageCatalogRemoveOptionalPackagesResult);
   package AsyncOperationCompletedHandler_PackageCatalogRemoveOptionalPackagesResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.IPackageCatalogRemoveOptionalPackagesResult);

   package IAsyncOperation_PackageCatalogAddResourcePackageResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.ApplicationModel.IPackageCatalogAddResourcePackageResult, GenericObject);
   package AsyncOperationCompletedHandler_PackageCatalogAddResourcePackageResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.ApplicationModel.IPackageCatalogAddResourcePackageResult, GenericObject);

   package IAsyncOperation_PackageCatalogRemoveResourcePackagesResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.IPackageCatalogRemoveResourcePackagesResult);
   package AsyncOperationCompletedHandler_PackageCatalogRemoveResourcePackagesResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.IPackageCatalogRemoveResourcePackagesResult);

   package IAsyncOperation_StartupTaskState is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.StartupTaskState);
   package AsyncOperationCompletedHandler_StartupTaskState is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.StartupTaskState);

   package IAsyncOperation_StartupTask is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.IStartupTask);
   package AsyncOperationCompletedHandler_StartupTask is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.IStartupTask);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppDisplayInfo

   procedure Initialize (this : in out AppDisplayInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppDisplayInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppDisplayInfo, IAppDisplayInfo_Ptr);
   begin
      if this.m_IAppDisplayInfo /= null then
         if this.m_IAppDisplayInfo.all /= null then
            RefCount := this.m_IAppDisplayInfo.all.Release;
            Free (this.m_IAppDisplayInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppDisplayInfo

   function get_DisplayName
   (
      this : in out AppDisplayInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppDisplayInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out AppDisplayInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppDisplayInfo.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetLogo
   (
      this : in out AppDisplayInfo;
      size : Windows.Foundation.Size
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_IAppDisplayInfo.all.GetLogo (size, m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
         Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInfo

   procedure Initialize (this : in out AppInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInfo, IAppInfo_Ptr);
   begin
      if this.m_IAppInfo /= null then
         if this.m_IAppInfo.all /= null then
            RefCount := this.m_IAppInfo.all.Release;
            Free (this.m_IAppInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppInfo

   function get_Current
   return WinRt.Windows.ApplicationModel.AppInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInfo");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IAppInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppInfo := new Windows.ApplicationModel.IAppInfo;
            Retval.m_IAppInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetFromAppUserModelId
   (
      appUserModelId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.AppInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInfo");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInfo;
      HStr_appUserModelId : WinRt.HString := To_HString (appUserModelId);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IAppInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFromAppUserModelId (HStr_appUserModelId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppInfo := new Windows.ApplicationModel.IAppInfo;
            Retval.m_IAppInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appUserModelId);
      end return;
   end;

   function GetFromAppUserModelIdForUser
   (
      user : Windows.System.User'Class;
      appUserModelId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.AppInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInfo");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInfo;
      HStr_appUserModelId : WinRt.HString := To_HString (appUserModelId);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IAppInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetFromAppUserModelIdForUser (user.m_IUser.all, HStr_appUserModelId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppInfo := new Windows.ApplicationModel.IAppInfo;
            Retval.m_IAppInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_appUserModelId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInfo

   function get_Id
   (
      this : in out AppInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInfo.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppUserModelId
   (
      this : in out AppInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInfo.all.get_AppUserModelId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayInfo
   (
      this : in out AppInfo
   )
   return WinRt.Windows.ApplicationModel.AppDisplayInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppDisplayInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppDisplayInfo do
         Hr := this.m_IAppInfo.all.get_DisplayInfo (m_ComRetVal'Access);
         Retval.m_IAppDisplayInfo := new Windows.ApplicationModel.IAppDisplayInfo;
         Retval.m_IAppDisplayInfo.all := m_ComRetVal;
      end return;
   end;

   function get_PackageFamilyName
   (
      this : in out AppInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInfo.all.get_PackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Package
   (
      this : in out AppInfo
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IAppInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IAppInfo_Interface, WinRt.Windows.ApplicationModel.IAppInfo2, WinRt.Windows.ApplicationModel.IID_IAppInfo2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         m_Interface := QInterface (this.m_IAppInfo.all);
         Hr := m_Interface.get_Package (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInstallerInfo

   procedure Initialize (this : in out AppInstallerInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInstallerInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInstallerInfo, IAppInstallerInfo_Ptr);
   begin
      if this.m_IAppInstallerInfo /= null then
         if this.m_IAppInstallerInfo.all /= null then
            RefCount := this.m_IAppInstallerInfo.all.Release;
            Free (this.m_IAppInstallerInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInstallerInfo

   function get_Uri
   (
      this : in out AppInstallerInfo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAppInstallerInfo.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInstance

   procedure Initialize (this : in out AppInstance) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInstance) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInstance, IAppInstance_Ptr);
   begin
      if this.m_IAppInstance /= null then
         if this.m_IAppInstance.all /= null then
            RefCount := this.m_IAppInstance.all.Release;
            Free (this.m_IAppInstance);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppInstance

   function get_RecommendedInstance
   return WinRt.Windows.ApplicationModel.AppInstance is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInstance");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInstanceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInstance;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInstance do
         Hr := RoGetActivationFactory (m_hString, IID_IAppInstanceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RecommendedInstance (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppInstance := new Windows.ApplicationModel.IAppInstance;
            Retval.m_IAppInstance.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetActivatedEventArgs
   return WinRt.Windows.ApplicationModel.Activation.IActivatedEventArgs is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInstance");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInstanceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Activation.IActivatedEventArgs;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppInstanceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetActivatedEventArgs (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function FindOrRegisterInstanceForKey
   (
      key : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.AppInstance is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInstance");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInstanceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInstance;
      HStr_key : WinRt.HString := To_HString (key);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInstance do
         Hr := RoGetActivationFactory (m_hString, IID_IAppInstanceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindOrRegisterInstanceForKey (HStr_key, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppInstance := new Windows.ApplicationModel.IAppInstance;
            Retval.m_IAppInstance.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_key);
      end return;
   end;

   procedure Unregister is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInstance");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInstanceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppInstanceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Unregister;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetInstances
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.AppInstance");
      m_Factory        : access WinRt.Windows.ApplicationModel.IAppInstanceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppInstanceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetInstances (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInstance

   function get_Key
   (
      this : in out AppInstance
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInstance.all.get_Key (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsCurrentInstance
   (
      this : in out AppInstance
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppInstance.all.get_IsCurrentInstance (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure RedirectActivationTo
   (
      this : in out AppInstance
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstance.all.RedirectActivationTo;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CameraApplicationManager is

      procedure ShowInstalledApplicationsUI is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.CameraApplicationManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.ICameraApplicationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICameraApplicationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ShowInstalledApplicationsUI;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end CameraApplicationManager;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body DesignMode is

      function get_DesignModeEnabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DesignMode");
         m_Factory        : access WinRt.Windows.ApplicationModel.IDesignModeStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDesignModeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DesignModeEnabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_DesignMode2Enabled
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.DesignMode");
         m_Factory        : access WinRt.Windows.ApplicationModel.IDesignModeStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IDesignModeStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DesignMode2Enabled (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end DesignMode;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EnteredBackgroundEventArgs

   procedure Initialize (this : in out EnteredBackgroundEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EnteredBackgroundEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEnteredBackgroundEventArgs, IEnteredBackgroundEventArgs_Ptr);
   begin
      if this.m_IEnteredBackgroundEventArgs /= null then
         if this.m_IEnteredBackgroundEventArgs.all /= null then
            RefCount := this.m_IEnteredBackgroundEventArgs.all.Release;
            Free (this.m_IEnteredBackgroundEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EnteredBackgroundEventArgs

   function GetDeferral
   (
      this : in out EnteredBackgroundEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEnteredBackgroundEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body FullTrustProcessLauncher is

      procedure LaunchFullTrustProcessForCurrentAppAsync is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.FullTrustProcessLauncher");
         m_Factory        : access WinRt.Windows.ApplicationModel.IFullTrustProcessLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFullTrustProcessLauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFullTrustProcessForCurrentAppAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure LaunchFullTrustProcessForCurrentAppAsync
      (
         parameterGroupId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.FullTrustProcessLauncher");
         m_Factory        : access WinRt.Windows.ApplicationModel.IFullTrustProcessLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_parameterGroupId : WinRt.HString := To_HString (parameterGroupId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFullTrustProcessLauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFullTrustProcessForCurrentAppAsync (HStr_parameterGroupId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_parameterGroupId);
      end;

      procedure LaunchFullTrustProcessForAppAsync
      (
         fullTrustPackageRelativeAppId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.FullTrustProcessLauncher");
         m_Factory        : access WinRt.Windows.ApplicationModel.IFullTrustProcessLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_fullTrustPackageRelativeAppId : WinRt.HString := To_HString (fullTrustPackageRelativeAppId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFullTrustProcessLauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFullTrustProcessForAppAsync (HStr_fullTrustPackageRelativeAppId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_fullTrustPackageRelativeAppId);
      end;

      procedure LaunchFullTrustProcessForAppAsync
      (
         fullTrustPackageRelativeAppId : WinRt.WString;
         parameterGroupId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.FullTrustProcessLauncher");
         m_Factory        : access WinRt.Windows.ApplicationModel.IFullTrustProcessLauncherStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_fullTrustPackageRelativeAppId : WinRt.HString := To_HString (fullTrustPackageRelativeAppId);
         HStr_parameterGroupId : WinRt.HString := To_HString (parameterGroupId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFullTrustProcessLauncherStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LaunchFullTrustProcessForAppAsync (HStr_fullTrustPackageRelativeAppId, HStr_parameterGroupId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_fullTrustPackageRelativeAppId);
         Hr := WindowsDeleteString (HStr_parameterGroupId);
      end;

   end FullTrustProcessLauncher;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LeavingBackgroundEventArgs

   procedure Initialize (this : in out LeavingBackgroundEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out LeavingBackgroundEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILeavingBackgroundEventArgs, ILeavingBackgroundEventArgs_Ptr);
   begin
      if this.m_ILeavingBackgroundEventArgs /= null then
         if this.m_ILeavingBackgroundEventArgs.all /= null then
            RefCount := this.m_ILeavingBackgroundEventArgs.all.Release;
            Free (this.m_ILeavingBackgroundEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LeavingBackgroundEventArgs

   function GetDeferral
   (
      this : in out LeavingBackgroundEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ILeavingBackgroundEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LimitedAccessFeatureRequestResult

   procedure Initialize (this : in out LimitedAccessFeatureRequestResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out LimitedAccessFeatureRequestResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILimitedAccessFeatureRequestResult, ILimitedAccessFeatureRequestResult_Ptr);
   begin
      if this.m_ILimitedAccessFeatureRequestResult /= null then
         if this.m_ILimitedAccessFeatureRequestResult.all /= null then
            RefCount := this.m_ILimitedAccessFeatureRequestResult.all.Release;
            Free (this.m_ILimitedAccessFeatureRequestResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LimitedAccessFeatureRequestResult

   function get_FeatureId
   (
      this : in out LimitedAccessFeatureRequestResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILimitedAccessFeatureRequestResult.all.get_FeatureId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Status
   (
      this : in out LimitedAccessFeatureRequestResult
   )
   return WinRt.Windows.ApplicationModel.LimitedAccessFeatureStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.LimitedAccessFeatureStatus;
   begin
      Hr := this.m_ILimitedAccessFeatureRequestResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EstimatedRemovalDate
   (
      this : in out LimitedAccessFeatureRequestResult
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_ILimitedAccessFeatureRequestResult.all.get_EstimatedRemovalDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body LimitedAccessFeatures is

      function TryUnlockFeature
      (
         featureId : WinRt.WString;
         token : WinRt.WString;
         attestation : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.LimitedAccessFeatureRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.LimitedAccessFeatures");
         m_Factory        : access WinRt.Windows.ApplicationModel.ILimitedAccessFeaturesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.ILimitedAccessFeatureRequestResult;
         HStr_featureId : WinRt.HString := To_HString (featureId);
         HStr_token : WinRt.HString := To_HString (token);
         HStr_attestation : WinRt.HString := To_HString (attestation);
      begin
         return RetVal : WinRt.Windows.ApplicationModel.LimitedAccessFeatureRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILimitedAccessFeaturesStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.TryUnlockFeature (HStr_featureId, HStr_token, HStr_attestation, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_ILimitedAccessFeatureRequestResult := new Windows.ApplicationModel.ILimitedAccessFeatureRequestResult;
               Retval.m_ILimitedAccessFeatureRequestResult.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_featureId);
            Hr := WindowsDeleteString (HStr_token);
            Hr := WindowsDeleteString (HStr_attestation);
         end return;
      end;

   end LimitedAccessFeatures;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Package_x

   procedure Initialize (this : in out Package_x) is
   begin
      null;
   end;

   procedure Finalize (this : in out Package_x) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackage, IPackage_Ptr);
   begin
      if this.m_IPackage /= null then
         if this.m_IPackage.all /= null then
            RefCount := this.m_IPackage.all.Release;
            Free (this.m_IPackage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Package_x

   function get_Current
   return WinRt.Windows.ApplicationModel.Package_x is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Package");
      m_Factory        : access WinRt.Windows.ApplicationModel.IPackageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := RoGetActivationFactory (m_hString, IID_IPackageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
            Retval.m_IPackage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Package_x

   function get_Id
   (
      this : in out Package_x
   )
   return WinRt.Windows.ApplicationModel.PackageId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackageId;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageId do
         Hr := this.m_IPackage.all.get_Id (m_ComRetVal'Access);
         Retval.m_IPackageId := new Windows.ApplicationModel.IPackageId;
         Retval.m_IPackageId.all := m_ComRetVal;
      end return;
   end;

   function get_InstalledLocation
   (
      this : in out Package_x
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IPackage.all.get_InstalledLocation (m_ComRetVal'Access);
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_IsFramework
   (
      this : in out Package_x
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackage.all.get_IsFramework (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Dependencies
   (
      this : in out Package_x
   )
   return IVectorView_IPackage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPackage.Kind;
   begin
      Hr := this.m_IPackage.all.get_Dependencies (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPackage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DisplayName
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage2, WinRt.Windows.ApplicationModel.IID_IPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_DisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PublisherDisplayName
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage2, WinRt.Windows.ApplicationModel.IID_IPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_PublisherDisplayName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage2, WinRt.Windows.ApplicationModel.IID_IPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Logo
   (
      this : in out Package_x
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage2, WinRt.Windows.ApplicationModel.IID_IPackage2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.get_Logo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_IsResourcePackage
   (
      this : in out Package_x
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage2, WinRt.Windows.ApplicationModel.IID_IPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_IsResourcePackage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsBundle
   (
      this : in out Package_x
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage2, WinRt.Windows.ApplicationModel.IID_IPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_IsBundle (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsDevelopmentMode
   (
      this : in out Package_x
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage2, WinRt.Windows.ApplicationModel.IID_IPackage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_IsDevelopmentMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out Package_x
   )
   return WinRt.Windows.ApplicationModel.PackageStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackageStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage3, WinRt.Windows.ApplicationModel.IID_IPackage3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageStatus do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.get_Status (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPackageStatus := new Windows.ApplicationModel.IPackageStatus;
         Retval.m_IPackageStatus.all := m_ComRetVal;
      end return;
   end;

   function get_InstalledDate
   (
      this : in out Package_x
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage3, WinRt.Windows.ApplicationModel.IID_IPackage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_InstalledDate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetAppListEntriesAsync
   (
      this : in out Package_x
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3552376992, 13624, 23982, (152, 215, 31, 42, 184, 140, 63, 1 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1372013426, 37970, 22478, (146, 112, 118, 32, 9, 251, 254, 77 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage3, WinRt.Windows.ApplicationModel.IID_IPackage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.GetAppListEntriesAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_InstallDate
   (
      this : in out Package_x
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageWithMetadata := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackageWithMetadata, WinRt.Windows.ApplicationModel.IID_IPackageWithMetadata'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_InstallDate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetThumbnailToken
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageWithMetadata := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackageWithMetadata, WinRt.Windows.ApplicationModel.IID_IPackageWithMetadata'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.GetThumbnailToken (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Launch
   (
      this : in out Package_x;
      parameters : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageWithMetadata := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_parameters : WinRt.HString := To_HString (parameters);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackageWithMetadata, WinRt.Windows.ApplicationModel.IID_IPackageWithMetadata'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.Launch (HStr_parameters);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_parameters);
   end;

   function get_SignatureKind
   (
      this : in out Package_x
   )
   return WinRt.Windows.ApplicationModel.PackageSignatureKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.PackageSignatureKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage4, WinRt.Windows.ApplicationModel.IID_IPackage4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_SignatureKind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsOptional
   (
      this : in out Package_x
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage4, WinRt.Windows.ApplicationModel.IID_IPackage4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_IsOptional (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function VerifyContentIntegrityAsync
   (
      this : in out Package_x
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage4, WinRt.Windows.ApplicationModel.IID_IPackage4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.VerifyContentIntegrityAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetContentGroupsAsync
   (
      this : in out Package_x
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2459843625, 48937, 21908, (188, 99, 103, 219, 67, 165, 57, 234 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1380342771, 15526, 22145, (167, 180, 145, 132, 119, 87, 181, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage5, WinRt.Windows.ApplicationModel.IID_IPackage5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.GetContentGroupsAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetContentGroupAsync
   (
      this : in out Package_x;
      name : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.PackageContentGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PackageContentGroup.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PackageContentGroup.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.IPackageContentGroup;
      m_IID            : aliased WinRt.IID := (3151139555, 56223, 22530, (164, 136, 64, 241, 86, 51, 44, 4 )); -- Windows.ApplicationModel.PackageContentGroup;
      m_HandlerIID     : aliased WinRt.IID := (575921208, 39450, 21348, (154, 59, 3, 167, 218, 97, 84, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_PackageContentGroup.Kind := new AsyncOperationCompletedHandler_PackageContentGroup.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageContentGroup.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageContentGroup.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageContentGroup.Kind_Delegate, AsyncOperationCompletedHandler_PackageContentGroup.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage5, WinRt.Windows.ApplicationModel.IID_IPackage5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageContentGroup do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.GetContentGroupAsync (HStr_name, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPackageContentGroup := new Windows.ApplicationModel.IPackageContentGroup;
                  Retval.m_IPackageContentGroup.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function StageContentGroupsAsync
   (
      this : in out Package_x;
      names : GenericObject
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2459843625, 48937, 21908, (188, 99, 103, 219, 67, 165, 57, 234 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1380342771, 15526, 22145, (167, 180, 145, 132, 119, 87, 181, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage5, WinRt.Windows.ApplicationModel.IID_IPackage5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.StageContentGroupsAsync (names, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function StageContentGroupsAsync
   (
      this : in out Package_x;
      names : GenericObject;
      moveToHeadOfQueue : WinRt.Boolean
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2459843625, 48937, 21908, (188, 99, 103, 219, 67, 165, 57, 234 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1380342771, 15526, 22145, (167, 180, 145, 132, 119, 87, 181, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage5, WinRt.Windows.ApplicationModel.IID_IPackage5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.StageContentGroupsAsync (names, moveToHeadOfQueue, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SetInUseAsync
   (
      this : in out Package_x;
      inUse : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage5, WinRt.Windows.ApplicationModel.IID_IPackage5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.SetInUseAsync (inUse, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAppInstallerInfo
   (
      this : in out Package_x
   )
   return WinRt.Windows.ApplicationModel.AppInstallerInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IAppInstallerInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage6, WinRt.Windows.ApplicationModel.IID_IPackage6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.AppInstallerInfo do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.GetAppInstallerInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAppInstallerInfo := new Windows.ApplicationModel.IAppInstallerInfo;
         Retval.m_IAppInstallerInfo.all := m_ComRetVal;
      end return;
   end;

   function CheckUpdateAvailabilityAsync
   (
      this : in out Package_x
   )
   return WinRt.Windows.ApplicationModel.PackageUpdateAvailabilityResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PackageUpdateAvailabilityResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PackageUpdateAvailabilityResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.IPackageUpdateAvailabilityResult;
      m_IID            : aliased WinRt.IID := (17551381, 17391, 22380, (190, 30, 188, 56, 197, 182, 182, 107 )); -- Windows.ApplicationModel.PackageUpdateAvailabilityResult;
      m_HandlerIID     : aliased WinRt.IID := (1075888180, 51042, 20818, (190, 239, 240, 52, 113, 232, 133, 185 ));
      m_Handler        : AsyncOperationCompletedHandler_PackageUpdateAvailabilityResult.Kind := new AsyncOperationCompletedHandler_PackageUpdateAvailabilityResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageUpdateAvailabilityResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageUpdateAvailabilityResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageUpdateAvailabilityResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageUpdateAvailabilityResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage6, WinRt.Windows.ApplicationModel.IID_IPackage6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageUpdateAvailabilityResult do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.CheckUpdateAvailabilityAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPackageUpdateAvailabilityResult := new Windows.ApplicationModel.IPackageUpdateAvailabilityResult;
                  Retval.m_IPackageUpdateAvailabilityResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_MutableLocation
   (
      this : in out Package_x
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage7, WinRt.Windows.ApplicationModel.IID_IPackage7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.get_MutableLocation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_EffectiveLocation
   (
      this : in out Package_x
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage7, WinRt.Windows.ApplicationModel.IID_IPackage7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.get_EffectiveLocation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_EffectiveExternalLocation
   (
      this : in out Package_x
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.get_EffectiveExternalLocation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_MachineExternalLocation
   (
      this : in out Package_x
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.get_MachineExternalLocation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_UserExternalLocation
   (
      this : in out Package_x
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.get_UserExternalLocation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   function get_InstalledPath
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_InstalledPath (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MutablePath
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_MutablePath (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EffectivePath
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_EffectivePath (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EffectiveExternalPath
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_EffectiveExternalPath (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MachineExternalPath
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_MachineExternalPath (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_UserExternalPath
   (
      this : in out Package_x
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_UserExternalPath (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetLogoAsRandomAccessStreamReference
   (
      this : in out Package_x;
      size : Windows.Foundation.Size
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         m_Interface := QInterface (this.m_IPackage.all);
         Hr := m_Interface.GetLogoAsRandomAccessStreamReference (size, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
         Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
      end return;
   end;

   function GetAppListEntries
   (
      this : in out Package_x
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.GetAppListEntries (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsStub
   (
      this : in out Package_x
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackage8 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackage_Interface, WinRt.Windows.ApplicationModel.IPackage8, WinRt.Windows.ApplicationModel.IID_IPackage8'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackage.all);
      Hr := m_Interface.get_IsStub (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageCatalog

   procedure Initialize (this : in out PackageCatalog) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageCatalog) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageCatalog, IPackageCatalog_Ptr);
   begin
      if this.m_IPackageCatalog /= null then
         if this.m_IPackageCatalog.all /= null then
            RefCount := this.m_IPackageCatalog.all.Release;
            Free (this.m_IPackageCatalog);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PackageCatalog

   function OpenForCurrentPackage
   return WinRt.Windows.ApplicationModel.PackageCatalog is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.PackageCatalog");
      m_Factory        : access WinRt.Windows.ApplicationModel.IPackageCatalogStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackageCatalog;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageCatalog do
         Hr := RoGetActivationFactory (m_hString, IID_IPackageCatalogStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.OpenForCurrentPackage (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPackageCatalog := new Windows.ApplicationModel.IPackageCatalog;
            Retval.m_IPackageCatalog.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function OpenForCurrentUser
   return WinRt.Windows.ApplicationModel.PackageCatalog is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.PackageCatalog");
      m_Factory        : access WinRt.Windows.ApplicationModel.IPackageCatalogStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackageCatalog;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageCatalog do
         Hr := RoGetActivationFactory (m_hString, IID_IPackageCatalogStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.OpenForCurrentUser (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPackageCatalog := new Windows.ApplicationModel.IPackageCatalog;
            Retval.m_IPackageCatalog.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageCatalog

   function add_PackageStaging
   (
      this : in out PackageCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPackageCatalog.all.add_PackageStaging (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageStaging
   (
      this : in out PackageCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPackageCatalog.all.remove_PackageStaging (token);
   end;

   function add_PackageInstalling
   (
      this : in out PackageCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPackageCatalog.all.add_PackageInstalling (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageInstalling
   (
      this : in out PackageCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPackageCatalog.all.remove_PackageInstalling (token);
   end;

   function add_PackageUpdating
   (
      this : in out PackageCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPackageCatalog.all.add_PackageUpdating (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageUpdating
   (
      this : in out PackageCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPackageCatalog.all.remove_PackageUpdating (token);
   end;

   function add_PackageUninstalling
   (
      this : in out PackageCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPackageCatalog.all.add_PackageUninstalling (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageUninstalling
   (
      this : in out PackageCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPackageCatalog.all.remove_PackageUninstalling (token);
   end;

   function add_PackageStatusChanged
   (
      this : in out PackageCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPackageCatalog.all.add_PackageStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PackageStatusChanged
   (
      this : in out PackageCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPackageCatalog.all.remove_PackageStatusChanged (token);
   end;

   function add_PackageContentGroupStaging
   (
      this : in out PackageCatalog;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageCatalog2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageCatalog_Interface, WinRt.Windows.ApplicationModel.IPackageCatalog2, WinRt.Windows.ApplicationModel.IID_IPackageCatalog2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageCatalog.all);
      Hr := m_Interface.add_PackageContentGroupStaging (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PackageContentGroupStaging
   (
      this : in out PackageCatalog;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageCatalog2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageCatalog_Interface, WinRt.Windows.ApplicationModel.IPackageCatalog2, WinRt.Windows.ApplicationModel.IID_IPackageCatalog2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageCatalog.all);
      Hr := m_Interface.remove_PackageContentGroupStaging (token);
      m_RefCount := m_Interface.Release;
   end;

   function AddOptionalPackageAsync
   (
      this : in out PackageCatalog;
      optionalPackageFamilyName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.PackageCatalogAddOptionalPackageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageCatalog2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_optionalPackageFamilyName : WinRt.HString := To_HString (optionalPackageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PackageCatalogAddOptionalPackageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PackageCatalogAddOptionalPackageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.IPackageCatalogAddOptionalPackageResult;
      m_IID            : aliased WinRt.IID := (1504856447, 34539, 21551, (190, 166, 27, 229, 62, 147, 225, 61 )); -- Windows.ApplicationModel.PackageCatalogAddOptionalPackageResult;
      m_HandlerIID     : aliased WinRt.IID := (1818205021, 15396, 20615, (174, 21, 106, 180, 148, 44, 70, 57 ));
      m_Handler        : AsyncOperationCompletedHandler_PackageCatalogAddOptionalPackageResult.Kind := new AsyncOperationCompletedHandler_PackageCatalogAddOptionalPackageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageCatalogAddOptionalPackageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageCatalogAddOptionalPackageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageCatalogAddOptionalPackageResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageCatalogAddOptionalPackageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageCatalog_Interface, WinRt.Windows.ApplicationModel.IPackageCatalog2, WinRt.Windows.ApplicationModel.IID_IPackageCatalog2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageCatalogAddOptionalPackageResult do
         m_Interface := QInterface (this.m_IPackageCatalog.all);
         Hr := m_Interface.AddOptionalPackageAsync (HStr_optionalPackageFamilyName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPackageCatalogAddOptionalPackageResult := new Windows.ApplicationModel.IPackageCatalogAddOptionalPackageResult;
                  Retval.m_IPackageCatalogAddOptionalPackageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_optionalPackageFamilyName);
      end return;
   end;

   function RemoveOptionalPackagesAsync
   (
      this : in out PackageCatalog;
      optionalPackageFamilyNames : GenericObject
   )
   return WinRt.Windows.ApplicationModel.PackageCatalogRemoveOptionalPackagesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageCatalog3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PackageCatalogRemoveOptionalPackagesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PackageCatalogRemoveOptionalPackagesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.IPackageCatalogRemoveOptionalPackagesResult;
      m_IID            : aliased WinRt.IID := (3485563306, 64408, 21743, (142, 168, 100, 73, 147, 71, 183, 247 )); -- Windows.ApplicationModel.PackageCatalogRemoveOptionalPackagesResult;
      m_HandlerIID     : aliased WinRt.IID := (4050149676, 26754, 23692, (164, 100, 126, 162, 94, 38, 152, 118 ));
      m_Handler        : AsyncOperationCompletedHandler_PackageCatalogRemoveOptionalPackagesResult.Kind := new AsyncOperationCompletedHandler_PackageCatalogRemoveOptionalPackagesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageCatalogRemoveOptionalPackagesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageCatalogRemoveOptionalPackagesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageCatalogRemoveOptionalPackagesResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageCatalogRemoveOptionalPackagesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageCatalog_Interface, WinRt.Windows.ApplicationModel.IPackageCatalog3, WinRt.Windows.ApplicationModel.IID_IPackageCatalog3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageCatalogRemoveOptionalPackagesResult do
         m_Interface := QInterface (this.m_IPackageCatalog.all);
         Hr := m_Interface.RemoveOptionalPackagesAsync (optionalPackageFamilyNames, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPackageCatalogRemoveOptionalPackagesResult := new Windows.ApplicationModel.IPackageCatalogRemoveOptionalPackagesResult;
                  Retval.m_IPackageCatalogRemoveOptionalPackagesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function AddResourcePackageAsync
   (
      this : in out PackageCatalog;
      resourcePackageFamilyName : WinRt.WString;
      resourceID : WinRt.WString;
      options : Windows.ApplicationModel.AddResourcePackageOptions
   )
   return WinRt.Windows.ApplicationModel.PackageCatalogAddResourcePackageResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageCatalog4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_resourcePackageFamilyName : WinRt.HString := To_HString (resourcePackageFamilyName);
      HStr_resourceID : WinRt.HString := To_HString (resourceID);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PackageCatalogAddResourcePackageResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PackageCatalogAddResourcePackageResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.IPackageCatalogAddResourcePackageResult;
      m_IID            : aliased WinRt.IID := (2974277688, 52255, 22143, (177, 241, 100, 213, 212, 0, 51, 9 )); -- Windows.ApplicationModel.PackageCatalogAddResourcePackageResult;
      m_HandlerIID     : aliased WinRt.IID := (1996305538, 30284, 22534, (135, 88, 3, 90, 239, 182, 165, 72 ));
      m_Handler        : AsyncOperationCompletedHandler_PackageCatalogAddResourcePackageResult.Kind := new AsyncOperationCompletedHandler_PackageCatalogAddResourcePackageResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageCatalogAddResourcePackageResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageCatalogAddResourcePackageResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageCatalogAddResourcePackageResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageCatalogAddResourcePackageResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageCatalog_Interface, WinRt.Windows.ApplicationModel.IPackageCatalog4, WinRt.Windows.ApplicationModel.IID_IPackageCatalog4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageCatalogAddResourcePackageResult do
         m_Interface := QInterface (this.m_IPackageCatalog.all);
         Hr := m_Interface.AddResourcePackageAsync (HStr_resourcePackageFamilyName, HStr_resourceID, options, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPackageCatalogAddResourcePackageResult := new Windows.ApplicationModel.IPackageCatalogAddResourcePackageResult;
                  Retval.m_IPackageCatalogAddResourcePackageResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_resourcePackageFamilyName);
         Hr := WindowsDeleteString (HStr_resourceID);
      end return;
   end;

   function RemoveResourcePackagesAsync
   (
      this : in out PackageCatalog;
      resourcePackages : GenericObject
   )
   return WinRt.Windows.ApplicationModel.PackageCatalogRemoveResourcePackagesResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageCatalog4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PackageCatalogRemoveResourcePackagesResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PackageCatalogRemoveResourcePackagesResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.IPackageCatalogRemoveResourcePackagesResult;
      m_IID            : aliased WinRt.IID := (875487356, 36206, 21412, (183, 70, 197, 183, 75, 182, 31, 109 )); -- Windows.ApplicationModel.PackageCatalogRemoveResourcePackagesResult;
      m_HandlerIID     : aliased WinRt.IID := (338393303, 23747, 23360, (165, 141, 67, 165, 130, 202, 131, 234 ));
      m_Handler        : AsyncOperationCompletedHandler_PackageCatalogRemoveResourcePackagesResult.Kind := new AsyncOperationCompletedHandler_PackageCatalogRemoveResourcePackagesResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageCatalogRemoveResourcePackagesResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageCatalogRemoveResourcePackagesResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageCatalogRemoveResourcePackagesResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageCatalogRemoveResourcePackagesResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageCatalog_Interface, WinRt.Windows.ApplicationModel.IPackageCatalog4, WinRt.Windows.ApplicationModel.IID_IPackageCatalog4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.PackageCatalogRemoveResourcePackagesResult do
         m_Interface := QInterface (this.m_IPackageCatalog.all);
         Hr := m_Interface.RemoveResourcePackagesAsync (resourcePackages, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPackageCatalogRemoveResourcePackagesResult := new Windows.ApplicationModel.IPackageCatalogRemoveResourcePackagesResult;
                  Retval.m_IPackageCatalogRemoveResourcePackagesResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageCatalogAddOptionalPackageResult

   procedure Initialize (this : in out PackageCatalogAddOptionalPackageResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageCatalogAddOptionalPackageResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageCatalogAddOptionalPackageResult, IPackageCatalogAddOptionalPackageResult_Ptr);
   begin
      if this.m_IPackageCatalogAddOptionalPackageResult /= null then
         if this.m_IPackageCatalogAddOptionalPackageResult.all /= null then
            RefCount := this.m_IPackageCatalogAddOptionalPackageResult.all.Release;
            Free (this.m_IPackageCatalogAddOptionalPackageResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageCatalogAddOptionalPackageResult

   function get_Package
   (
      this : in out PackageCatalogAddOptionalPackageResult
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageCatalogAddOptionalPackageResult.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_ExtendedError
   (
      this : in out PackageCatalogAddOptionalPackageResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageCatalogAddOptionalPackageResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageCatalogAddResourcePackageResult

   procedure Initialize (this : in out PackageCatalogAddResourcePackageResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageCatalogAddResourcePackageResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageCatalogAddResourcePackageResult, IPackageCatalogAddResourcePackageResult_Ptr);
   begin
      if this.m_IPackageCatalogAddResourcePackageResult /= null then
         if this.m_IPackageCatalogAddResourcePackageResult.all /= null then
            RefCount := this.m_IPackageCatalogAddResourcePackageResult.all.Release;
            Free (this.m_IPackageCatalogAddResourcePackageResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageCatalogAddResourcePackageResult

   function get_Package
   (
      this : in out PackageCatalogAddResourcePackageResult
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageCatalogAddResourcePackageResult.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_IsComplete
   (
      this : in out PackageCatalogAddResourcePackageResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageCatalogAddResourcePackageResult.all.get_IsComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out PackageCatalogAddResourcePackageResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageCatalogAddResourcePackageResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageCatalogRemoveOptionalPackagesResult

   procedure Initialize (this : in out PackageCatalogRemoveOptionalPackagesResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageCatalogRemoveOptionalPackagesResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageCatalogRemoveOptionalPackagesResult, IPackageCatalogRemoveOptionalPackagesResult_Ptr);
   begin
      if this.m_IPackageCatalogRemoveOptionalPackagesResult /= null then
         if this.m_IPackageCatalogRemoveOptionalPackagesResult.all /= null then
            RefCount := this.m_IPackageCatalogRemoveOptionalPackagesResult.all.Release;
            Free (this.m_IPackageCatalogRemoveOptionalPackagesResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageCatalogRemoveOptionalPackagesResult

   function get_PackagesRemoved
   (
      this : in out PackageCatalogRemoveOptionalPackagesResult
   )
   return IVectorView_IPackage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPackage.Kind;
   begin
      Hr := this.m_IPackageCatalogRemoveOptionalPackagesResult.all.get_PackagesRemoved (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPackage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExtendedError
   (
      this : in out PackageCatalogRemoveOptionalPackagesResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageCatalogRemoveOptionalPackagesResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageCatalogRemoveResourcePackagesResult

   procedure Initialize (this : in out PackageCatalogRemoveResourcePackagesResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageCatalogRemoveResourcePackagesResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageCatalogRemoveResourcePackagesResult, IPackageCatalogRemoveResourcePackagesResult_Ptr);
   begin
      if this.m_IPackageCatalogRemoveResourcePackagesResult /= null then
         if this.m_IPackageCatalogRemoveResourcePackagesResult.all /= null then
            RefCount := this.m_IPackageCatalogRemoveResourcePackagesResult.all.Release;
            Free (this.m_IPackageCatalogRemoveResourcePackagesResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageCatalogRemoveResourcePackagesResult

   function get_PackagesRemoved
   (
      this : in out PackageCatalogRemoveResourcePackagesResult
   )
   return IVectorView_IPackage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPackage.Kind;
   begin
      Hr := this.m_IPackageCatalogRemoveResourcePackagesResult.all.get_PackagesRemoved (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPackage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExtendedError
   (
      this : in out PackageCatalogRemoveResourcePackagesResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageCatalogRemoveResourcePackagesResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageContentGroup

   procedure Initialize (this : in out PackageContentGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageContentGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageContentGroup, IPackageContentGroup_Ptr);
   begin
      if this.m_IPackageContentGroup /= null then
         if this.m_IPackageContentGroup.all /= null then
            RefCount := this.m_IPackageContentGroup.all.Release;
            Free (this.m_IPackageContentGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PackageContentGroup

   function get_RequiredGroupName
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.PackageContentGroup");
      m_Factory        : access WinRt.Windows.ApplicationModel.IPackageContentGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPackageContentGroupStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_RequiredGroupName (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageContentGroup

   function get_Package
   (
      this : in out PackageContentGroup
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageContentGroup.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Name
   (
      this : in out PackageContentGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageContentGroup.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out PackageContentGroup
   )
   return WinRt.Windows.ApplicationModel.PackageContentGroupState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.PackageContentGroupState;
   begin
      Hr := this.m_IPackageContentGroup.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsRequired
   (
      this : in out PackageContentGroup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageContentGroup.all.get_IsRequired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageContentGroupStagingEventArgs

   procedure Initialize (this : in out PackageContentGroupStagingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageContentGroupStagingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageContentGroupStagingEventArgs, IPackageContentGroupStagingEventArgs_Ptr);
   begin
      if this.m_IPackageContentGroupStagingEventArgs /= null then
         if this.m_IPackageContentGroupStagingEventArgs.all /= null then
            RefCount := this.m_IPackageContentGroupStagingEventArgs.all.Release;
            Free (this.m_IPackageContentGroupStagingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageContentGroupStagingEventArgs

   function get_ActivityId
   (
      this : in out PackageContentGroupStagingEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPackageContentGroupStagingEventArgs.all.get_ActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Package
   (
      this : in out PackageContentGroupStagingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageContentGroupStagingEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Progress
   (
      this : in out PackageContentGroupStagingEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPackageContentGroupStagingEventArgs.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsComplete
   (
      this : in out PackageContentGroupStagingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageContentGroupStagingEventArgs.all.get_IsComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out PackageContentGroupStagingEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageContentGroupStagingEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContentGroupName
   (
      this : in out PackageContentGroupStagingEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageContentGroupStagingEventArgs.all.get_ContentGroupName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsContentGroupRequired
   (
      this : in out PackageContentGroupStagingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageContentGroupStagingEventArgs.all.get_IsContentGroupRequired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageId

   procedure Initialize (this : in out PackageId) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageId) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageId, IPackageId_Ptr);
   begin
      if this.m_IPackageId /= null then
         if this.m_IPackageId.all /= null then
            RefCount := this.m_IPackageId.all.Release;
            Free (this.m_IPackageId);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageId

   function get_Name
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageId.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Version
   (
      this : in out PackageId
   )
   return WinRt.Windows.ApplicationModel.PackageVersion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.PackageVersion;
   begin
      Hr := this.m_IPackageId.all.get_Version (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Architecture
   (
      this : in out PackageId
   )
   return WinRt.Windows.System.ProcessorArchitecture is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.ProcessorArchitecture;
   begin
      Hr := this.m_IPackageId.all.get_Architecture (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResourceId
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageId.all.get_ResourceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Publisher
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageId.all.get_Publisher (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PublisherId
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageId.all.get_PublisherId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FullName
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageId.all.get_FullName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FamilyName
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageId.all.get_FamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProductId
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageIdWithMetadata := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageId_Interface, WinRt.Windows.ApplicationModel.IPackageIdWithMetadata, WinRt.Windows.ApplicationModel.IID_IPackageIdWithMetadata'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageId.all);
      Hr := m_Interface.get_ProductId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Author
   (
      this : in out PackageId
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageIdWithMetadata := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageId_Interface, WinRt.Windows.ApplicationModel.IPackageIdWithMetadata, WinRt.Windows.ApplicationModel.IID_IPackageIdWithMetadata'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageId.all);
      Hr := m_Interface.get_Author (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageInstallingEventArgs

   procedure Initialize (this : in out PackageInstallingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageInstallingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageInstallingEventArgs, IPackageInstallingEventArgs_Ptr);
   begin
      if this.m_IPackageInstallingEventArgs /= null then
         if this.m_IPackageInstallingEventArgs.all /= null then
            RefCount := this.m_IPackageInstallingEventArgs.all.Release;
            Free (this.m_IPackageInstallingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageInstallingEventArgs

   function get_ActivityId
   (
      this : in out PackageInstallingEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPackageInstallingEventArgs.all.get_ActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Package
   (
      this : in out PackageInstallingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageInstallingEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Progress
   (
      this : in out PackageInstallingEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPackageInstallingEventArgs.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsComplete
   (
      this : in out PackageInstallingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageInstallingEventArgs.all.get_IsComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out PackageInstallingEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageInstallingEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageStagingEventArgs

   procedure Initialize (this : in out PackageStagingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageStagingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageStagingEventArgs, IPackageStagingEventArgs_Ptr);
   begin
      if this.m_IPackageStagingEventArgs /= null then
         if this.m_IPackageStagingEventArgs.all /= null then
            RefCount := this.m_IPackageStagingEventArgs.all.Release;
            Free (this.m_IPackageStagingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageStagingEventArgs

   function get_ActivityId
   (
      this : in out PackageStagingEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPackageStagingEventArgs.all.get_ActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Package
   (
      this : in out PackageStagingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageStagingEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Progress
   (
      this : in out PackageStagingEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPackageStagingEventArgs.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsComplete
   (
      this : in out PackageStagingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStagingEventArgs.all.get_IsComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out PackageStagingEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageStagingEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageStatus

   procedure Initialize (this : in out PackageStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageStatus, IPackageStatus_Ptr);
   begin
      if this.m_IPackageStatus /= null then
         if this.m_IPackageStatus.all /= null then
            RefCount := this.m_IPackageStatus.all.Release;
            Free (this.m_IPackageStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageStatus

   function VerifyIsOK
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.VerifyIsOK (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NotAvailable
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_NotAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PackageOffline
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_PackageOffline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DataOffline
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_DataOffline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Disabled
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_Disabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NeedsRemediation
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_NeedsRemediation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LicenseIssue
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_LicenseIssue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Modified
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_Modified (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Tampered
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_Tampered (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DependencyIssue
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_DependencyIssue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Servicing
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_Servicing (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeploymentInProgress
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageStatus.all.get_DeploymentInProgress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPartiallyStaged
   (
      this : in out PackageStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.IPackageStatus2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.IPackageStatus_Interface, WinRt.Windows.ApplicationModel.IPackageStatus2, WinRt.Windows.ApplicationModel.IID_IPackageStatus2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageStatus.all);
      Hr := m_Interface.get_IsPartiallyStaged (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageStatusChangedEventArgs

   procedure Initialize (this : in out PackageStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageStatusChangedEventArgs, IPackageStatusChangedEventArgs_Ptr);
   begin
      if this.m_IPackageStatusChangedEventArgs /= null then
         if this.m_IPackageStatusChangedEventArgs.all /= null then
            RefCount := this.m_IPackageStatusChangedEventArgs.all.Release;
            Free (this.m_IPackageStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageStatusChangedEventArgs

   function get_Package
   (
      this : in out PackageStatusChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageStatusChangedEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageUninstallingEventArgs

   procedure Initialize (this : in out PackageUninstallingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageUninstallingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageUninstallingEventArgs, IPackageUninstallingEventArgs_Ptr);
   begin
      if this.m_IPackageUninstallingEventArgs /= null then
         if this.m_IPackageUninstallingEventArgs.all /= null then
            RefCount := this.m_IPackageUninstallingEventArgs.all.Release;
            Free (this.m_IPackageUninstallingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageUninstallingEventArgs

   function get_ActivityId
   (
      this : in out PackageUninstallingEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPackageUninstallingEventArgs.all.get_ActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Package
   (
      this : in out PackageUninstallingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageUninstallingEventArgs.all.get_Package (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Progress
   (
      this : in out PackageUninstallingEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPackageUninstallingEventArgs.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsComplete
   (
      this : in out PackageUninstallingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageUninstallingEventArgs.all.get_IsComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out PackageUninstallingEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageUninstallingEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageUpdateAvailabilityResult

   procedure Initialize (this : in out PackageUpdateAvailabilityResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageUpdateAvailabilityResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageUpdateAvailabilityResult, IPackageUpdateAvailabilityResult_Ptr);
   begin
      if this.m_IPackageUpdateAvailabilityResult /= null then
         if this.m_IPackageUpdateAvailabilityResult.all /= null then
            RefCount := this.m_IPackageUpdateAvailabilityResult.all.Release;
            Free (this.m_IPackageUpdateAvailabilityResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageUpdateAvailabilityResult

   function get_Availability
   (
      this : in out PackageUpdateAvailabilityResult
   )
   return WinRt.Windows.ApplicationModel.PackageUpdateAvailability is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.PackageUpdateAvailability;
   begin
      Hr := this.m_IPackageUpdateAvailabilityResult.all.get_Availability (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out PackageUpdateAvailabilityResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageUpdateAvailabilityResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageUpdatingEventArgs

   procedure Initialize (this : in out PackageUpdatingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageUpdatingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageUpdatingEventArgs, IPackageUpdatingEventArgs_Ptr);
   begin
      if this.m_IPackageUpdatingEventArgs /= null then
         if this.m_IPackageUpdatingEventArgs.all /= null then
            RefCount := this.m_IPackageUpdatingEventArgs.all.Release;
            Free (this.m_IPackageUpdatingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageUpdatingEventArgs

   function get_ActivityId
   (
      this : in out PackageUpdatingEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IPackageUpdatingEventArgs.all.get_ActivityId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SourcePackage
   (
      this : in out PackageUpdatingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageUpdatingEventArgs.all.get_SourcePackage (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_TargetPackage
   (
      this : in out PackageUpdatingEventArgs
   )
   return WinRt.Windows.ApplicationModel.Package_x'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.IPackage;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Package_x do
         Hr := this.m_IPackageUpdatingEventArgs.all.get_TargetPackage (m_ComRetVal'Access);
         Retval.m_IPackage := new Windows.ApplicationModel.IPackage;
         Retval.m_IPackage.all := m_ComRetVal;
      end return;
   end;

   function get_Progress
   (
      this : in out PackageUpdatingEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPackageUpdatingEventArgs.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsComplete
   (
      this : in out PackageUpdatingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPackageUpdatingEventArgs.all.get_IsComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out PackageUpdatingEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IPackageUpdatingEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StartupTask

   procedure Initialize (this : in out StartupTask) is
   begin
      null;
   end;

   procedure Finalize (this : in out StartupTask) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStartupTask, IStartupTask_Ptr);
   begin
      if this.m_IStartupTask /= null then
         if this.m_IStartupTask.all /= null then
            RefCount := this.m_IStartupTask.all.Release;
            Free (this.m_IStartupTask);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for StartupTask

   function GetForCurrentPackageAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.StartupTask");
      m_Factory        : access WinRt.Windows.ApplicationModel.IStartupTaskStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (374616421, 23397, 22147, (138, 2, 195, 133, 101, 145, 88, 189 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (366217109, 16889, 20695, (163, 158, 83, 144, 152, 26, 246, 81 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IStartupTaskStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetForCurrentPackageAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetAsync
   (
      taskId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.StartupTask is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.StartupTask");
      m_Factory        : access WinRt.Windows.ApplicationModel.IStartupTaskStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_taskId : WinRt.HString := To_HString (taskId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StartupTask.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StartupTask.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.IStartupTask;
      m_IID            : aliased WinRt.IID := (3421272654, 41030, 21296, (135, 61, 15, 206, 34, 135, 146, 250 )); -- Windows.ApplicationModel.StartupTask;
      m_HandlerIID     : aliased WinRt.IID := (1948219031, 9298, 23680, (131, 198, 59, 111, 130, 43, 144, 76 ));
      m_Handler        : AsyncOperationCompletedHandler_StartupTask.Kind := new AsyncOperationCompletedHandler_StartupTask.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StartupTask.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StartupTask.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StartupTask.Kind_Delegate, AsyncOperationCompletedHandler_StartupTask.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.StartupTask do
         Hr := RoGetActivationFactory (m_hString, IID_IStartupTaskStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAsync (HStr_taskId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IStartupTask := new Windows.ApplicationModel.IStartupTask;
                     Retval.m_IStartupTask.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_taskId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StartupTask

   function RequestEnableAsync
   (
      this : in out StartupTask
   )
   return WinRt.Windows.ApplicationModel.StartupTaskState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StartupTaskState.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StartupTaskState.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.StartupTaskState;
      m_IID            : aliased WinRt.IID := (1379510580, 32994, 20879, (184, 25, 31, 49, 111, 55, 154, 63 )); -- Windows.ApplicationModel.StartupTaskState;
      m_HandlerIID     : aliased WinRt.IID := (1889582951, 6632, 23174, (163, 46, 60, 152, 99, 130, 90, 4 ));
      m_Handler        : AsyncOperationCompletedHandler_StartupTaskState.Kind := new AsyncOperationCompletedHandler_StartupTaskState.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StartupTaskState.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StartupTaskState.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StartupTaskState.Kind_Delegate, AsyncOperationCompletedHandler_StartupTaskState.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IStartupTask.all.RequestEnableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Disable
   (
      this : in out StartupTask
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStartupTask.all.Disable;
   end;

   function get_State
   (
      this : in out StartupTask
   )
   return WinRt.Windows.ApplicationModel.StartupTaskState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.StartupTaskState;
   begin
      Hr := this.m_IStartupTask.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TaskId
   (
      this : in out StartupTask
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStartupTask.all.get_TaskId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SuspendingDeferral

   procedure Initialize (this : in out SuspendingDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out SuspendingDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISuspendingDeferral, ISuspendingDeferral_Ptr);
   begin
      if this.m_ISuspendingDeferral /= null then
         if this.m_ISuspendingDeferral.all /= null then
            RefCount := this.m_ISuspendingDeferral.all.Release;
            Free (this.m_ISuspendingDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SuspendingDeferral

   procedure Complete
   (
      this : in out SuspendingDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISuspendingDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SuspendingEventArgs

   procedure Initialize (this : in out SuspendingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SuspendingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISuspendingEventArgs, ISuspendingEventArgs_Ptr);
   begin
      if this.m_ISuspendingEventArgs /= null then
         if this.m_ISuspendingEventArgs.all /= null then
            RefCount := this.m_ISuspendingEventArgs.all.Release;
            Free (this.m_ISuspendingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SuspendingEventArgs

   function get_SuspendingOperation
   (
      this : in out SuspendingEventArgs
   )
   return WinRt.Windows.ApplicationModel.SuspendingOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ISuspendingOperation;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SuspendingOperation do
         Hr := this.m_ISuspendingEventArgs.all.get_SuspendingOperation (m_ComRetVal'Access);
         Retval.m_ISuspendingOperation := new Windows.ApplicationModel.ISuspendingOperation;
         Retval.m_ISuspendingOperation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SuspendingOperation

   procedure Initialize (this : in out SuspendingOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SuspendingOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISuspendingOperation, ISuspendingOperation_Ptr);
   begin
      if this.m_ISuspendingOperation /= null then
         if this.m_ISuspendingOperation.all /= null then
            RefCount := this.m_ISuspendingOperation.all.Release;
            Free (this.m_ISuspendingOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SuspendingOperation

   function GetDeferral
   (
      this : in out SuspendingOperation
   )
   return WinRt.Windows.ApplicationModel.SuspendingDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ISuspendingDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.SuspendingDeferral do
         Hr := this.m_ISuspendingOperation.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_ISuspendingDeferral := new Windows.ApplicationModel.ISuspendingDeferral;
         Retval.m_ISuspendingDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_Deadline
   (
      this : in out SuspendingOperation
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISuspendingOperation.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

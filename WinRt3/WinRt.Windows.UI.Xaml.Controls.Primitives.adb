--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.UI.Xaml.Data;
with WinRt.Windows.UI.Xaml.Input;
with WinRt.Windows.UI.Xaml.Interop;
with WinRt.Windows.UI.Xaml.Media;
with WinRt.Windows.UI.Xaml.Media.Animation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Controls.Primitives is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ButtonBase

   procedure Initialize (this : in out ButtonBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out ButtonBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IButtonBase, IButtonBase_Ptr);
   begin
      if this.m_IButtonBase /= null then
         if this.m_IButtonBase.all /= null then
            RefCount := this.m_IButtonBase.all.Release;
            Free (this.m_IButtonBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ButtonBase

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ButtonBase is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ButtonBase");
      m_Factory    : access IButtonBaseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IButtonBase;
   begin
      return RetVal : ButtonBase do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonBaseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IButtonBase := new Windows.UI.Xaml.Controls.Primitives.IButtonBase;
            Retval.m_IButtonBase.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ButtonBase

   function get_ClickModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ButtonBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IButtonBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ClickModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsPointerOverProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ButtonBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IButtonBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsPointerOverProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsPressedProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ButtonBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IButtonBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsPressedProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CommandProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ButtonBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IButtonBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CommandProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CommandParameterProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ButtonBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IButtonBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IButtonBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CommandParameterProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ButtonBase

   function get_ClickMode
   (
      this : in out ButtonBase
   )
   return WinRt.Windows.UI.Xaml.Controls.ClickMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.ClickMode;
   begin
      Hr := this.m_IButtonBase.all.get_ClickMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ClickMode
   (
      this : in out ButtonBase;
      value : Windows.UI.Xaml.Controls.ClickMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IButtonBase.all.put_ClickMode (value);
   end;

   function get_IsPointerOver
   (
      this : in out ButtonBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IButtonBase.all.get_IsPointerOver (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsPressed
   (
      this : in out ButtonBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IButtonBase.all.get_IsPressed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Command
   (
      this : in out ButtonBase
   )
   return WinRt.Windows.UI.Xaml.Input.ICommand is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Input.ICommand;
   begin
      Hr := this.m_IButtonBase.all.get_Command (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Command
   (
      this : in out ButtonBase;
      value : Windows.UI.Xaml.Input.ICommand
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IButtonBase.all.put_Command (value);
   end;

   function get_CommandParameter
   (
      this : in out ButtonBase
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IButtonBase.all.get_CommandParameter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CommandParameter
   (
      this : in out ButtonBase;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IButtonBase.all.put_CommandParameter (value);
   end;

   function add_Click
   (
      this : in out ButtonBase;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IButtonBase.all.add_Click (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Click
   (
      this : in out ButtonBase;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IButtonBase.all.remove_Click (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToggleButton

   procedure Initialize (this : in out ToggleButton) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToggleButton) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToggleButton, IToggleButton_Ptr);
   begin
      if this.m_IToggleButton /= null then
         if this.m_IToggleButton.all /= null then
            RefCount := this.m_IToggleButton.all.Release;
            Free (this.m_IToggleButton);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToggleButton

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ToggleButton is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ToggleButton");
      m_Factory    : access IToggleButtonFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IToggleButton;
   begin
      return RetVal : ToggleButton do
         Hr := RoGetActivationFactory (m_hString, IID_IToggleButtonFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IToggleButton := new Windows.UI.Xaml.Controls.Primitives.IToggleButton;
            Retval.m_IToggleButton.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ToggleButton

   function get_IsCheckedProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ToggleButton");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IToggleButtonStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IToggleButtonStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsCheckedProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsThreeStateProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ToggleButton");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IToggleButtonStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IToggleButtonStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsThreeStateProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToggleButton

   function get_IsChecked
   (
      this : in out ToggleButton
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
   begin
      Hr := this.m_IToggleButton.all.get_IsChecked (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsChecked
   (
      this : in out ToggleButton;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToggleButton.all.put_IsChecked (value);
   end;

   function get_IsThreeState
   (
      this : in out ToggleButton
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IToggleButton.all.get_IsThreeState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsThreeState
   (
      this : in out ToggleButton;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToggleButton.all.put_IsThreeState (value);
   end;

   function add_Checked
   (
      this : in out ToggleButton;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IToggleButton.all.add_Checked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Checked
   (
      this : in out ToggleButton;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToggleButton.all.remove_Checked (token);
   end;

   function add_Unchecked
   (
      this : in out ToggleButton;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IToggleButton.all.add_Unchecked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Unchecked
   (
      this : in out ToggleButton;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToggleButton.all.remove_Unchecked (token);
   end;

   function add_Indeterminate
   (
      this : in out ToggleButton;
      handler : Windows.UI.Xaml.RoutedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IToggleButton.all.add_Indeterminate (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Indeterminate
   (
      this : in out ToggleButton;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IToggleButton.all.remove_Indeterminate (token);
   end;

   procedure OnToggle
   (
      this : in out ToggleButton
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IToggleButtonOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IToggleButton_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IToggleButtonOverrides, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IToggleButtonOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IToggleButton.all);
      Hr := m_Interface.OnToggle;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Selector

   procedure Initialize (this : in out Selector) is
   begin
      null;
   end;

   procedure Finalize (this : in out Selector) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISelector, ISelector_Ptr);
   begin
      if this.m_ISelector /= null then
         if this.m_ISelector.all /= null then
            RefCount := this.m_ISelector.all.Release;
            Free (this.m_ISelector);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Selector

   -----------------------------------------------------------------------------
   -- Static Interfaces for Selector

   function get_SelectedIndexProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Selector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ISelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedIndexProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedItemProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Selector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ISelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedItemProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedValueProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Selector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ISelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedValueProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedValuePathProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Selector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ISelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedValuePathProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsSynchronizedWithCurrentItemProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Selector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ISelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsSynchronizedWithCurrentItemProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetIsSelectionActive
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Selector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ISelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISelectorStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetIsSelectionActive (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Selector

   function get_SelectedIndex
   (
      this : in out Selector
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISelector.all.get_SelectedIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedIndex
   (
      this : in out Selector;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISelector.all.put_SelectedIndex (value);
   end;

   function get_SelectedItem
   (
      this : in out Selector
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ISelector.all.get_SelectedItem (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedItem
   (
      this : in out Selector;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISelector.all.put_SelectedItem (value);
   end;

   function get_SelectedValue
   (
      this : in out Selector
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ISelector.all.get_SelectedValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedValue
   (
      this : in out Selector;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISelector.all.put_SelectedValue (value);
   end;

   function get_SelectedValuePath
   (
      this : in out Selector
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISelector.all.get_SelectedValuePath (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SelectedValuePath
   (
      this : in out Selector;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISelector.all.put_SelectedValuePath (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsSynchronizedWithCurrentItem
   (
      this : in out Selector
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
   begin
      Hr := this.m_ISelector.all.get_IsSynchronizedWithCurrentItem (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_IsSynchronizedWithCurrentItem
   (
      this : in out Selector;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISelector.all.put_IsSynchronizedWithCurrentItem (value);
   end;

   function add_SelectionChanged
   (
      this : in out Selector;
      handler : Windows.UI.Xaml.Controls.SelectionChangedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISelector.all.add_SelectionChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SelectionChanged
   (
      this : in out Selector;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISelector.all.remove_SelectionChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SelectorItem

   procedure Initialize (this : in out SelectorItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out SelectorItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISelectorItem, ISelectorItem_Ptr);
   begin
      if this.m_ISelectorItem /= null then
         if this.m_ISelectorItem.all /= null then
            RefCount := this.m_ISelectorItem.all.Release;
            Free (this.m_ISelectorItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SelectorItem

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return SelectorItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.SelectorItem");
      m_Factory    : access ISelectorItemFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.ISelectorItem;
   begin
      return RetVal : SelectorItem do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorItemFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ISelectorItem := new Windows.UI.Xaml.Controls.Primitives.ISelectorItem;
            Retval.m_ISelectorItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SelectorItem

   function get_IsSelectedProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.SelectorItem");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ISelectorItemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ISelectorItemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsSelectedProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SelectorItem

   function get_IsSelected
   (
      this : in out SelectorItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISelectorItem.all.get_IsSelected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSelected
   (
      this : in out SelectorItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISelectorItem.all.put_IsSelected (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlyoutBase

   procedure Initialize (this : in out FlyoutBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlyoutBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlyoutBase, IFlyoutBase_Ptr);
   begin
      if this.m_IFlyoutBase /= null then
         if this.m_IFlyoutBase.all /= null then
            RefCount := this.m_IFlyoutBase.all.Release;
            Free (this.m_IFlyoutBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FlyoutBase

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FlyoutBase is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory    : access IFlyoutBaseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IFlyoutBase;
   begin
      return RetVal : FlyoutBase do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFlyoutBase := new Windows.UI.Xaml.Controls.Primitives.IFlyoutBase;
            Retval.m_IFlyoutBase.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FlyoutBase

   function get_AllowFocusOnInteractionProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllowFocusOnInteractionProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_LightDismissOverlayModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LightDismissOverlayModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AllowFocusWhenDisabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AllowFocusWhenDisabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ElementSoundModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ElementSoundModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ShouldConstrainToRootBoundsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics6_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics6'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShouldConstrainToRootBoundsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PlacementProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PlacementProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AttachedFlyoutProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AttachedFlyoutProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetAttachedFlyout
   (
      element : Windows.UI.Xaml.FrameworkElement'Class
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.FlyoutBase is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.IFlyoutBase;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Controls.Primitives.FlyoutBase do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAttachedFlyout (element.m_IFrameworkElement.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IFlyoutBase := new Windows.UI.Xaml.Controls.Primitives.IFlyoutBase;
            Retval.m_IFlyoutBase.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetAttachedFlyout
   (
      element : Windows.UI.Xaml.FrameworkElement'Class;
      value : Windows.UI.Xaml.Controls.Primitives.FlyoutBase'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetAttachedFlyout (element.m_IFrameworkElement.all, value.m_IFlyoutBase.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure ShowAttachedFlyout
   (
      flyoutOwner : Windows.UI.Xaml.FrameworkElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowAttachedFlyout (flyoutOwner.m_IFrameworkElement.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_TargetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics5_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TargetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ShowModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics5_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShowModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_InputDevicePrefersPrimaryCommandsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics5_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_InputDevicePrefersPrimaryCommandsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_AreOpenCloseAnimationsEnabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics5_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AreOpenCloseAnimationsEnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsOpenProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics5_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsOpenProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_OverlayInputPassThroughElementProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutBaseStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OverlayInputPassThroughElementProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlyoutBase

   function get_Placement
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode;
   begin
      Hr := this.m_IFlyoutBase.all.get_Placement (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Placement
   (
      this : in out FlyoutBase;
      value : Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutBase.all.put_Placement (value);
   end;

   function add_Opened
   (
      this : in out FlyoutBase;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IFlyoutBase.all.add_Opened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Opened
   (
      this : in out FlyoutBase;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutBase.all.remove_Opened (token);
   end;

   function add_Closed
   (
      this : in out FlyoutBase;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IFlyoutBase.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out FlyoutBase;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutBase.all.remove_Closed (token);
   end;

   function add_Opening
   (
      this : in out FlyoutBase;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IFlyoutBase.all.add_Opening (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Opening
   (
      this : in out FlyoutBase;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutBase.all.remove_Opening (token);
   end;

   procedure ShowAt
   (
      this : in out FlyoutBase;
      placementTarget : Windows.UI.Xaml.FrameworkElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutBase.all.ShowAt (placementTarget.m_IFrameworkElement.all);
   end;

   procedure Hide
   (
      this : in out FlyoutBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutBase.all.Hide;
   end;

   function get_Target
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.FrameworkElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IFrameworkElement;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.FrameworkElement do
         m_Interface := QInterface (this.m_IFlyoutBase.all);
         Hr := m_Interface.get_Target (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IFrameworkElement := new Windows.UI.Xaml.IFrameworkElement;
         Retval.m_IFrameworkElement.all := m_ComRetVal;
      end return;
   end;

   function get_AllowFocusOnInteraction
   (
      this : in out FlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_AllowFocusOnInteraction (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AllowFocusOnInteraction
   (
      this : in out FlyoutBase;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_AllowFocusOnInteraction (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_LightDismissOverlayMode
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.Controls.LightDismissOverlayMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.LightDismissOverlayMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_LightDismissOverlayMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LightDismissOverlayMode
   (
      this : in out FlyoutBase;
      value : Windows.UI.Xaml.Controls.LightDismissOverlayMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_LightDismissOverlayMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AllowFocusWhenDisabled
   (
      this : in out FlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_AllowFocusWhenDisabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AllowFocusWhenDisabled
   (
      this : in out FlyoutBase;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_AllowFocusWhenDisabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ElementSoundMode
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.ElementSoundMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.ElementSoundMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_ElementSoundMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ElementSoundMode
   (
      this : in out FlyoutBase;
      value : Windows.UI.Xaml.ElementSoundMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_ElementSoundMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function add_Closing
   (
      this : in out FlyoutBase;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.add_Closing (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closing
   (
      this : in out FlyoutBase;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.remove_Closing (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_OverlayInputPassThroughElement
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.DependencyObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyObject do
         m_Interface := QInterface (this.m_IFlyoutBase.all);
         Hr := m_Interface.get_OverlayInputPassThroughElement (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDependencyObject := new Windows.UI.Xaml.IDependencyObject;
         Retval.m_IDependencyObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_OverlayInputPassThroughElement
   (
      this : in out FlyoutBase;
      value : Windows.UI.Xaml.DependencyObject'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_OverlayInputPassThroughElement (value.m_IDependencyObject.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure TryInvokeKeyboardAccelerator
   (
      this : in out FlyoutBase;
      args : Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase4, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.TryInvokeKeyboardAccelerator (args.m_IProcessKeyboardAcceleratorEventArgs.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ShowMode
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.FlyoutShowMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.FlyoutShowMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_ShowMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ShowMode
   (
      this : in out FlyoutBase;
      value : Windows.UI.Xaml.Controls.Primitives.FlyoutShowMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_ShowMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_InputDevicePrefersPrimaryCommands
   (
      this : in out FlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_InputDevicePrefersPrimaryCommands (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AreOpenCloseAnimationsEnabled
   (
      this : in out FlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_AreOpenCloseAnimationsEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AreOpenCloseAnimationsEnabled
   (
      this : in out FlyoutBase;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_AreOpenCloseAnimationsEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsOpen
   (
      this : in out FlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_IsOpen (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ShowAt
   (
      this : in out FlyoutBase;
      placementTarget : Windows.UI.Xaml.DependencyObject'Class;
      showOptions : Windows.UI.Xaml.Controls.Primitives.FlyoutShowOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.ShowAt (placementTarget.m_IDependencyObject.all, showOptions.m_IFlyoutShowOptions.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ShouldConstrainToRootBounds
   (
      this : in out FlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_ShouldConstrainToRootBounds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ShouldConstrainToRootBounds
   (
      this : in out FlyoutBase;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_ShouldConstrainToRootBounds (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsConstrainedToRootBounds
   (
      this : in out FlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.get_IsConstrainedToRootBounds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_XamlRoot
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.XamlRoot'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IXamlRoot;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.XamlRoot do
         m_Interface := QInterface (this.m_IFlyoutBase.all);
         Hr := m_Interface.get_XamlRoot (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IXamlRoot := new Windows.UI.Xaml.IXamlRoot;
         Retval.m_IXamlRoot.all := m_ComRetVal;
      end return;
   end;

   procedure put_XamlRoot
   (
      this : in out FlyoutBase;
      value : Windows.UI.Xaml.XamlRoot'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBase6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.put_XamlRoot (value.m_IXamlRoot.all);
      m_RefCount := m_Interface.Release;
   end;

   function CreatePresenter
   (
      this : in out FlyoutBase
   )
   return WinRt.Windows.UI.Xaml.Controls.Control'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.IControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBaseOverrides'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Controls.Control do
         m_Interface := QInterface (this.m_IFlyoutBase.all);
         Hr := m_Interface.CreatePresenter (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IControl := new Windows.UI.Xaml.Controls.IControl;
         Retval.m_IControl.all := m_ComRetVal;
      end return;
   end;

   procedure OnProcessKeyboardAccelerators
   (
      this : in out FlyoutBase;
      args : Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides4, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IFlyoutBaseOverrides4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFlyoutBase.all);
      Hr := m_Interface.OnProcessKeyboardAccelerators (args.m_IProcessKeyboardAcceleratorEventArgs.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PickerFlyoutBase

   procedure Initialize (this : in out PickerFlyoutBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out PickerFlyoutBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPickerFlyoutBase, IPickerFlyoutBase_Ptr);
   begin
      if this.m_IPickerFlyoutBase /= null then
         if this.m_IPickerFlyoutBase.all /= null then
            RefCount := this.m_IPickerFlyoutBase.all.Release;
            Free (this.m_IPickerFlyoutBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PickerFlyoutBase

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return PickerFlyoutBase is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.PickerFlyoutBase");
      m_Factory    : access IPickerFlyoutBaseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBase;
   begin
      return RetVal : PickerFlyoutBase do
         Hr := RoGetActivationFactory (m_hString, IID_IPickerFlyoutBaseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IPickerFlyoutBase := new Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBase;
            Retval.m_IPickerFlyoutBase.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PickerFlyoutBase

   function get_TitleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.PickerFlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPickerFlyoutBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TitleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetTitle
   (
      element : Windows.UI.Xaml.DependencyObject'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.PickerFlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPickerFlyoutBaseStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetTitle (element.m_IDependencyObject.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetTitle
   (
      element : Windows.UI.Xaml.DependencyObject'Class;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.PickerFlyoutBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPickerFlyoutBaseStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetTitle (element.m_IDependencyObject.all, HStr_value);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PickerFlyoutBase

   procedure OnConfirmed
   (
      this : in out PickerFlyoutBase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IPickerFlyoutBaseOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPickerFlyoutBase.all);
      Hr := m_Interface.OnConfirmed;
      m_RefCount := m_Interface.Release;
   end;

   function ShouldShowConfirmationButtons
   (
      this : in out PickerFlyoutBase
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IPickerFlyoutBaseOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPickerFlyoutBase.all);
      Hr := m_Interface.ShouldShowConfirmationButtons (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBarButtonTemplateSettings

   procedure Initialize (this : in out AppBarButtonTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBarButtonTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBarButtonTemplateSettings, IAppBarButtonTemplateSettings_Ptr);
   begin
      if this.m_IAppBarButtonTemplateSettings /= null then
         if this.m_IAppBarButtonTemplateSettings.all /= null then
            RefCount := this.m_IAppBarButtonTemplateSettings.all.Release;
            Free (this.m_IAppBarButtonTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBarButtonTemplateSettings

   function get_KeyboardAcceleratorTextMinWidth
   (
      this : in out AppBarButtonTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppBarButtonTemplateSettings.all.get_KeyboardAcceleratorTextMinWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBarTemplateSettings

   procedure Initialize (this : in out AppBarTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBarTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBarTemplateSettings, IAppBarTemplateSettings_Ptr);
   begin
      if this.m_IAppBarTemplateSettings /= null then
         if this.m_IAppBarTemplateSettings.all /= null then
            RefCount := this.m_IAppBarTemplateSettings.all.Release;
            Free (this.m_IAppBarTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBarTemplateSettings

   function get_ClipRect
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IAppBarTemplateSettings.all.get_ClipRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CompactVerticalDelta
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppBarTemplateSettings.all.get_CompactVerticalDelta (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CompactRootMargin
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IAppBarTemplateSettings.all.get_CompactRootMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinimalVerticalDelta
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppBarTemplateSettings.all.get_MinimalVerticalDelta (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinimalRootMargin
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IAppBarTemplateSettings.all.get_MinimalRootMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HiddenVerticalDelta
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppBarTemplateSettings.all.get_HiddenVerticalDelta (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HiddenRootMargin
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IAppBarTemplateSettings.all.get_HiddenRootMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NegativeCompactVerticalDelta
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IAppBarTemplateSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarTemplateSettings.all);
      Hr := m_Interface.get_NegativeCompactVerticalDelta (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NegativeMinimalVerticalDelta
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IAppBarTemplateSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarTemplateSettings.all);
      Hr := m_Interface.get_NegativeMinimalVerticalDelta (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_NegativeHiddenVerticalDelta
   (
      this : in out AppBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IAppBarTemplateSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBarTemplateSettings.all);
      Hr := m_Interface.get_NegativeHiddenVerticalDelta (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBarToggleButtonTemplateSettings

   procedure Initialize (this : in out AppBarToggleButtonTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBarToggleButtonTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBarToggleButtonTemplateSettings, IAppBarToggleButtonTemplateSettings_Ptr);
   begin
      if this.m_IAppBarToggleButtonTemplateSettings /= null then
         if this.m_IAppBarToggleButtonTemplateSettings.all /= null then
            RefCount := this.m_IAppBarToggleButtonTemplateSettings.all.Release;
            Free (this.m_IAppBarToggleButtonTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBarToggleButtonTemplateSettings

   function get_KeyboardAcceleratorTextMinWidth
   (
      this : in out AppBarToggleButtonTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppBarToggleButtonTemplateSettings.all.get_KeyboardAcceleratorTextMinWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CalendarPanel

   procedure Initialize (this : in out CalendarPanel) is
   begin
      null;
   end;

   procedure Finalize (this : in out CalendarPanel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICalendarPanel, ICalendarPanel_Ptr);
   begin
      if this.m_ICalendarPanel /= null then
         if this.m_ICalendarPanel.all /= null then
            RefCount := this.m_ICalendarPanel.all.Release;
            Free (this.m_ICalendarPanel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CalendarPanel

   function Constructor return CalendarPanel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.CalendarPanel");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.ICalendarPanel;
   begin
      return RetVal : CalendarPanel do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICalendarPanel := new Windows.UI.Xaml.Controls.Primitives.ICalendarPanel;
            Retval.m_ICalendarPanel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CalendarPanel

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CalendarViewTemplateSettings

   procedure Initialize (this : in out CalendarViewTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out CalendarViewTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICalendarViewTemplateSettings, ICalendarViewTemplateSettings_Ptr);
   begin
      if this.m_ICalendarViewTemplateSettings /= null then
         if this.m_ICalendarViewTemplateSettings.all /= null then
            RefCount := this.m_ICalendarViewTemplateSettings.all.Release;
            Free (this.m_ICalendarViewTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CalendarViewTemplateSettings

   function get_MinViewWidth
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_MinViewWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HeaderText
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_HeaderText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WeekDay1
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_WeekDay1 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WeekDay2
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_WeekDay2 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WeekDay3
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_WeekDay3 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WeekDay4
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_WeekDay4 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WeekDay5
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_WeekDay5 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WeekDay6
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_WeekDay6 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WeekDay7
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_WeekDay7 (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HasMoreContentAfter
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_HasMoreContentAfter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasMoreContentBefore
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_HasMoreContentBefore (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasMoreViews
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_HasMoreViews (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ClipRect
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_ClipRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CenterX
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_CenterX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CenterY
   (
      this : in out CalendarViewTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICalendarViewTemplateSettings.all.get_CenterY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CarouselPanel

   procedure Initialize (this : in out CarouselPanel) is
   begin
      null;
   end;

   procedure Finalize (this : in out CarouselPanel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICarouselPanel, ICarouselPanel_Ptr);
   begin
      if this.m_ICarouselPanel /= null then
         if this.m_ICarouselPanel.all /= null then
            RefCount := this.m_ICarouselPanel.all.Release;
            Free (this.m_ICarouselPanel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CarouselPanel

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CarouselPanel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.CarouselPanel");
      m_Factory    : access ICarouselPanelFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.ICarouselPanel;
   begin
      return RetVal : CarouselPanel do
         Hr := RoGetActivationFactory (m_hString, IID_ICarouselPanelFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICarouselPanel := new Windows.UI.Xaml.Controls.Primitives.ICarouselPanel;
            Retval.m_ICarouselPanel.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CarouselPanel

   function get_CanVerticallyScroll
   (
      this : in out CarouselPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICarouselPanel.all.get_CanVerticallyScroll (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CanVerticallyScroll
   (
      this : in out CarouselPanel;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.put_CanVerticallyScroll (value);
   end;

   function get_CanHorizontallyScroll
   (
      this : in out CarouselPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICarouselPanel.all.get_CanHorizontallyScroll (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CanHorizontallyScroll
   (
      this : in out CarouselPanel;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.put_CanHorizontallyScroll (value);
   end;

   function get_ExtentWidth
   (
      this : in out CarouselPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICarouselPanel.all.get_ExtentWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtentHeight
   (
      this : in out CarouselPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICarouselPanel.all.get_ExtentHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ViewportWidth
   (
      this : in out CarouselPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICarouselPanel.all.get_ViewportWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ViewportHeight
   (
      this : in out CarouselPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICarouselPanel.all.get_ViewportHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HorizontalOffset
   (
      this : in out CarouselPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICarouselPanel.all.get_HorizontalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VerticalOffset
   (
      this : in out CarouselPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICarouselPanel.all.get_VerticalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScrollOwner
   (
      this : in out CarouselPanel
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ICarouselPanel.all.get_ScrollOwner (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScrollOwner
   (
      this : in out CarouselPanel;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.put_ScrollOwner (value);
   end;

   procedure LineUp
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.LineUp;
   end;

   procedure LineDown
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.LineDown;
   end;

   procedure LineLeft
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.LineLeft;
   end;

   procedure LineRight
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.LineRight;
   end;

   procedure PageUp
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.PageUp;
   end;

   procedure PageDown
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.PageDown;
   end;

   procedure PageLeft
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.PageLeft;
   end;

   procedure PageRight
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.PageRight;
   end;

   procedure MouseWheelUp
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.MouseWheelUp;
   end;

   procedure MouseWheelDown
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.MouseWheelDown;
   end;

   procedure MouseWheelLeft
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.MouseWheelLeft;
   end;

   procedure MouseWheelRight
   (
      this : in out CarouselPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.MouseWheelRight;
   end;

   procedure SetHorizontalOffset
   (
      this : in out CarouselPanel;
      offset : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.SetHorizontalOffset (offset);
   end;

   procedure SetVerticalOffset
   (
      this : in out CarouselPanel;
      offset : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICarouselPanel.all.SetVerticalOffset (offset);
   end;

   function MakeVisible
   (
      this : in out CarouselPanel;
      visual : Windows.UI.Xaml.UIElement'Class;
      rectangle : Windows.Foundation.Rect
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICarouselPanel.all.MakeVisible (visual.m_IUIElement.all, rectangle, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AreHorizontalSnapPointsRegular
   (
      this : in out CarouselPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.get_AreHorizontalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AreVerticalSnapPointsRegular
   (
      this : in out CarouselPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.get_AreVerticalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_HorizontalSnapPointsChanged
   (
      this : in out CarouselPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.add_HorizontalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_HorizontalSnapPointsChanged
   (
      this : in out CarouselPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.remove_HorizontalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_VerticalSnapPointsChanged
   (
      this : in out CarouselPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.add_VerticalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_VerticalSnapPointsChanged
   (
      this : in out CarouselPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.remove_VerticalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetIrregularSnapPoints
   (
      this : in out CarouselPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment
   )
   return IVectorView_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Single.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.GetIrregularSnapPoints (orientation, alignment, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetRegularSnapPoints
   (
      this : in out CarouselPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment;
      offset : WinRt.Single_Ptr
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICarouselPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICarouselPanel.all);
      Hr := m_Interface.GetRegularSnapPoints (orientation, alignment, offset, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RangeBase

   procedure Initialize (this : in out RangeBase) is
   begin
      null;
   end;

   procedure Finalize (this : in out RangeBase) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRangeBase, IRangeBase_Ptr);
   begin
      if this.m_IRangeBase /= null then
         if this.m_IRangeBase.all /= null then
            RefCount := this.m_IRangeBase.all.Release;
            Free (this.m_IRangeBase);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RangeBase

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return RangeBase is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RangeBase");
      m_Factory    : access IRangeBaseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IRangeBase;
   begin
      return RetVal : RangeBase do
         Hr := RoGetActivationFactory (m_hString, IID_IRangeBaseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IRangeBase := new Windows.UI.Xaml.Controls.Primitives.IRangeBase;
            Retval.m_IRangeBase.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RangeBase

   function get_MinimumProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RangeBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRangeBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MinimumProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MaximumProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RangeBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRangeBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaximumProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SmallChangeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RangeBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRangeBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SmallChangeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_LargeChangeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RangeBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRangeBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LargeChangeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ValueProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RangeBase");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRangeBaseStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ValueProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RangeBase

   function get_Minimum
   (
      this : in out RangeBase
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRangeBase.all.get_Minimum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Minimum
   (
      this : in out RangeBase;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRangeBase.all.put_Minimum (value);
   end;

   function get_Maximum
   (
      this : in out RangeBase
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRangeBase.all.get_Maximum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Maximum
   (
      this : in out RangeBase;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRangeBase.all.put_Maximum (value);
   end;

   function get_SmallChange
   (
      this : in out RangeBase
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRangeBase.all.get_SmallChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SmallChange
   (
      this : in out RangeBase;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRangeBase.all.put_SmallChange (value);
   end;

   function get_LargeChange
   (
      this : in out RangeBase
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRangeBase.all.get_LargeChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LargeChange
   (
      this : in out RangeBase;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRangeBase.all.put_LargeChange (value);
   end;

   function get_Value
   (
      this : in out RangeBase
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRangeBase.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Value
   (
      this : in out RangeBase;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRangeBase.all.put_Value (value);
   end;

   function add_ValueChanged
   (
      this : in out RangeBase;
      handler : Windows.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRangeBase.all.add_ValueChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ValueChanged
   (
      this : in out RangeBase;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRangeBase.all.remove_ValueChanged (token);
   end;

   procedure OnMinimumChanged
   (
      this : in out RangeBase;
      oldMinimum : WinRt.Double;
      newMinimum : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseOverrides, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IRangeBaseOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBase.all);
      Hr := m_Interface.OnMinimumChanged (oldMinimum, newMinimum);
      m_RefCount := m_Interface.Release;
   end;

   procedure OnMaximumChanged
   (
      this : in out RangeBase;
      oldMaximum : WinRt.Double;
      newMaximum : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseOverrides, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IRangeBaseOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBase.all);
      Hr := m_Interface.OnMaximumChanged (oldMaximum, newMaximum);
      m_RefCount := m_Interface.Release;
   end;

   procedure OnValueChanged
   (
      this : in out RangeBase;
      oldValue : WinRt.Double;
      newValue : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseOverrides := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBase_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IRangeBaseOverrides, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IRangeBaseOverrides'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRangeBase.all);
      Hr := m_Interface.OnValueChanged (oldValue, newValue);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ColorPickerSlider

   procedure Initialize (this : in out ColorPickerSlider) is
   begin
      null;
   end;

   procedure Finalize (this : in out ColorPickerSlider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColorPickerSlider, IColorPickerSlider_Ptr);
   begin
      if this.m_IColorPickerSlider /= null then
         if this.m_IColorPickerSlider.all /= null then
            RefCount := this.m_IColorPickerSlider.all.Release;
            Free (this.m_IColorPickerSlider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ColorPickerSlider

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ColorPickerSlider is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorPickerSlider");
      m_Factory    : access IColorPickerSliderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IColorPickerSlider;
   begin
      return RetVal : ColorPickerSlider do
         Hr := RoGetActivationFactory (m_hString, IID_IColorPickerSliderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IColorPickerSlider := new Windows.UI.Xaml.Controls.Primitives.IColorPickerSlider;
            Retval.m_IColorPickerSlider.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ColorPickerSlider

   function get_ColorChannelProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorPickerSlider");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorPickerSliderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorPickerSliderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorChannelProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ColorPickerSlider

   function get_ColorChannel
   (
      this : in out ColorPickerSlider
   )
   return WinRt.Windows.UI.Xaml.Controls.ColorPickerHsvChannel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.ColorPickerHsvChannel;
   begin
      Hr := this.m_IColorPickerSlider.all.get_ColorChannel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ColorChannel
   (
      this : in out ColorPickerSlider;
      value : Windows.UI.Xaml.Controls.ColorPickerHsvChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorPickerSlider.all.put_ColorChannel (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ColorSpectrum

   procedure Initialize (this : in out ColorSpectrum) is
   begin
      null;
   end;

   procedure Finalize (this : in out ColorSpectrum) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColorSpectrum, IColorSpectrum_Ptr);
   begin
      if this.m_IColorSpectrum /= null then
         if this.m_IColorSpectrum.all /= null then
            RefCount := this.m_IColorSpectrum.all.Release;
            Free (this.m_IColorSpectrum);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ColorSpectrum

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ColorSpectrum is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory    : access IColorSpectrumFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IColorSpectrum;
   begin
      return RetVal : ColorSpectrum do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IColorSpectrum := new Windows.UI.Xaml.Controls.Primitives.IColorSpectrum;
            Retval.m_IColorSpectrum.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ColorSpectrum

   function get_ColorProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ColorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_HsvColorProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HsvColorProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MinHueProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MinHueProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MaxHueProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaxHueProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MinSaturationProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MinSaturationProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MaxSaturationProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaxSaturationProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MinValueProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MinValueProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_MaxValueProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaxValueProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ShapeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShapeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ComponentsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ColorSpectrum");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IColorSpectrumStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ComponentsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ColorSpectrum

   function get_Color
   (
      this : in out ColorSpectrum
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IColorSpectrum.all.get_Color (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Color
   (
      this : in out ColorSpectrum;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_Color (value);
   end;

   function get_HsvColor
   (
      this : in out ColorSpectrum
   )
   return WinRt.Windows.Foundation.Numerics.Vector4 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector4;
   begin
      Hr := this.m_IColorSpectrum.all.get_HsvColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HsvColor
   (
      this : in out ColorSpectrum;
      value : Windows.Foundation.Numerics.Vector4
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_HsvColor (value);
   end;

   function get_MinHue
   (
      this : in out ColorSpectrum
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IColorSpectrum.all.get_MinHue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinHue
   (
      this : in out ColorSpectrum;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_MinHue (value);
   end;

   function get_MaxHue
   (
      this : in out ColorSpectrum
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IColorSpectrum.all.get_MaxHue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxHue
   (
      this : in out ColorSpectrum;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_MaxHue (value);
   end;

   function get_MinSaturation
   (
      this : in out ColorSpectrum
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IColorSpectrum.all.get_MinSaturation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinSaturation
   (
      this : in out ColorSpectrum;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_MinSaturation (value);
   end;

   function get_MaxSaturation
   (
      this : in out ColorSpectrum
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IColorSpectrum.all.get_MaxSaturation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxSaturation
   (
      this : in out ColorSpectrum;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_MaxSaturation (value);
   end;

   function get_MinValue
   (
      this : in out ColorSpectrum
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IColorSpectrum.all.get_MinValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinValue
   (
      this : in out ColorSpectrum;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_MinValue (value);
   end;

   function get_MaxValue
   (
      this : in out ColorSpectrum
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IColorSpectrum.all.get_MaxValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxValue
   (
      this : in out ColorSpectrum;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_MaxValue (value);
   end;

   function get_Shape
   (
      this : in out ColorSpectrum
   )
   return WinRt.Windows.UI.Xaml.Controls.ColorSpectrumShape is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.ColorSpectrumShape;
   begin
      Hr := this.m_IColorSpectrum.all.get_Shape (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Shape
   (
      this : in out ColorSpectrum;
      value : Windows.UI.Xaml.Controls.ColorSpectrumShape
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_Shape (value);
   end;

   function get_Components
   (
      this : in out ColorSpectrum
   )
   return WinRt.Windows.UI.Xaml.Controls.ColorSpectrumComponents is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.ColorSpectrumComponents;
   begin
      Hr := this.m_IColorSpectrum.all.get_Components (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Components
   (
      this : in out ColorSpectrum;
      value : Windows.UI.Xaml.Controls.ColorSpectrumComponents
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.put_Components (value);
   end;

   function add_ColorChanged
   (
      this : in out ColorSpectrum;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IColorSpectrum.all.add_ColorChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ColorChanged
   (
      this : in out ColorSpectrum;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IColorSpectrum.all.remove_ColorChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ComboBoxTemplateSettings

   procedure Initialize (this : in out ComboBoxTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ComboBoxTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IComboBoxTemplateSettings, IComboBoxTemplateSettings_Ptr);
   begin
      if this.m_IComboBoxTemplateSettings /= null then
         if this.m_IComboBoxTemplateSettings.all /= null then
            RefCount := this.m_IComboBoxTemplateSettings.all.Release;
            Free (this.m_IComboBoxTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ComboBoxTemplateSettings

   function get_DropDownOpenedHeight
   (
      this : in out ComboBoxTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IComboBoxTemplateSettings.all.get_DropDownOpenedHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DropDownClosedHeight
   (
      this : in out ComboBoxTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IComboBoxTemplateSettings.all.get_DropDownClosedHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DropDownOffset
   (
      this : in out ComboBoxTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IComboBoxTemplateSettings.all.get_DropDownOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedItemDirection
   (
      this : in out ComboBoxTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.AnimationDirection is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.AnimationDirection;
   begin
      Hr := this.m_IComboBoxTemplateSettings.all.get_SelectedItemDirection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DropDownContentMinWidth
   (
      this : in out ComboBoxTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettings2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IComboBoxTemplateSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IComboBoxTemplateSettings.all);
      Hr := m_Interface.get_DropDownContentMinWidth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CommandBarFlyoutCommandBar

   procedure Initialize (this : in out CommandBarFlyoutCommandBar) is
   begin
      null;
   end;

   procedure Finalize (this : in out CommandBarFlyoutCommandBar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICommandBarFlyoutCommandBar, ICommandBarFlyoutCommandBar_Ptr);
   begin
      if this.m_ICommandBarFlyoutCommandBar /= null then
         if this.m_ICommandBarFlyoutCommandBar.all /= null then
            RefCount := this.m_ICommandBarFlyoutCommandBar.all.Release;
            Free (this.m_ICommandBarFlyoutCommandBar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CommandBarFlyoutCommandBar

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return CommandBarFlyoutCommandBar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar");
      m_Factory    : access ICommandBarFlyoutCommandBarFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar;
   begin
      return RetVal : CommandBarFlyoutCommandBar do
         Hr := RoGetActivationFactory (m_hString, IID_ICommandBarFlyoutCommandBarFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ICommandBarFlyoutCommandBar := new Windows.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar;
            Retval.m_ICommandBarFlyoutCommandBar.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CommandBarFlyoutCommandBar

   function get_FlyoutTemplateSettings
   (
      this : in out CommandBarFlyoutCommandBar
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings do
         Hr := this.m_ICommandBarFlyoutCommandBar.all.get_FlyoutTemplateSettings (m_ComRetVal'Access);
         Retval.m_ICommandBarFlyoutCommandBarTemplateSettings := new Windows.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings;
         Retval.m_ICommandBarFlyoutCommandBarTemplateSettings.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CommandBarFlyoutCommandBarTemplateSettings

   procedure Initialize (this : in out CommandBarFlyoutCommandBarTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out CommandBarFlyoutCommandBarTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICommandBarFlyoutCommandBarTemplateSettings, ICommandBarFlyoutCommandBarTemplateSettings_Ptr);
   begin
      if this.m_ICommandBarFlyoutCommandBarTemplateSettings /= null then
         if this.m_ICommandBarFlyoutCommandBarTemplateSettings.all /= null then
            RefCount := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.Release;
            Free (this.m_ICommandBarFlyoutCommandBarTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CommandBarFlyoutCommandBarTemplateSettings

   function get_OpenAnimationStartPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_OpenAnimationStartPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OpenAnimationEndPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_OpenAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CloseAnimationEndPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_CloseAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurrentWidth
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_CurrentWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandedWidth
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandedWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WidthExpansionDelta
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_WidthExpansionDelta (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WidthExpansionAnimationStartPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_WidthExpansionAnimationStartPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WidthExpansionAnimationEndPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_WidthExpansionAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WidthExpansionMoreButtonAnimationStartPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_WidthExpansionMoreButtonAnimationStartPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WidthExpansionMoreButtonAnimationEndPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_WidthExpansionMoreButtonAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandUpOverflowVerticalPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandUpOverflowVerticalPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandDownOverflowVerticalPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandDownOverflowVerticalPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandUpAnimationStartPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandUpAnimationStartPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandUpAnimationEndPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandUpAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandUpAnimationHoldPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandUpAnimationHoldPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandDownAnimationStartPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandDownAnimationStartPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandDownAnimationEndPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandDownAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExpandDownAnimationHoldPosition
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ExpandDownAnimationHoldPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContentClipRect
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_ContentClipRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverflowContentClipRect
   (
      this : in out CommandBarFlyoutCommandBarTemplateSettings
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICommandBarFlyoutCommandBarTemplateSettings.all.get_OverflowContentClipRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CommandBarTemplateSettings

   procedure Initialize (this : in out CommandBarTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out CommandBarTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICommandBarTemplateSettings, ICommandBarTemplateSettings_Ptr);
   begin
      if this.m_ICommandBarTemplateSettings /= null then
         if this.m_ICommandBarTemplateSettings.all /= null then
            RefCount := this.m_ICommandBarTemplateSettings.all.Release;
            Free (this.m_ICommandBarTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CommandBarTemplateSettings

   function get_ContentHeight
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarTemplateSettings.all.get_ContentHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverflowContentClipRect
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_ICommandBarTemplateSettings.all.get_OverflowContentClipRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverflowContentMinWidth
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarTemplateSettings.all.get_OverflowContentMinWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverflowContentMaxHeight
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarTemplateSettings.all.get_OverflowContentMaxHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverflowContentHorizontalOffset
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarTemplateSettings.all.get_OverflowContentHorizontalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverflowContentHeight
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarTemplateSettings.all.get_OverflowContentHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NegativeOverflowContentHeight
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICommandBarTemplateSettings.all.get_NegativeOverflowContentHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OverflowContentMaxWidth
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_ICommandBarTemplateSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandBarTemplateSettings.all);
      Hr := m_Interface.get_OverflowContentMaxWidth (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EffectiveOverflowButtonVisibility
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Visibility is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Visibility;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_ICommandBarTemplateSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandBarTemplateSettings.all);
      Hr := m_Interface.get_EffectiveOverflowButtonVisibility (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OverflowContentCompactYTranslation
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings4, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_ICommandBarTemplateSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandBarTemplateSettings.all);
      Hr := m_Interface.get_OverflowContentCompactYTranslation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OverflowContentMinimalYTranslation
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings4, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_ICommandBarTemplateSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandBarTemplateSettings.all);
      Hr := m_Interface.get_OverflowContentMinimalYTranslation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OverflowContentHiddenYTranslation
   (
      this : in out CommandBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings4, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_ICommandBarTemplateSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICommandBarTemplateSettings.all);
      Hr := m_Interface.get_OverflowContentHiddenYTranslation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DragCompletedEventArgs

   procedure Initialize (this : in out DragCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DragCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDragCompletedEventArgs, IDragCompletedEventArgs_Ptr);
   begin
      if this.m_IDragCompletedEventArgs /= null then
         if this.m_IDragCompletedEventArgs.all /= null then
            RefCount := this.m_IDragCompletedEventArgs.all.Release;
            Free (this.m_IDragCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DragCompletedEventArgs

   function Constructor
   (
      horizontalChange : WinRt.Double;
      verticalChange : WinRt.Double;
      canceled : WinRt.Boolean;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return DragCompletedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs");
      m_Factory    : access IDragCompletedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IDragCompletedEventArgs;
   begin
      return RetVal : DragCompletedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IDragCompletedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled (horizontalChange, verticalChange, canceled, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IDragCompletedEventArgs := new Windows.UI.Xaml.Controls.Primitives.IDragCompletedEventArgs;
            Retval.m_IDragCompletedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DragCompletedEventArgs

   function get_HorizontalChange
   (
      this : in out DragCompletedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDragCompletedEventArgs.all.get_HorizontalChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VerticalChange
   (
      this : in out DragCompletedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDragCompletedEventArgs.all.get_VerticalChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Canceled
   (
      this : in out DragCompletedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDragCompletedEventArgs.all.get_Canceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DragCompletedEventHandler

   function Invoke
   (
      this : access DragCompletedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Controls.Primitives.IDragCompletedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DragDeltaEventArgs

   procedure Initialize (this : in out DragDeltaEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DragDeltaEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDragDeltaEventArgs, IDragDeltaEventArgs_Ptr);
   begin
      if this.m_IDragDeltaEventArgs /= null then
         if this.m_IDragDeltaEventArgs.all /= null then
            RefCount := this.m_IDragDeltaEventArgs.all.Release;
            Free (this.m_IDragDeltaEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DragDeltaEventArgs

   function Constructor
   (
      horizontalChange : WinRt.Double;
      verticalChange : WinRt.Double;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return DragDeltaEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs");
      m_Factory    : access IDragDeltaEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IDragDeltaEventArgs;
   begin
      return RetVal : DragDeltaEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IDragDeltaEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithHorizontalChangeAndVerticalChange (horizontalChange, verticalChange, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IDragDeltaEventArgs := new Windows.UI.Xaml.Controls.Primitives.IDragDeltaEventArgs;
            Retval.m_IDragDeltaEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DragDeltaEventArgs

   function get_HorizontalChange
   (
      this : in out DragDeltaEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDragDeltaEventArgs.all.get_HorizontalChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VerticalChange
   (
      this : in out DragDeltaEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDragDeltaEventArgs.all.get_VerticalChange (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DragDeltaEventHandler

   function Invoke
   (
      this : access DragDeltaEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Controls.Primitives.IDragDeltaEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DragStartedEventArgs

   procedure Initialize (this : in out DragStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DragStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDragStartedEventArgs, IDragStartedEventArgs_Ptr);
   begin
      if this.m_IDragStartedEventArgs /= null then
         if this.m_IDragStartedEventArgs.all /= null then
            RefCount := this.m_IDragStartedEventArgs.all.Release;
            Free (this.m_IDragStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DragStartedEventArgs

   function Constructor
   (
      horizontalOffset : WinRt.Double;
      verticalOffset : WinRt.Double;
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return DragStartedEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.DragStartedEventArgs");
      m_Factory    : access IDragStartedEventArgsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IDragStartedEventArgs;
   begin
      return RetVal : DragStartedEventArgs do
         Hr := RoGetActivationFactory (m_hString, IID_IDragStartedEventArgsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstanceWithHorizontalOffsetAndVerticalOffset (horizontalOffset, verticalOffset, baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IDragStartedEventArgs := new Windows.UI.Xaml.Controls.Primitives.IDragStartedEventArgs;
            Retval.m_IDragStartedEventArgs.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DragStartedEventArgs

   function get_HorizontalOffset
   (
      this : in out DragStartedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDragStartedEventArgs.all.get_HorizontalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VerticalOffset
   (
      this : in out DragStartedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDragStartedEventArgs.all.get_VerticalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate DragStartedEventHandler

   function Invoke
   (
      this : access DragStartedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Controls.Primitives.IDragStartedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlyoutBaseClosingEventArgs

   procedure Initialize (this : in out FlyoutBaseClosingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlyoutBaseClosingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlyoutBaseClosingEventArgs, IFlyoutBaseClosingEventArgs_Ptr);
   begin
      if this.m_IFlyoutBaseClosingEventArgs /= null then
         if this.m_IFlyoutBaseClosingEventArgs.all /= null then
            RefCount := this.m_IFlyoutBaseClosingEventArgs.all.Release;
            Free (this.m_IFlyoutBaseClosingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlyoutBaseClosingEventArgs

   function get_Cancel
   (
      this : in out FlyoutBaseClosingEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFlyoutBaseClosingEventArgs.all.get_Cancel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Cancel
   (
      this : in out FlyoutBaseClosingEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutBaseClosingEventArgs.all.put_Cancel (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FlyoutShowOptions

   procedure Initialize (this : in out FlyoutShowOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out FlyoutShowOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFlyoutShowOptions, IFlyoutShowOptions_Ptr);
   begin
      if this.m_IFlyoutShowOptions /= null then
         if this.m_IFlyoutShowOptions.all /= null then
            RefCount := this.m_IFlyoutShowOptions.all.Release;
            Free (this.m_IFlyoutShowOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FlyoutShowOptions

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return FlyoutShowOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.FlyoutShowOptions");
      m_Factory    : access IFlyoutShowOptionsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IFlyoutShowOptions;
   begin
      return RetVal : FlyoutShowOptions do
         Hr := RoGetActivationFactory (m_hString, IID_IFlyoutShowOptionsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IFlyoutShowOptions := new Windows.UI.Xaml.Controls.Primitives.IFlyoutShowOptions;
            Retval.m_IFlyoutShowOptions.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FlyoutShowOptions

   function get_Position
   (
      this : in out FlyoutShowOptions
   )
   return IReference_Point.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Point.Kind;
   begin
      Hr := this.m_IFlyoutShowOptions.all.get_Position (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Point (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Position
   (
      this : in out FlyoutShowOptions;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutShowOptions.all.put_Position (value);
   end;

   function get_ExclusionRect
   (
      this : in out FlyoutShowOptions
   )
   return IReference_Rect.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Rect.Kind;
   begin
      Hr := this.m_IFlyoutShowOptions.all.get_ExclusionRect (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Rect (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ExclusionRect
   (
      this : in out FlyoutShowOptions;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutShowOptions.all.put_ExclusionRect (value);
   end;

   function get_ShowMode
   (
      this : in out FlyoutShowOptions
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.FlyoutShowMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.FlyoutShowMode;
   begin
      Hr := this.m_IFlyoutShowOptions.all.get_ShowMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShowMode
   (
      this : in out FlyoutShowOptions;
      value : Windows.UI.Xaml.Controls.Primitives.FlyoutShowMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutShowOptions.all.put_ShowMode (value);
   end;

   function get_Placement
   (
      this : in out FlyoutShowOptions
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode;
   begin
      Hr := this.m_IFlyoutShowOptions.all.get_Placement (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Placement
   (
      this : in out FlyoutShowOptions;
      value : Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFlyoutShowOptions.all.put_Placement (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeneratorPositionHelper

   procedure Initialize (this : in out GeneratorPositionHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeneratorPositionHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeneratorPositionHelper, IGeneratorPositionHelper_Ptr);
   begin
      if this.m_IGeneratorPositionHelper /= null then
         if this.m_IGeneratorPositionHelper.all /= null then
            RefCount := this.m_IGeneratorPositionHelper.all.Release;
            Free (this.m_IGeneratorPositionHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GeneratorPositionHelper

   function FromIndexAndOffset
   (
      index : WinRt.Int32;
      offset : WinRt.Int32
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.GeneratorPosition is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GeneratorPositionHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGeneratorPositionHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.GeneratorPosition;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGeneratorPositionHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FromIndexAndOffset (index, offset, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeneratorPositionHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GridViewItemPresenter

   procedure Initialize (this : in out GridViewItemPresenter) is
   begin
      null;
   end;

   procedure Finalize (this : in out GridViewItemPresenter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGridViewItemPresenter, IGridViewItemPresenter_Ptr);
   begin
      if this.m_IGridViewItemPresenter /= null then
         if this.m_IGridViewItemPresenter.all /= null then
            RefCount := this.m_IGridViewItemPresenter.all.Release;
            Free (this.m_IGridViewItemPresenter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GridViewItemPresenter

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return GridViewItemPresenter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory    : access IGridViewItemPresenterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenter;
   begin
      return RetVal : GridViewItemPresenter do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IGridViewItemPresenter := new Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenter;
            Retval.m_IGridViewItemPresenter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GridViewItemPresenter

   function get_SelectionCheckMarkVisualEnabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectionCheckMarkVisualEnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckHintBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckHintBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckSelectingBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckSelectingBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DragBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DragBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DragForegroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DragForegroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FocusBorderBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FocusBorderBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PlaceholderBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PlaceholderBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PointerOverBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointerOverBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedForegroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedForegroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedPointerOverBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedPointerOverBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedPointerOverBorderBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedPointerOverBorderBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedBorderThicknessProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedBorderThicknessProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DisabledOpacityProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisabledOpacityProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DragOpacityProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DragOpacityProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ReorderHintOffsetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReorderHintOffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GridViewItemPresenterHorizontalContentAlignmentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GridViewItemPresenterHorizontalContentAlignmentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GridViewItemPresenterVerticalContentAlignmentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GridViewItemPresenterVerticalContentAlignmentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_GridViewItemPresenterPaddingProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GridViewItemPresenterPaddingProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PointerOverBackgroundMarginProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointerOverBackgroundMarginProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ContentMarginProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IGridViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ContentMarginProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GridViewItemPresenter

   function get_SelectionCheckMarkVisualEnabled
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_SelectionCheckMarkVisualEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectionCheckMarkVisualEnabled
   (
      this : in out GridViewItemPresenter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_SelectionCheckMarkVisualEnabled (value);
   end;

   function get_CheckHintBrush
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_CheckHintBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CheckHintBrush
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_CheckHintBrush (value.m_IBrush.all);
   end;

   function get_CheckSelectingBrush
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_CheckSelectingBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CheckSelectingBrush
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_CheckSelectingBrush (value.m_IBrush.all);
   end;

   function get_CheckBrush
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_CheckBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CheckBrush
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_CheckBrush (value.m_IBrush.all);
   end;

   function get_DragBackground
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_DragBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_DragBackground
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_DragBackground (value.m_IBrush.all);
   end;

   function get_DragForeground
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_DragForeground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_DragForeground
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_DragForeground (value.m_IBrush.all);
   end;

   function get_FocusBorderBrush
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_FocusBorderBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_FocusBorderBrush
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_FocusBorderBrush (value.m_IBrush.all);
   end;

   function get_PlaceholderBackground
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_PlaceholderBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_PlaceholderBackground
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_PlaceholderBackground (value.m_IBrush.all);
   end;

   function get_PointerOverBackground
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_PointerOverBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_PointerOverBackground
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_PointerOverBackground (value.m_IBrush.all);
   end;

   function get_SelectedBackground
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_SelectedBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedBackground
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_SelectedBackground (value.m_IBrush.all);
   end;

   function get_SelectedForeground
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_SelectedForeground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedForeground
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_SelectedForeground (value.m_IBrush.all);
   end;

   function get_SelectedPointerOverBackground
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_SelectedPointerOverBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedPointerOverBackground
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_SelectedPointerOverBackground (value.m_IBrush.all);
   end;

   function get_SelectedPointerOverBorderBrush
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IGridViewItemPresenter.all.get_SelectedPointerOverBorderBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedPointerOverBorderBrush
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_SelectedPointerOverBorderBrush (value.m_IBrush.all);
   end;

   function get_SelectedBorderThickness
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_SelectedBorderThickness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedBorderThickness
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_SelectedBorderThickness (value);
   end;

   function get_DisabledOpacity
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_DisabledOpacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisabledOpacity
   (
      this : in out GridViewItemPresenter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_DisabledOpacity (value);
   end;

   function get_DragOpacity
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_DragOpacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DragOpacity
   (
      this : in out GridViewItemPresenter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_DragOpacity (value);
   end;

   function get_ReorderHintOffset
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_ReorderHintOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReorderHintOffset
   (
      this : in out GridViewItemPresenter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_ReorderHintOffset (value);
   end;

   function get_GridViewItemPresenterHorizontalContentAlignment
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.HorizontalAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.HorizontalAlignment;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_GridViewItemPresenterHorizontalContentAlignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GridViewItemPresenterHorizontalContentAlignment
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.HorizontalAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_GridViewItemPresenterHorizontalContentAlignment (value);
   end;

   function get_GridViewItemPresenterVerticalContentAlignment
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.VerticalAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.VerticalAlignment;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_GridViewItemPresenterVerticalContentAlignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GridViewItemPresenterVerticalContentAlignment
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.VerticalAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_GridViewItemPresenterVerticalContentAlignment (value);
   end;

   function get_GridViewItemPresenterPadding
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_GridViewItemPresenterPadding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_GridViewItemPresenterPadding
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_GridViewItemPresenterPadding (value);
   end;

   function get_PointerOverBackgroundMargin
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_PointerOverBackgroundMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PointerOverBackgroundMargin
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_PointerOverBackgroundMargin (value);
   end;

   function get_ContentMargin
   (
      this : in out GridViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IGridViewItemPresenter.all.get_ContentMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ContentMargin
   (
      this : in out GridViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGridViewItemPresenter.all.put_ContentMargin (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GridViewItemTemplateSettings

   procedure Initialize (this : in out GridViewItemTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out GridViewItemTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGridViewItemTemplateSettings, IGridViewItemTemplateSettings_Ptr);
   begin
      if this.m_IGridViewItemTemplateSettings /= null then
         if this.m_IGridViewItemTemplateSettings.all /= null then
            RefCount := this.m_IGridViewItemTemplateSettings.all.Release;
            Free (this.m_IGridViewItemTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GridViewItemTemplateSettings

   function get_DragItemsCount
   (
      this : in out GridViewItemTemplateSettings
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IGridViewItemTemplateSettings.all.get_DragItemsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ItemsChangedEventArgs

   procedure Initialize (this : in out ItemsChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ItemsChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IItemsChangedEventArgs, IItemsChangedEventArgs_Ptr);
   begin
      if this.m_IItemsChangedEventArgs /= null then
         if this.m_IItemsChangedEventArgs.all /= null then
            RefCount := this.m_IItemsChangedEventArgs.all.Release;
            Free (this.m_IItemsChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ItemsChangedEventArgs

   function get_Action
   (
      this : in out ItemsChangedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IItemsChangedEventArgs.all.get_Action (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out ItemsChangedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.GeneratorPosition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.GeneratorPosition;
   begin
      Hr := this.m_IItemsChangedEventArgs.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OldPosition
   (
      this : in out ItemsChangedEventArgs
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.GeneratorPosition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.GeneratorPosition;
   begin
      Hr := this.m_IItemsChangedEventArgs.all.get_OldPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ItemCount
   (
      this : in out ItemsChangedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IItemsChangedEventArgs.all.get_ItemCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ItemUICount
   (
      this : in out ItemsChangedEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IItemsChangedEventArgs.all.get_ItemUICount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate ItemsChangedEventHandler

   function Invoke
   (
      this : access ItemsChangedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Controls.Primitives.IItemsChangedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JumpListItemBackgroundConverter

   procedure Initialize (this : in out JumpListItemBackgroundConverter) is
   begin
      null;
   end;

   procedure Finalize (this : in out JumpListItemBackgroundConverter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IJumpListItemBackgroundConverter, IJumpListItemBackgroundConverter_Ptr);
   begin
      if this.m_IJumpListItemBackgroundConverter /= null then
         if this.m_IJumpListItemBackgroundConverter.all /= null then
            RefCount := this.m_IJumpListItemBackgroundConverter.all.Release;
            Free (this.m_IJumpListItemBackgroundConverter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for JumpListItemBackgroundConverter

   function Constructor return JumpListItemBackgroundConverter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter;
   begin
      return RetVal : JumpListItemBackgroundConverter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IJumpListItemBackgroundConverter := new Windows.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter;
            Retval.m_IJumpListItemBackgroundConverter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for JumpListItemBackgroundConverter

   function get_EnabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IJumpListItemBackgroundConverterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DisabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IJumpListItemBackgroundConverterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JumpListItemBackgroundConverter

   function get_Enabled
   (
      this : in out JumpListItemBackgroundConverter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IJumpListItemBackgroundConverter.all.get_Enabled (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Enabled
   (
      this : in out JumpListItemBackgroundConverter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IJumpListItemBackgroundConverter.all.put_Enabled (value.m_IBrush.all);
   end;

   function get_Disabled
   (
      this : in out JumpListItemBackgroundConverter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IJumpListItemBackgroundConverter.all.get_Disabled (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Disabled
   (
      this : in out JumpListItemBackgroundConverter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IJumpListItemBackgroundConverter.all.put_Disabled (value.m_IBrush.all);
   end;

   function Convert
   (
      this : in out JumpListItemBackgroundConverter;
      value : WinRt.IInspectable;
      targetType : Windows.UI.Xaml.Interop.TypeName;
      parameter : WinRt.IInspectable;
      language : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IValueConverter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_language : WinRt.HString := To_HString (language);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter_Interface, WinRt.Windows.UI.Xaml.Data.IValueConverter, WinRt.Windows.UI.Xaml.Data.IID_IValueConverter'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJumpListItemBackgroundConverter.all);
      Hr := m_Interface.Convert (value, targetType, parameter, HStr_language, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_language);
      return m_ComRetVal;
   end;

   function ConvertBack
   (
      this : in out JumpListItemBackgroundConverter;
      value : WinRt.IInspectable;
      targetType : Windows.UI.Xaml.Interop.TypeName;
      parameter : WinRt.IInspectable;
      language : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IValueConverter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_language : WinRt.HString := To_HString (language);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter_Interface, WinRt.Windows.UI.Xaml.Data.IValueConverter, WinRt.Windows.UI.Xaml.Data.IID_IValueConverter'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJumpListItemBackgroundConverter.all);
      Hr := m_Interface.ConvertBack (value, targetType, parameter, HStr_language, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_language);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JumpListItemForegroundConverter

   procedure Initialize (this : in out JumpListItemForegroundConverter) is
   begin
      null;
   end;

   procedure Finalize (this : in out JumpListItemForegroundConverter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IJumpListItemForegroundConverter, IJumpListItemForegroundConverter_Ptr);
   begin
      if this.m_IJumpListItemForegroundConverter /= null then
         if this.m_IJumpListItemForegroundConverter.all /= null then
            RefCount := this.m_IJumpListItemForegroundConverter.all.Release;
            Free (this.m_IJumpListItemForegroundConverter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for JumpListItemForegroundConverter

   function Constructor return JumpListItemForegroundConverter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter;
   begin
      return RetVal : JumpListItemForegroundConverter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IJumpListItemForegroundConverter := new Windows.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter;
            Retval.m_IJumpListItemForegroundConverter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for JumpListItemForegroundConverter

   function get_EnabledProperty_JumpListItemForegroundConverter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IJumpListItemForegroundConverterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DisabledProperty_JumpListItemForegroundConverter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IJumpListItemForegroundConverterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JumpListItemForegroundConverter

   function get_Enabled
   (
      this : in out JumpListItemForegroundConverter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IJumpListItemForegroundConverter.all.get_Enabled (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Enabled
   (
      this : in out JumpListItemForegroundConverter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IJumpListItemForegroundConverter.all.put_Enabled (value.m_IBrush.all);
   end;

   function get_Disabled
   (
      this : in out JumpListItemForegroundConverter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IJumpListItemForegroundConverter.all.get_Disabled (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Disabled
   (
      this : in out JumpListItemForegroundConverter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IJumpListItemForegroundConverter.all.put_Disabled (value.m_IBrush.all);
   end;

   function Convert
   (
      this : in out JumpListItemForegroundConverter;
      value : WinRt.IInspectable;
      targetType : Windows.UI.Xaml.Interop.TypeName;
      parameter : WinRt.IInspectable;
      language : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IValueConverter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_language : WinRt.HString := To_HString (language);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter_Interface, WinRt.Windows.UI.Xaml.Data.IValueConverter, WinRt.Windows.UI.Xaml.Data.IID_IValueConverter'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJumpListItemForegroundConverter.all);
      Hr := m_Interface.Convert (value, targetType, parameter, HStr_language, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_language);
      return m_ComRetVal;
   end;

   function ConvertBack
   (
      this : in out JumpListItemForegroundConverter;
      value : WinRt.IInspectable;
      targetType : Windows.UI.Xaml.Interop.TypeName;
      parameter : WinRt.IInspectable;
      language : WinRt.WString
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Data.IValueConverter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
      HStr_language : WinRt.HString := To_HString (language);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter_Interface, WinRt.Windows.UI.Xaml.Data.IValueConverter, WinRt.Windows.UI.Xaml.Data.IID_IValueConverter'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJumpListItemForegroundConverter.all);
      Hr := m_Interface.ConvertBack (value, targetType, parameter, HStr_language, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_language);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LayoutInformation

   procedure Initialize (this : in out LayoutInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out LayoutInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILayoutInformation, ILayoutInformation_Ptr);
   begin
      if this.m_ILayoutInformation /= null then
         if this.m_ILayoutInformation.all /= null then
            RefCount := this.m_ILayoutInformation.all.Release;
            Free (this.m_ILayoutInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LayoutInformation

   function GetLayoutExceptionElement
   (
      dispatcher : WinRt.IInspectable
   )
   return WinRt.Windows.UI.Xaml.UIElement is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LayoutInformation");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILayoutInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElement do
         Hr := RoGetActivationFactory (m_hString, IID_ILayoutInformationStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetLayoutExceptionElement (dispatcher, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUIElement := new Windows.UI.Xaml.IUIElement;
            Retval.m_IUIElement.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetLayoutSlot
   (
      element : Windows.UI.Xaml.FrameworkElement'Class
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LayoutInformation");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILayoutInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILayoutInformationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetLayoutSlot (element.m_IFrameworkElement.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetAvailableSize
   (
      element : Windows.UI.Xaml.UIElement'Class
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LayoutInformation");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILayoutInformationStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILayoutInformationStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetAvailableSize (element.m_IUIElement.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LayoutInformation

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewItemPresenter

   procedure Initialize (this : in out ListViewItemPresenter) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewItemPresenter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewItemPresenter, IListViewItemPresenter_Ptr);
   begin
      if this.m_IListViewItemPresenter /= null then
         if this.m_IListViewItemPresenter.all /= null then
            RefCount := this.m_IListViewItemPresenter.all.Release;
            Free (this.m_IListViewItemPresenter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ListViewItemPresenter

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return ListViewItemPresenter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory    : access IListViewItemPresenterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter;
   begin
      return RetVal : ListViewItemPresenter do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IListViewItemPresenter := new Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter;
            Retval.m_IListViewItemPresenter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ListViewItemPresenter

   function get_SelectionCheckMarkVisualEnabledProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectionCheckMarkVisualEnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckHintBrushProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckHintBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckSelectingBrushProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckSelectingBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckBrushProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DragBackgroundProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DragBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DragForegroundProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DragForegroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FocusBorderBrushProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FocusBorderBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PlaceholderBackgroundProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PlaceholderBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PointerOverBackgroundProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointerOverBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedBackgroundProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedForegroundProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedForegroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedPointerOverBackgroundProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedPointerOverBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedPointerOverBorderBrushProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedPointerOverBorderBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedBorderThicknessProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedBorderThicknessProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DisabledOpacityProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DisabledOpacityProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_DragOpacityProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DragOpacityProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ReorderHintOffsetProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReorderHintOffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ListViewItemPresenterHorizontalContentAlignmentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ListViewItemPresenterHorizontalContentAlignmentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ListViewItemPresenterVerticalContentAlignmentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ListViewItemPresenterVerticalContentAlignmentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ListViewItemPresenterPaddingProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ListViewItemPresenterPaddingProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PointerOverBackgroundMarginProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointerOverBackgroundMarginProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ContentMarginProperty_ListViewItemPresenter
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ContentMarginProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedPressedBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedPressedBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PressedBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PressedBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckBoxBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckBoxBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_FocusSecondaryBorderBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FocusSecondaryBorderBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CheckModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CheckModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PointerOverForegroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointerOverForegroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RevealBackgroundProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RevealBackgroundProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RevealBorderBrushProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RevealBorderBrushProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RevealBorderThicknessProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RevealBorderThicknessProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RevealBackgroundShowsAboveContentProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IListViewItemPresenterStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RevealBackgroundShowsAboveContentProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewItemPresenter

   function get_SelectionCheckMarkVisualEnabled
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_SelectionCheckMarkVisualEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectionCheckMarkVisualEnabled
   (
      this : in out ListViewItemPresenter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_SelectionCheckMarkVisualEnabled (value);
   end;

   function get_CheckHintBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_CheckHintBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CheckHintBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_CheckHintBrush (value.m_IBrush.all);
   end;

   function get_CheckSelectingBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_CheckSelectingBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CheckSelectingBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_CheckSelectingBrush (value.m_IBrush.all);
   end;

   function get_CheckBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_CheckBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CheckBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_CheckBrush (value.m_IBrush.all);
   end;

   function get_DragBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_DragBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_DragBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_DragBackground (value.m_IBrush.all);
   end;

   function get_DragForeground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_DragForeground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_DragForeground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_DragForeground (value.m_IBrush.all);
   end;

   function get_FocusBorderBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_FocusBorderBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_FocusBorderBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_FocusBorderBrush (value.m_IBrush.all);
   end;

   function get_PlaceholderBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_PlaceholderBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_PlaceholderBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_PlaceholderBackground (value.m_IBrush.all);
   end;

   function get_PointerOverBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_PointerOverBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_PointerOverBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_PointerOverBackground (value.m_IBrush.all);
   end;

   function get_SelectedBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_SelectedBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_SelectedBackground (value.m_IBrush.all);
   end;

   function get_SelectedForeground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_SelectedForeground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedForeground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_SelectedForeground (value.m_IBrush.all);
   end;

   function get_SelectedPointerOverBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_SelectedPointerOverBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedPointerOverBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_SelectedPointerOverBackground (value.m_IBrush.all);
   end;

   function get_SelectedPointerOverBorderBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IListViewItemPresenter.all.get_SelectedPointerOverBorderBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedPointerOverBorderBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_SelectedPointerOverBorderBrush (value.m_IBrush.all);
   end;

   function get_SelectedBorderThickness
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_SelectedBorderThickness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedBorderThickness
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_SelectedBorderThickness (value);
   end;

   function get_DisabledOpacity
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_DisabledOpacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisabledOpacity
   (
      this : in out ListViewItemPresenter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_DisabledOpacity (value);
   end;

   function get_DragOpacity
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_DragOpacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DragOpacity
   (
      this : in out ListViewItemPresenter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_DragOpacity (value);
   end;

   function get_ReorderHintOffset
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_ReorderHintOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReorderHintOffset
   (
      this : in out ListViewItemPresenter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_ReorderHintOffset (value);
   end;

   function get_ListViewItemPresenterHorizontalContentAlignment
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.HorizontalAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.HorizontalAlignment;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_ListViewItemPresenterHorizontalContentAlignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ListViewItemPresenterHorizontalContentAlignment
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.HorizontalAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_ListViewItemPresenterHorizontalContentAlignment (value);
   end;

   function get_ListViewItemPresenterVerticalContentAlignment
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.VerticalAlignment is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.VerticalAlignment;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_ListViewItemPresenterVerticalContentAlignment (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ListViewItemPresenterVerticalContentAlignment
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.VerticalAlignment
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_ListViewItemPresenterVerticalContentAlignment (value);
   end;

   function get_ListViewItemPresenterPadding
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_ListViewItemPresenterPadding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ListViewItemPresenterPadding
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_ListViewItemPresenterPadding (value);
   end;

   function get_PointerOverBackgroundMargin
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_PointerOverBackgroundMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PointerOverBackgroundMargin
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_PointerOverBackgroundMargin (value);
   end;

   function get_ContentMargin
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IListViewItemPresenter.all.get_ContentMargin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ContentMargin
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IListViewItemPresenter.all.put_ContentMargin (value);
   end;

   function get_SelectedPressedBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_IListViewItemPresenter.all);
         Hr := m_Interface.get_SelectedPressedBackground (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_SelectedPressedBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_SelectedPressedBackground (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_PressedBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_IListViewItemPresenter.all);
         Hr := m_Interface.get_PressedBackground (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_PressedBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_PressedBackground (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_CheckBoxBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_IListViewItemPresenter.all);
         Hr := m_Interface.get_CheckBoxBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_CheckBoxBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_CheckBoxBrush (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_FocusSecondaryBorderBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_IListViewItemPresenter.all);
         Hr := m_Interface.get_FocusSecondaryBorderBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_FocusSecondaryBorderBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_FocusSecondaryBorderBrush (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_CheckMode
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.get_CheckMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CheckMode
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_CheckMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PointerOverForeground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_IListViewItemPresenter.all);
         Hr := m_Interface.get_PointerOverForeground (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_PointerOverForeground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_PointerOverForeground (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_RevealBackground
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_IListViewItemPresenter.all);
         Hr := m_Interface.get_RevealBackground (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_RevealBackground
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_RevealBackground (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_RevealBorderBrush
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         m_Interface := QInterface (this.m_IListViewItemPresenter.all);
         Hr := m_Interface.get_RevealBorderBrush (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_RevealBorderBrush
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_RevealBorderBrush (value.m_IBrush.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_RevealBorderThickness
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.get_RevealBorderThickness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RevealBorderThickness
   (
      this : in out ListViewItemPresenter;
      value : Windows.UI.Xaml.Thickness
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_RevealBorderThickness (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RevealBackgroundShowsAboveContent
   (
      this : in out ListViewItemPresenter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.get_RevealBackgroundShowsAboveContent (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RevealBackgroundShowsAboveContent
   (
      this : in out ListViewItemPresenter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IListViewItemPresenter3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IListViewItemPresenter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IListViewItemPresenter.all);
      Hr := m_Interface.put_RevealBackgroundShowsAboveContent (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ListViewItemTemplateSettings

   procedure Initialize (this : in out ListViewItemTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ListViewItemTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IListViewItemTemplateSettings, IListViewItemTemplateSettings_Ptr);
   begin
      if this.m_IListViewItemTemplateSettings /= null then
         if this.m_IListViewItemTemplateSettings.all /= null then
            RefCount := this.m_IListViewItemTemplateSettings.all.Release;
            Free (this.m_IListViewItemTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ListViewItemTemplateSettings

   function get_DragItemsCount
   (
      this : in out ListViewItemTemplateSettings
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IListViewItemTemplateSettings.all.get_DragItemsCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoopingSelector

   procedure Initialize (this : in out LoopingSelector) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoopingSelector) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoopingSelector, ILoopingSelector_Ptr);
   begin
      if this.m_ILoopingSelector /= null then
         if this.m_ILoopingSelector.all /= null then
            RefCount := this.m_ILoopingSelector.all.Release;
            Free (this.m_ILoopingSelector);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for LoopingSelector

   function get_ShouldLoopProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LoopingSelector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILoopingSelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShouldLoopProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ItemsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LoopingSelector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILoopingSelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ItemsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedIndexProperty_LoopingSelector
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LoopingSelector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILoopingSelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedIndexProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_SelectedItemProperty_LoopingSelector
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LoopingSelector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILoopingSelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SelectedItemProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ItemWidthProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LoopingSelector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILoopingSelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ItemWidthProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ItemHeightProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LoopingSelector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILoopingSelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ItemHeightProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ItemTemplateProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.LoopingSelector");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILoopingSelectorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ItemTemplateProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoopingSelector

   function get_ShouldLoop
   (
      this : in out LoopingSelector
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILoopingSelector.all.get_ShouldLoop (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShouldLoop
   (
      this : in out LoopingSelector;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.put_ShouldLoop (value);
   end;

   function get_Items
   (
      this : in out LoopingSelector
   )
   return IVector_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IInspectable.Kind;
   begin
      Hr := this.m_ILoopingSelector.all.get_Items (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Items
   (
      this : in out LoopingSelector;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.put_Items (value);
   end;

   function get_SelectedIndex
   (
      this : in out LoopingSelector
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILoopingSelector.all.get_SelectedIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedIndex
   (
      this : in out LoopingSelector;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.put_SelectedIndex (value);
   end;

   function get_SelectedItem
   (
      this : in out LoopingSelector
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_ILoopingSelector.all.get_SelectedItem (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedItem
   (
      this : in out LoopingSelector;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.put_SelectedItem (value);
   end;

   function get_ItemWidth
   (
      this : in out LoopingSelector
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILoopingSelector.all.get_ItemWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ItemWidth
   (
      this : in out LoopingSelector;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.put_ItemWidth (value);
   end;

   function get_ItemHeight
   (
      this : in out LoopingSelector
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ILoopingSelector.all.get_ItemHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ItemHeight
   (
      this : in out LoopingSelector;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.put_ItemHeight (value);
   end;

   function get_ItemTemplate
   (
      this : in out LoopingSelector
   )
   return WinRt.Windows.UI.Xaml.DataTemplate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDataTemplate;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DataTemplate do
         Hr := this.m_ILoopingSelector.all.get_ItemTemplate (m_ComRetVal'Access);
         Retval.m_IDataTemplate := new Windows.UI.Xaml.IDataTemplate;
         Retval.m_IDataTemplate.all := m_ComRetVal;
      end return;
   end;

   procedure put_ItemTemplate
   (
      this : in out LoopingSelector;
      value : Windows.UI.Xaml.DataTemplate'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.put_ItemTemplate (value.m_IDataTemplate.all);
   end;

   function add_SelectionChanged
   (
      this : in out LoopingSelector;
      handler : Windows.UI.Xaml.Controls.SelectionChangedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILoopingSelector.all.add_SelectionChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SelectionChanged
   (
      this : in out LoopingSelector;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILoopingSelector.all.remove_SelectionChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoopingSelectorItem

   procedure Initialize (this : in out LoopingSelectorItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoopingSelectorItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoopingSelectorItem, ILoopingSelectorItem_Ptr);
   begin
      if this.m_ILoopingSelectorItem /= null then
         if this.m_ILoopingSelectorItem.all /= null then
            RefCount := this.m_ILoopingSelectorItem.all.Release;
            Free (this.m_ILoopingSelectorItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoopingSelectorItem

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LoopingSelectorPanel

   procedure Initialize (this : in out LoopingSelectorPanel) is
   begin
      null;
   end;

   procedure Finalize (this : in out LoopingSelectorPanel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILoopingSelectorPanel, ILoopingSelectorPanel_Ptr);
   begin
      if this.m_ILoopingSelectorPanel /= null then
         if this.m_ILoopingSelectorPanel.all /= null then
            RefCount := this.m_ILoopingSelectorPanel.all.Release;
            Free (this.m_ILoopingSelectorPanel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LoopingSelectorPanel

   function get_AreHorizontalSnapPointsRegular
   (
      this : in out LoopingSelectorPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.get_AreHorizontalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AreVerticalSnapPointsRegular
   (
      this : in out LoopingSelectorPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.get_AreVerticalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_HorizontalSnapPointsChanged
   (
      this : in out LoopingSelectorPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.add_HorizontalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_HorizontalSnapPointsChanged
   (
      this : in out LoopingSelectorPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.remove_HorizontalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_VerticalSnapPointsChanged
   (
      this : in out LoopingSelectorPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.add_VerticalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_VerticalSnapPointsChanged
   (
      this : in out LoopingSelectorPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.remove_VerticalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetIrregularSnapPoints
   (
      this : in out LoopingSelectorPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment
   )
   return IVectorView_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Single.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.GetIrregularSnapPoints (orientation, alignment, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetRegularSnapPoints
   (
      this : in out LoopingSelectorPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment;
      offset : WinRt.Single_Ptr
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILoopingSelectorPanel.all);
      Hr := m_Interface.GetRegularSnapPoints (orientation, alignment, offset, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MenuFlyoutItemTemplateSettings

   procedure Initialize (this : in out MenuFlyoutItemTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out MenuFlyoutItemTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMenuFlyoutItemTemplateSettings, IMenuFlyoutItemTemplateSettings_Ptr);
   begin
      if this.m_IMenuFlyoutItemTemplateSettings /= null then
         if this.m_IMenuFlyoutItemTemplateSettings.all /= null then
            RefCount := this.m_IMenuFlyoutItemTemplateSettings.all.Release;
            Free (this.m_IMenuFlyoutItemTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MenuFlyoutItemTemplateSettings

   function get_KeyboardAcceleratorTextMinWidth
   (
      this : in out MenuFlyoutItemTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMenuFlyoutItemTemplateSettings.all.get_KeyboardAcceleratorTextMinWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MenuFlyoutPresenterTemplateSettings

   procedure Initialize (this : in out MenuFlyoutPresenterTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out MenuFlyoutPresenterTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMenuFlyoutPresenterTemplateSettings, IMenuFlyoutPresenterTemplateSettings_Ptr);
   begin
      if this.m_IMenuFlyoutPresenterTemplateSettings /= null then
         if this.m_IMenuFlyoutPresenterTemplateSettings.all /= null then
            RefCount := this.m_IMenuFlyoutPresenterTemplateSettings.all.Release;
            Free (this.m_IMenuFlyoutPresenterTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MenuFlyoutPresenterTemplateSettings

   function get_FlyoutContentMinWidth
   (
      this : in out MenuFlyoutPresenterTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMenuFlyoutPresenterTemplateSettings.all.get_FlyoutContentMinWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NavigationViewItemPresenter

   procedure Initialize (this : in out NavigationViewItemPresenter) is
   begin
      null;
   end;

   procedure Finalize (this : in out NavigationViewItemPresenter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INavigationViewItemPresenter, INavigationViewItemPresenter_Ptr);
   begin
      if this.m_INavigationViewItemPresenter /= null then
         if this.m_INavigationViewItemPresenter.all /= null then
            RefCount := this.m_INavigationViewItemPresenter.all.Release;
            Free (this.m_INavigationViewItemPresenter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NavigationViewItemPresenter

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return NavigationViewItemPresenter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter");
      m_Factory    : access INavigationViewItemPresenterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter;
   begin
      return RetVal : NavigationViewItemPresenter do
         Hr := RoGetActivationFactory (m_hString, IID_INavigationViewItemPresenterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_INavigationViewItemPresenter := new Windows.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter;
            Retval.m_INavigationViewItemPresenter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for NavigationViewItemPresenter

   function get_IconProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_INavigationViewItemPresenterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IconProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NavigationViewItemPresenter

   function get_Icon
   (
      this : in out NavigationViewItemPresenter
   )
   return WinRt.Windows.UI.Xaml.Controls.IconElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.IIconElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Controls.IconElement do
         Hr := this.m_INavigationViewItemPresenter.all.get_Icon (m_ComRetVal'Access);
         Retval.m_IIconElement := new Windows.UI.Xaml.Controls.IIconElement;
         Retval.m_IIconElement.all := m_ComRetVal;
      end return;
   end;

   procedure put_Icon
   (
      this : in out NavigationViewItemPresenter;
      value : Windows.UI.Xaml.Controls.IconElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INavigationViewItemPresenter.all.put_Icon (value.m_IIconElement.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OrientedVirtualizingPanel

   procedure Initialize (this : in out OrientedVirtualizingPanel) is
   begin
      null;
   end;

   procedure Finalize (this : in out OrientedVirtualizingPanel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOrientedVirtualizingPanel, IOrientedVirtualizingPanel_Ptr);
   begin
      if this.m_IOrientedVirtualizingPanel /= null then
         if this.m_IOrientedVirtualizingPanel.all /= null then
            RefCount := this.m_IOrientedVirtualizingPanel.all.Release;
            Free (this.m_IOrientedVirtualizingPanel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for OrientedVirtualizingPanel

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OrientedVirtualizingPanel

   function get_CanVerticallyScroll
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_CanVerticallyScroll (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CanVerticallyScroll
   (
      this : in out OrientedVirtualizingPanel;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.put_CanVerticallyScroll (value);
   end;

   function get_CanHorizontallyScroll
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_CanHorizontallyScroll (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CanHorizontallyScroll
   (
      this : in out OrientedVirtualizingPanel;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.put_CanHorizontallyScroll (value);
   end;

   function get_ExtentWidth
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_ExtentWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtentHeight
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_ExtentHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ViewportWidth
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_ViewportWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ViewportHeight
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_ViewportHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HorizontalOffset
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_HorizontalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VerticalOffset
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_VerticalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScrollOwner
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.get_ScrollOwner (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScrollOwner
   (
      this : in out OrientedVirtualizingPanel;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.put_ScrollOwner (value);
   end;

   procedure LineUp
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.LineUp;
   end;

   procedure LineDown
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.LineDown;
   end;

   procedure LineLeft
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.LineLeft;
   end;

   procedure LineRight
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.LineRight;
   end;

   procedure PageUp
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.PageUp;
   end;

   procedure PageDown
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.PageDown;
   end;

   procedure PageLeft
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.PageLeft;
   end;

   procedure PageRight
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.PageRight;
   end;

   procedure MouseWheelUp
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.MouseWheelUp;
   end;

   procedure MouseWheelDown
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.MouseWheelDown;
   end;

   procedure MouseWheelLeft
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.MouseWheelLeft;
   end;

   procedure MouseWheelRight
   (
      this : in out OrientedVirtualizingPanel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.MouseWheelRight;
   end;

   procedure SetHorizontalOffset
   (
      this : in out OrientedVirtualizingPanel;
      offset : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.SetHorizontalOffset (offset);
   end;

   procedure SetVerticalOffset
   (
      this : in out OrientedVirtualizingPanel;
      offset : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.SetVerticalOffset (offset);
   end;

   function MakeVisible
   (
      this : in out OrientedVirtualizingPanel;
      visual : Windows.UI.Xaml.UIElement'Class;
      rectangle : Windows.Foundation.Rect
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IOrientedVirtualizingPanel.all.MakeVisible (visual.m_IUIElement.all, rectangle, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AreHorizontalSnapPointsRegular
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.get_AreHorizontalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AreVerticalSnapPointsRegular
   (
      this : in out OrientedVirtualizingPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.get_AreVerticalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_HorizontalSnapPointsChanged
   (
      this : in out OrientedVirtualizingPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.add_HorizontalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_HorizontalSnapPointsChanged
   (
      this : in out OrientedVirtualizingPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.remove_HorizontalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_VerticalSnapPointsChanged
   (
      this : in out OrientedVirtualizingPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.add_VerticalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_VerticalSnapPointsChanged
   (
      this : in out OrientedVirtualizingPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.remove_VerticalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetIrregularSnapPoints
   (
      this : in out OrientedVirtualizingPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment
   )
   return IVectorView_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Single.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.GetIrregularSnapPoints (orientation, alignment, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetRegularSnapPoints
   (
      this : in out OrientedVirtualizingPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment;
      offset : WinRt.Single_Ptr
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.GetRegularSnapPoints (orientation, alignment, offset, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure GetInsertionIndexes
   (
      this : in out OrientedVirtualizingPanel;
      position : Windows.Foundation.Point;
      first : WinRt.Int32_Ptr;
      second : WinRt.Int32_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.IInsertionPanel := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel_Interface, WinRt.Windows.UI.Xaml.Controls.IInsertionPanel, WinRt.Windows.UI.Xaml.Controls.IID_IInsertionPanel'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOrientedVirtualizingPanel.all);
      Hr := m_Interface.GetInsertionIndexes (position, first, second);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PivotHeaderItem

   procedure Initialize (this : in out PivotHeaderItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out PivotHeaderItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPivotHeaderItem, IPivotHeaderItem_Ptr);
   begin
      if this.m_IPivotHeaderItem /= null then
         if this.m_IPivotHeaderItem.all /= null then
            RefCount := this.m_IPivotHeaderItem.all.Release;
            Free (this.m_IPivotHeaderItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PivotHeaderItem

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return PivotHeaderItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.PivotHeaderItem");
      m_Factory    : access IPivotHeaderItemFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IPivotHeaderItem;
   begin
      return RetVal : PivotHeaderItem do
         Hr := RoGetActivationFactory (m_hString, IID_IPivotHeaderItemFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IPivotHeaderItem := new Windows.UI.Xaml.Controls.Primitives.IPivotHeaderItem;
            Retval.m_IPivotHeaderItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PivotHeaderItem

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PivotHeaderPanel

   procedure Initialize (this : in out PivotHeaderPanel) is
   begin
      null;
   end;

   procedure Finalize (this : in out PivotHeaderPanel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPivotHeaderPanel, IPivotHeaderPanel_Ptr);
   begin
      if this.m_IPivotHeaderPanel /= null then
         if this.m_IPivotHeaderPanel.all /= null then
            RefCount := this.m_IPivotHeaderPanel.all.Release;
            Free (this.m_IPivotHeaderPanel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PivotHeaderPanel

   function Constructor return PivotHeaderPanel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.PivotHeaderPanel");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IPivotHeaderPanel;
   begin
      return RetVal : PivotHeaderPanel do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPivotHeaderPanel := new Windows.UI.Xaml.Controls.Primitives.IPivotHeaderPanel;
            Retval.m_IPivotHeaderPanel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PivotHeaderPanel

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PivotPanel

   procedure Initialize (this : in out PivotPanel) is
   begin
      null;
   end;

   procedure Finalize (this : in out PivotPanel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPivotPanel, IPivotPanel_Ptr);
   begin
      if this.m_IPivotPanel /= null then
         if this.m_IPivotPanel.all /= null then
            RefCount := this.m_IPivotPanel.all.Release;
            Free (this.m_IPivotPanel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PivotPanel

   function Constructor return PivotPanel is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.PivotPanel");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IPivotPanel;
   begin
      return RetVal : PivotPanel do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPivotPanel := new Windows.UI.Xaml.Controls.Primitives.IPivotPanel;
            Retval.m_IPivotPanel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PivotPanel

   function get_AreHorizontalSnapPointsRegular
   (
      this : in out PivotPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.get_AreHorizontalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AreVerticalSnapPointsRegular
   (
      this : in out PivotPanel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.get_AreVerticalSnapPointsRegular (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_HorizontalSnapPointsChanged
   (
      this : in out PivotPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.add_HorizontalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_HorizontalSnapPointsChanged
   (
      this : in out PivotPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.remove_HorizontalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_VerticalSnapPointsChanged
   (
      this : in out PivotPanel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.add_VerticalSnapPointsChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_VerticalSnapPointsChanged
   (
      this : in out PivotPanel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.remove_VerticalSnapPointsChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetIrregularSnapPoints
   (
      this : in out PivotPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment
   )
   return IVectorView_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Single.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.GetIrregularSnapPoints (orientation, alignment, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetRegularSnapPoints
   (
      this : in out PivotPanel;
      orientation : Windows.UI.Xaml.Controls.Orientation;
      alignment : Windows.UI.Xaml.Controls.Primitives.SnapPointsAlignment;
      offset : WinRt.Single_Ptr
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPivotPanel_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IScrollSnapPointsInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPivotPanel.all);
      Hr := m_Interface.GetRegularSnapPoints (orientation, alignment, offset, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Popup

   procedure Initialize (this : in out Popup) is
   begin
      null;
   end;

   procedure Finalize (this : in out Popup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPopup, IPopup_Ptr);
   begin
      if this.m_IPopup /= null then
         if this.m_IPopup.all /= null then
            RefCount := this.m_IPopup.all.Release;
            Free (this.m_IPopup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Popup

   function Constructor return Popup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IPopup;
   begin
      return RetVal : Popup do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPopup := new Windows.UI.Xaml.Controls.Primitives.IPopup;
            Retval.m_IPopup.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Popup

   function get_LightDismissOverlayModeProperty_Popup
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LightDismissOverlayModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ShouldConstrainToRootBoundsProperty_Popup
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShouldConstrainToRootBoundsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ChildProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ChildProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsOpenProperty_Popup
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsOpenProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_HorizontalOffsetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HorizontalOffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_VerticalOffsetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VerticalOffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ChildTransitionsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ChildTransitionsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IsLightDismissEnabledProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Popup");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IPopupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPopupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsLightDismissEnabledProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Popup

   function get_Child
   (
      this : in out Popup
   )
   return WinRt.Windows.UI.Xaml.UIElement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IUIElement;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.UIElement do
         Hr := this.m_IPopup.all.get_Child (m_ComRetVal'Access);
         Retval.m_IUIElement := new Windows.UI.Xaml.IUIElement;
         Retval.m_IUIElement.all := m_ComRetVal;
      end return;
   end;

   procedure put_Child
   (
      this : in out Popup;
      value : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.put_Child (value.m_IUIElement.all);
   end;

   function get_IsOpen
   (
      this : in out Popup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPopup.all.get_IsOpen (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsOpen
   (
      this : in out Popup;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.put_IsOpen (value);
   end;

   function get_HorizontalOffset
   (
      this : in out Popup
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPopup.all.get_HorizontalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HorizontalOffset
   (
      this : in out Popup;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.put_HorizontalOffset (value);
   end;

   function get_VerticalOffset
   (
      this : in out Popup
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPopup.all.get_VerticalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VerticalOffset
   (
      this : in out Popup;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.put_VerticalOffset (value);
   end;

   function get_ChildTransitions
   (
      this : in out Popup
   )
   return WinRt.Windows.UI.Xaml.Media.Animation.TransitionCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Animation.TransitionCollection do
         Hr := this.m_IPopup.all.get_ChildTransitions (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_ChildTransitions
   (
      this : in out Popup;
      value : Windows.UI.Xaml.Media.Animation.TransitionCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.put_ChildTransitions (value.m_GenericObject.all);
   end;

   function get_IsLightDismissEnabled
   (
      this : in out Popup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPopup.all.get_IsLightDismissEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsLightDismissEnabled
   (
      this : in out Popup;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.put_IsLightDismissEnabled (value);
   end;

   function add_Opened
   (
      this : in out Popup;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPopup.all.add_Opened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Opened
   (
      this : in out Popup;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.remove_Opened (token);
   end;

   function add_Closed
   (
      this : in out Popup;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPopup.all.add_Closed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out Popup;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPopup.all.remove_Closed (token);
   end;

   function get_LightDismissOverlayMode
   (
      this : in out Popup
   )
   return WinRt.Windows.UI.Xaml.Controls.LightDismissOverlayMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.LightDismissOverlayMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IPopup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPopup.all);
      Hr := m_Interface.get_LightDismissOverlayMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LightDismissOverlayMode
   (
      this : in out Popup;
      value : Windows.UI.Xaml.Controls.LightDismissOverlayMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup2, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IPopup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPopup.all);
      Hr := m_Interface.put_LightDismissOverlayMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ShouldConstrainToRootBounds
   (
      this : in out Popup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IPopup3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPopup.all);
      Hr := m_Interface.get_ShouldConstrainToRootBounds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ShouldConstrainToRootBounds
   (
      this : in out Popup;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IPopup3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPopup.all);
      Hr := m_Interface.put_ShouldConstrainToRootBounds (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsConstrainedToRootBounds
   (
      this : in out Popup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup_Interface, WinRt.Windows.UI.Xaml.Controls.Primitives.IPopup3, WinRt.Windows.UI.Xaml.Controls.Primitives.IID_IPopup3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPopup.all);
      Hr := m_Interface.get_IsConstrainedToRootBounds (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProgressBarTemplateSettings

   procedure Initialize (this : in out ProgressBarTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProgressBarTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProgressBarTemplateSettings, IProgressBarTemplateSettings_Ptr);
   begin
      if this.m_IProgressBarTemplateSettings /= null then
         if this.m_IProgressBarTemplateSettings.all /= null then
            RefCount := this.m_IProgressBarTemplateSettings.all.Release;
            Free (this.m_IProgressBarTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProgressBarTemplateSettings

   function get_EllipseDiameter
   (
      this : in out ProgressBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressBarTemplateSettings.all.get_EllipseDiameter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EllipseOffset
   (
      this : in out ProgressBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressBarTemplateSettings.all.get_EllipseOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EllipseAnimationWellPosition
   (
      this : in out ProgressBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressBarTemplateSettings.all.get_EllipseAnimationWellPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EllipseAnimationEndPosition
   (
      this : in out ProgressBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressBarTemplateSettings.all.get_EllipseAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContainerAnimationStartPosition
   (
      this : in out ProgressBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressBarTemplateSettings.all.get_ContainerAnimationStartPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContainerAnimationEndPosition
   (
      this : in out ProgressBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressBarTemplateSettings.all.get_ContainerAnimationEndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IndicatorLengthDelta
   (
      this : in out ProgressBarTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressBarTemplateSettings.all.get_IndicatorLengthDelta (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProgressRingTemplateSettings

   procedure Initialize (this : in out ProgressRingTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProgressRingTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProgressRingTemplateSettings, IProgressRingTemplateSettings_Ptr);
   begin
      if this.m_IProgressRingTemplateSettings /= null then
         if this.m_IProgressRingTemplateSettings.all /= null then
            RefCount := this.m_IProgressRingTemplateSettings.all.Release;
            Free (this.m_IProgressRingTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProgressRingTemplateSettings

   function get_EllipseDiameter
   (
      this : in out ProgressRingTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressRingTemplateSettings.all.get_EllipseDiameter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EllipseOffset
   (
      this : in out ProgressRingTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_IProgressRingTemplateSettings.all.get_EllipseOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxSideLength
   (
      this : in out ProgressRingTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IProgressRingTemplateSettings.all.get_MaxSideLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RangeBaseValueChangedEventArgs

   procedure Initialize (this : in out RangeBaseValueChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out RangeBaseValueChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRangeBaseValueChangedEventArgs, IRangeBaseValueChangedEventArgs_Ptr);
   begin
      if this.m_IRangeBaseValueChangedEventArgs /= null then
         if this.m_IRangeBaseValueChangedEventArgs.all /= null then
            RefCount := this.m_IRangeBaseValueChangedEventArgs.all.Release;
            Free (this.m_IRangeBaseValueChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RangeBaseValueChangedEventArgs

   function get_OldValue
   (
      this : in out RangeBaseValueChangedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRangeBaseValueChangedEventArgs.all.get_OldValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewValue
   (
      this : in out RangeBaseValueChangedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRangeBaseValueChangedEventArgs.all.get_NewValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate RangeBaseValueChangedEventHandler

   function Invoke
   (
      this : access RangeBaseValueChangedEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RepeatButton

   procedure Initialize (this : in out RepeatButton) is
   begin
      null;
   end;

   procedure Finalize (this : in out RepeatButton) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRepeatButton, IRepeatButton_Ptr);
   begin
      if this.m_IRepeatButton /= null then
         if this.m_IRepeatButton.all /= null then
            RefCount := this.m_IRepeatButton.all.Release;
            Free (this.m_IRepeatButton);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RepeatButton

   function Constructor return RepeatButton is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RepeatButton");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IRepeatButton;
   begin
      return RetVal : RepeatButton do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRepeatButton := new Windows.UI.Xaml.Controls.Primitives.IRepeatButton;
            Retval.m_IRepeatButton.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RepeatButton

   function get_DelayProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RepeatButton");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IRepeatButtonStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRepeatButtonStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DelayProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IntervalProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.RepeatButton");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IRepeatButtonStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRepeatButtonStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IntervalProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RepeatButton

   function get_Delay
   (
      this : in out RepeatButton
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRepeatButton.all.get_Delay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Delay
   (
      this : in out RepeatButton;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRepeatButton.all.put_Delay (value);
   end;

   function get_Interval
   (
      this : in out RepeatButton
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IRepeatButton.all.get_Interval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Interval
   (
      this : in out RepeatButton;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRepeatButton.all.put_Interval (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScrollBar

   procedure Initialize (this : in out ScrollBar) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScrollBar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScrollBar, IScrollBar_Ptr);
   begin
      if this.m_IScrollBar /= null then
         if this.m_IScrollBar.all /= null then
            RefCount := this.m_IScrollBar.all.Release;
            Free (this.m_IScrollBar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScrollBar

   function Constructor return ScrollBar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ScrollBar");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IScrollBar;
   begin
      return RetVal : ScrollBar do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IScrollBar := new Windows.UI.Xaml.Controls.Primitives.IScrollBar;
            Retval.m_IScrollBar.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ScrollBar

   function get_OrientationProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ScrollBar");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollBarStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IScrollBarStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OrientationProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ViewportSizeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ScrollBar");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollBarStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IScrollBarStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ViewportSizeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_IndicatorModeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ScrollBar");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IScrollBarStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IScrollBarStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IndicatorModeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScrollBar

   function get_Orientation
   (
      this : in out ScrollBar
   )
   return WinRt.Windows.UI.Xaml.Controls.Orientation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Orientation;
   begin
      Hr := this.m_IScrollBar.all.get_Orientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Orientation
   (
      this : in out ScrollBar;
      value : Windows.UI.Xaml.Controls.Orientation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScrollBar.all.put_Orientation (value);
   end;

   function get_ViewportSize
   (
      this : in out ScrollBar
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IScrollBar.all.get_ViewportSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewportSize
   (
      this : in out ScrollBar;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScrollBar.all.put_ViewportSize (value);
   end;

   function get_IndicatorMode
   (
      this : in out ScrollBar
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode;
   begin
      Hr := this.m_IScrollBar.all.get_IndicatorMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IndicatorMode
   (
      this : in out ScrollBar;
      value : Windows.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScrollBar.all.put_IndicatorMode (value);
   end;

   function add_Scroll
   (
      this : in out ScrollBar;
      handler : Windows.UI.Xaml.Controls.Primitives.ScrollEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IScrollBar.all.add_Scroll (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Scroll
   (
      this : in out ScrollBar;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScrollBar.all.remove_Scroll (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScrollEventArgs

   procedure Initialize (this : in out ScrollEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScrollEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScrollEventArgs, IScrollEventArgs_Ptr);
   begin
      if this.m_IScrollEventArgs /= null then
         if this.m_IScrollEventArgs.all /= null then
            RefCount := this.m_IScrollEventArgs.all.Release;
            Free (this.m_IScrollEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ScrollEventArgs

   function Constructor return ScrollEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.ScrollEventArgs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IScrollEventArgs;
   begin
      return RetVal : ScrollEventArgs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IScrollEventArgs := new Windows.UI.Xaml.Controls.Primitives.IScrollEventArgs;
            Retval.m_IScrollEventArgs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScrollEventArgs

   function get_NewValue
   (
      this : in out ScrollEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IScrollEventArgs.all.get_NewValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ScrollEventType
   (
      this : in out ScrollEventArgs
   )
   return WinRt.Windows.UI.Xaml.Controls.Primitives.ScrollEventType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Controls.Primitives.ScrollEventType;
   begin
      Hr := this.m_IScrollEventArgs.all.get_ScrollEventType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate ScrollEventHandler

   function Invoke
   (
      this : access ScrollEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Controls.Primitives.IScrollEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SettingsFlyoutTemplateSettings

   procedure Initialize (this : in out SettingsFlyoutTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out SettingsFlyoutTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISettingsFlyoutTemplateSettings, ISettingsFlyoutTemplateSettings_Ptr);
   begin
      if this.m_ISettingsFlyoutTemplateSettings /= null then
         if this.m_ISettingsFlyoutTemplateSettings.all /= null then
            RefCount := this.m_ISettingsFlyoutTemplateSettings.all.Release;
            Free (this.m_ISettingsFlyoutTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SettingsFlyoutTemplateSettings

   function get_HeaderBackground
   (
      this : in out SettingsFlyoutTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_ISettingsFlyoutTemplateSettings.all.get_HeaderBackground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   function get_HeaderForeground
   (
      this : in out SettingsFlyoutTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_ISettingsFlyoutTemplateSettings.all.get_HeaderForeground (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   function get_BorderBrush
   (
      this : in out SettingsFlyoutTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_ISettingsFlyoutTemplateSettings.all.get_BorderBrush (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   function get_BorderThickness
   (
      this : in out SettingsFlyoutTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Thickness is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Thickness;
   begin
      Hr := this.m_ISettingsFlyoutTemplateSettings.all.get_BorderThickness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IconSource
   (
      this : in out SettingsFlyoutTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Media.ImageSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IImageSource;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.ImageSource do
         Hr := this.m_ISettingsFlyoutTemplateSettings.all.get_IconSource (m_ComRetVal'Access);
         Retval.m_IImageSource := new Windows.UI.Xaml.Media.IImageSource;
         Retval.m_IImageSource.all := m_ComRetVal;
      end return;
   end;

   function get_ContentTransitions
   (
      this : in out SettingsFlyoutTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.Media.Animation.TransitionCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Animation.TransitionCollection do
         Hr := this.m_ISettingsFlyoutTemplateSettings.all.get_ContentTransitions (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SplitViewTemplateSettings

   procedure Initialize (this : in out SplitViewTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out SplitViewTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISplitViewTemplateSettings, ISplitViewTemplateSettings_Ptr);
   begin
      if this.m_ISplitViewTemplateSettings /= null then
         if this.m_ISplitViewTemplateSettings.all /= null then
            RefCount := this.m_ISplitViewTemplateSettings.all.Release;
            Free (this.m_ISplitViewTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SplitViewTemplateSettings

   function get_OpenPaneLength
   (
      this : in out SplitViewTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISplitViewTemplateSettings.all.get_OpenPaneLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NegativeOpenPaneLength
   (
      this : in out SplitViewTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISplitViewTemplateSettings.all.get_NegativeOpenPaneLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OpenPaneLengthMinusCompactLength
   (
      this : in out SplitViewTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISplitViewTemplateSettings.all.get_OpenPaneLengthMinusCompactLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NegativeOpenPaneLengthMinusCompactLength
   (
      this : in out SplitViewTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ISplitViewTemplateSettings.all.get_NegativeOpenPaneLengthMinusCompactLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OpenPaneGridLength
   (
      this : in out SplitViewTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.GridLength is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.GridLength;
   begin
      Hr := this.m_ISplitViewTemplateSettings.all.get_OpenPaneGridLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CompactPaneGridLength
   (
      this : in out SplitViewTemplateSettings
   )
   return WinRt.Windows.UI.Xaml.GridLength is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.GridLength;
   begin
      Hr := this.m_ISplitViewTemplateSettings.all.get_CompactPaneGridLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Thumb

   procedure Initialize (this : in out Thumb) is
   begin
      null;
   end;

   procedure Finalize (this : in out Thumb) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IThumb, IThumb_Ptr);
   begin
      if this.m_IThumb /= null then
         if this.m_IThumb.all /= null then
            RefCount := this.m_IThumb.all.Release;
            Free (this.m_IThumb);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Thumb

   function Constructor return Thumb is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Thumb");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.IThumb;
   begin
      return RetVal : Thumb do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IThumb := new Windows.UI.Xaml.Controls.Primitives.IThumb;
            Retval.m_IThumb.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Thumb

   function get_IsDraggingProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.Thumb");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.IThumbStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IThumbStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IsDraggingProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Thumb

   function get_IsDragging
   (
      this : in out Thumb
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IThumb.all.get_IsDragging (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_DragStarted
   (
      this : in out Thumb;
      handler : Windows.UI.Xaml.Controls.Primitives.DragStartedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IThumb.all.add_DragStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DragStarted
   (
      this : in out Thumb;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IThumb.all.remove_DragStarted (token);
   end;

   function add_DragDelta
   (
      this : in out Thumb;
      handler : Windows.UI.Xaml.Controls.Primitives.DragDeltaEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IThumb.all.add_DragDelta (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DragDelta
   (
      this : in out Thumb;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IThumb.all.remove_DragDelta (token);
   end;

   function add_DragCompleted
   (
      this : in out Thumb;
      handler : Windows.UI.Xaml.Controls.Primitives.DragCompletedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IThumb.all.add_DragCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DragCompleted
   (
      this : in out Thumb;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IThumb.all.remove_DragCompleted (token);
   end;

   procedure CancelDrag
   (
      this : in out Thumb
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IThumb.all.CancelDrag;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TickBar

   procedure Initialize (this : in out TickBar) is
   begin
      null;
   end;

   procedure Finalize (this : in out TickBar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITickBar, ITickBar_Ptr);
   begin
      if this.m_ITickBar /= null then
         if this.m_ITickBar.all /= null then
            RefCount := this.m_ITickBar.all.Release;
            Free (this.m_ITickBar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TickBar

   function Constructor return TickBar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.TickBar");
      m_ComRetVal  : aliased Windows.UI.Xaml.Controls.Primitives.ITickBar;
   begin
      return RetVal : TickBar do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ITickBar := new Windows.UI.Xaml.Controls.Primitives.ITickBar;
            Retval.m_ITickBar.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TickBar

   function get_FillProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Controls.Primitives.TickBar");
      m_Factory        : access WinRt.Windows.UI.Xaml.Controls.Primitives.ITickBarStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ITickBarStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FillProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TickBar

   function get_Fill
   (
      this : in out TickBar
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_ITickBar.all.get_Fill (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Fill
   (
      this : in out TickBar;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITickBar.all.put_Fill (value.m_IBrush.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToggleSwitchTemplateSettings

   procedure Initialize (this : in out ToggleSwitchTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToggleSwitchTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToggleSwitchTemplateSettings, IToggleSwitchTemplateSettings_Ptr);
   begin
      if this.m_IToggleSwitchTemplateSettings /= null then
         if this.m_IToggleSwitchTemplateSettings.all /= null then
            RefCount := this.m_IToggleSwitchTemplateSettings.all.Release;
            Free (this.m_IToggleSwitchTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToggleSwitchTemplateSettings

   function get_KnobCurrentToOnOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_KnobCurrentToOnOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_KnobCurrentToOffOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_KnobCurrentToOffOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_KnobOnToOffOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_KnobOnToOffOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_KnobOffToOnOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_KnobOffToOnOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurtainCurrentToOnOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_CurtainCurrentToOnOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurtainCurrentToOffOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_CurtainCurrentToOffOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurtainOnToOffOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_CurtainOnToOffOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurtainOffToOnOffset
   (
      this : in out ToggleSwitchTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToggleSwitchTemplateSettings.all.get_CurtainOffToOnOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToolTipTemplateSettings

   procedure Initialize (this : in out ToolTipTemplateSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToolTipTemplateSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IToolTipTemplateSettings, IToolTipTemplateSettings_Ptr);
   begin
      if this.m_IToolTipTemplateSettings /= null then
         if this.m_IToolTipTemplateSettings.all /= null then
            RefCount := this.m_IToolTipTemplateSettings.all.Release;
            Free (this.m_IToolTipTemplateSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToolTipTemplateSettings

   function get_FromHorizontalOffset
   (
      this : in out ToolTipTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToolTipTemplateSettings.all.get_FromHorizontalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FromVerticalOffset
   (
      this : in out ToolTipTemplateSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IToolTipTemplateSettings.all.get_FromVerticalOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

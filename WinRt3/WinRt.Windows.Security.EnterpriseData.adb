--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.EnterpriseData is

   package IAsyncOperation_BufferProtectUnprotectResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.IBufferProtectUnprotectResult);
   package AsyncOperationCompletedHandler_BufferProtectUnprotectResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.IBufferProtectUnprotectResult);

   package IAsyncOperation_DataProtectionInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.IDataProtectionInfo);
   package AsyncOperationCompletedHandler_DataProtectionInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.IDataProtectionInfo);

   package IAsyncOperation_FileProtectionInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo);
   package AsyncOperationCompletedHandler_FileProtectionInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_ProtectedContainerExportResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.IProtectedContainerExportResult);
   package AsyncOperationCompletedHandler_ProtectedContainerExportResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.IProtectedContainerExportResult);

   package IAsyncOperation_ProtectedContainerImportResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.IProtectedContainerImportResult);
   package AsyncOperationCompletedHandler_ProtectedContainerImportResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.IProtectedContainerImportResult);

   package IAsyncOperation_ProtectedFileCreateResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.IProtectedFileCreateResult);
   package AsyncOperationCompletedHandler_ProtectedFileCreateResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.IProtectedFileCreateResult);

   package IAsyncOperation_FileProtectionStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.FileProtectionStatus);
   package AsyncOperationCompletedHandler_FileProtectionStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.FileProtectionStatus);

   package IAsyncOperation_ProtectionPolicyEvaluationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult);
   package AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BufferProtectUnprotectResult

   procedure Initialize (this : in out BufferProtectUnprotectResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out BufferProtectUnprotectResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBufferProtectUnprotectResult, IBufferProtectUnprotectResult_Ptr);
   begin
      if this.m_IBufferProtectUnprotectResult /= null then
         if this.m_IBufferProtectUnprotectResult.all /= null then
            RefCount := this.m_IBufferProtectUnprotectResult.all.Release;
            Free (this.m_IBufferProtectUnprotectResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BufferProtectUnprotectResult

   function get_Buffer
   (
      this : in out BufferProtectUnprotectResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IBufferProtectUnprotectResult.all.get_Buffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtectionInfo
   (
      this : in out BufferProtectUnprotectResult
   )
   return WinRt.Windows.Security.EnterpriseData.DataProtectionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.IDataProtectionInfo;
   begin
      return RetVal : WinRt.Windows.Security.EnterpriseData.DataProtectionInfo do
         Hr := this.m_IBufferProtectUnprotectResult.all.get_ProtectionInfo (m_ComRetVal'Access);
         Retval.m_IDataProtectionInfo := new Windows.Security.EnterpriseData.IDataProtectionInfo;
         Retval.m_IDataProtectionInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataProtectionInfo

   procedure Initialize (this : in out DataProtectionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataProtectionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataProtectionInfo, IDataProtectionInfo_Ptr);
   begin
      if this.m_IDataProtectionInfo /= null then
         if this.m_IDataProtectionInfo.all /= null then
            RefCount := this.m_IDataProtectionInfo.all.Release;
            Free (this.m_IDataProtectionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataProtectionInfo

   function get_Status
   (
      this : in out DataProtectionInfo
   )
   return WinRt.Windows.Security.EnterpriseData.DataProtectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.DataProtectionStatus;
   begin
      Hr := this.m_IDataProtectionInfo.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Identity
   (
      this : in out DataProtectionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataProtectionInfo.all.get_Identity (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body DataProtectionManager is

      function ProtectAsync
      (
         data : Windows.Storage.Streams.IBuffer;
         identity : WinRt.WString
      )
      return WinRt.Windows.Security.EnterpriseData.BufferProtectUnprotectResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.DataProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IDataProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_identity : WinRt.HString := To_HString (identity);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_BufferProtectUnprotectResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_BufferProtectUnprotectResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IBufferProtectUnprotectResult;
         m_IID            : aliased WinRt.IID := (301554222, 11911, 21577, (188, 163, 220, 223, 42, 230, 225, 122 )); -- Windows.Security.EnterpriseData.BufferProtectUnprotectResult;
         m_HandlerIID     : aliased WinRt.IID := (1943503051, 44344, 23014, (162, 54, 204, 13, 246, 159, 21, 168 ));
         m_Handler        : AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind := new AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BufferProtectUnprotectResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind_Delegate, AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.BufferProtectUnprotectResult do
            Hr := RoGetActivationFactory (m_hString, IID_IDataProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ProtectAsync (data, HStr_identity, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IBufferProtectUnprotectResult := new Windows.Security.EnterpriseData.IBufferProtectUnprotectResult;
                        Retval.m_IBufferProtectUnprotectResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_identity);
         end return;
      end;

      function UnprotectAsync
      (
         data : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Security.EnterpriseData.BufferProtectUnprotectResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.DataProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IDataProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_BufferProtectUnprotectResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_BufferProtectUnprotectResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IBufferProtectUnprotectResult;
         m_IID            : aliased WinRt.IID := (301554222, 11911, 21577, (188, 163, 220, 223, 42, 230, 225, 122 )); -- Windows.Security.EnterpriseData.BufferProtectUnprotectResult;
         m_HandlerIID     : aliased WinRt.IID := (1943503051, 44344, 23014, (162, 54, 204, 13, 246, 159, 21, 168 ));
         m_Handler        : AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind := new AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BufferProtectUnprotectResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind_Delegate, AsyncOperationCompletedHandler_BufferProtectUnprotectResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.BufferProtectUnprotectResult do
            Hr := RoGetActivationFactory (m_hString, IID_IDataProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.UnprotectAsync (data, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IBufferProtectUnprotectResult := new Windows.Security.EnterpriseData.IBufferProtectUnprotectResult;
                        Retval.m_IBufferProtectUnprotectResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function ProtectStreamAsync
      (
         unprotectedStream : Windows.Storage.Streams.IInputStream;
         identity : WinRt.WString;
         protectedStream : Windows.Storage.Streams.IOutputStream
      )
      return WinRt.Windows.Security.EnterpriseData.DataProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.DataProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IDataProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_identity : WinRt.HString := To_HString (identity);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_DataProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_DataProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IDataProtectionInfo;
         m_IID            : aliased WinRt.IID := (3371122454, 56688, 24200, (147, 35, 133, 221, 221, 205, 44, 165 )); -- Windows.Security.EnterpriseData.DataProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (3777737845, 16171, 20937, (131, 198, 165, 102, 16, 134, 182, 195 ));
         m_Handler        : AsyncOperationCompletedHandler_DataProtectionInfo.Kind := new AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DataProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DataProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_DataProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.DataProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IDataProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ProtectStreamAsync (unprotectedStream, HStr_identity, protectedStream, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IDataProtectionInfo := new Windows.Security.EnterpriseData.IDataProtectionInfo;
                        Retval.m_IDataProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_identity);
         end return;
      end;

      function UnprotectStreamAsync
      (
         protectedStream : Windows.Storage.Streams.IInputStream;
         unprotectedStream : Windows.Storage.Streams.IOutputStream
      )
      return WinRt.Windows.Security.EnterpriseData.DataProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.DataProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IDataProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_DataProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_DataProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IDataProtectionInfo;
         m_IID            : aliased WinRt.IID := (3371122454, 56688, 24200, (147, 35, 133, 221, 221, 205, 44, 165 )); -- Windows.Security.EnterpriseData.DataProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (3777737845, 16171, 20937, (131, 198, 165, 102, 16, 134, 182, 195 ));
         m_Handler        : AsyncOperationCompletedHandler_DataProtectionInfo.Kind := new AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DataProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DataProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_DataProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.DataProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IDataProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.UnprotectStreamAsync (protectedStream, unprotectedStream, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IDataProtectionInfo := new Windows.Security.EnterpriseData.IDataProtectionInfo;
                        Retval.m_IDataProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetProtectionInfoAsync
      (
         protectedData : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Security.EnterpriseData.DataProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.DataProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IDataProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_DataProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_DataProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IDataProtectionInfo;
         m_IID            : aliased WinRt.IID := (3371122454, 56688, 24200, (147, 35, 133, 221, 221, 205, 44, 165 )); -- Windows.Security.EnterpriseData.DataProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (3777737845, 16171, 20937, (131, 198, 165, 102, 16, 134, 182, 195 ));
         m_Handler        : AsyncOperationCompletedHandler_DataProtectionInfo.Kind := new AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DataProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DataProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_DataProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.DataProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IDataProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetProtectionInfoAsync (protectedData, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IDataProtectionInfo := new Windows.Security.EnterpriseData.IDataProtectionInfo;
                        Retval.m_IDataProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetStreamProtectionInfoAsync
      (
         protectedStream : Windows.Storage.Streams.IInputStream
      )
      return WinRt.Windows.Security.EnterpriseData.DataProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.DataProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IDataProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_DataProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_DataProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IDataProtectionInfo;
         m_IID            : aliased WinRt.IID := (3371122454, 56688, 24200, (147, 35, 133, 221, 221, 205, 44, 165 )); -- Windows.Security.EnterpriseData.DataProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (3777737845, 16171, 20937, (131, 198, 165, 102, 16, 134, 182, 195 ));
         m_Handler        : AsyncOperationCompletedHandler_DataProtectionInfo.Kind := new AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DataProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DataProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DataProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_DataProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.DataProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IDataProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetStreamProtectionInfoAsync (protectedStream, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IDataProtectionInfo := new Windows.Security.EnterpriseData.IDataProtectionInfo;
                        Retval.m_IDataProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end DataProtectionManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileProtectionInfo

   procedure Initialize (this : in out FileProtectionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileProtectionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileProtectionInfo, IFileProtectionInfo_Ptr);
   begin
      if this.m_IFileProtectionInfo /= null then
         if this.m_IFileProtectionInfo.all /= null then
            RefCount := this.m_IFileProtectionInfo.all.Release;
            Free (this.m_IFileProtectionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileProtectionInfo

   function get_Status
   (
      this : in out FileProtectionInfo
   )
   return WinRt.Windows.Security.EnterpriseData.FileProtectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.FileProtectionStatus;
   begin
      Hr := this.m_IFileProtectionInfo.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsRoamable
   (
      this : in out FileProtectionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFileProtectionInfo.all.get_IsRoamable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Identity
   (
      this : in out FileProtectionInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IFileProtectionInfo.all.get_Identity (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsProtectWhileOpenSupported
   (
      this : in out FileProtectionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo_Interface, WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo2, WinRt.Windows.Security.EnterpriseData.IID_IFileProtectionInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IFileProtectionInfo.all);
      Hr := m_Interface.get_IsProtectWhileOpenSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body FileProtectionManager is

      function UnprotectAsync
      (
         target : Windows.Storage.IStorageItem
      )
      return WinRt.Windows.Security.EnterpriseData.FileProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FileProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FileProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo;
         m_IID            : aliased WinRt.IID := (1742751121, 11537, 20504, (159, 240, 11, 133, 82, 11, 136, 139 )); -- Windows.Security.EnterpriseData.FileProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (689504234, 57489, 21474, (189, 229, 97, 124, 155, 179, 216, 254 ));
         m_Handler        : AsyncOperationCompletedHandler_FileProtectionInfo.Kind := new AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FileProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FileProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_FileProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.FileProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.UnprotectAsync (target, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IFileProtectionInfo := new Windows.Security.EnterpriseData.IFileProtectionInfo;
                        Retval.m_IFileProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function UnprotectAsync
      (
         target : Windows.Storage.IStorageItem;
         options : Windows.Security.EnterpriseData.FileUnprotectOptions'Class
      )
      return WinRt.Windows.Security.EnterpriseData.FileProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FileProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FileProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo;
         m_IID            : aliased WinRt.IID := (1742751121, 11537, 20504, (159, 240, 11, 133, 82, 11, 136, 139 )); -- Windows.Security.EnterpriseData.FileProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (689504234, 57489, 21474, (189, 229, 97, 124, 155, 179, 216, 254 ));
         m_Handler        : AsyncOperationCompletedHandler_FileProtectionInfo.Kind := new AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FileProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FileProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_FileProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.FileProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.UnprotectAsync (target, options.m_IFileUnprotectOptions.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IFileProtectionInfo := new Windows.Security.EnterpriseData.IFileProtectionInfo;
                        Retval.m_IFileProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function ProtectAsync
      (
         target : Windows.Storage.IStorageItem;
         identity : WinRt.WString
      )
      return WinRt.Windows.Security.EnterpriseData.FileProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_identity : WinRt.HString := To_HString (identity);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FileProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FileProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo;
         m_IID            : aliased WinRt.IID := (1742751121, 11537, 20504, (159, 240, 11, 133, 82, 11, 136, 139 )); -- Windows.Security.EnterpriseData.FileProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (689504234, 57489, 21474, (189, 229, 97, 124, 155, 179, 216, 254 ));
         m_Handler        : AsyncOperationCompletedHandler_FileProtectionInfo.Kind := new AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FileProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FileProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_FileProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.FileProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.ProtectAsync (target, HStr_identity, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IFileProtectionInfo := new Windows.Security.EnterpriseData.IFileProtectionInfo;
                        Retval.m_IFileProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_identity);
         end return;
      end;

      function CopyProtectionAsync
      (
         source : Windows.Storage.IStorageItem;
         target : Windows.Storage.IStorageItem
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CopyProtectionAsync (source, target, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function GetProtectionInfoAsync
      (
         source : Windows.Storage.IStorageItem
      )
      return WinRt.Windows.Security.EnterpriseData.FileProtectionInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FileProtectionInfo.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FileProtectionInfo.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IFileProtectionInfo;
         m_IID            : aliased WinRt.IID := (1742751121, 11537, 20504, (159, 240, 11, 133, 82, 11, 136, 139 )); -- Windows.Security.EnterpriseData.FileProtectionInfo;
         m_HandlerIID     : aliased WinRt.IID := (689504234, 57489, 21474, (189, 229, 97, 124, 155, 179, 216, 254 ));
         m_Handler        : AsyncOperationCompletedHandler_FileProtectionInfo.Kind := new AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FileProtectionInfo.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FileProtectionInfo.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FileProtectionInfo.Kind_Delegate, AsyncOperationCompletedHandler_FileProtectionInfo.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.FileProtectionInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetProtectionInfoAsync (source, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IFileProtectionInfo := new Windows.Security.EnterpriseData.IFileProtectionInfo;
                        Retval.m_IFileProtectionInfo.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function SaveFileAsContainerAsync
      (
         protectedFile : Windows.Storage.IStorageFile
      )
      return WinRt.Windows.Security.EnterpriseData.ProtectedContainerExportResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProtectedContainerExportResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProtectedContainerExportResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IProtectedContainerExportResult;
         m_IID            : aliased WinRt.IID := (3382643502, 26541, 20874, (134, 111, 227, 155, 69, 103, 177, 16 )); -- Windows.Security.EnterpriseData.ProtectedContainerExportResult;
         m_HandlerIID     : aliased WinRt.IID := (1443648801, 20488, 21106, (167, 102, 148, 31, 112, 113, 139, 198 ));
         m_Handler        : AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind := new AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectedContainerExportResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.ProtectedContainerExportResult do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.SaveFileAsContainerAsync (protectedFile, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProtectedContainerExportResult := new Windows.Security.EnterpriseData.IProtectedContainerExportResult;
                        Retval.m_IProtectedContainerExportResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function LoadFileFromContainerAsync
      (
         containerFile : Windows.Storage.IStorageFile
      )
      return WinRt.Windows.Security.EnterpriseData.ProtectedContainerImportResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProtectedContainerImportResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProtectedContainerImportResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IProtectedContainerImportResult;
         m_IID            : aliased WinRt.IID := (944673945, 54417, 21143, (190, 186, 179, 58, 61, 103, 242, 7 )); -- Windows.Security.EnterpriseData.ProtectedContainerImportResult;
         m_HandlerIID     : aliased WinRt.IID := (3488219384, 53933, 23250, (163, 150, 228, 247, 27, 154, 124, 63 ));
         m_Handler        : AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind := new AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectedContainerImportResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.ProtectedContainerImportResult do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.LoadFileFromContainerAsync (containerFile, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProtectedContainerImportResult := new Windows.Security.EnterpriseData.IProtectedContainerImportResult;
                        Retval.m_IProtectedContainerImportResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function LoadFileFromContainerAsync
      (
         containerFile : Windows.Storage.IStorageFile;
         target : Windows.Storage.IStorageItem
      )
      return WinRt.Windows.Security.EnterpriseData.ProtectedContainerImportResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProtectedContainerImportResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProtectedContainerImportResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IProtectedContainerImportResult;
         m_IID            : aliased WinRt.IID := (944673945, 54417, 21143, (190, 186, 179, 58, 61, 103, 242, 7 )); -- Windows.Security.EnterpriseData.ProtectedContainerImportResult;
         m_HandlerIID     : aliased WinRt.IID := (3488219384, 53933, 23250, (163, 150, 228, 247, 27, 154, 124, 63 ));
         m_Handler        : AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind := new AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectedContainerImportResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.ProtectedContainerImportResult do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.LoadFileFromContainerAsync (containerFile, target, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProtectedContainerImportResult := new Windows.Security.EnterpriseData.IProtectedContainerImportResult;
                        Retval.m_IProtectedContainerImportResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreateProtectedAndOpenAsync
      (
         parentFolder : Windows.Storage.IStorageFolder;
         desiredName : WinRt.WString;
         identity : WinRt.WString;
         collisionOption : Windows.Storage.CreationCollisionOption
      )
      return WinRt.Windows.Security.EnterpriseData.ProtectedFileCreateResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_desiredName : WinRt.HString := To_HString (desiredName);
         HStr_identity : WinRt.HString := To_HString (identity);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProtectedFileCreateResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProtectedFileCreateResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IProtectedFileCreateResult;
         m_IID            : aliased WinRt.IID := (3623455388, 29582, 20726, (147, 227, 38, 8, 186, 245, 75, 233 )); -- Windows.Security.EnterpriseData.ProtectedFileCreateResult;
         m_HandlerIID     : aliased WinRt.IID := (1816438888, 31872, 20871, (160, 141, 55, 155, 228, 25, 9, 246 ));
         m_Handler        : AsyncOperationCompletedHandler_ProtectedFileCreateResult.Kind := new AsyncOperationCompletedHandler_ProtectedFileCreateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectedFileCreateResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectedFileCreateResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectedFileCreateResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectedFileCreateResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.ProtectedFileCreateResult do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateProtectedAndOpenAsync (parentFolder, HStr_desiredName, HStr_identity, collisionOption, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProtectedFileCreateResult := new Windows.Security.EnterpriseData.IProtectedFileCreateResult;
                        Retval.m_IProtectedFileCreateResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_desiredName);
            Hr := WindowsDeleteString (HStr_identity);
         end return;
      end;

      function IsContainerAsync
      (
         file : Windows.Storage.IStorageFile
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsContainerAsync (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function LoadFileFromContainerAsync
      (
         containerFile : Windows.Storage.IStorageFile;
         target : Windows.Storage.IStorageItem;
         collisionOption : Windows.Storage.NameCollisionOption
      )
      return WinRt.Windows.Security.EnterpriseData.ProtectedContainerImportResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProtectedContainerImportResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProtectedContainerImportResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IProtectedContainerImportResult;
         m_IID            : aliased WinRt.IID := (944673945, 54417, 21143, (190, 186, 179, 58, 61, 103, 242, 7 )); -- Windows.Security.EnterpriseData.ProtectedContainerImportResult;
         m_HandlerIID     : aliased WinRt.IID := (3488219384, 53933, 23250, (163, 150, 228, 247, 27, 154, 124, 63 ));
         m_Handler        : AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind := new AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectedContainerImportResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectedContainerImportResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.ProtectedContainerImportResult do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.LoadFileFromContainerAsync (containerFile, target, collisionOption, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProtectedContainerImportResult := new Windows.Security.EnterpriseData.IProtectedContainerImportResult;
                        Retval.m_IProtectedContainerImportResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function SaveFileAsContainerAsync
      (
         protectedFile : Windows.Storage.IStorageFile;
         sharedWithIdentities : GenericObject
      )
      return WinRt.Windows.Security.EnterpriseData.ProtectedContainerExportResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileProtectionManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileProtectionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_ProtectedContainerExportResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_ProtectedContainerExportResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.IProtectedContainerExportResult;
         m_IID            : aliased WinRt.IID := (3382643502, 26541, 20874, (134, 111, 227, 155, 69, 103, 177, 16 )); -- Windows.Security.EnterpriseData.ProtectedContainerExportResult;
         m_HandlerIID     : aliased WinRt.IID := (1443648801, 20488, 21106, (167, 102, 148, 31, 112, 113, 139, 198 ));
         m_Handler        : AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind := new AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectedContainerExportResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectedContainerExportResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.EnterpriseData.ProtectedContainerExportResult do
            Hr := RoGetActivationFactory (m_hString, IID_IFileProtectionManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.SaveFileAsContainerAsync (protectedFile, sharedWithIdentities, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IProtectedContainerExportResult := new Windows.Security.EnterpriseData.IProtectedContainerExportResult;
                        Retval.m_IProtectedContainerExportResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end FileProtectionManager;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body FileRevocationManager is

      function ProtectAsync_FileRevocationManager
      (
         storageItem : Windows.Storage.IStorageItem;
         enterpriseIdentity : WinRt.WString
      )
      return WinRt.Windows.Security.EnterpriseData.FileProtectionStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileRevocationManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileRevocationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_enterpriseIdentity : WinRt.HString := To_HString (enterpriseIdentity);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FileProtectionStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FileProtectionStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.FileProtectionStatus;
         m_IID            : aliased WinRt.IID := (54460028, 28830, 21416, (142, 100, 205, 171, 107, 209, 237, 89 )); -- Windows.Security.EnterpriseData.FileProtectionStatus;
         m_HandlerIID     : aliased WinRt.IID := (3775197787, 47447, 24276, (177, 197, 25, 147, 96, 76, 254, 174 ));
         m_Handler        : AsyncOperationCompletedHandler_FileProtectionStatus.Kind := new AsyncOperationCompletedHandler_FileProtectionStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FileProtectionStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FileProtectionStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FileProtectionStatus.Kind_Delegate, AsyncOperationCompletedHandler_FileProtectionStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFileRevocationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ProtectAsync (storageItem, HStr_enterpriseIdentity, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_enterpriseIdentity);
         return m_RetVal;
      end;

      function CopyProtectionAsync_FileRevocationManager
      (
         sourceStorageItem : Windows.Storage.IStorageItem;
         targetStorageItem : Windows.Storage.IStorageItem
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileRevocationManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileRevocationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFileRevocationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CopyProtectionAsync (sourceStorageItem, targetStorageItem, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      procedure Revoke
      (
         enterpriseIdentity : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileRevocationManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileRevocationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_enterpriseIdentity : WinRt.HString := To_HString (enterpriseIdentity);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFileRevocationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Revoke (HStr_enterpriseIdentity);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_enterpriseIdentity);
      end;

      function GetStatusAsync
      (
         storageItem : Windows.Storage.IStorageItem
      )
      return WinRt.Windows.Security.EnterpriseData.FileProtectionStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileRevocationManager");
         m_Factory        : access WinRt.Windows.Security.EnterpriseData.IFileRevocationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FileProtectionStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FileProtectionStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.FileProtectionStatus;
         m_IID            : aliased WinRt.IID := (54460028, 28830, 21416, (142, 100, 205, 171, 107, 209, 237, 89 )); -- Windows.Security.EnterpriseData.FileProtectionStatus;
         m_HandlerIID     : aliased WinRt.IID := (3775197787, 47447, 24276, (177, 197, 25, 147, 96, 76, 254, 174 ));
         m_Handler        : AsyncOperationCompletedHandler_FileProtectionStatus.Kind := new AsyncOperationCompletedHandler_FileProtectionStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FileProtectionStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FileProtectionStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FileProtectionStatus.Kind_Delegate, AsyncOperationCompletedHandler_FileProtectionStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFileRevocationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStatusAsync (storageItem, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end FileRevocationManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileUnprotectOptions

   procedure Initialize (this : in out FileUnprotectOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileUnprotectOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFileUnprotectOptions, IFileUnprotectOptions_Ptr);
   begin
      if this.m_IFileUnprotectOptions /= null then
         if this.m_IFileUnprotectOptions.all /= null then
            RefCount := this.m_IFileUnprotectOptions.all.Release;
            Free (this.m_IFileUnprotectOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FileUnprotectOptions

   function Constructor
   (
      audit : WinRt.Boolean
   )
   return FileUnprotectOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.FileUnprotectOptions");
      m_Factory    : access IFileUnprotectOptionsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.EnterpriseData.IFileUnprotectOptions;
   begin
      return RetVal : FileUnprotectOptions do
         Hr := RoGetActivationFactory (m_hString, IID_IFileUnprotectOptionsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (audit, m_ComRetVal'Access);
            Retval.m_IFileUnprotectOptions := new Windows.Security.EnterpriseData.IFileUnprotectOptions;
            Retval.m_IFileUnprotectOptions.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileUnprotectOptions

   procedure put_Audit
   (
      this : in out FileUnprotectOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFileUnprotectOptions.all.put_Audit (value);
   end;

   function get_Audit
   (
      this : in out FileUnprotectOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFileUnprotectOptions.all.get_Audit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectedAccessResumedEventArgs

   procedure Initialize (this : in out ProtectedAccessResumedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectedAccessResumedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectedAccessResumedEventArgs, IProtectedAccessResumedEventArgs_Ptr);
   begin
      if this.m_IProtectedAccessResumedEventArgs /= null then
         if this.m_IProtectedAccessResumedEventArgs.all /= null then
            RefCount := this.m_IProtectedAccessResumedEventArgs.all.Release;
            Free (this.m_IProtectedAccessResumedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectedAccessResumedEventArgs

   function get_Identities
   (
      this : in out ProtectedAccessResumedEventArgs
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IProtectedAccessResumedEventArgs.all.get_Identities (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectedAccessSuspendingEventArgs

   procedure Initialize (this : in out ProtectedAccessSuspendingEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectedAccessSuspendingEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectedAccessSuspendingEventArgs, IProtectedAccessSuspendingEventArgs_Ptr);
   begin
      if this.m_IProtectedAccessSuspendingEventArgs /= null then
         if this.m_IProtectedAccessSuspendingEventArgs.all /= null then
            RefCount := this.m_IProtectedAccessSuspendingEventArgs.all.Release;
            Free (this.m_IProtectedAccessSuspendingEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectedAccessSuspendingEventArgs

   function get_Identities
   (
      this : in out ProtectedAccessSuspendingEventArgs
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IProtectedAccessSuspendingEventArgs.all.get_Identities (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Deadline
   (
      this : in out ProtectedAccessSuspendingEventArgs
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IProtectedAccessSuspendingEventArgs.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out ProtectedAccessSuspendingEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IProtectedAccessSuspendingEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectedContainerExportResult

   procedure Initialize (this : in out ProtectedContainerExportResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectedContainerExportResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectedContainerExportResult, IProtectedContainerExportResult_Ptr);
   begin
      if this.m_IProtectedContainerExportResult /= null then
         if this.m_IProtectedContainerExportResult.all /= null then
            RefCount := this.m_IProtectedContainerExportResult.all.Release;
            Free (this.m_IProtectedContainerExportResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectedContainerExportResult

   function get_Status
   (
      this : in out ProtectedContainerExportResult
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectedImportExportStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.ProtectedImportExportStatus;
   begin
      Hr := this.m_IProtectedContainerExportResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_File
   (
      this : in out ProtectedContainerExportResult
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IProtectedContainerExportResult.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectedContainerImportResult

   procedure Initialize (this : in out ProtectedContainerImportResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectedContainerImportResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectedContainerImportResult, IProtectedContainerImportResult_Ptr);
   begin
      if this.m_IProtectedContainerImportResult /= null then
         if this.m_IProtectedContainerImportResult.all /= null then
            RefCount := this.m_IProtectedContainerImportResult.all.Release;
            Free (this.m_IProtectedContainerImportResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectedContainerImportResult

   function get_Status
   (
      this : in out ProtectedContainerImportResult
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectedImportExportStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.ProtectedImportExportStatus;
   begin
      Hr := this.m_IProtectedContainerImportResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_File
   (
      this : in out ProtectedContainerImportResult
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IProtectedContainerImportResult.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectedContentRevokedEventArgs

   procedure Initialize (this : in out ProtectedContentRevokedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectedContentRevokedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectedContentRevokedEventArgs, IProtectedContentRevokedEventArgs_Ptr);
   begin
      if this.m_IProtectedContentRevokedEventArgs /= null then
         if this.m_IProtectedContentRevokedEventArgs.all /= null then
            RefCount := this.m_IProtectedContentRevokedEventArgs.all.Release;
            Free (this.m_IProtectedContentRevokedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectedContentRevokedEventArgs

   function get_Identities
   (
      this : in out ProtectedContentRevokedEventArgs
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IProtectedContentRevokedEventArgs.all.get_Identities (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectedFileCreateResult

   procedure Initialize (this : in out ProtectedFileCreateResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectedFileCreateResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectedFileCreateResult, IProtectedFileCreateResult_Ptr);
   begin
      if this.m_IProtectedFileCreateResult /= null then
         if this.m_IProtectedFileCreateResult.all /= null then
            RefCount := this.m_IProtectedFileCreateResult.all.Release;
            Free (this.m_IProtectedFileCreateResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectedFileCreateResult

   function get_File
   (
      this : in out ProtectedFileCreateResult
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IProtectedFileCreateResult.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function get_Stream
   (
      this : in out ProtectedFileCreateResult
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_IProtectedFileCreateResult.all.get_Stream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtectionInfo
   (
      this : in out ProtectedFileCreateResult
   )
   return WinRt.Windows.Security.EnterpriseData.FileProtectionInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.IFileProtectionInfo;
   begin
      return RetVal : WinRt.Windows.Security.EnterpriseData.FileProtectionInfo do
         Hr := this.m_IProtectedFileCreateResult.all.get_ProtectionInfo (m_ComRetVal'Access);
         Retval.m_IFileProtectionInfo := new Windows.Security.EnterpriseData.IFileProtectionInfo;
         Retval.m_IFileProtectionInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectionPolicyAuditInfo

   procedure Initialize (this : in out ProtectionPolicyAuditInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectionPolicyAuditInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectionPolicyAuditInfo, IProtectionPolicyAuditInfo_Ptr);
   begin
      if this.m_IProtectionPolicyAuditInfo /= null then
         if this.m_IProtectionPolicyAuditInfo.all /= null then
            RefCount := this.m_IProtectionPolicyAuditInfo.all.Release;
            Free (this.m_IProtectionPolicyAuditInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ProtectionPolicyAuditInfo

   function Constructor
   (
      action : Windows.Security.EnterpriseData.ProtectionPolicyAuditAction;
      dataDescription : WinRt.WString;
      sourceDescription : WinRt.WString;
      targetDescription : WinRt.WString
   )
   return ProtectionPolicyAuditInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo");
      m_Factory    : access IProtectionPolicyAuditInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.EnterpriseData.IProtectionPolicyAuditInfo;
      HStr_dataDescription : WinRt.HString := To_HString (dataDescription);
      HStr_sourceDescription : WinRt.HString := To_HString (sourceDescription);
      HStr_targetDescription : WinRt.HString := To_HString (targetDescription);
   begin
      return RetVal : ProtectionPolicyAuditInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyAuditInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (action, HStr_dataDescription, HStr_sourceDescription, HStr_targetDescription, m_ComRetVal'Access);
            Retval.m_IProtectionPolicyAuditInfo := new Windows.Security.EnterpriseData.IProtectionPolicyAuditInfo;
            Retval.m_IProtectionPolicyAuditInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_dataDescription);
         Hr := WindowsDeleteString (HStr_sourceDescription);
         Hr := WindowsDeleteString (HStr_targetDescription);
      end return;
   end;

   function Constructor
   (
      action : Windows.Security.EnterpriseData.ProtectionPolicyAuditAction;
      dataDescription : WinRt.WString
   )
   return ProtectionPolicyAuditInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo");
      m_Factory    : access IProtectionPolicyAuditInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.EnterpriseData.IProtectionPolicyAuditInfo;
      HStr_dataDescription : WinRt.HString := To_HString (dataDescription);
   begin
      return RetVal : ProtectionPolicyAuditInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyAuditInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithActionAndDataDescription (action, HStr_dataDescription, m_ComRetVal'Access);
            Retval.m_IProtectionPolicyAuditInfo := new Windows.Security.EnterpriseData.IProtectionPolicyAuditInfo;
            Retval.m_IProtectionPolicyAuditInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_dataDescription);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectionPolicyAuditInfo

   procedure put_Action
   (
      this : in out ProtectionPolicyAuditInfo;
      value : Windows.Security.EnterpriseData.ProtectionPolicyAuditAction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.put_Action (value);
   end;

   function get_Action
   (
      this : in out ProtectionPolicyAuditInfo
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyAuditAction is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.ProtectionPolicyAuditAction;
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.get_Action (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DataDescription
   (
      this : in out ProtectionPolicyAuditInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.put_DataDescription (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DataDescription
   (
      this : in out ProtectionPolicyAuditInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.get_DataDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SourceDescription
   (
      this : in out ProtectionPolicyAuditInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.put_SourceDescription (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SourceDescription
   (
      this : in out ProtectionPolicyAuditInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.get_SourceDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_TargetDescription
   (
      this : in out ProtectionPolicyAuditInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.put_TargetDescription (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TargetDescription
   (
      this : in out ProtectionPolicyAuditInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProtectionPolicyAuditInfo.all.get_TargetDescription (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProtectionPolicyManager

   procedure Initialize (this : in out ProtectionPolicyManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProtectionPolicyManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProtectionPolicyManager, IProtectionPolicyManager_Ptr);
   begin
      if this.m_IProtectionPolicyManager /= null then
         if this.m_IProtectionPolicyManager.all /= null then
            RefCount := this.m_IProtectionPolicyManager.all.Release;
            Free (this.m_IProtectionPolicyManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ProtectionPolicyManager

   function RequestAccessAsync
   (
      sourceIdentity : WinRt.WString;
      targetIdentity : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_targetIdentity : WinRt.HString := To_HString (targetIdentity);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (HStr_sourceIdentity, HStr_targetIdentity, auditInfo.m_IProtectionPolicyAuditInfo.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_targetIdentity);
      return m_RetVal;
   end;

   function RequestAccessAsync
   (
      sourceIdentity : WinRt.WString;
      targetIdentity : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class;
      messageFromApp : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_targetIdentity : WinRt.HString := To_HString (targetIdentity);
      HStr_messageFromApp : WinRt.HString := To_HString (messageFromApp);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (HStr_sourceIdentity, HStr_targetIdentity, auditInfo.m_IProtectionPolicyAuditInfo.all, HStr_messageFromApp, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_targetIdentity);
      Hr := WindowsDeleteString (HStr_messageFromApp);
      return m_RetVal;
   end;

   function RequestAccessForAppAsync
   (
      sourceIdentity : WinRt.WString;
      appPackageFamilyName : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessForAppAsync (HStr_sourceIdentity, HStr_appPackageFamilyName, auditInfo.m_IProtectionPolicyAuditInfo.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      return m_RetVal;
   end;

   function RequestAccessForAppAsync
   (
      sourceIdentity : WinRt.WString;
      appPackageFamilyName : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class;
      messageFromApp : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      HStr_messageFromApp : WinRt.HString := To_HString (messageFromApp);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessForAppAsync (HStr_sourceIdentity, HStr_appPackageFamilyName, auditInfo.m_IProtectionPolicyAuditInfo.all, HStr_messageFromApp, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      Hr := WindowsDeleteString (HStr_messageFromApp);
      return m_RetVal;
   end;

   procedure LogAuditEvent
   (
      sourceIdentity : WinRt.WString;
      targetIdentity : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_targetIdentity : WinRt.HString := To_HString (targetIdentity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.LogAuditEvent (HStr_sourceIdentity, HStr_targetIdentity, auditInfo.m_IProtectionPolicyAuditInfo.all);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_targetIdentity);
   end;

   function IsRoamableProtectionEnabled
   (
      identity : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsRoamableProtectionEnabled (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_ComRetVal;
   end;

   function RequestAccessAsync
   (
      sourceIdentity : WinRt.WString;
      targetIdentity : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class;
      messageFromApp : WinRt.WString;
      behavior : Windows.Security.EnterpriseData.ProtectionPolicyRequestAccessBehavior
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_targetIdentity : WinRt.HString := To_HString (targetIdentity);
      HStr_messageFromApp : WinRt.HString := To_HString (messageFromApp);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (HStr_sourceIdentity, HStr_targetIdentity, auditInfo.m_IProtectionPolicyAuditInfo.all, HStr_messageFromApp, behavior, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_targetIdentity);
      Hr := WindowsDeleteString (HStr_messageFromApp);
      return m_RetVal;
   end;

   function RequestAccessForAppAsync
   (
      sourceIdentity : WinRt.WString;
      appPackageFamilyName : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class;
      messageFromApp : WinRt.WString;
      behavior : Windows.Security.EnterpriseData.ProtectionPolicyRequestAccessBehavior
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      HStr_messageFromApp : WinRt.HString := To_HString (messageFromApp);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessForAppAsync (HStr_sourceIdentity, HStr_appPackageFamilyName, auditInfo.m_IProtectionPolicyAuditInfo.all, HStr_messageFromApp, behavior, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      Hr := WindowsDeleteString (HStr_messageFromApp);
      return m_RetVal;
   end;

   function RequestAccessToFilesForAppAsync
   (
      sourceItemList : GenericObject;
      appPackageFamilyName : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessToFilesForAppAsync (sourceItemList, HStr_appPackageFamilyName, auditInfo.m_IProtectionPolicyAuditInfo.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      return m_RetVal;
   end;

   function RequestAccessToFilesForAppAsync
   (
      sourceItemList : GenericObject;
      appPackageFamilyName : WinRt.WString;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class;
      messageFromApp : WinRt.WString;
      behavior : Windows.Security.EnterpriseData.ProtectionPolicyRequestAccessBehavior
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      HStr_messageFromApp : WinRt.HString := To_HString (messageFromApp);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessToFilesForAppAsync (sourceItemList, HStr_appPackageFamilyName, auditInfo.m_IProtectionPolicyAuditInfo.all, HStr_messageFromApp, behavior, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      Hr := WindowsDeleteString (HStr_messageFromApp);
      return m_RetVal;
   end;

   function RequestAccessToFilesForProcessAsync
   (
      sourceItemList : GenericObject;
      processId : WinRt.UInt32;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessToFilesForProcessAsync (sourceItemList, processId, auditInfo.m_IProtectionPolicyAuditInfo.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function RequestAccessToFilesForProcessAsync
   (
      sourceItemList : GenericObject;
      processId : WinRt.UInt32;
      auditInfo : Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo'Class;
      messageFromApp : WinRt.WString;
      behavior : Windows.Security.EnterpriseData.ProtectionPolicyRequestAccessBehavior
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_messageFromApp : WinRt.HString := To_HString (messageFromApp);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessToFilesForProcessAsync (sourceItemList, processId, auditInfo.m_IProtectionPolicyAuditInfo.all, HStr_messageFromApp, behavior, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_messageFromApp);
      return m_RetVal;
   end;

   function IsFileProtectionRequiredAsync
   (
      target : Windows.Storage.IStorageItem;
      identity : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_identity : WinRt.HString := To_HString (identity);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsFileProtectionRequiredAsync (target, HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_RetVal;
   end;

   function IsFileProtectionRequiredForNewFileAsync
   (
      parentFolder : Windows.Storage.IStorageFolder;
      identity : WinRt.WString;
      desiredName : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_identity : WinRt.HString := To_HString (identity);
      HStr_desiredName : WinRt.HString := To_HString (desiredName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsFileProtectionRequiredForNewFileAsync (parentFolder, HStr_identity, HStr_desiredName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      Hr := WindowsDeleteString (HStr_desiredName);
      return m_RetVal;
   end;

   function get_PrimaryManagedIdentity
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PrimaryManagedIdentity (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetPrimaryManagedIdentityForIdentity
   (
      identity : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetPrimaryManagedIdentityForIdentity (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function IsIdentityManaged
   (
      identity : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsIdentityManaged (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_ComRetVal;
   end;

   function TryApplyProcessUIPolicy
   (
      identity : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryApplyProcessUIPolicy (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_ComRetVal;
   end;

   procedure ClearProcessUIPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ClearProcessUIPolicy;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function CreateCurrentThreadNetworkContext
   (
      identity : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ThreadNetworkContext is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.IThreadNetworkContext;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      return RetVal : WinRt.Windows.Security.EnterpriseData.ThreadNetworkContext do
         Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCurrentThreadNetworkContext (HStr_identity, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IThreadNetworkContext := new Windows.Security.EnterpriseData.IThreadNetworkContext;
            Retval.m_IThreadNetworkContext.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_identity);
      end return;
   end;

   function GetPrimaryManagedIdentityForNetworkEndpointAsync
   (
      endpointHost : Windows.Networking.HostName'Class
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetPrimaryManagedIdentityForNetworkEndpointAsync (endpointHost.m_IHostName.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   procedure RevokeContent
   (
      identity : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RevokeContent (HStr_identity);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
   end;

   function GetForCurrentView
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.IProtectionPolicyManager;
   begin
      return RetVal : WinRt.Windows.Security.EnterpriseData.ProtectionPolicyManager do
         Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IProtectionPolicyManager := new Windows.Security.EnterpriseData.IProtectionPolicyManager;
            Retval.m_IProtectionPolicyManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function add_ProtectedAccessSuspending
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_ProtectedAccessSuspending (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_ProtectedAccessSuspending
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_ProtectedAccessSuspending (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function add_ProtectedAccessResumed
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_ProtectedAccessResumed (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_ProtectedAccessResumed
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_ProtectedAccessResumed (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function add_ProtectedContentRevoked
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_ProtectedContentRevoked (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_ProtectedContentRevoked
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_ProtectedContentRevoked (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function CheckAccess
   (
      sourceIdentity : WinRt.WString;
      targetIdentity : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_targetIdentity : WinRt.HString := To_HString (targetIdentity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.CheckAccess (HStr_sourceIdentity, HStr_targetIdentity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_targetIdentity);
      return m_ComRetVal;
   end;

   function RequestAccessAsync
   (
      sourceIdentity : WinRt.WString;
      targetIdentity : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_targetIdentity : WinRt.HString := To_HString (targetIdentity);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (HStr_sourceIdentity, HStr_targetIdentity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_targetIdentity);
      return m_RetVal;
   end;

   function HasContentBeenRevokedSince
   (
      identity : WinRt.WString;
      since : Windows.Foundation.DateTime
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.HasContentBeenRevokedSince (HStr_identity, since, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_ComRetVal;
   end;

   function CheckAccessForApp
   (
      sourceIdentity : WinRt.WString;
      appPackageFamilyName : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.CheckAccessForApp (HStr_sourceIdentity, HStr_appPackageFamilyName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      return m_ComRetVal;
   end;

   function RequestAccessForAppAsync
   (
      sourceIdentity : WinRt.WString;
      appPackageFamilyName : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_sourceIdentity : WinRt.HString := To_HString (sourceIdentity);
      HStr_appPackageFamilyName : WinRt.HString := To_HString (appPackageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProtectionPolicyEvaluationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_IID            : aliased WinRt.IID := (3906475797, 50540, 23147, (183, 56, 93, 246, 194, 119, 91, 123 )); -- Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult;
      m_HandlerIID     : aliased WinRt.IID := (674478676, 42209, 23597, (138, 122, 19, 110, 133, 16, 199, 139 ));
      m_Handler        : AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind := new AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProtectionPolicyEvaluationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind_Delegate, AsyncOperationCompletedHandler_ProtectionPolicyEvaluationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessForAppAsync (HStr_sourceIdentity, HStr_appPackageFamilyName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_sourceIdentity);
      Hr := WindowsDeleteString (HStr_appPackageFamilyName);
      return m_RetVal;
   end;

   function GetEnforcementLevel
   (
      identity : WinRt.WString
   )
   return WinRt.Windows.Security.EnterpriseData.EnforcementLevel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.EnterpriseData.EnforcementLevel;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEnforcementLevel (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_ComRetVal;
   end;

   function IsUserDecryptionAllowed
   (
      identity : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsUserDecryptionAllowed (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_ComRetVal;
   end;

   function IsProtectionUnderLockRequired
   (
      identity : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_identity : WinRt.HString := To_HString (identity);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsProtectionUnderLockRequired (HStr_identity, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_identity);
      return m_ComRetVal;
   end;

   function add_PolicyChanged
   (
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.add_PolicyChanged (handler, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure remove_PolicyChanged
   (
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.remove_PolicyChanged (token);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_IsProtectionEnabled
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.EnterpriseData.ProtectionPolicyManager");
      m_Factory        : access WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IProtectionPolicyManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IsProtectionEnabled (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProtectionPolicyManager

   procedure put_Identity
   (
      this : in out ProtectionPolicyManager;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IProtectionPolicyManager.all.put_Identity (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Identity
   (
      this : in out ProtectionPolicyManager
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProtectionPolicyManager.all.get_Identity (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ShowEnterpriseIndicator
   (
      this : in out ProtectionPolicyManager;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManager_Interface, WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManager2, WinRt.Windows.Security.EnterpriseData.IID_IProtectionPolicyManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtectionPolicyManager.all);
      Hr := m_Interface.put_ShowEnterpriseIndicator (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ShowEnterpriseIndicator
   (
      this : in out ProtectionPolicyManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManager_Interface, WinRt.Windows.Security.EnterpriseData.IProtectionPolicyManager2, WinRt.Windows.Security.EnterpriseData.IID_IProtectionPolicyManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IProtectionPolicyManager.all);
      Hr := m_Interface.get_ShowEnterpriseIndicator (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ThreadNetworkContext

   procedure Initialize (this : in out ThreadNetworkContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out ThreadNetworkContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IThreadNetworkContext, IThreadNetworkContext_Ptr);
   begin
      if this.m_IThreadNetworkContext /= null then
         if this.m_IThreadNetworkContext.all /= null then
            RefCount := this.m_IThreadNetworkContext.all.Release;
            Free (this.m_IThreadNetworkContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ThreadNetworkContext

   procedure Close
   (
      this : in out ThreadNetworkContext
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.EnterpriseData.IThreadNetworkContext_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IThreadNetworkContext.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

end;

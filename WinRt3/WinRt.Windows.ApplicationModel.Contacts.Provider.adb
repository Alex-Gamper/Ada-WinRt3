--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Contacts.Provider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactPickerUI

   procedure Initialize (this : in out ContactPickerUI) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactPickerUI) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactPickerUI, IContactPickerUI_Ptr);
   begin
      if this.m_IContactPickerUI /= null then
         if this.m_IContactPickerUI.all /= null then
            RefCount := this.m_IContactPickerUI.all.Release;
            Free (this.m_IContactPickerUI);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactPickerUI

   function AddContact
   (
      this : in out ContactPickerUI;
      id : WinRt.WString;
      contact : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.Provider.AddContactResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.Provider.AddContactResult;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      Hr := this.m_IContactPickerUI.all.AddContact (HStr_id, contact.m_IContact.all, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_id);
      return m_ComRetVal;
   end;

   procedure RemoveContact
   (
      this : in out ContactPickerUI;
      id : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      Hr := this.m_IContactPickerUI.all.RemoveContact (HStr_id);
      Hr := WindowsDeleteString (HStr_id);
   end;

   function ContainsContact
   (
      this : in out ContactPickerUI;
      id : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      Hr := this.m_IContactPickerUI.all.ContainsContact (HStr_id, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_id);
      return m_ComRetVal;
   end;

   function get_DesiredFields
   (
      this : in out ContactPickerUI
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IContactPickerUI.all.get_DesiredFields (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SelectionMode
   (
      this : in out ContactPickerUI
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactSelectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.ContactSelectionMode;
   begin
      Hr := this.m_IContactPickerUI.all.get_SelectionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ContactRemoved
   (
      this : in out ContactPickerUI;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContactPickerUI.all.add_ContactRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ContactRemoved
   (
      this : in out ContactPickerUI;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactPickerUI.all.remove_ContactRemoved (token);
   end;

   function AddContact
   (
      this : in out ContactPickerUI;
      contact : Windows.ApplicationModel.Contacts.Contact'Class
   )
   return WinRt.Windows.ApplicationModel.Contacts.Provider.AddContactResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.Provider.IContactPickerUI2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.Provider.AddContactResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.Provider.IContactPickerUI_Interface, WinRt.Windows.ApplicationModel.Contacts.Provider.IContactPickerUI2, WinRt.Windows.ApplicationModel.Contacts.Provider.IID_IContactPickerUI2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPickerUI.all);
      Hr := m_Interface.AddContact (contact.m_IContact.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DesiredFieldsWithContactFieldType
   (
      this : in out ContactPickerUI
   )
   return IVector_ContactFieldType.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.Provider.IContactPickerUI2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_ContactFieldType.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.Provider.IContactPickerUI_Interface, WinRt.Windows.ApplicationModel.Contacts.Provider.IContactPickerUI2, WinRt.Windows.ApplicationModel.Contacts.Provider.IID_IContactPickerUI2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactPickerUI.all);
      Hr := m_Interface.get_DesiredFieldsWithContactFieldType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_ContactFieldType (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactRemovedEventArgs

   procedure Initialize (this : in out ContactRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactRemovedEventArgs, IContactRemovedEventArgs_Ptr);
   begin
      if this.m_IContactRemovedEventArgs /= null then
         if this.m_IContactRemovedEventArgs.all /= null then
            RefCount := this.m_IContactRemovedEventArgs.all.Release;
            Free (this.m_IContactRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactRemovedEventArgs

   function get_Id
   (
      this : in out ContactRemovedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactRemovedEventArgs.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

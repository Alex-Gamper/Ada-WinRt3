--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authorization.AppCapabilityAccess is

   package IAsyncOperation_AppCapabilityAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus);
   package AsyncOperationCompletedHandler_AppCapabilityAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCapability

   procedure Initialize (this : in out AppCapability) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCapability) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCapability, IAppCapability_Ptr);
   begin
      if this.m_IAppCapability /= null then
         if this.m_IAppCapability.all /= null then
            RefCount := this.m_IAppCapability.all.Release;
            Free (this.m_IAppCapability);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppCapability

   function RequestAccessForCapabilitiesAsync
   (
      capabilityNames : GenericObject
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authorization.AppCapabilityAccess.AppCapability");
      m_Factory        : access WinRt.Windows.Security.Authorization.AppCapabilityAccess.IAppCapabilityStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2791309811, 58162, 21274, (191, 73, 78, 221, 58, 248, 141, 231 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3186638509, 42843, 20748, (135, 210, 91, 87, 83, 189, 241, 189 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppCapabilityStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessForCapabilitiesAsync (capabilityNames, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function RequestAccessForCapabilitiesForUserAsync
   (
      user : Windows.System.User'Class;
      capabilityNames : GenericObject
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authorization.AppCapabilityAccess.AppCapability");
      m_Factory        : access WinRt.Windows.Security.Authorization.AppCapabilityAccess.IAppCapabilityStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2791309811, 58162, 21274, (191, 73, 78, 221, 58, 248, 141, 231 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3186638509, 42843, 20748, (135, 210, 91, 87, 83, 189, 241, 189 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppCapabilityStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessForCapabilitiesForUserAsync (user.m_IUser.all, capabilityNames, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function Create
   (
      capabilityName : WinRt.WString
   )
   return WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapability is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authorization.AppCapabilityAccess.AppCapability");
      m_Factory        : access WinRt.Windows.Security.Authorization.AppCapabilityAccess.IAppCapabilityStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authorization.AppCapabilityAccess.IAppCapability;
      HStr_capabilityName : WinRt.HString := To_HString (capabilityName);
   begin
      return RetVal : WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapability do
         Hr := RoGetActivationFactory (m_hString, IID_IAppCapabilityStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_capabilityName, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppCapability := new Windows.Security.Authorization.AppCapabilityAccess.IAppCapability;
            Retval.m_IAppCapability.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_capabilityName);
      end return;
   end;

   function CreateWithProcessIdForUser
   (
      user : Windows.System.User'Class;
      capabilityName : WinRt.WString;
      pid : WinRt.UInt32
   )
   return WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapability is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authorization.AppCapabilityAccess.AppCapability");
      m_Factory        : access WinRt.Windows.Security.Authorization.AppCapabilityAccess.IAppCapabilityStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authorization.AppCapabilityAccess.IAppCapability;
      HStr_capabilityName : WinRt.HString := To_HString (capabilityName);
   begin
      return RetVal : WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapability do
         Hr := RoGetActivationFactory (m_hString, IID_IAppCapabilityStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithProcessIdForUser (user.m_IUser.all, HStr_capabilityName, pid, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppCapability := new Windows.Security.Authorization.AppCapabilityAccess.IAppCapability;
            Retval.m_IAppCapability.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_capabilityName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCapability

   function get_CapabilityName
   (
      this : in out AppCapability
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppCapability.all.get_CapabilityName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_User
   (
      this : in out AppCapability
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IAppCapability.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function RequestAccessAsync
   (
      this : in out AppCapability
   )
   return WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppCapabilityAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppCapabilityAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus;
      m_IID            : aliased WinRt.IID := (2189209410, 24550, 23387, (132, 206, 196, 72, 52, 19, 77, 61 )); -- Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1856041705, 48279, 22760, (163, 166, 200, 41, 185, 229, 242, 170 ));
      m_Handler        : AsyncOperationCompletedHandler_AppCapabilityAccessStatus.Kind := new AsyncOperationCompletedHandler_AppCapabilityAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppCapabilityAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppCapabilityAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppCapabilityAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_AppCapabilityAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppCapability.all.RequestAccessAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function CheckAccess
   (
      this : in out AppCapability
   )
   return WinRt.Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authorization.AppCapabilityAccess.AppCapabilityAccessStatus;
   begin
      Hr := this.m_IAppCapability.all.CheckAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_AccessChanged
   (
      this : in out AppCapability;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCapability.all.add_AccessChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AccessChanged
   (
      this : in out AppCapability;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCapability.all.remove_AccessChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCapabilityAccessChangedEventArgs

   procedure Initialize (this : in out AppCapabilityAccessChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCapabilityAccessChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCapabilityAccessChangedEventArgs, IAppCapabilityAccessChangedEventArgs_Ptr);
   begin
      if this.m_IAppCapabilityAccessChangedEventArgs /= null then
         if this.m_IAppCapabilityAccessChangedEventArgs.all /= null then
            RefCount := this.m_IAppCapabilityAccessChangedEventArgs.all.Release;
            Free (this.m_IAppCapabilityAccessChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCapabilityAccessChangedEventArgs

end;

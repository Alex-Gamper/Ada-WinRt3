--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Management.Deployment;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Phone.Management.Deployment is

   package IAsyncOperation_EnterpriseEnrollmentResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentResult);
   package AsyncOperationCompletedHandler_EnterpriseEnrollmentResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_PackageInstallResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult, GenericObject);
   package AsyncOperationCompletedHandler_PackageInstallResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Enterprise

   procedure Initialize (this : in out Enterprise) is
   begin
      null;
   end;

   procedure Finalize (this : in out Enterprise) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEnterprise, IEnterprise_Ptr);
   begin
      if this.m_IEnterprise /= null then
         if this.m_IEnterprise.all /= null then
            RefCount := this.m_IEnterprise.all.Release;
            Free (this.m_IEnterprise);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Enterprise

   function get_Id
   (
      this : in out Enterprise
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IEnterprise.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out Enterprise
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEnterprise.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_WorkplaceId
   (
      this : in out Enterprise
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IEnterprise.all.get_WorkplaceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EnrollmentValidFrom
   (
      this : in out Enterprise
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IEnterprise.all.get_EnrollmentValidFrom (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EnrollmentValidTo
   (
      this : in out Enterprise
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IEnterprise.all.get_EnrollmentValidTo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out Enterprise
   )
   return WinRt.Windows.Phone.Management.Deployment.EnterpriseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Management.Deployment.EnterpriseStatus;
   begin
      Hr := this.m_IEnterprise.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body EnterpriseEnrollmentManager is

      function get_EnrolledEnterprises
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IEnterpriseEnrollmentManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EnrolledEnterprises (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_CurrentEnterprise
      return WinRt.Windows.Phone.Management.Deployment.Enterprise is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Phone.Management.Deployment.IEnterprise;
      begin
         return RetVal : WinRt.Windows.Phone.Management.Deployment.Enterprise do
            Hr := RoGetActivationFactory (m_hString, IID_IEnterpriseEnrollmentManager'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_CurrentEnterprise (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IEnterprise := new Windows.Phone.Management.Deployment.IEnterprise;
               Retval.m_IEnterprise.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ValidateEnterprisesAsync is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IEnterpriseEnrollmentManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ValidateEnterprisesAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function RequestEnrollmentAsync
      (
         enrollmentToken : WinRt.WString
      )
      return WinRt.Windows.Phone.Management.Deployment.EnterpriseEnrollmentResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_enrollmentToken : WinRt.HString := To_HString (enrollmentToken);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_EnterpriseEnrollmentResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_EnterpriseEnrollmentResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentResult;
         m_IID            : aliased WinRt.IID := (3951997962, 16220, 23103, (137, 209, 74, 27, 110, 26, 137, 46 )); -- Windows.Phone.Management.Deployment.EnterpriseEnrollmentResult;
         m_HandlerIID     : aliased WinRt.IID := (2887100886, 51697, 21610, (161, 119, 214, 84, 7, 3, 84, 166 ));
         m_Handler        : AsyncOperationCompletedHandler_EnterpriseEnrollmentResult.Kind := new AsyncOperationCompletedHandler_EnterpriseEnrollmentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_EnterpriseEnrollmentResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_EnterpriseEnrollmentResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_EnterpriseEnrollmentResult.Kind_Delegate, AsyncOperationCompletedHandler_EnterpriseEnrollmentResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Phone.Management.Deployment.EnterpriseEnrollmentResult do
            Hr := RoGetActivationFactory (m_hString, IID_IEnterpriseEnrollmentManager'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestEnrollmentAsync (HStr_enrollmentToken, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IEnterpriseEnrollmentResult := new Windows.Phone.Management.Deployment.IEnterpriseEnrollmentResult;
                        Retval.m_IEnterpriseEnrollmentResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_enrollmentToken);
         end return;
      end;

      function RequestUnenrollmentAsync
      (
         enterprise_p : Windows.Phone.Management.Deployment.Enterprise'Class
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.EnterpriseEnrollmentManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IEnterpriseEnrollmentManager_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IEnterpriseEnrollmentManager'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestUnenrollmentAsync (enterprise_p.m_IEnterprise.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end EnterpriseEnrollmentManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EnterpriseEnrollmentResult

   procedure Initialize (this : in out EnterpriseEnrollmentResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out EnterpriseEnrollmentResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEnterpriseEnrollmentResult, IEnterpriseEnrollmentResult_Ptr);
   begin
      if this.m_IEnterpriseEnrollmentResult /= null then
         if this.m_IEnterpriseEnrollmentResult.all /= null then
            RefCount := this.m_IEnterpriseEnrollmentResult.all.Release;
            Free (this.m_IEnterpriseEnrollmentResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EnterpriseEnrollmentResult

   function get_EnrolledEnterprise
   (
      this : in out EnterpriseEnrollmentResult
   )
   return WinRt.Windows.Phone.Management.Deployment.Enterprise'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Management.Deployment.IEnterprise;
   begin
      return RetVal : WinRt.Windows.Phone.Management.Deployment.Enterprise do
         Hr := this.m_IEnterpriseEnrollmentResult.all.get_EnrolledEnterprise (m_ComRetVal'Access);
         Retval.m_IEnterprise := new Windows.Phone.Management.Deployment.IEnterprise;
         Retval.m_IEnterprise.all := m_ComRetVal;
      end return;
   end;

   function get_Status
   (
      this : in out EnterpriseEnrollmentResult
   )
   return WinRt.Windows.Phone.Management.Deployment.EnterpriseEnrollmentStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Phone.Management.Deployment.EnterpriseEnrollmentStatus;
   begin
      Hr := this.m_IEnterpriseEnrollmentResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body InstallationManager is

      function RemovePackageAsync
      (
         packageFullName : WinRt.WString;
         removalOptions : Windows.Management.Deployment.RemovalOptions
      )
      return WinRt.Windows.Phone.Management.Deployment.PackageInstallResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_packageFullName : WinRt.HString := To_HString (packageFullName);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PackageInstallResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PackageInstallResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult;
         m_IID            : aliased WinRt.IID := (722074661, 34625, 20755, (128, 137, 137, 223, 159, 187, 38, 57 )); -- Windows.Phone.Management.Deployment.PackageInstallResult;
         m_HandlerIID     : aliased WinRt.IID := (2761256982, 21580, 24441, (177, 99, 198, 149, 181, 146, 224, 67 ));
         m_Handler        : AsyncOperationCompletedHandler_PackageInstallResult.Kind := new AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageInstallResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageInstallResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageInstallResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Phone.Management.Deployment.PackageInstallResult do
            Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RemovePackageAsync (HStr_packageFullName, removalOptions, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPackageInstallResult := new Windows.Phone.Management.Deployment.IPackageInstallResult;
                        Retval.m_IPackageInstallResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_packageFullName);
         end return;
      end;

      function RegisterPackageAsync
      (
         manifestUri : Windows.Foundation.Uri'Class;
         dependencyPackageUris : GenericObject;
         deploymentOptions : Windows.Management.Deployment.DeploymentOptions
      )
      return WinRt.Windows.Phone.Management.Deployment.PackageInstallResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PackageInstallResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PackageInstallResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult;
         m_IID            : aliased WinRt.IID := (722074661, 34625, 20755, (128, 137, 137, 223, 159, 187, 38, 57 )); -- Windows.Phone.Management.Deployment.PackageInstallResult;
         m_HandlerIID     : aliased WinRt.IID := (2761256982, 21580, 24441, (177, 99, 198, 149, 181, 146, 224, 67 ));
         m_Handler        : AsyncOperationCompletedHandler_PackageInstallResult.Kind := new AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageInstallResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageInstallResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageInstallResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Phone.Management.Deployment.PackageInstallResult do
            Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RegisterPackageAsync (manifestUri.m_IUriRuntimeClass.all, dependencyPackageUris, deploymentOptions, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPackageInstallResult := new Windows.Phone.Management.Deployment.IPackageInstallResult;
                        Retval.m_IPackageInstallResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function FindPackages
      (
         packageName : WinRt.WString;
         packagePublisher : WinRt.WString
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         HStr_packageName : WinRt.HString := To_HString (packageName);
         HStr_packagePublisher : WinRt.HString := To_HString (packagePublisher);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindPackages (HStr_packageName, HStr_packagePublisher, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_packageName);
         Hr := WindowsDeleteString (HStr_packagePublisher);
         return m_ComRetVal;
      end;

      function AddPackageAsync
      (
         title : WinRt.WString;
         sourceLocation : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.Phone.Management.Deployment.PackageInstallResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_title : WinRt.HString := To_HString (title);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PackageInstallResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PackageInstallResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult;
         m_IID            : aliased WinRt.IID := (722074661, 34625, 20755, (128, 137, 137, 223, 159, 187, 38, 57 )); -- Windows.Phone.Management.Deployment.PackageInstallResult;
         m_HandlerIID     : aliased WinRt.IID := (2761256982, 21580, 24441, (177, 99, 198, 149, 181, 146, 224, 67 ));
         m_Handler        : AsyncOperationCompletedHandler_PackageInstallResult.Kind := new AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageInstallResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageInstallResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageInstallResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Phone.Management.Deployment.PackageInstallResult do
            Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddPackageAsync (HStr_title, sourceLocation.m_IUriRuntimeClass.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPackageInstallResult := new Windows.Phone.Management.Deployment.IPackageInstallResult;
                        Retval.m_IPackageInstallResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_title);
         end return;
      end;

      function AddPackageAsync
      (
         title : WinRt.WString;
         sourceLocation : Windows.Foundation.Uri'Class;
         instanceId : WinRt.WString;
         offerId : WinRt.WString;
         license : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.Phone.Management.Deployment.PackageInstallResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_title : WinRt.HString := To_HString (title);
         HStr_instanceId : WinRt.HString := To_HString (instanceId);
         HStr_offerId : WinRt.HString := To_HString (offerId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PackageInstallResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PackageInstallResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult;
         m_IID            : aliased WinRt.IID := (722074661, 34625, 20755, (128, 137, 137, 223, 159, 187, 38, 57 )); -- Windows.Phone.Management.Deployment.PackageInstallResult;
         m_HandlerIID     : aliased WinRt.IID := (2761256982, 21580, 24441, (177, 99, 198, 149, 181, 146, 224, 67 ));
         m_Handler        : AsyncOperationCompletedHandler_PackageInstallResult.Kind := new AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PackageInstallResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PackageInstallResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PackageInstallResult.Kind_Delegate, AsyncOperationCompletedHandler_PackageInstallResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Phone.Management.Deployment.PackageInstallResult do
            Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AddPackageAsync (HStr_title, sourceLocation.m_IUriRuntimeClass.all, HStr_instanceId, HStr_offerId, license.m_IUriRuntimeClass.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPackageInstallResult := new Windows.Phone.Management.Deployment.IPackageInstallResult;
                        Retval.m_IPackageInstallResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_title);
            Hr := WindowsDeleteString (HStr_instanceId);
            Hr := WindowsDeleteString (HStr_offerId);
         end return;
      end;

      function GetPendingPackageInstalls
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetPendingPackageInstalls (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function FindPackagesForCurrentPublisher
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindPackagesForCurrentPublisher (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function FindPackages
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.Management.Deployment.InstallationManager");
         m_Factory        : access WinRt.Windows.Phone.Management.Deployment.IInstallationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IInstallationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindPackages (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end InstallationManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PackageInstallResult

   procedure Initialize (this : in out PackageInstallResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PackageInstallResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPackageInstallResult, IPackageInstallResult_Ptr);
   begin
      if this.m_IPackageInstallResult /= null then
         if this.m_IPackageInstallResult.all /= null then
            RefCount := this.m_IPackageInstallResult.all.Release;
            Free (this.m_IPackageInstallResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PackageInstallResult

   function get_ProductId
   (
      this : in out PackageInstallResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPackageInstallResult.all.get_ProductId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InstallState
   (
      this : in out PackageInstallResult
   )
   return WinRt.Windows.Management.Deployment.PackageInstallState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.PackageInstallState;
   begin
      Hr := this.m_IPackageInstallResult.all.get_InstallState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorText
   (
      this : in out PackageInstallResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult_Interface, WinRt.Windows.Phone.Management.Deployment.IPackageInstallResult2, WinRt.Windows.Phone.Management.Deployment.IID_IPackageInstallResult2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPackageInstallResult.all);
      Hr := m_Interface.get_ErrorText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

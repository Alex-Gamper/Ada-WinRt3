--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Preview.Notes is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NotePlacementChangedPreviewEventArgs

   procedure Initialize (this : in out NotePlacementChangedPreviewEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out NotePlacementChangedPreviewEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotePlacementChangedPreviewEventArgs, INotePlacementChangedPreviewEventArgs_Ptr);
   begin
      if this.m_INotePlacementChangedPreviewEventArgs /= null then
         if this.m_INotePlacementChangedPreviewEventArgs.all /= null then
            RefCount := this.m_INotePlacementChangedPreviewEventArgs.all.Release;
            Free (this.m_INotePlacementChangedPreviewEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NotePlacementChangedPreviewEventArgs

   function get_ViewId
   (
      this : in out NotePlacementChangedPreviewEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_INotePlacementChangedPreviewEventArgs.all.get_ViewId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NoteVisibilityChangedPreviewEventArgs

   procedure Initialize (this : in out NoteVisibilityChangedPreviewEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out NoteVisibilityChangedPreviewEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INoteVisibilityChangedPreviewEventArgs, INoteVisibilityChangedPreviewEventArgs_Ptr);
   begin
      if this.m_INoteVisibilityChangedPreviewEventArgs /= null then
         if this.m_INoteVisibilityChangedPreviewEventArgs.all /= null then
            RefCount := this.m_INoteVisibilityChangedPreviewEventArgs.all.Release;
            Free (this.m_INoteVisibilityChangedPreviewEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NoteVisibilityChangedPreviewEventArgs

   function get_ViewId
   (
      this : in out NoteVisibilityChangedPreviewEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_INoteVisibilityChangedPreviewEventArgs.all.get_ViewId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsVisible
   (
      this : in out NoteVisibilityChangedPreviewEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INoteVisibilityChangedPreviewEventArgs.all.get_IsVisible (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NotesWindowManagerPreview

   procedure Initialize (this : in out NotesWindowManagerPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out NotesWindowManagerPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotesWindowManagerPreview, INotesWindowManagerPreview_Ptr);
   begin
      if this.m_INotesWindowManagerPreview /= null then
         if this.m_INotesWindowManagerPreview.all /= null then
            RefCount := this.m_INotesWindowManagerPreview.all.Release;
            Free (this.m_INotesWindowManagerPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for NotesWindowManagerPreview

   function GetForCurrentApp
   return WinRt.Windows.ApplicationModel.Preview.Notes.NotesWindowManagerPreview is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Preview.Notes.NotesWindowManagerPreview");
      m_Factory        : access WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreviewStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Preview.Notes.NotesWindowManagerPreview do
         Hr := RoGetActivationFactory (m_hString, IID_INotesWindowManagerPreviewStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentApp (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_INotesWindowManagerPreview := new Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview;
            Retval.m_INotesWindowManagerPreview.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NotesWindowManagerPreview

   function get_IsScreenLocked
   (
      this : in out NotesWindowManagerPreview
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.get_IsScreenLocked (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ShowNote
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.ShowNote (noteViewId);
   end;

   procedure ShowNoteRelativeTo
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32;
      anchorNoteViewId : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.ShowNoteRelativeTo (noteViewId, anchorNoteViewId);
   end;

   procedure ShowNoteWithPlacement
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32;
      data : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.ShowNoteWithPlacement (noteViewId, data);
   end;

   procedure HideNote
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.HideNote (noteViewId);
   end;

   function GetNotePlacement
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.GetNotePlacement (noteViewId, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TrySetNoteSize
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32;
      size : Windows.Foundation.Size
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.TrySetNoteSize (noteViewId, size, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetFocusToNextView
   (
      this : in out NotesWindowManagerPreview
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.SetFocusToNextView;
   end;

   procedure SetNotesThumbnailAsync
   (
      this : in out NotesWindowManagerPreview;
      thumbnail : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_INotesWindowManagerPreview.all.SetNotesThumbnailAsync (thumbnail, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_SystemLockStateChanged
   (
      this : in out NotesWindowManagerPreview;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.add_SystemLockStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SystemLockStateChanged
   (
      this : in out NotesWindowManagerPreview;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.remove_SystemLockStateChanged (token);
   end;

   function add_NotePlacementChanged
   (
      this : in out NotesWindowManagerPreview;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.add_NotePlacementChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NotePlacementChanged
   (
      this : in out NotesWindowManagerPreview;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.remove_NotePlacementChanged (token);
   end;

   function add_NoteVisibilityChanged
   (
      this : in out NotesWindowManagerPreview;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.add_NoteVisibilityChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NoteVisibilityChanged
   (
      this : in out NotesWindowManagerPreview;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreview.all.remove_NoteVisibilityChanged (token);
   end;

   procedure ShowNoteRelativeTo
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32;
      anchorNoteViewId : WinRt.Int32;
      options : Windows.ApplicationModel.Preview.Notes.NotesWindowManagerPreviewShowNoteOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview_Interface, WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2, WinRt.Windows.ApplicationModel.Preview.Notes.IID_INotesWindowManagerPreview2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INotesWindowManagerPreview.all);
      Hr := m_Interface.ShowNoteRelativeTo (noteViewId, anchorNoteViewId, options.m_INotesWindowManagerPreviewShowNoteOptions.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure ShowNoteWithPlacement
   (
      this : in out NotesWindowManagerPreview;
      noteViewId : WinRt.Int32;
      data : Windows.Storage.Streams.IBuffer;
      options : Windows.ApplicationModel.Preview.Notes.NotesWindowManagerPreviewShowNoteOptions'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview_Interface, WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2, WinRt.Windows.ApplicationModel.Preview.Notes.IID_INotesWindowManagerPreview2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INotesWindowManagerPreview.all);
      Hr := m_Interface.ShowNoteWithPlacement (noteViewId, data, options.m_INotesWindowManagerPreviewShowNoteOptions.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetFocusToPreviousView
   (
      this : in out NotesWindowManagerPreview
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview_Interface, WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2, WinRt.Windows.ApplicationModel.Preview.Notes.IID_INotesWindowManagerPreview2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INotesWindowManagerPreview.all);
      Hr := m_Interface.SetFocusToPreviousView;
      m_RefCount := m_Interface.Release;
   end;

   procedure SetThumbnailImageForTaskSwitcherAsync
   (
      this : in out NotesWindowManagerPreview;
      bitmap : Windows.Graphics.Imaging.SoftwareBitmap'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview_Interface, WinRt.Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreview2, WinRt.Windows.ApplicationModel.Preview.Notes.IID_INotesWindowManagerPreview2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INotesWindowManagerPreview.all);
      Hr := m_Interface.SetThumbnailImageForTaskSwitcherAsync (bitmap.m_ISoftwareBitmap.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NotesWindowManagerPreviewShowNoteOptions

   procedure Initialize (this : in out NotesWindowManagerPreviewShowNoteOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out NotesWindowManagerPreviewShowNoteOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INotesWindowManagerPreviewShowNoteOptions, INotesWindowManagerPreviewShowNoteOptions_Ptr);
   begin
      if this.m_INotesWindowManagerPreviewShowNoteOptions /= null then
         if this.m_INotesWindowManagerPreviewShowNoteOptions.all /= null then
            RefCount := this.m_INotesWindowManagerPreviewShowNoteOptions.all.Release;
            Free (this.m_INotesWindowManagerPreviewShowNoteOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NotesWindowManagerPreviewShowNoteOptions

   function Constructor return NotesWindowManagerPreviewShowNoteOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Preview.Notes.NotesWindowManagerPreviewShowNoteOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreviewShowNoteOptions;
   begin
      return RetVal : NotesWindowManagerPreviewShowNoteOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INotesWindowManagerPreviewShowNoteOptions := new Windows.ApplicationModel.Preview.Notes.INotesWindowManagerPreviewShowNoteOptions;
            Retval.m_INotesWindowManagerPreviewShowNoteOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NotesWindowManagerPreviewShowNoteOptions

   function get_ShowWithFocus
   (
      this : in out NotesWindowManagerPreviewShowNoteOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_INotesWindowManagerPreviewShowNoteOptions.all.get_ShowWithFocus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShowWithFocus
   (
      this : in out NotesWindowManagerPreviewShowNoteOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_INotesWindowManagerPreviewShowNoteOptions.all.put_ShowWithFocus (value);
   end;

end;

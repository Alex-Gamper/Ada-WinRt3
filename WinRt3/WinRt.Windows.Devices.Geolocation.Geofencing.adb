--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Geolocation.Geofencing is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Geofence

   procedure Initialize (this : in out Geofence) is
   begin
      null;
   end;

   procedure Finalize (this : in out Geofence) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeofence, IGeofence_Ptr);
   begin
      if this.m_IGeofence /= null then
         if this.m_IGeofence.all /= null then
            RefCount := this.m_IGeofence.all.Release;
            Free (this.m_IGeofence);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Geofence

   function Constructor
   (
      id : WinRt.WString;
      geoshape : Windows.Devices.Geolocation.IGeoshape
   )
   return Geofence is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Geolocation.Geofencing.Geofence");
      m_Factory    : access IGeofenceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Geolocation.Geofencing.IGeofence;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : Geofence do
         Hr := RoGetActivationFactory (m_hString, IID_IGeofenceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_id, geoshape, m_ComRetVal'Access);
            Retval.m_IGeofence := new Windows.Devices.Geolocation.Geofencing.IGeofence;
            Retval.m_IGeofence.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function Constructor
   (
      id : WinRt.WString;
      geoshape : Windows.Devices.Geolocation.IGeoshape;
      monitoredStates : Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates;
      singleUse : WinRt.Boolean
   )
   return Geofence is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Geolocation.Geofencing.Geofence");
      m_Factory    : access IGeofenceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Geolocation.Geofencing.IGeofence;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : Geofence do
         Hr := RoGetActivationFactory (m_hString, IID_IGeofenceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMonitorStates (HStr_id, geoshape, monitoredStates, singleUse, m_ComRetVal'Access);
            Retval.m_IGeofence := new Windows.Devices.Geolocation.Geofencing.IGeofence;
            Retval.m_IGeofence.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function Constructor
   (
      id : WinRt.WString;
      geoshape : Windows.Devices.Geolocation.IGeoshape;
      monitoredStates : Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates;
      singleUse : WinRt.Boolean;
      dwellTime : Windows.Foundation.TimeSpan
   )
   return Geofence is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Geolocation.Geofencing.Geofence");
      m_Factory    : access IGeofenceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Geolocation.Geofencing.IGeofence;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : Geofence do
         Hr := RoGetActivationFactory (m_hString, IID_IGeofenceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMonitorStatesAndDwellTime (HStr_id, geoshape, monitoredStates, singleUse, dwellTime, m_ComRetVal'Access);
            Retval.m_IGeofence := new Windows.Devices.Geolocation.Geofencing.IGeofence;
            Retval.m_IGeofence.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function Constructor
   (
      id : WinRt.WString;
      geoshape : Windows.Devices.Geolocation.IGeoshape;
      monitoredStates : Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates;
      singleUse : WinRt.Boolean;
      dwellTime : Windows.Foundation.TimeSpan;
      startTime : Windows.Foundation.DateTime;
      duration : Windows.Foundation.TimeSpan
   )
   return Geofence is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Geolocation.Geofencing.Geofence");
      m_Factory    : access IGeofenceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Geolocation.Geofencing.IGeofence;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : Geofence do
         Hr := RoGetActivationFactory (m_hString, IID_IGeofenceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMonitorStatesDwellTimeStartTimeAndDuration (HStr_id, geoshape, monitoredStates, singleUse, dwellTime, startTime, duration, m_ComRetVal'Access);
            Retval.m_IGeofence := new Windows.Devices.Geolocation.Geofencing.IGeofence;
            Retval.m_IGeofence.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Geofence

   function get_StartTime
   (
      this : in out Geofence
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IGeofence.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out Geofence
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IGeofence.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DwellTime
   (
      this : in out Geofence
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IGeofence.all.get_DwellTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out Geofence
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGeofence.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MonitoredStates
   (
      this : in out Geofence
   )
   return WinRt.Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates;
   begin
      Hr := this.m_IGeofence.all.get_MonitoredStates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Geoshape
   (
      this : in out Geofence
   )
   return WinRt.Windows.Devices.Geolocation.IGeoshape is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.IGeoshape;
   begin
      Hr := this.m_IGeofence.all.get_Geoshape (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SingleUse
   (
      this : in out Geofence
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IGeofence.all.get_SingleUse (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeofenceMonitor

   procedure Initialize (this : in out GeofenceMonitor) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeofenceMonitor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeofenceMonitor, IGeofenceMonitor_Ptr);
   begin
      if this.m_IGeofenceMonitor /= null then
         if this.m_IGeofenceMonitor.all /= null then
            RefCount := this.m_IGeofenceMonitor.all.Release;
            Free (this.m_IGeofenceMonitor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GeofenceMonitor

   function get_Current
   return WinRt.Windows.Devices.Geolocation.Geofencing.GeofenceMonitor is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Geolocation.Geofencing.GeofenceMonitor");
      m_Factory        : access WinRt.Windows.Devices.Geolocation.Geofencing.IGeofenceMonitorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.Geofencing.IGeofenceMonitor;
   begin
      return RetVal : WinRt.Windows.Devices.Geolocation.Geofencing.GeofenceMonitor do
         Hr := RoGetActivationFactory (m_hString, IID_IGeofenceMonitorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IGeofenceMonitor := new Windows.Devices.Geolocation.Geofencing.IGeofenceMonitor;
            Retval.m_IGeofenceMonitor.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeofenceMonitor

   function get_Status
   (
      this : in out GeofenceMonitor
   )
   return WinRt.Windows.Devices.Geolocation.Geofencing.GeofenceMonitorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.Geofencing.GeofenceMonitorStatus;
   begin
      Hr := this.m_IGeofenceMonitor.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Geofences
   (
      this : in out GeofenceMonitor
   )
   return IVector_IGeofence.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IGeofence.Kind;
   begin
      Hr := this.m_IGeofenceMonitor.all.get_Geofences (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IGeofence (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LastKnownGeoposition
   (
      this : in out GeofenceMonitor
   )
   return WinRt.Windows.Devices.Geolocation.Geoposition'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.IGeoposition;
   begin
      return RetVal : WinRt.Windows.Devices.Geolocation.Geoposition do
         Hr := this.m_IGeofenceMonitor.all.get_LastKnownGeoposition (m_ComRetVal'Access);
         Retval.m_IGeoposition := new Windows.Devices.Geolocation.IGeoposition;
         Retval.m_IGeoposition.all := m_ComRetVal;
      end return;
   end;

   function add_GeofenceStateChanged
   (
      this : in out GeofenceMonitor;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGeofenceMonitor.all.add_GeofenceStateChanged (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GeofenceStateChanged
   (
      this : in out GeofenceMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGeofenceMonitor.all.remove_GeofenceStateChanged (token);
   end;

   function ReadReports
   (
      this : in out GeofenceMonitor
   )
   return IVectorView_IGeofenceStateChangeReport.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IGeofenceStateChangeReport.Kind;
   begin
      Hr := this.m_IGeofenceMonitor.all.ReadReports (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IGeofenceStateChangeReport (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_StatusChanged
   (
      this : in out GeofenceMonitor;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGeofenceMonitor.all.add_StatusChanged (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusChanged
   (
      this : in out GeofenceMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGeofenceMonitor.all.remove_StatusChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeofenceStateChangeReport

   procedure Initialize (this : in out GeofenceStateChangeReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeofenceStateChangeReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeofenceStateChangeReport, IGeofenceStateChangeReport_Ptr);
   begin
      if this.m_IGeofenceStateChangeReport /= null then
         if this.m_IGeofenceStateChangeReport.all /= null then
            RefCount := this.m_IGeofenceStateChangeReport.all.Release;
            Free (this.m_IGeofenceStateChangeReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeofenceStateChangeReport

   function get_NewState
   (
      this : in out GeofenceStateChangeReport
   )
   return WinRt.Windows.Devices.Geolocation.Geofencing.GeofenceState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.Geofencing.GeofenceState;
   begin
      Hr := this.m_IGeofenceStateChangeReport.all.get_NewState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Geofence
   (
      this : in out GeofenceStateChangeReport
   )
   return WinRt.Windows.Devices.Geolocation.Geofencing.Geofence'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.Geofencing.IGeofence;
   begin
      return RetVal : WinRt.Windows.Devices.Geolocation.Geofencing.Geofence do
         Hr := this.m_IGeofenceStateChangeReport.all.get_Geofence (m_ComRetVal'Access);
         Retval.m_IGeofence := new Windows.Devices.Geolocation.Geofencing.IGeofence;
         Retval.m_IGeofence.all := m_ComRetVal;
      end return;
   end;

   function get_Geoposition
   (
      this : in out GeofenceStateChangeReport
   )
   return WinRt.Windows.Devices.Geolocation.Geoposition'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.IGeoposition;
   begin
      return RetVal : WinRt.Windows.Devices.Geolocation.Geoposition do
         Hr := this.m_IGeofenceStateChangeReport.all.get_Geoposition (m_ComRetVal'Access);
         Retval.m_IGeoposition := new Windows.Devices.Geolocation.IGeoposition;
         Retval.m_IGeoposition.all := m_ComRetVal;
      end return;
   end;

   function get_RemovalReason
   (
      this : in out GeofenceStateChangeReport
   )
   return WinRt.Windows.Devices.Geolocation.Geofencing.GeofenceRemovalReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.Geofencing.GeofenceRemovalReason;
   begin
      Hr := this.m_IGeofenceStateChangeReport.all.get_RemovalReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

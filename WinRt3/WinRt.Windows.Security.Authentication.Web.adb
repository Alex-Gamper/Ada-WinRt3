--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authentication.Web is

   package IAsyncOperation_WebAuthenticationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Web.IWebAuthenticationResult);
   package AsyncOperationCompletedHandler_WebAuthenticationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Web.IWebAuthenticationResult);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WebAuthenticationBroker is

      function AuthenticateAsync
      (
         options : Windows.Security.Authentication.Web.WebAuthenticationOptions;
         requestUri : Windows.Foundation.Uri'Class;
         callbackUri : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAuthenticationResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAuthenticationResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.IWebAuthenticationResult;
         m_IID            : aliased WinRt.IID := (3007926956, 9822, 22855, (135, 53, 233, 49, 143, 67, 1, 255 )); -- Windows.Security.Authentication.Web.WebAuthenticationResult;
         m_HandlerIID     : aliased WinRt.IID := (1008649292, 59714, 21733, (188, 211, 227, 41, 201, 81, 245, 149 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAuthenticationResult.Kind := new AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAuthenticationResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate, AsyncOperationCompletedHandler_WebAuthenticationResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AuthenticateAsync (options, requestUri.m_IUriRuntimeClass.all, callbackUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
                        Retval.m_IWebAuthenticationResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function AuthenticateAsync
      (
         options : Windows.Security.Authentication.Web.WebAuthenticationOptions;
         requestUri : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAuthenticationResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAuthenticationResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.IWebAuthenticationResult;
         m_IID            : aliased WinRt.IID := (3007926956, 9822, 22855, (135, 53, 233, 49, 143, 67, 1, 255 )); -- Windows.Security.Authentication.Web.WebAuthenticationResult;
         m_HandlerIID     : aliased WinRt.IID := (1008649292, 59714, 21733, (188, 211, 227, 41, 201, 81, 245, 149 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAuthenticationResult.Kind := new AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAuthenticationResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate, AsyncOperationCompletedHandler_WebAuthenticationResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AuthenticateAsync (options, requestUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
                        Retval.m_IWebAuthenticationResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetCurrentApplicationCallbackUri
      return WinRt.Windows.Foundation.Uri is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      begin
         return RetVal : WinRt.Windows.Foundation.Uri do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCurrentApplicationCallbackUri (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
               Retval.m_IUriRuntimeClass.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure AuthenticateAndContinue
      (
         requestUri : Windows.Foundation.Uri'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AuthenticateAndContinue (requestUri.m_IUriRuntimeClass.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure AuthenticateAndContinue
      (
         requestUri : Windows.Foundation.Uri'Class;
         callbackUri : Windows.Foundation.Uri'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AuthenticateAndContinue (requestUri.m_IUriRuntimeClass.all, callbackUri.m_IUriRuntimeClass.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure AuthenticateAndContinue
      (
         requestUri : Windows.Foundation.Uri'Class;
         callbackUri : Windows.Foundation.Uri'Class;
         continuationData : Windows.Foundation.Collections.ValueSet'Class;
         options : Windows.Security.Authentication.Web.WebAuthenticationOptions
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AuthenticateAndContinue (requestUri.m_IUriRuntimeClass.all, callbackUri.m_IUriRuntimeClass.all, continuationData.m_IPropertySet.all, options);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function AuthenticateSilentlyAsync
      (
         requestUri : Windows.Foundation.Uri'Class
      )
      return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAuthenticationResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAuthenticationResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.IWebAuthenticationResult;
         m_IID            : aliased WinRt.IID := (3007926956, 9822, 22855, (135, 53, 233, 49, 143, 67, 1, 255 )); -- Windows.Security.Authentication.Web.WebAuthenticationResult;
         m_HandlerIID     : aliased WinRt.IID := (1008649292, 59714, 21733, (188, 211, 227, 41, 201, 81, 245, 149 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAuthenticationResult.Kind := new AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAuthenticationResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate, AsyncOperationCompletedHandler_WebAuthenticationResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AuthenticateSilentlyAsync (requestUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
                        Retval.m_IWebAuthenticationResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function AuthenticateSilentlyAsync
      (
         requestUri : Windows.Foundation.Uri'Class;
         options : Windows.Security.Authentication.Web.WebAuthenticationOptions
      )
      return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.WebAuthenticationBroker");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAuthenticationResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAuthenticationResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.IWebAuthenticationResult;
         m_IID            : aliased WinRt.IID := (3007926956, 9822, 22855, (135, 53, 233, 49, 143, 67, 1, 255 )); -- Windows.Security.Authentication.Web.WebAuthenticationResult;
         m_HandlerIID     : aliased WinRt.IID := (1008649292, 59714, 21733, (188, 211, 227, 41, 201, 81, 245, 149 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAuthenticationResult.Kind := new AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAuthenticationResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAuthenticationResult.Kind_Delegate, AsyncOperationCompletedHandler_WebAuthenticationResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationBrokerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.AuthenticateSilentlyAsync (requestUri.m_IUriRuntimeClass.all, options, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
                        Retval.m_IWebAuthenticationResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

   end WebAuthenticationBroker;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAuthenticationResult

   procedure Initialize (this : in out WebAuthenticationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAuthenticationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAuthenticationResult, IWebAuthenticationResult_Ptr);
   begin
      if this.m_IWebAuthenticationResult /= null then
         if this.m_IWebAuthenticationResult.all /= null then
            RefCount := this.m_IWebAuthenticationResult.all.Release;
            Free (this.m_IWebAuthenticationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAuthenticationResult

   function get_ResponseData
   (
      this : in out WebAuthenticationResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebAuthenticationResult.all.get_ResponseData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ResponseStatus
   (
      this : in out WebAuthenticationResult
   )
   return WinRt.Windows.Security.Authentication.Web.WebAuthenticationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.WebAuthenticationStatus;
   begin
      Hr := this.m_IWebAuthenticationResult.all.get_ResponseStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResponseErrorDetail
   (
      this : in out WebAuthenticationResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWebAuthenticationResult.all.get_ResponseErrorDetail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Data.Json is

   package IVector_IJsonValue is new WinRt.Windows.Foundation.Collections.IVector (WinRt.Windows.Data.Json.IJsonValue);
   package IIterable_IJsonValue is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Data.Json.IJsonValue);
   package IMap_HString_IJsonValue is new WinRt.Windows.Foundation.Collections.IMap (WinRt.HString, WinRt.Windows.Data.Json.IJsonValue);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JsonArray

   procedure Initialize (this : in out JsonArray) is
   begin
      null;
   end;

   procedure Finalize (this : in out JsonArray) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IJsonArray, IJsonArray_Ptr);
   begin
      if this.m_IJsonArray /= null then
         if this.m_IJsonArray.all /= null then
            RefCount := this.m_IJsonArray.all.Release;
            Free (this.m_IJsonArray);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for JsonArray

   function Constructor return JsonArray is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Data.Json.JsonArray");
      m_ComRetVal  : aliased Windows.Data.Json.IJsonArray;
   begin
      return RetVal : JsonArray do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
            Retval.m_IJsonArray.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for JsonArray

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Data.Json.JsonArray is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonArray");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonArrayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonArray;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonArray do
         Hr := RoGetActivationFactory (m_hString, IID_IJsonArrayStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
            Retval.m_IJsonArray.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      result : access Windows.Data.Json.IJsonArray
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonArray");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonArrayStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IJsonArrayStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, result, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JsonArray

   function GetObjectAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Data.Json.JsonObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonObject;
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonObject do
         Hr := this.m_IJsonArray.all.GetObjectAt (index, m_ComRetVal'Access);
         Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
         Retval.m_IJsonObject.all := m_ComRetVal;
      end return;
   end;

   function GetArrayAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Data.Json.JsonArray'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonArray;
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonArray do
         Hr := this.m_IJsonArray.all.GetArrayAt (index, m_ComRetVal'Access);
         Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
         Retval.m_IJsonArray.all := m_ComRetVal;
      end return;
   end;

   function GetStringAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IJsonArray.all.GetStringAt (index, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNumberAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IJsonArray.all.GetNumberAt (index, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetBooleanAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IJsonArray.all.GetBooleanAt (index, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ValueType
   (
      this : in out JsonArray
   )
   return WinRt.Windows.Data.Json.JsonValueType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.JsonValueType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.get_ValueType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Stringify
   (
      this : in out JsonArray
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.Stringify (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetString
   (
      this : in out JsonArray
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.GetString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNumber
   (
      this : in out JsonArray
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.GetNumber (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetBoolean
   (
      this : in out JsonArray
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.GetBoolean (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetArray
   (
      this : in out JsonArray
   )
   return WinRt.Windows.Data.Json.JsonArray'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonArray;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonArray do
         m_Interface := QInterface (this.m_IJsonArray.all);
         Hr := m_Interface.GetArray (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
         Retval.m_IJsonArray.all := m_ComRetVal;
      end return;
   end;

   function GetObject
   (
      this : in out JsonArray
   )
   return WinRt.Windows.Data.Json.JsonObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonObject do
         m_Interface := QInterface (this.m_IJsonArray.all);
         Hr := m_Interface.GetObject (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
         Retval.m_IJsonObject.all := m_ComRetVal;
      end return;
   end;

   -- Generic Interface Windows.Foundation.Collections.IVector`1<Windows.Data.Json.IJsonValue>
   function GetAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Data.Json.IJsonValue is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out JsonArray
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out JsonArray
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out JsonArray;
      value : Windows.Data.Json.IJsonValue;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.IndexOf (value, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32;
      value : Windows.Data.Json.IJsonValue
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.SetAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure InsertAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32;
      value : Windows.Data.Json.IJsonValue
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.InsertAt (index, value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAt
   (
      this : in out JsonArray;
      index : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.RemoveAt (index);
      m_RefCount := m_Interface.Release;
   end;

   procedure Append
   (
      this : in out JsonArray;
      value : Windows.Data.Json.IJsonValue
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.Append (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure RemoveAtEnd
   (
      this : in out JsonArray
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.RemoveAtEnd;
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out JsonArray
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetMany
   (
      this : in out JsonArray;
      startIndex : WinRt.UInt32;
      items : Windows.Data.Json.IJsonValue_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ReplaceAll
   (
      this : in out JsonArray;
      items : Windows.Data.Json.IJsonValue_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVector_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3561382588, 56547, 22952, (146, 114, 75, 33, 15, 51, 144, 139 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IVector_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.ReplaceAll (WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Data.Json.IJsonValue>
   function First
   (
      this : in out JsonArray
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3406074550, 16659, 21967, (178, 197, 153, 235, 66, 139, 164, 147 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, IIterable_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out JsonArray
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonArray_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonArray.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body JsonError is

      function GetJsonStatus
      (
         hresult : WinRt.Int32
      )
      return WinRt.Windows.Data.Json.JsonErrorStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonError");
         m_Factory        : access WinRt.Windows.Data.Json.IJsonErrorStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Data.Json.JsonErrorStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IJsonErrorStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetJsonStatus (hresult, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end JsonError;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JsonObject

   procedure Initialize (this : in out JsonObject) is
   begin
      null;
   end;

   procedure Finalize (this : in out JsonObject) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IJsonObject, IJsonObject_Ptr);
   begin
      if this.m_IJsonObject /= null then
         if this.m_IJsonObject.all /= null then
            RefCount := this.m_IJsonObject.all.Release;
            Free (this.m_IJsonObject);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for JsonObject

   function Constructor return JsonObject is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Data.Json.JsonObject");
      m_ComRetVal  : aliased Windows.Data.Json.IJsonObject;
   begin
      return RetVal : JsonObject do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
            Retval.m_IJsonObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for JsonObject

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Data.Json.JsonObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonObject");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonObjectStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonObject;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonObject do
         Hr := RoGetActivationFactory (m_hString, IID_IJsonObjectStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
            Retval.m_IJsonObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      result : access Windows.Data.Json.IJsonObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonObject");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonObjectStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IJsonObjectStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, result, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JsonObject

   function GetNamedValue
   (
      this : in out JsonObject;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Json.JsonValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonValue do
         Hr := this.m_IJsonObject.all.GetNamedValue (HStr_name, m_ComRetVal'Access);
         Retval.m_IJsonValue := new Windows.Data.Json.IJsonValue;
         Retval.m_IJsonValue.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   procedure SetNamedValue
   (
      this : in out JsonObject;
      name : WinRt.WString;
      value : Windows.Data.Json.IJsonValue
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IJsonObject.all.SetNamedValue (HStr_name, value);
      Hr := WindowsDeleteString (HStr_name);
   end;

   function GetNamedObject
   (
      this : in out JsonObject;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Json.JsonObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonObject;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonObject do
         Hr := this.m_IJsonObject.all.GetNamedObject (HStr_name, m_ComRetVal'Access);
         Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
         Retval.m_IJsonObject.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetNamedArray
   (
      this : in out JsonObject;
      name : WinRt.WString
   )
   return WinRt.Windows.Data.Json.JsonArray'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonArray;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonArray do
         Hr := this.m_IJsonObject.all.GetNamedArray (HStr_name, m_ComRetVal'Access);
         Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
         Retval.m_IJsonArray.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetNamedString
   (
      this : in out JsonObject;
      name : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IJsonObject.all.GetNamedString (HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNamedNumber
   (
      this : in out JsonObject;
      name : WinRt.WString
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IJsonObject.all.GetNamedNumber (HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function GetNamedBoolean
   (
      this : in out JsonObject;
      name : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IJsonObject.all.GetNamedBoolean (HStr_name, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function get_ValueType
   (
      this : in out JsonObject
   )
   return WinRt.Windows.Data.Json.JsonValueType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.JsonValueType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.get_ValueType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Stringify
   (
      this : in out JsonObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.Stringify (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetString
   (
      this : in out JsonObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.GetString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNumber
   (
      this : in out JsonObject
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.GetNumber (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetBoolean
   (
      this : in out JsonObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.GetBoolean (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetArray
   (
      this : in out JsonObject
   )
   return WinRt.Windows.Data.Json.JsonArray'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonArray;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonArray do
         m_Interface := QInterface (this.m_IJsonObject.all);
         Hr := m_Interface.GetArray (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
         Retval.m_IJsonArray.all := m_ComRetVal;
      end return;
   end;

   function GetObject
   (
      this : in out JsonObject
   )
   return WinRt.Windows.Data.Json.JsonObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonValue := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonValue, WinRt.Windows.Data.Json.IID_IJsonValue'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonObject do
         m_Interface := QInterface (this.m_IJsonObject.all);
         Hr := m_Interface.GetObject (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
         Retval.m_IJsonObject.all := m_ComRetVal;
      end return;
   end;

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.String,Windows.Data.Json.IJsonValue>
   function Lookup
   (
      this : in out JsonObject;
      key : WinRt.WString
   )
   return WinRt.Windows.Data.Json.IJsonValue is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3386484517, 30827, 20755, (180, 183, 155, 97, 118, 76, 34, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, IMap_HString_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.Lookup (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out JsonObject
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3386484517, 30827, 20755, (180, 183, 155, 97, 118, 76, 34, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, IMap_HString_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out JsonObject;
      key : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3386484517, 30827, 20755, (180, 183, 155, 97, 118, 76, 34, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, IMap_HString_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.HasKey (HStr_key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out JsonObject
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3386484517, 30827, 20755, (180, 183, 155, 97, 118, 76, 34, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, IMap_HString_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out JsonObject;
      key : WinRt.WString;
      value : Windows.Data.Json.IJsonValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3386484517, 30827, 20755, (180, 183, 155, 97, 118, 76, 34, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, IMap_HString_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.Insert (HStr_key, value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out JsonObject;
      key : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_key : WinRt.HString := To_HString (key);
      m_GenericIID     : aliased WinRt.IID := (3386484517, 30827, 20755, (180, 183, 155, 97, 118, 76, 34, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, IMap_HString_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.Remove (HStr_key);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_key);
   end;

   procedure Clear
   (
      this : in out JsonObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_HString_IJsonValue.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (3386484517, 30827, 20755, (180, 183, 155, 97, 118, 76, 34, 11 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, IMap_HString_IJsonValue.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   function GetNamedValue
   (
      this : in out JsonObject;
      name : WinRt.WString;
      defaultValue : Windows.Data.Json.JsonValue'Class
   )
   return WinRt.Windows.Data.Json.JsonValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
      HStr_name : WinRt.HString := To_HString (name);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues, WinRt.Windows.Data.Json.IID_IJsonObjectWithDefaultValues'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonValue do
         m_Interface := QInterface (this.m_IJsonObject.all);
         Hr := m_Interface.GetNamedValue (HStr_name, defaultValue.m_IJsonValue.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IJsonValue := new Windows.Data.Json.IJsonValue;
         Retval.m_IJsonValue.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetNamedObject
   (
      this : in out JsonObject;
      name : WinRt.WString;
      defaultValue : Windows.Data.Json.JsonObject'Class
   )
   return WinRt.Windows.Data.Json.JsonObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonObject;
      HStr_name : WinRt.HString := To_HString (name);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues, WinRt.Windows.Data.Json.IID_IJsonObjectWithDefaultValues'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonObject do
         m_Interface := QInterface (this.m_IJsonObject.all);
         Hr := m_Interface.GetNamedObject (HStr_name, defaultValue.m_IJsonObject.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
         Retval.m_IJsonObject.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetNamedString
   (
      this : in out JsonObject;
      name : WinRt.WString;
      defaultValue : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_defaultValue : WinRt.HString := To_HString (defaultValue);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues, WinRt.Windows.Data.Json.IID_IJsonObjectWithDefaultValues'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.GetNamedString (HStr_name, HStr_defaultValue, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_defaultValue);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNamedArray
   (
      this : in out JsonObject;
      name : WinRt.WString;
      defaultValue : Windows.Data.Json.JsonArray'Class
   )
   return WinRt.Windows.Data.Json.JsonArray'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonArray;
      HStr_name : WinRt.HString := To_HString (name);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues, WinRt.Windows.Data.Json.IID_IJsonObjectWithDefaultValues'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonArray do
         m_Interface := QInterface (this.m_IJsonObject.all);
         Hr := m_Interface.GetNamedArray (HStr_name, defaultValue.m_IJsonArray.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
         Retval.m_IJsonArray.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function GetNamedNumber
   (
      this : in out JsonObject;
      name : WinRt.WString;
      defaultValue : WinRt.Double
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      HStr_name : WinRt.HString := To_HString (name);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues, WinRt.Windows.Data.Json.IID_IJsonObjectWithDefaultValues'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.GetNamedNumber (HStr_name, defaultValue, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function GetNamedBoolean
   (
      this : in out JsonObject;
      name : WinRt.WString;
      defaultValue : WinRt.Boolean
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_name : WinRt.HString := To_HString (name);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Data.Json.IJsonObjectWithDefaultValues, WinRt.Windows.Data.Json.IID_IJsonObjectWithDefaultValues'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.GetNamedBoolean (HStr_name, defaultValue, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_name);
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out JsonObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonObject_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonObject.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JsonValue

   procedure Initialize (this : in out JsonValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out JsonValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IJsonValue, IJsonValue_Ptr);
   begin
      if this.m_IJsonValue /= null then
         if this.m_IJsonValue.all /= null then
            RefCount := this.m_IJsonValue.all.Release;
            Free (this.m_IJsonValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for JsonValue

   function Parse
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Data.Json.JsonValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonValue");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonValue do
         Hr := RoGetActivationFactory (m_hString, IID_IJsonValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Parse (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IJsonValue := new Windows.Data.Json.IJsonValue;
            Retval.m_IJsonValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function TryParse
   (
      input : WinRt.WString;
      result : access Windows.Data.Json.IJsonValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonValue");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IJsonValueStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParse (HStr_input, result, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_input);
      return m_ComRetVal;
   end;

   function CreateBooleanValue
   (
      input : WinRt.Boolean
   )
   return WinRt.Windows.Data.Json.JsonValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonValue");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonValue do
         Hr := RoGetActivationFactory (m_hString, IID_IJsonValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateBooleanValue (input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IJsonValue := new Windows.Data.Json.IJsonValue;
            Retval.m_IJsonValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateNumberValue
   (
      input : WinRt.Double
   )
   return WinRt.Windows.Data.Json.JsonValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonValue");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonValue do
         Hr := RoGetActivationFactory (m_hString, IID_IJsonValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateNumberValue (input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IJsonValue := new Windows.Data.Json.IJsonValue;
            Retval.m_IJsonValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateStringValue
   (
      input : WinRt.WString
   )
   return WinRt.Windows.Data.Json.JsonValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonValue");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonValueStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
      HStr_input : WinRt.HString := To_HString (input);
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonValue do
         Hr := RoGetActivationFactory (m_hString, IID_IJsonValueStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateStringValue (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IJsonValue := new Windows.Data.Json.IJsonValue;
            Retval.m_IJsonValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
      end return;
   end;

   function CreateNullValue
   return WinRt.Windows.Data.Json.JsonValue is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Data.Json.JsonValue");
      m_Factory        : access WinRt.Windows.Data.Json.IJsonValueStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonValue;
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonValue do
         Hr := RoGetActivationFactory (m_hString, IID_IJsonValueStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateNullValue (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IJsonValue := new Windows.Data.Json.IJsonValue;
            Retval.m_IJsonValue.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JsonValue

   function get_ValueType
   (
      this : in out JsonValue
   )
   return WinRt.Windows.Data.Json.JsonValueType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.JsonValueType;
   begin
      Hr := this.m_IJsonValue.all.get_ValueType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Stringify
   (
      this : in out JsonValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IJsonValue.all.Stringify (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetString
   (
      this : in out JsonValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IJsonValue.all.GetString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetNumber
   (
      this : in out JsonValue
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IJsonValue.all.GetNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetBoolean
   (
      this : in out JsonValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IJsonValue.all.GetBoolean (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetArray
   (
      this : in out JsonValue
   )
   return WinRt.Windows.Data.Json.JsonArray'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonArray;
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonArray do
         Hr := this.m_IJsonValue.all.GetArray (m_ComRetVal'Access);
         Retval.m_IJsonArray := new Windows.Data.Json.IJsonArray;
         Retval.m_IJsonArray.all := m_ComRetVal;
      end return;
   end;

   function GetObject
   (
      this : in out JsonValue
   )
   return WinRt.Windows.Data.Json.JsonObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Json.IJsonObject;
   begin
      return RetVal : WinRt.Windows.Data.Json.JsonObject do
         Hr := this.m_IJsonValue.all.GetObject (m_ComRetVal'Access);
         Retval.m_IJsonObject := new Windows.Data.Json.IJsonObject;
         Retval.m_IJsonObject.all := m_ComRetVal;
      end return;
   end;

   function ToString
   (
      this : in out JsonValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Data.Json.IJsonValue_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IJsonValue.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

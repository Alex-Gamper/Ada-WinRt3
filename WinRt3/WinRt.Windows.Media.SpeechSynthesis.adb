--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.SpeechSynthesis is

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.UInt32, GenericObject);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.UInt32, GenericObject);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);

   package IAsyncOperation_SpeechSynthesisStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream);
   package AsyncOperationCompletedHandler_SpeechSynthesisStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechSynthesisStream

   procedure Initialize (this : in out SpeechSynthesisStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechSynthesisStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechSynthesisStream, ISpeechSynthesisStream_Ptr);
   begin
      if this.m_ISpeechSynthesisStream /= null then
         if this.m_ISpeechSynthesisStream.all /= null then
            RefCount := this.m_ISpeechSynthesisStream.all.Release;
            Free (this.m_ISpeechSynthesisStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechSynthesisStream

   function get_Markers
   (
      this : in out SpeechSynthesisStream
   )
   return IVectorView_IMediaMarker.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaMarker.Kind;
   begin
      Hr := this.m_ISpeechSynthesisStream.all.get_Markers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaMarker (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ContentType
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IContentTypeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IContentTypeProvider, WinRt.Windows.Storage.Streams.IID_IContentTypeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.get_ContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out SpeechSynthesisStream;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.put_Size (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetInputStreamAt
   (
      this : in out SpeechSynthesisStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.GetInputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetOutputStreamAt
   (
      this : in out SpeechSynthesisStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.GetOutputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out SpeechSynthesisStream;
      position : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.Seek (position);
      m_RefCount := m_Interface.Release;
   end;

   function CloneStream
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.CloneStream (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanRead
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.get_CanRead (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanWrite
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.get_CanWrite (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function WriteAsync
   (
      this : in out SpeechSynthesisStream;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.WriteAsync (buffer, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.FlushAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out SpeechSynthesisStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ReadAsync
   (
      this : in out SpeechSynthesisStream;
      buffer : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Storage.Streams.IInputStream, WinRt.Windows.Storage.Streams.IID_IInputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.ReadAsync (buffer, count, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_TimedMetadataTracks
   (
      this : in out SpeechSynthesisStream
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ITimedMetadataTrackProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream_Interface, WinRt.Windows.Media.Core.ITimedMetadataTrackProvider, WinRt.Windows.Media.Core.IID_ITimedMetadataTrackProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesisStream.all);
      Hr := m_Interface.get_TimedMetadataTracks (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechSynthesizer

   procedure Initialize (this : in out SpeechSynthesizer) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechSynthesizer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechSynthesizer, ISpeechSynthesizer_Ptr);
   begin
      if this.m_ISpeechSynthesizer /= null then
         if this.m_ISpeechSynthesizer.all /= null then
            RefCount := this.m_ISpeechSynthesizer.all.Release;
            Free (this.m_ISpeechSynthesizer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SpeechSynthesizer

   function Constructor return SpeechSynthesizer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.SpeechSynthesis.SpeechSynthesizer");
      m_ComRetVal  : aliased Windows.Media.SpeechSynthesis.ISpeechSynthesizer;
   begin
      return RetVal : SpeechSynthesizer do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISpeechSynthesizer := new Windows.Media.SpeechSynthesis.ISpeechSynthesizer;
            Retval.m_ISpeechSynthesizer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SpeechSynthesizer

   function TrySetDefaultVoiceAsync
   (
      voice : Windows.Media.SpeechSynthesis.VoiceInformation'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechSynthesis.SpeechSynthesizer");
      m_Factory        : access WinRt.Windows.Media.SpeechSynthesis.IInstalledVoicesStatic2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IInstalledVoicesStatic2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TrySetDefaultVoiceAsync (voice.m_IVoiceInformation.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function get_AllVoices
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechSynthesis.SpeechSynthesizer");
      m_Factory        : access WinRt.Windows.Media.SpeechSynthesis.IInstalledVoicesStatic_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IInstalledVoicesStatic'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AllVoices (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DefaultVoice
   return WinRt.Windows.Media.SpeechSynthesis.VoiceInformation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.SpeechSynthesis.SpeechSynthesizer");
      m_Factory        : access WinRt.Windows.Media.SpeechSynthesis.IInstalledVoicesStatic_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechSynthesis.IVoiceInformation;
   begin
      return RetVal : WinRt.Windows.Media.SpeechSynthesis.VoiceInformation do
         Hr := RoGetActivationFactory (m_hString, IID_IInstalledVoicesStatic'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DefaultVoice (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVoiceInformation := new Windows.Media.SpeechSynthesis.IVoiceInformation;
            Retval.m_IVoiceInformation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechSynthesizer

   function SynthesizeTextToStreamAsync
   (
      this : in out SpeechSynthesizer;
      text : WinRt.WString
   )
   return WinRt.Windows.Media.SpeechSynthesis.SpeechSynthesisStream'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpeechSynthesisStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpeechSynthesisStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream;
      m_IID            : aliased WinRt.IID := (3751626925, 40170, 22028, (158, 220, 203, 136, 82, 203, 85, 227 )); -- Windows.Media.SpeechSynthesis.SpeechSynthesisStream;
      m_HandlerIID     : aliased WinRt.IID := (3379739030, 24933, 20692, (175, 96, 168, 195, 223, 81, 208, 146 ));
      m_Handler        : AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind := new AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpeechSynthesisStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind_Delegate, AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.SpeechSynthesis.SpeechSynthesisStream do
         Hr := this.m_ISpeechSynthesizer.all.SynthesizeTextToStreamAsync (HStr_text, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpeechSynthesisStream := new Windows.Media.SpeechSynthesis.ISpeechSynthesisStream;
                  Retval.m_ISpeechSynthesisStream.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   function SynthesizeSsmlToStreamAsync
   (
      this : in out SpeechSynthesizer;
      Ssml : WinRt.WString
   )
   return WinRt.Windows.Media.SpeechSynthesis.SpeechSynthesisStream'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_Ssml : WinRt.HString := To_HString (Ssml);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SpeechSynthesisStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SpeechSynthesisStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesisStream;
      m_IID            : aliased WinRt.IID := (3751626925, 40170, 22028, (158, 220, 203, 136, 82, 203, 85, 227 )); -- Windows.Media.SpeechSynthesis.SpeechSynthesisStream;
      m_HandlerIID     : aliased WinRt.IID := (3379739030, 24933, 20692, (175, 96, 168, 195, 223, 81, 208, 146 ));
      m_Handler        : AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind := new AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SpeechSynthesisStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind_Delegate, AsyncOperationCompletedHandler_SpeechSynthesisStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.SpeechSynthesis.SpeechSynthesisStream do
         Hr := this.m_ISpeechSynthesizer.all.SynthesizeSsmlToStreamAsync (HStr_Ssml, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISpeechSynthesisStream := new Windows.Media.SpeechSynthesis.ISpeechSynthesisStream;
                  Retval.m_ISpeechSynthesisStream.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_Ssml);
      end return;
   end;

   procedure put_Voice
   (
      this : in out SpeechSynthesizer;
      value : Windows.Media.SpeechSynthesis.VoiceInformation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechSynthesizer.all.put_Voice (value.m_IVoiceInformation.all);
   end;

   function get_Voice
   (
      this : in out SpeechSynthesizer
   )
   return WinRt.Windows.Media.SpeechSynthesis.VoiceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechSynthesis.IVoiceInformation;
   begin
      return RetVal : WinRt.Windows.Media.SpeechSynthesis.VoiceInformation do
         Hr := this.m_ISpeechSynthesizer.all.get_Voice (m_ComRetVal'Access);
         Retval.m_IVoiceInformation := new Windows.Media.SpeechSynthesis.IVoiceInformation;
         Retval.m_IVoiceInformation.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out SpeechSynthesizer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_Options
   (
      this : in out SpeechSynthesizer
   )
   return WinRt.Windows.Media.SpeechSynthesis.SpeechSynthesizerOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizer_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizer2, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizer2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.SpeechSynthesis.SpeechSynthesizerOptions do
         m_Interface := QInterface (this.m_ISpeechSynthesizer.all);
         Hr := m_Interface.get_Options (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISpeechSynthesizerOptions := new Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions;
         Retval.m_ISpeechSynthesizerOptions.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SpeechSynthesizerOptions

   procedure Initialize (this : in out SpeechSynthesizerOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out SpeechSynthesizerOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISpeechSynthesizerOptions, ISpeechSynthesizerOptions_Ptr);
   begin
      if this.m_ISpeechSynthesizerOptions /= null then
         if this.m_ISpeechSynthesizerOptions.all /= null then
            RefCount := this.m_ISpeechSynthesizerOptions.all.Release;
            Free (this.m_ISpeechSynthesizerOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SpeechSynthesizerOptions

   function get_IncludeWordBoundaryMetadata
   (
      this : in out SpeechSynthesizerOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpeechSynthesizerOptions.all.get_IncludeWordBoundaryMetadata (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IncludeWordBoundaryMetadata
   (
      this : in out SpeechSynthesizerOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechSynthesizerOptions.all.put_IncludeWordBoundaryMetadata (value);
   end;

   function get_IncludeSentenceBoundaryMetadata
   (
      this : in out SpeechSynthesizerOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISpeechSynthesizerOptions.all.get_IncludeSentenceBoundaryMetadata (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IncludeSentenceBoundaryMetadata
   (
      this : in out SpeechSynthesizerOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISpeechSynthesizerOptions.all.put_IncludeSentenceBoundaryMetadata (value);
   end;

   function get_AudioVolume
   (
      this : in out SpeechSynthesizerOptions
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.get_AudioVolume (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AudioVolume
   (
      this : in out SpeechSynthesizerOptions;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.put_AudioVolume (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SpeakingRate
   (
      this : in out SpeechSynthesizerOptions
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.get_SpeakingRate (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SpeakingRate
   (
      this : in out SpeechSynthesizerOptions;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.put_SpeakingRate (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AudioPitch
   (
      this : in out SpeechSynthesizerOptions
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.get_AudioPitch (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AudioPitch
   (
      this : in out SpeechSynthesizerOptions;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.put_AudioPitch (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AppendedSilence
   (
      this : in out SpeechSynthesizerOptions
   )
   return WinRt.Windows.Media.SpeechSynthesis.SpeechAppendedSilence is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechSynthesis.SpeechAppendedSilence;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.get_AppendedSilence (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AppendedSilence
   (
      this : in out SpeechSynthesizerOptions;
      value : Windows.Media.SpeechSynthesis.SpeechAppendedSilence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.put_AppendedSilence (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PunctuationSilence
   (
      this : in out SpeechSynthesizerOptions
   )
   return WinRt.Windows.Media.SpeechSynthesis.SpeechPunctuationSilence is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechSynthesis.SpeechPunctuationSilence;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.get_PunctuationSilence (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PunctuationSilence
   (
      this : in out SpeechSynthesizerOptions;
      value : Windows.Media.SpeechSynthesis.SpeechPunctuationSilence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions_Interface, WinRt.Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3, WinRt.Windows.Media.SpeechSynthesis.IID_ISpeechSynthesizerOptions3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISpeechSynthesizerOptions.all);
      Hr := m_Interface.put_PunctuationSilence (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VoiceInformation

   procedure Initialize (this : in out VoiceInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out VoiceInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVoiceInformation, IVoiceInformation_Ptr);
   begin
      if this.m_IVoiceInformation /= null then
         if this.m_IVoiceInformation.all /= null then
            RefCount := this.m_IVoiceInformation.all.Release;
            Free (this.m_IVoiceInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VoiceInformation

   function get_DisplayName
   (
      this : in out VoiceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceInformation.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Id
   (
      this : in out VoiceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceInformation.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out VoiceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceInformation.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out VoiceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IVoiceInformation.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Gender
   (
      this : in out VoiceInformation
   )
   return WinRt.Windows.Media.SpeechSynthesis.VoiceGender is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.SpeechSynthesis.VoiceGender;
   begin
      Hr := this.m_IVoiceInformation.all.get_Gender (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

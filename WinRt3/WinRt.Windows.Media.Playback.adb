--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Media.Audio;
with WinRt.Windows.Media.Casting;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Media.Protection;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI.Composition;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Playback is

   package IVectorView_IMediaTrack is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Media.Core.IMediaTrack);
   package IIterable_IMediaTrack is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Media.Core.IMediaTrack);
   package IVectorView_ITimedMetadataTrack is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Media.Core.ITimedMetadataTrack);
   package IIterable_ITimedMetadataTrack is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Media.Core.ITimedMetadataTrack);
   package IIterable_IPlaybackMediaMarker is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Media.Playback.IPlaybackMediaMarker);
   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BackgroundMediaPlayer is

      function get_Current
      return WinRt.Windows.Media.Playback.MediaPlayer is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlayer;
      begin
         return RetVal : WinRt.Windows.Media.Playback.MediaPlayer do
            Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_Current (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IMediaPlayer := new Windows.Media.Playback.IMediaPlayer;
               Retval.m_IMediaPlayer.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function add_MessageReceivedFromBackground
      (
         value : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_MessageReceivedFromBackground (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_MessageReceivedFromBackground
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_MessageReceivedFromBackground (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_MessageReceivedFromForeground
      (
         value : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_MessageReceivedFromForeground (value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_MessageReceivedFromForeground
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_MessageReceivedFromForeground (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SendMessageToBackground
      (
         value : Windows.Foundation.Collections.ValueSet'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SendMessageToBackground (value.m_IPropertySet.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure SendMessageToForeground
      (
         value : Windows.Foundation.Collections.ValueSet'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.SendMessageToForeground (value.m_IPropertySet.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function IsMediaPlaying
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Boolean;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.IsMediaPlaying (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure Shutdown is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.BackgroundMediaPlayer");
         m_Factory        : access WinRt.Windows.Media.Playback.IBackgroundMediaPlayerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundMediaPlayerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Shutdown;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end BackgroundMediaPlayer;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CurrentMediaPlaybackItemChangedEventArgs

   procedure Initialize (this : in out CurrentMediaPlaybackItemChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CurrentMediaPlaybackItemChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICurrentMediaPlaybackItemChangedEventArgs, ICurrentMediaPlaybackItemChangedEventArgs_Ptr);
   begin
      if this.m_ICurrentMediaPlaybackItemChangedEventArgs /= null then
         if this.m_ICurrentMediaPlaybackItemChangedEventArgs.all /= null then
            RefCount := this.m_ICurrentMediaPlaybackItemChangedEventArgs.all.Release;
            Free (this.m_ICurrentMediaPlaybackItemChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CurrentMediaPlaybackItemChangedEventArgs

   function get_NewItem
   (
      this : in out CurrentMediaPlaybackItemChangedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_ICurrentMediaPlaybackItemChangedEventArgs.all.get_NewItem (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_OldItem
   (
      this : in out CurrentMediaPlaybackItemChangedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_ICurrentMediaPlaybackItemChangedEventArgs.all.get_OldItem (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_Reason
   (
      this : in out CurrentMediaPlaybackItemChangedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItemChangedReason is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.ICurrentMediaPlaybackItemChangedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlaybackItemChangedReason;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.ICurrentMediaPlaybackItemChangedEventArgs_Interface, WinRt.Windows.Media.Playback.ICurrentMediaPlaybackItemChangedEventArgs2, WinRt.Windows.Media.Playback.IID_ICurrentMediaPlaybackItemChangedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICurrentMediaPlaybackItemChangedEventArgs.all);
      Hr := m_Interface.get_Reason (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBreak

   procedure Initialize (this : in out MediaBreak) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBreak) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBreak, IMediaBreak_Ptr);
   begin
      if this.m_IMediaBreak /= null then
         if this.m_IMediaBreak.all /= null then
            RefCount := this.m_IMediaBreak.all.Release;
            Free (this.m_IMediaBreak);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaBreak

   function Constructor
   (
      insertionMethod : Windows.Media.Playback.MediaBreakInsertionMethod
   )
   return MediaBreak is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.MediaBreak");
      m_Factory    : access IMediaBreakFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : MediaBreak do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaBreakFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (insertionMethod, m_ComRetVal'Access);
            Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
            Retval.m_IMediaBreak.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      insertionMethod : Windows.Media.Playback.MediaBreakInsertionMethod;
      presentationPosition : Windows.Foundation.TimeSpan
   )
   return MediaBreak is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.MediaBreak");
      m_Factory    : access IMediaBreakFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : MediaBreak do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaBreakFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithPresentationPosition (insertionMethod, presentationPosition, m_ComRetVal'Access);
            Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
            Retval.m_IMediaBreak.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBreak

   function get_PlaybackList
   (
      this : in out MediaBreak
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackList;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackList do
         Hr := this.m_IMediaBreak.all.get_PlaybackList (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackList := new Windows.Media.Playback.IMediaPlaybackList;
         Retval.m_IMediaPlaybackList.all := m_ComRetVal;
      end return;
   end;

   function get_PresentationPosition
   (
      this : in out MediaBreak
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMediaBreak.all.get_PresentationPosition (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_InsertionMethod
   (
      this : in out MediaBreak
   )
   return WinRt.Windows.Media.Playback.MediaBreakInsertionMethod is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaBreakInsertionMethod;
   begin
      Hr := this.m_IMediaBreak.all.get_InsertionMethod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CustomProperties
   (
      this : in out MediaBreak
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IMediaBreak.all.get_CustomProperties (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_CanStart
   (
      this : in out MediaBreak
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaBreak.all.get_CanStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CanStart
   (
      this : in out MediaBreak;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreak.all.put_CanStart (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBreakEndedEventArgs

   procedure Initialize (this : in out MediaBreakEndedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBreakEndedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBreakEndedEventArgs, IMediaBreakEndedEventArgs_Ptr);
   begin
      if this.m_IMediaBreakEndedEventArgs /= null then
         if this.m_IMediaBreakEndedEventArgs.all /= null then
            RefCount := this.m_IMediaBreakEndedEventArgs.all.Release;
            Free (this.m_IMediaBreakEndedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBreakEndedEventArgs

   function get_MediaBreak
   (
      this : in out MediaBreakEndedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaBreak'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreak do
         Hr := this.m_IMediaBreakEndedEventArgs.all.get_MediaBreak (m_ComRetVal'Access);
         Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
         Retval.m_IMediaBreak.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBreakManager

   procedure Initialize (this : in out MediaBreakManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBreakManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBreakManager, IMediaBreakManager_Ptr);
   begin
      if this.m_IMediaBreakManager /= null then
         if this.m_IMediaBreakManager.all /= null then
            RefCount := this.m_IMediaBreakManager.all.Release;
            Free (this.m_IMediaBreakManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBreakManager

   function add_BreaksSeekedOver
   (
      this : in out MediaBreakManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaBreakManager.all.add_BreaksSeekedOver (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BreaksSeekedOver
   (
      this : in out MediaBreakManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakManager.all.remove_BreaksSeekedOver (token);
   end;

   function add_BreakStarted
   (
      this : in out MediaBreakManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaBreakManager.all.add_BreakStarted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BreakStarted
   (
      this : in out MediaBreakManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakManager.all.remove_BreakStarted (token);
   end;

   function add_BreakEnded
   (
      this : in out MediaBreakManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaBreakManager.all.add_BreakEnded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BreakEnded
   (
      this : in out MediaBreakManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakManager.all.remove_BreakEnded (token);
   end;

   function add_BreakSkipped
   (
      this : in out MediaBreakManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaBreakManager.all.add_BreakSkipped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BreakSkipped
   (
      this : in out MediaBreakManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakManager.all.remove_BreakSkipped (token);
   end;

   function get_CurrentBreak
   (
      this : in out MediaBreakManager
   )
   return WinRt.Windows.Media.Playback.MediaBreak'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreak do
         Hr := this.m_IMediaBreakManager.all.get_CurrentBreak (m_ComRetVal'Access);
         Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
         Retval.m_IMediaBreak.all := m_ComRetVal;
      end return;
   end;

   function get_PlaybackSession
   (
      this : in out MediaBreakManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackSession;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackSession do
         Hr := this.m_IMediaBreakManager.all.get_PlaybackSession (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackSession := new Windows.Media.Playback.IMediaPlaybackSession;
         Retval.m_IMediaPlaybackSession.all := m_ComRetVal;
      end return;
   end;

   procedure PlayBreak
   (
      this : in out MediaBreakManager;
      value : Windows.Media.Playback.MediaBreak'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakManager.all.PlayBreak (value.m_IMediaBreak.all);
   end;

   procedure SkipCurrentBreak
   (
      this : in out MediaBreakManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakManager.all.SkipCurrentBreak;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBreakSchedule

   procedure Initialize (this : in out MediaBreakSchedule) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBreakSchedule) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBreakSchedule, IMediaBreakSchedule_Ptr);
   begin
      if this.m_IMediaBreakSchedule /= null then
         if this.m_IMediaBreakSchedule.all /= null then
            RefCount := this.m_IMediaBreakSchedule.all.Release;
            Free (this.m_IMediaBreakSchedule);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBreakSchedule

   function add_ScheduleChanged
   (
      this : in out MediaBreakSchedule;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaBreakSchedule.all.add_ScheduleChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ScheduleChanged
   (
      this : in out MediaBreakSchedule;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakSchedule.all.remove_ScheduleChanged (token);
   end;

   procedure InsertMidrollBreak
   (
      this : in out MediaBreakSchedule;
      mediaBreak_p : Windows.Media.Playback.MediaBreak'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakSchedule.all.InsertMidrollBreak (mediaBreak_p.m_IMediaBreak.all);
   end;

   procedure RemoveMidrollBreak
   (
      this : in out MediaBreakSchedule;
      mediaBreak_p : Windows.Media.Playback.MediaBreak'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakSchedule.all.RemoveMidrollBreak (mediaBreak_p.m_IMediaBreak.all);
   end;

   function get_MidrollBreaks
   (
      this : in out MediaBreakSchedule
   )
   return IVectorView_IMediaBreak.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaBreak.Kind;
   begin
      Hr := this.m_IMediaBreakSchedule.all.get_MidrollBreaks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaBreak (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_PrerollBreak
   (
      this : in out MediaBreakSchedule;
      value : Windows.Media.Playback.MediaBreak'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakSchedule.all.put_PrerollBreak (value.m_IMediaBreak.all);
   end;

   function get_PrerollBreak
   (
      this : in out MediaBreakSchedule
   )
   return WinRt.Windows.Media.Playback.MediaBreak'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreak do
         Hr := this.m_IMediaBreakSchedule.all.get_PrerollBreak (m_ComRetVal'Access);
         Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
         Retval.m_IMediaBreak.all := m_ComRetVal;
      end return;
   end;

   procedure put_PostrollBreak
   (
      this : in out MediaBreakSchedule;
      value : Windows.Media.Playback.MediaBreak'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaBreakSchedule.all.put_PostrollBreak (value.m_IMediaBreak.all);
   end;

   function get_PostrollBreak
   (
      this : in out MediaBreakSchedule
   )
   return WinRt.Windows.Media.Playback.MediaBreak'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreak do
         Hr := this.m_IMediaBreakSchedule.all.get_PostrollBreak (m_ComRetVal'Access);
         Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
         Retval.m_IMediaBreak.all := m_ComRetVal;
      end return;
   end;

   function get_PlaybackItem
   (
      this : in out MediaBreakSchedule
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_IMediaBreakSchedule.all.get_PlaybackItem (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBreakSeekedOverEventArgs

   procedure Initialize (this : in out MediaBreakSeekedOverEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBreakSeekedOverEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBreakSeekedOverEventArgs, IMediaBreakSeekedOverEventArgs_Ptr);
   begin
      if this.m_IMediaBreakSeekedOverEventArgs /= null then
         if this.m_IMediaBreakSeekedOverEventArgs.all /= null then
            RefCount := this.m_IMediaBreakSeekedOverEventArgs.all.Release;
            Free (this.m_IMediaBreakSeekedOverEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBreakSeekedOverEventArgs

   function get_SeekedOverBreaks
   (
      this : in out MediaBreakSeekedOverEventArgs
   )
   return IVectorView_IMediaBreak.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaBreak.Kind;
   begin
      Hr := this.m_IMediaBreakSeekedOverEventArgs.all.get_SeekedOverBreaks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaBreak (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_OldPosition
   (
      this : in out MediaBreakSeekedOverEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaBreakSeekedOverEventArgs.all.get_OldPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewPosition
   (
      this : in out MediaBreakSeekedOverEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaBreakSeekedOverEventArgs.all.get_NewPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBreakSkippedEventArgs

   procedure Initialize (this : in out MediaBreakSkippedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBreakSkippedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBreakSkippedEventArgs, IMediaBreakSkippedEventArgs_Ptr);
   begin
      if this.m_IMediaBreakSkippedEventArgs /= null then
         if this.m_IMediaBreakSkippedEventArgs.all /= null then
            RefCount := this.m_IMediaBreakSkippedEventArgs.all.Release;
            Free (this.m_IMediaBreakSkippedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBreakSkippedEventArgs

   function get_MediaBreak
   (
      this : in out MediaBreakSkippedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaBreak'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreak do
         Hr := this.m_IMediaBreakSkippedEventArgs.all.get_MediaBreak (m_ComRetVal'Access);
         Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
         Retval.m_IMediaBreak.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaBreakStartedEventArgs

   procedure Initialize (this : in out MediaBreakStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaBreakStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaBreakStartedEventArgs, IMediaBreakStartedEventArgs_Ptr);
   begin
      if this.m_IMediaBreakStartedEventArgs /= null then
         if this.m_IMediaBreakStartedEventArgs.all /= null then
            RefCount := this.m_IMediaBreakStartedEventArgs.all.Release;
            Free (this.m_IMediaBreakStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaBreakStartedEventArgs

   function get_MediaBreak
   (
      this : in out MediaBreakStartedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaBreak'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreak;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreak do
         Hr := this.m_IMediaBreakStartedEventArgs.all.get_MediaBreak (m_ComRetVal'Access);
         Retval.m_IMediaBreak := new Windows.Media.Playback.IMediaBreak;
         Retval.m_IMediaBreak.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaItemDisplayProperties

   procedure Initialize (this : in out MediaItemDisplayProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaItemDisplayProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaItemDisplayProperties, IMediaItemDisplayProperties_Ptr);
   begin
      if this.m_IMediaItemDisplayProperties /= null then
         if this.m_IMediaItemDisplayProperties.all /= null then
            RefCount := this.m_IMediaItemDisplayProperties.all.Release;
            Free (this.m_IMediaItemDisplayProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaItemDisplayProperties

   function get_Type
   (
      this : in out MediaItemDisplayProperties
   )
   return WinRt.Windows.Media.MediaPlaybackType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaPlaybackType;
   begin
      Hr := this.m_IMediaItemDisplayProperties.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Type
   (
      this : in out MediaItemDisplayProperties;
      value : Windows.Media.MediaPlaybackType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaItemDisplayProperties.all.put_Type (value);
   end;

   function get_MusicProperties
   (
      this : in out MediaItemDisplayProperties
   )
   return WinRt.Windows.Media.MusicDisplayProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IMusicDisplayProperties;
   begin
      return RetVal : WinRt.Windows.Media.MusicDisplayProperties do
         Hr := this.m_IMediaItemDisplayProperties.all.get_MusicProperties (m_ComRetVal'Access);
         Retval.m_IMusicDisplayProperties := new Windows.Media.IMusicDisplayProperties;
         Retval.m_IMusicDisplayProperties.all := m_ComRetVal;
      end return;
   end;

   function get_VideoProperties
   (
      this : in out MediaItemDisplayProperties
   )
   return WinRt.Windows.Media.VideoDisplayProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoDisplayProperties;
   begin
      return RetVal : WinRt.Windows.Media.VideoDisplayProperties do
         Hr := this.m_IMediaItemDisplayProperties.all.get_VideoProperties (m_ComRetVal'Access);
         Retval.m_IVideoDisplayProperties := new Windows.Media.IVideoDisplayProperties;
         Retval.m_IVideoDisplayProperties.all := m_ComRetVal;
      end return;
   end;

   function get_Thumbnail
   (
      this : in out MediaItemDisplayProperties
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := this.m_IMediaItemDisplayProperties.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
         Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
      end return;
   end;

   procedure put_Thumbnail
   (
      this : in out MediaItemDisplayProperties;
      value : Windows.Storage.Streams.RandomAccessStreamReference'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaItemDisplayProperties.all.put_Thumbnail (value.m_IRandomAccessStreamReference.all);
   end;

   procedure ClearAll
   (
      this : in out MediaItemDisplayProperties
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaItemDisplayProperties.all.ClearAll;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackAudioTrackList

   procedure Initialize (this : in out MediaPlaybackAudioTrackList) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackAudioTrackList) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackAudioTrackList

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.AudioTrack>
   function GetAt
   (
      this : in out MediaPlaybackAudioTrackList;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Media.Core.AudioTrack'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaTrack;
      m_GenericIID     : aliased WinRt.IID := (3877632586, 5287, 20584, (137, 28, 110, 113, 122, 248, 191, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.AudioTrack do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaTrack := new Windows.Media.Core.IMediaTrack;
         Retval.m_IMediaTrack.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out MediaPlaybackAudioTrackList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3877632586, 5287, 20584, (137, 28, 110, 113, 122, 248, 191, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out MediaPlaybackAudioTrackList;
      value : Windows.Media.Core.AudioTrack'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (3877632586, 5287, 20584, (137, 28, 110, 113, 122, 248, 191, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IMediaTrack.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out MediaPlaybackAudioTrackList;
      startIndex : WinRt.UInt32;
      items : Windows.Media.Core.IMediaTrack_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (3877632586, 5287, 20584, (137, 28, 110, 113, 122, 248, 191, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.AudioTrack>
   function First
   (
      this : in out MediaPlaybackAudioTrackList
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3015594152, 38998, 22102, (171, 109, 205, 88, 249, 222, 10, 79 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_SelectedIndexChanged
   (
      this : in out MediaPlaybackAudioTrackList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.add_SelectedIndexChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SelectedIndexChanged
   (
      this : in out MediaPlaybackAudioTrackList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.remove_SelectedIndexChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_SelectedIndex
   (
      this : in out MediaPlaybackAudioTrackList;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.put_SelectedIndex (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SelectedIndex
   (
      this : in out MediaPlaybackAudioTrackList
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_SelectedIndex (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManager

   procedure Initialize (this : in out MediaPlaybackCommandManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManager, IMediaPlaybackCommandManager_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManager /= null then
         if this.m_IMediaPlaybackCommandManager.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManager.all.Release;
            Free (this.m_IMediaPlaybackCommandManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManager

   function get_IsEnabled
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out MediaPlaybackCommandManager;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.put_IsEnabled (value);
   end;

   function get_MediaPlayer
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlayer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlayer;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlayer do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_MediaPlayer (m_ComRetVal'Access);
         Retval.m_IMediaPlayer := new Windows.Media.Playback.IMediaPlayer;
         Retval.m_IMediaPlayer.all := m_ComRetVal;
      end return;
   end;

   function get_PlayBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_PlayBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_PauseBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_PauseBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_NextBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_NextBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_PreviousBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_PreviousBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_FastForwardBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_FastForwardBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_RewindBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_RewindBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_ShuffleBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_ShuffleBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_AutoRepeatModeBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_AutoRepeatModeBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_PositionBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_PositionBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function get_RateBehavior
   (
      this : in out MediaPlaybackCommandManager
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManagerCommandBehavior do
         Hr := this.m_IMediaPlaybackCommandManager.all.get_RateBehavior (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior := new Windows.Media.Playback.IMediaPlaybackCommandManagerCommandBehavior;
         Retval.m_IMediaPlaybackCommandManagerCommandBehavior.all := m_ComRetVal;
      end return;
   end;

   function add_PlayReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_PlayReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlayReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_PlayReceived (token);
   end;

   function add_PauseReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_PauseReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PauseReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_PauseReceived (token);
   end;

   function add_NextReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_NextReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NextReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_NextReceived (token);
   end;

   function add_PreviousReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_PreviousReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PreviousReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_PreviousReceived (token);
   end;

   function add_FastForwardReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_FastForwardReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FastForwardReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_FastForwardReceived (token);
   end;

   function add_RewindReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_RewindReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RewindReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_RewindReceived (token);
   end;

   function add_ShuffleReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_ShuffleReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ShuffleReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_ShuffleReceived (token);
   end;

   function add_AutoRepeatModeReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_AutoRepeatModeReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AutoRepeatModeReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_AutoRepeatModeReceived (token);
   end;

   function add_PositionReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_PositionReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PositionReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_PositionReceived (token);
   end;

   function add_RateReceived
   (
      this : in out MediaPlaybackCommandManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.add_RateReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RateReceived
   (
      this : in out MediaPlaybackCommandManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManager.all.remove_RateReceived (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs, IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.all.put_Handled (value);
   end;

   function get_AutoRepeatMode
   (
      this : in out MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs
   )
   return WinRt.Windows.Media.MediaPlaybackAutoRepeatMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaPlaybackAutoRepeatMode;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.all.get_AutoRepeatMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerCommandBehavior

   procedure Initialize (this : in out MediaPlaybackCommandManagerCommandBehavior) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerCommandBehavior) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerCommandBehavior, IMediaPlaybackCommandManagerCommandBehavior_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerCommandBehavior /= null then
         if this.m_IMediaPlaybackCommandManagerCommandBehavior.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerCommandBehavior.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerCommandBehavior);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerCommandBehavior

   function get_CommandManager
   (
      this : in out MediaPlaybackCommandManagerCommandBehavior
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManager;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManager do
         Hr := this.m_IMediaPlaybackCommandManagerCommandBehavior.all.get_CommandManager (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackCommandManager := new Windows.Media.Playback.IMediaPlaybackCommandManager;
         Retval.m_IMediaPlaybackCommandManager.all := m_ComRetVal;
      end return;
   end;

   function get_IsEnabled
   (
      this : in out MediaPlaybackCommandManagerCommandBehavior
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerCommandBehavior.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EnablingRule
   (
      this : in out MediaPlaybackCommandManagerCommandBehavior
   )
   return WinRt.Windows.Media.Playback.MediaCommandEnablingRule is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaCommandEnablingRule;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerCommandBehavior.all.get_EnablingRule (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EnablingRule
   (
      this : in out MediaPlaybackCommandManagerCommandBehavior;
      value : Windows.Media.Playback.MediaCommandEnablingRule
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerCommandBehavior.all.put_EnablingRule (value);
   end;

   function add_IsEnabledChanged
   (
      this : in out MediaPlaybackCommandManagerCommandBehavior;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerCommandBehavior.all.add_IsEnabledChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_IsEnabledChanged
   (
      this : in out MediaPlaybackCommandManagerCommandBehavior;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerCommandBehavior.all.remove_IsEnabledChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerFastForwardReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerFastForwardReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerFastForwardReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerFastForwardReceivedEventArgs, IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerFastForwardReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerFastForwardReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerFastForwardReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerFastForwardReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerFastForwardReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerFastForwardReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerFastForwardReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerFastForwardReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerFastForwardReceivedEventArgs.all.put_Handled (value);
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerFastForwardReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerFastForwardReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerNextReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerNextReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerNextReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerNextReceivedEventArgs, IMediaPlaybackCommandManagerNextReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerNextReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerNextReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerNextReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerNextReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerNextReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerNextReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerNextReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerNextReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerNextReceivedEventArgs.all.put_Handled (value);
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerNextReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerNextReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerPauseReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerPauseReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerPauseReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerPauseReceivedEventArgs, IMediaPlaybackCommandManagerPauseReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerPauseReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerPauseReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerPauseReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerPauseReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerPauseReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerPauseReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPauseReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerPauseReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPauseReceivedEventArgs.all.put_Handled (value);
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerPauseReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerPauseReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerPlayReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerPlayReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerPlayReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerPlayReceivedEventArgs, IMediaPlaybackCommandManagerPlayReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerPlayReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerPlayReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerPlayReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerPlayReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerPlayReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerPlayReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPlayReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerPlayReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPlayReceivedEventArgs.all.put_Handled (value);
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerPlayReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerPlayReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerPositionReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerPositionReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerPositionReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerPositionReceivedEventArgs, IMediaPlaybackCommandManagerPositionReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerPositionReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerPositionReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerPositionReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs.all.put_Handled (value);
   end;

   function get_Position
   (
      this : in out MediaPlaybackCommandManagerPositionReceivedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerPositionReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerPositionReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerPreviousReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerPreviousReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerPreviousReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerPreviousReceivedEventArgs, IMediaPlaybackCommandManagerPreviousReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerPreviousReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerPreviousReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerPreviousReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerPreviousReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerPreviousReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerPreviousReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPreviousReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerPreviousReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerPreviousReceivedEventArgs.all.put_Handled (value);
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerPreviousReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerPreviousReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerRateReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerRateReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerRateReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerRateReceivedEventArgs, IMediaPlaybackCommandManagerRateReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerRateReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerRateReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerRateReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs.all.put_Handled (value);
   end;

   function get_PlaybackRate
   (
      this : in out MediaPlaybackCommandManagerRateReceivedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs.all.get_PlaybackRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerRateReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerRateReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerRewindReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerRewindReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerRewindReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerRewindReceivedEventArgs, IMediaPlaybackCommandManagerRewindReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerRewindReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerRewindReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerRewindReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerRewindReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerRewindReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerRewindReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerRewindReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerRewindReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerRewindReceivedEventArgs.all.put_Handled (value);
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerRewindReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerRewindReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackCommandManagerShuffleReceivedEventArgs

   procedure Initialize (this : in out MediaPlaybackCommandManagerShuffleReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackCommandManagerShuffleReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackCommandManagerShuffleReceivedEventArgs, IMediaPlaybackCommandManagerShuffleReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs /= null then
         if this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackCommandManagerShuffleReceivedEventArgs

   function get_Handled
   (
      this : in out MediaPlaybackCommandManagerShuffleReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out MediaPlaybackCommandManagerShuffleReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs.all.put_Handled (value);
   end;

   function get_IsShuffleRequested
   (
      this : in out MediaPlaybackCommandManagerShuffleReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs.all.get_IsShuffleRequested (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out MediaPlaybackCommandManagerShuffleReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMediaPlaybackCommandManagerShuffleReceivedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackItem

   procedure Initialize (this : in out MediaPlaybackItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackItem, IMediaPlaybackItem_Ptr);
   begin
      if this.m_IMediaPlaybackItem /= null then
         if this.m_IMediaPlaybackItem.all /= null then
            RefCount := this.m_IMediaPlaybackItem.all.Release;
            Free (this.m_IMediaPlaybackItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaPlaybackItem

   function Constructor
   (
      source : Windows.Media.Core.MediaSource'Class;
      startTime : Windows.Foundation.TimeSpan
   )
   return MediaPlaybackItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.MediaPlaybackItem");
      m_Factory    : access IMediaPlaybackItemFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : MediaPlaybackItem do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaPlaybackItemFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithStartTime (source.m_IMediaSource2.all, startTime, m_ComRetVal'Access);
            Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
            Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      source : Windows.Media.Core.MediaSource'Class;
      startTime : Windows.Foundation.TimeSpan;
      durationLimit : Windows.Foundation.TimeSpan
   )
   return MediaPlaybackItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.MediaPlaybackItem");
      m_Factory    : access IMediaPlaybackItemFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : MediaPlaybackItem do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaPlaybackItemFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithStartTimeAndDurationLimit (source.m_IMediaSource2.all, startTime, durationLimit, m_ComRetVal'Access);
            Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
            Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      source : Windows.Media.Core.MediaSource'Class
   )
   return MediaPlaybackItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.MediaPlaybackItem");
      m_Factory    : access IMediaPlaybackItemFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : MediaPlaybackItem do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaPlaybackItemFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (source.m_IMediaSource2.all, m_ComRetVal'Access);
            Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
            Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaPlaybackItem

   function FindFromMediaSource
   (
      source : Windows.Media.Core.MediaSource'Class
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Playback.MediaPlaybackItem");
      m_Factory        : access WinRt.Windows.Media.Playback.IMediaPlaybackItemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaPlaybackItemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindFromMediaSource (source.m_IMediaSource2.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
            Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackItem

   function add_AudioTracksChanged
   (
      this : in out MediaPlaybackItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackItem.all.add_AudioTracksChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AudioTracksChanged
   (
      this : in out MediaPlaybackItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackItem.all.remove_AudioTracksChanged (token);
   end;

   function add_VideoTracksChanged
   (
      this : in out MediaPlaybackItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackItem.all.add_VideoTracksChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoTracksChanged
   (
      this : in out MediaPlaybackItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackItem.all.remove_VideoTracksChanged (token);
   end;

   function add_TimedMetadataTracksChanged
   (
      this : in out MediaPlaybackItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackItem.all.add_TimedMetadataTracksChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TimedMetadataTracksChanged
   (
      this : in out MediaPlaybackItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackItem.all.remove_TimedMetadataTracksChanged (token);
   end;

   function get_Source
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Media.Core.MediaSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := this.m_IMediaPlaybackItem.all.get_Source (m_ComRetVal'Access);
         Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
         Retval.m_IMediaSource2.all := m_ComRetVal;
      end return;
   end;

   function get_AudioTracks
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackAudioTrackList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackAudioTrackList do
         Hr := this.m_IMediaPlaybackItem.all.get_AudioTracks (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_VideoTracks
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackVideoTrackList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackVideoTrackList do
         Hr := this.m_IMediaPlaybackItem.all.get_VideoTracks (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_TimedMetadataTracks
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackTimedMetadataTrackList do
         Hr := this.m_IMediaPlaybackItem.all.get_TimedMetadataTracks (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_BreakSchedule
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Media.Playback.MediaBreakSchedule'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreakSchedule;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreakSchedule do
         m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
         Hr := m_Interface.get_BreakSchedule (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaBreakSchedule := new Windows.Media.Playback.IMediaBreakSchedule;
         Retval.m_IMediaBreakSchedule.all := m_ComRetVal;
      end return;
   end;

   function get_StartTime
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.get_StartTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DurationLimit
   (
      this : in out MediaPlaybackItem
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.get_DurationLimit (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CanSkip
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.get_CanSkip (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CanSkip
   (
      this : in out MediaPlaybackItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.put_CanSkip (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetDisplayProperties
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Media.Playback.MediaItemDisplayProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaItemDisplayProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaItemDisplayProperties do
         m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
         Hr := m_Interface.GetDisplayProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaItemDisplayProperties := new Windows.Media.Playback.IMediaItemDisplayProperties;
         Retval.m_IMediaItemDisplayProperties.all := m_ComRetVal;
      end return;
   end;

   procedure ApplyDisplayProperties
   (
      this : in out MediaPlaybackItem;
      value : Windows.Media.Playback.MediaItemDisplayProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.ApplyDisplayProperties (value.m_IMediaItemDisplayProperties.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsDisabledInPlaybackList
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.get_IsDisabledInPlaybackList (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsDisabledInPlaybackList
   (
      this : in out MediaPlaybackItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.put_IsDisabledInPlaybackList (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TotalDownloadProgress
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.get_TotalDownloadProgress (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AutoLoadedDisplayProperties
   (
      this : in out MediaPlaybackItem
   )
   return WinRt.Windows.Media.Playback.AutoLoadedDisplayPropertyKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.AutoLoadedDisplayPropertyKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.get_AutoLoadedDisplayProperties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutoLoadedDisplayProperties
   (
      this : in out MediaPlaybackItem;
      value : Windows.Media.Playback.AutoLoadedDisplayPropertyKind
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackItem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackItem_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackItem3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackItem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackItem.all);
      Hr := m_Interface.put_AutoLoadedDisplayProperties (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackItemError

   procedure Initialize (this : in out MediaPlaybackItemError) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackItemError) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackItemError, IMediaPlaybackItemError_Ptr);
   begin
      if this.m_IMediaPlaybackItemError /= null then
         if this.m_IMediaPlaybackItemError.all /= null then
            RefCount := this.m_IMediaPlaybackItemError.all.Release;
            Free (this.m_IMediaPlaybackItemError);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackItemError

   function get_ErrorCode
   (
      this : in out MediaPlaybackItemError
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItemErrorCode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlaybackItemErrorCode;
   begin
      Hr := this.m_IMediaPlaybackItemError.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out MediaPlaybackItemError
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IMediaPlaybackItemError.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackItemFailedEventArgs

   procedure Initialize (this : in out MediaPlaybackItemFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackItemFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackItemFailedEventArgs, IMediaPlaybackItemFailedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackItemFailedEventArgs /= null then
         if this.m_IMediaPlaybackItemFailedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackItemFailedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackItemFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackItemFailedEventArgs

   function get_Item
   (
      this : in out MediaPlaybackItemFailedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_IMediaPlaybackItemFailedEventArgs.all.get_Item (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_Error
   (
      this : in out MediaPlaybackItemFailedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItemError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItemError;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItemError do
         Hr := this.m_IMediaPlaybackItemFailedEventArgs.all.get_Error (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItemError := new Windows.Media.Playback.IMediaPlaybackItemError;
         Retval.m_IMediaPlaybackItemError.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackItemOpenedEventArgs

   procedure Initialize (this : in out MediaPlaybackItemOpenedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackItemOpenedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackItemOpenedEventArgs, IMediaPlaybackItemOpenedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackItemOpenedEventArgs /= null then
         if this.m_IMediaPlaybackItemOpenedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackItemOpenedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackItemOpenedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackItemOpenedEventArgs

   function get_Item
   (
      this : in out MediaPlaybackItemOpenedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_IMediaPlaybackItemOpenedEventArgs.all.get_Item (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackList

   procedure Initialize (this : in out MediaPlaybackList) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackList) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackList, IMediaPlaybackList_Ptr);
   begin
      if this.m_IMediaPlaybackList /= null then
         if this.m_IMediaPlaybackList.all /= null then
            RefCount := this.m_IMediaPlaybackList.all.Release;
            Free (this.m_IMediaPlaybackList);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaPlaybackList

   function Constructor return MediaPlaybackList is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.MediaPlaybackList");
      m_ComRetVal  : aliased Windows.Media.Playback.IMediaPlaybackList;
   begin
      return RetVal : MediaPlaybackList do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaPlaybackList := new Windows.Media.Playback.IMediaPlaybackList;
            Retval.m_IMediaPlaybackList.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackList

   function add_ItemFailed
   (
      this : in out MediaPlaybackList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackList.all.add_ItemFailed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ItemFailed
   (
      this : in out MediaPlaybackList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackList.all.remove_ItemFailed (token);
   end;

   function add_CurrentItemChanged
   (
      this : in out MediaPlaybackList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackList.all.add_CurrentItemChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CurrentItemChanged
   (
      this : in out MediaPlaybackList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackList.all.remove_CurrentItemChanged (token);
   end;

   function add_ItemOpened
   (
      this : in out MediaPlaybackList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackList.all.add_ItemOpened (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ItemOpened
   (
      this : in out MediaPlaybackList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackList.all.remove_ItemOpened (token);
   end;

   function get_Items
   (
      this : in out MediaPlaybackList
   )
   return IObservableVector_IMediaPlaybackItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IObservableVector_IMediaPlaybackItem.Kind;
   begin
      Hr := this.m_IMediaPlaybackList.all.get_Items (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IObservableVector_IMediaPlaybackItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AutoRepeatEnabled
   (
      this : in out MediaPlaybackList
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackList.all.get_AutoRepeatEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoRepeatEnabled
   (
      this : in out MediaPlaybackList;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackList.all.put_AutoRepeatEnabled (value);
   end;

   function get_ShuffleEnabled
   (
      this : in out MediaPlaybackList
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackList.all.get_ShuffleEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShuffleEnabled
   (
      this : in out MediaPlaybackList;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackList.all.put_ShuffleEnabled (value);
   end;

   function get_CurrentItem
   (
      this : in out MediaPlaybackList
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_IMediaPlaybackList.all.get_CurrentItem (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentItemIndex
   (
      this : in out MediaPlaybackList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaPlaybackList.all.get_CurrentItemIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function MoveNext
   (
      this : in out MediaPlaybackList
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_IMediaPlaybackList.all.MoveNext (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function MovePrevious
   (
      this : in out MediaPlaybackList
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_IMediaPlaybackList.all.MovePrevious (m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function MoveTo
   (
      this : in out MediaPlaybackList;
      itemIndex : WinRt.UInt32
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         Hr := this.m_IMediaPlaybackList.all.MoveTo (itemIndex, m_ComRetVal'Access);
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   function get_MaxPrefetchTime
   (
      this : in out MediaPlaybackList
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackList.all);
      Hr := m_Interface.get_MaxPrefetchTime (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxPrefetchTime
   (
      this : in out MediaPlaybackList;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackList.all);
      Hr := m_Interface.put_MaxPrefetchTime (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StartingItem
   (
      this : in out MediaPlaybackList
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackItem;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackItem do
         m_Interface := QInterface (this.m_IMediaPlaybackList.all);
         Hr := m_Interface.get_StartingItem (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackItem := new Windows.Media.Playback.IMediaPlaybackItem;
         Retval.m_IMediaPlaybackItem.all := m_ComRetVal;
      end return;
   end;

   procedure put_StartingItem
   (
      this : in out MediaPlaybackList;
      value : Windows.Media.Playback.MediaPlaybackItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackList.all);
      Hr := m_Interface.put_StartingItem (value.m_IMediaPlaybackItem.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ShuffledItems
   (
      this : in out MediaPlaybackList
   )
   return IVectorView_IMediaPlaybackItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaPlaybackItem.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackList.all);
      Hr := m_Interface.get_ShuffledItems (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IMediaPlaybackItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure SetShuffledItems
   (
      this : in out MediaPlaybackList;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackList.all);
      Hr := m_Interface.SetShuffledItems (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MaxPlayedItemsToKeepOpen
   (
      this : in out MediaPlaybackList
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackList.all);
      Hr := m_Interface.get_MaxPlayedItemsToKeepOpen (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_MaxPlayedItemsToKeepOpen
   (
      this : in out MediaPlaybackList;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackList3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackList_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackList3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackList3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackList.all);
      Hr := m_Interface.put_MaxPlayedItemsToKeepOpen (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackSession

   procedure Initialize (this : in out MediaPlaybackSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackSession, IMediaPlaybackSession_Ptr);
   begin
      if this.m_IMediaPlaybackSession /= null then
         if this.m_IMediaPlaybackSession.all /= null then
            RefCount := this.m_IMediaPlaybackSession.all.Release;
            Free (this.m_IMediaPlaybackSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackSession

   function add_PlaybackStateChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_PlaybackStateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlaybackStateChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_PlaybackStateChanged (token);
   end;

   function add_PlaybackRateChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_PlaybackRateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlaybackRateChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_PlaybackRateChanged (token);
   end;

   function add_SeekCompleted
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_SeekCompleted (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SeekCompleted
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_SeekCompleted (token);
   end;

   function add_BufferingStarted
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_BufferingStarted (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BufferingStarted
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_BufferingStarted (token);
   end;

   function add_BufferingEnded
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_BufferingEnded (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BufferingEnded
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_BufferingEnded (token);
   end;

   function add_BufferingProgressChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_BufferingProgressChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BufferingProgressChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_BufferingProgressChanged (token);
   end;

   function add_DownloadProgressChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_DownloadProgressChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadProgressChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_DownloadProgressChanged (token);
   end;

   function add_NaturalDurationChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_NaturalDurationChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NaturalDurationChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_NaturalDurationChanged (token);
   end;

   function add_PositionChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_PositionChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PositionChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_PositionChanged (token);
   end;

   function add_NaturalVideoSizeChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlaybackSession.all.add_NaturalVideoSizeChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_NaturalVideoSizeChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.remove_NaturalVideoSizeChanged (token);
   end;

   function get_MediaPlayer
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Media.Playback.MediaPlayer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlayer;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlayer do
         Hr := this.m_IMediaPlaybackSession.all.get_MediaPlayer (m_ComRetVal'Access);
         Retval.m_IMediaPlayer := new Windows.Media.Playback.IMediaPlayer;
         Retval.m_IMediaPlayer.all := m_ComRetVal;
      end return;
   end;

   function get_NaturalDuration
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_NaturalDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out MediaPlaybackSession;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.put_Position (value);
   end;

   function get_PlaybackState
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlaybackState;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_PlaybackState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanSeek
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_CanSeek (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanPause
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_CanPause (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsProtected
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_IsProtected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PlaybackRate
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_PlaybackRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PlaybackRate
   (
      this : in out MediaPlaybackSession;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.put_PlaybackRate (value);
   end;

   function get_BufferingProgress
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_BufferingProgress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DownloadProgress
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_DownloadProgress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NaturalVideoHeight
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_NaturalVideoHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NaturalVideoWidth
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_NaturalVideoWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NormalizedSourceRect
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_NormalizedSourceRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_NormalizedSourceRect
   (
      this : in out MediaPlaybackSession;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.put_NormalizedSourceRect (value);
   end;

   function get_StereoscopicVideoPackingMode
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Media.MediaProperties.StereoscopicVideoPackingMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.StereoscopicVideoPackingMode;
   begin
      Hr := this.m_IMediaPlaybackSession.all.get_StereoscopicVideoPackingMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StereoscopicVideoPackingMode
   (
      this : in out MediaPlaybackSession;
      value : Windows.Media.MediaProperties.StereoscopicVideoPackingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSession.all.put_StereoscopicVideoPackingMode (value);
   end;

   function add_BufferedRangesChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.add_BufferedRangesChanged (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_BufferedRangesChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.remove_BufferedRangesChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_PlayedRangesChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.add_PlayedRangesChanged (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PlayedRangesChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.remove_PlayedRangesChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_SeekableRangesChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.add_SeekableRangesChanged (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SeekableRangesChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.remove_SeekableRangesChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_SupportedPlaybackRatesChanged
   (
      this : in out MediaPlaybackSession;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.add_SupportedPlaybackRatesChanged (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SupportedPlaybackRatesChanged
   (
      this : in out MediaPlaybackSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.remove_SupportedPlaybackRatesChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_SphericalVideoProjection
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackSphericalVideoProjection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackSphericalVideoProjection;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackSphericalVideoProjection do
         m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
         Hr := m_Interface.get_SphericalVideoProjection (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackSphericalVideoProjection := new Windows.Media.Playback.IMediaPlaybackSphericalVideoProjection;
         Retval.m_IMediaPlaybackSphericalVideoProjection.all := m_ComRetVal;
      end return;
   end;

   function get_IsMirroring
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.get_IsMirroring (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsMirroring
   (
      this : in out MediaPlaybackSession;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.put_IsMirroring (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetBufferedRanges
   (
      this : in out MediaPlaybackSession
   )
   return IVectorView_MediaTimeRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_MediaTimeRange.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.GetBufferedRanges (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_MediaTimeRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetPlayedRanges
   (
      this : in out MediaPlaybackSession
   )
   return IVectorView_MediaTimeRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_MediaTimeRange.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.GetPlayedRanges (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_MediaTimeRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetSeekableRanges
   (
      this : in out MediaPlaybackSession
   )
   return IVectorView_MediaTimeRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_MediaTimeRange.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.GetSeekableRanges (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_MediaTimeRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function IsSupportedPlaybackRateRange
   (
      this : in out MediaPlaybackSession;
      rate1 : WinRt.Double;
      rate2 : WinRt.Double
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession2, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.IsSupportedPlaybackRateRange (rate1, rate2, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_PlaybackRotation
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Media.MediaProperties.MediaRotation is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.MediaRotation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.get_PlaybackRotation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PlaybackRotation
   (
      this : in out MediaPlaybackSession;
      value : Windows.Media.MediaProperties.MediaRotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
      Hr := m_Interface.put_PlaybackRotation (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetOutputDegradationPolicyState
   (
      this : in out MediaPlaybackSession
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackSessionOutputDegradationPolicyState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackSession3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackSessionOutputDegradationPolicyState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlaybackSession_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackSession3, WinRt.Windows.Media.Playback.IID_IMediaPlaybackSession3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackSessionOutputDegradationPolicyState do
         m_Interface := QInterface (this.m_IMediaPlaybackSession.all);
         Hr := m_Interface.GetOutputDegradationPolicyState (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackSessionOutputDegradationPolicyState := new Windows.Media.Playback.IMediaPlaybackSessionOutputDegradationPolicyState;
         Retval.m_IMediaPlaybackSessionOutputDegradationPolicyState.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackSessionBufferingStartedEventArgs

   procedure Initialize (this : in out MediaPlaybackSessionBufferingStartedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackSessionBufferingStartedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackSessionBufferingStartedEventArgs, IMediaPlaybackSessionBufferingStartedEventArgs_Ptr);
   begin
      if this.m_IMediaPlaybackSessionBufferingStartedEventArgs /= null then
         if this.m_IMediaPlaybackSessionBufferingStartedEventArgs.all /= null then
            RefCount := this.m_IMediaPlaybackSessionBufferingStartedEventArgs.all.Release;
            Free (this.m_IMediaPlaybackSessionBufferingStartedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackSessionBufferingStartedEventArgs

   function get_IsPlaybackInterruption
   (
      this : in out MediaPlaybackSessionBufferingStartedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackSessionBufferingStartedEventArgs.all.get_IsPlaybackInterruption (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackSessionOutputDegradationPolicyState

   procedure Initialize (this : in out MediaPlaybackSessionOutputDegradationPolicyState) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackSessionOutputDegradationPolicyState) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackSessionOutputDegradationPolicyState, IMediaPlaybackSessionOutputDegradationPolicyState_Ptr);
   begin
      if this.m_IMediaPlaybackSessionOutputDegradationPolicyState /= null then
         if this.m_IMediaPlaybackSessionOutputDegradationPolicyState.all /= null then
            RefCount := this.m_IMediaPlaybackSessionOutputDegradationPolicyState.all.Release;
            Free (this.m_IMediaPlaybackSessionOutputDegradationPolicyState);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackSessionOutputDegradationPolicyState

   function get_VideoConstrictionReason
   (
      this : in out MediaPlaybackSessionOutputDegradationPolicyState
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackSessionVideoConstrictionReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlaybackSessionVideoConstrictionReason;
   begin
      Hr := this.m_IMediaPlaybackSessionOutputDegradationPolicyState.all.get_VideoConstrictionReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackSphericalVideoProjection

   procedure Initialize (this : in out MediaPlaybackSphericalVideoProjection) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackSphericalVideoProjection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlaybackSphericalVideoProjection, IMediaPlaybackSphericalVideoProjection_Ptr);
   begin
      if this.m_IMediaPlaybackSphericalVideoProjection /= null then
         if this.m_IMediaPlaybackSphericalVideoProjection.all /= null then
            RefCount := this.m_IMediaPlaybackSphericalVideoProjection.all.Release;
            Free (this.m_IMediaPlaybackSphericalVideoProjection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackSphericalVideoProjection

   function get_IsEnabled
   (
      this : in out MediaPlaybackSphericalVideoProjection
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out MediaPlaybackSphericalVideoProjection;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.put_IsEnabled (value);
   end;

   function get_FrameFormat
   (
      this : in out MediaPlaybackSphericalVideoProjection
   )
   return WinRt.Windows.Media.MediaProperties.SphericalVideoFrameFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.SphericalVideoFrameFormat;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.get_FrameFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FrameFormat
   (
      this : in out MediaPlaybackSphericalVideoProjection;
      value : Windows.Media.MediaProperties.SphericalVideoFrameFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.put_FrameFormat (value);
   end;

   function get_HorizontalFieldOfViewInDegrees
   (
      this : in out MediaPlaybackSphericalVideoProjection
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.get_HorizontalFieldOfViewInDegrees (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HorizontalFieldOfViewInDegrees
   (
      this : in out MediaPlaybackSphericalVideoProjection;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.put_HorizontalFieldOfViewInDegrees (value);
   end;

   function get_ViewOrientation
   (
      this : in out MediaPlaybackSphericalVideoProjection
   )
   return WinRt.Windows.Foundation.Numerics.Quaternion is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Quaternion;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.get_ViewOrientation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ViewOrientation
   (
      this : in out MediaPlaybackSphericalVideoProjection;
      value : Windows.Foundation.Numerics.Quaternion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.put_ViewOrientation (value);
   end;

   function get_ProjectionMode
   (
      this : in out MediaPlaybackSphericalVideoProjection
   )
   return WinRt.Windows.Media.Playback.SphericalVideoProjectionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.SphericalVideoProjectionMode;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.get_ProjectionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProjectionMode
   (
      this : in out MediaPlaybackSphericalVideoProjection;
      value : Windows.Media.Playback.SphericalVideoProjectionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlaybackSphericalVideoProjection.all.put_ProjectionMode (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackTimedMetadataTrackList

   procedure Initialize (this : in out MediaPlaybackTimedMetadataTrackList) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackTimedMetadataTrackList) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackTimedMetadataTrackList

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.TimedMetadataTrack>
   function GetAt
   (
      this : in out MediaPlaybackTimedMetadataTrackList;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Media.Core.TimedMetadataTrack'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ITimedMetadataTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedMetadataTrack;
      m_GenericIID     : aliased WinRt.IID := (51621498, 10243, 23877, (181, 161, 160, 252, 92, 213, 94, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_ITimedMetadataTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedMetadataTrack do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITimedMetadataTrack := new Windows.Media.Core.ITimedMetadataTrack;
         Retval.m_ITimedMetadataTrack.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out MediaPlaybackTimedMetadataTrackList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ITimedMetadataTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (51621498, 10243, 23877, (181, 161, 160, 252, 92, 213, 94, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_ITimedMetadataTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out MediaPlaybackTimedMetadataTrackList;
      value : Windows.Media.Core.TimedMetadataTrack'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ITimedMetadataTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (51621498, 10243, 23877, (181, 161, 160, 252, 92, 213, 94, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_ITimedMetadataTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_ITimedMetadataTrack.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out MediaPlaybackTimedMetadataTrackList;
      startIndex : WinRt.UInt32;
      items : Windows.Media.Core.ITimedMetadataTrack_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_ITimedMetadataTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (51621498, 10243, 23877, (181, 161, 160, 252, 92, 213, 94, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_ITimedMetadataTrack.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.TimedMetadataTrack>
   function First
   (
      this : in out MediaPlaybackTimedMetadataTrackList
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_ITimedMetadataTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (352994388, 955, 24017, (129, 83, 106, 96, 14, 133, 31, 113 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_ITimedMetadataTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_PresentationModeChanged
   (
      this : in out MediaPlaybackTimedMetadataTrackList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList, WinRt.Windows.Media.Playback.IID_IMediaPlaybackTimedMetadataTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.add_PresentationModeChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PresentationModeChanged
   (
      this : in out MediaPlaybackTimedMetadataTrackList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList, WinRt.Windows.Media.Playback.IID_IMediaPlaybackTimedMetadataTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.remove_PresentationModeChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function GetPresentationMode
   (
      this : in out MediaPlaybackTimedMetadataTrackList;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Media.Playback.TimedMetadataTrackPresentationMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.TimedMetadataTrackPresentationMode;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList, WinRt.Windows.Media.Playback.IID_IMediaPlaybackTimedMetadataTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetPresentationMode (index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetPresentationMode
   (
      this : in out MediaPlaybackTimedMetadataTrackList;
      index : WinRt.UInt32;
      value : Windows.Media.Playback.TimedMetadataTrackPresentationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Playback.IMediaPlaybackTimedMetadataTrackList, WinRt.Windows.Media.Playback.IID_IMediaPlaybackTimedMetadataTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.SetPresentationMode (index, value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlaybackVideoTrackList

   procedure Initialize (this : in out MediaPlaybackVideoTrackList) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlaybackVideoTrackList) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlaybackVideoTrackList

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.VideoTrack>
   function GetAt
   (
      this : in out MediaPlaybackVideoTrackList;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Media.Core.VideoTrack'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaTrack;
      m_GenericIID     : aliased WinRt.IID := (537682468, 2883, 21755, (153, 95, 253, 134, 136, 191, 36, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Core.VideoTrack do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaTrack := new Windows.Media.Core.IMediaTrack;
         Retval.m_IMediaTrack.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out MediaPlaybackVideoTrackList
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (537682468, 2883, 21755, (153, 95, 253, 134, 136, 191, 36, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out MediaPlaybackVideoTrackList;
      value : Windows.Media.Core.VideoTrack'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (537682468, 2883, 21755, (153, 95, 253, 134, 136, 191, 36, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IMediaTrack.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out MediaPlaybackVideoTrackList;
      startIndex : WinRt.UInt32;
      items : Windows.Media.Core.IMediaTrack_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (537682468, 2883, 21755, (153, 95, 253, 134, 136, 191, 36, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.VideoTrack>
   function First
   (
      this : in out MediaPlaybackVideoTrackList
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IMediaTrack.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (2218865730, 41699, 24079, (147, 109, 188, 64, 176, 251, 45, 205 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IMediaTrack.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_SelectedIndexChanged
   (
      this : in out MediaPlaybackVideoTrackList;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.add_SelectedIndexChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SelectedIndexChanged
   (
      this : in out MediaPlaybackVideoTrackList;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.remove_SelectedIndexChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_SelectedIndex
   (
      this : in out MediaPlaybackVideoTrackList;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.put_SelectedIndex (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SelectedIndex
   (
      this : in out MediaPlaybackVideoTrackList
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Core.ISingleSelectMediaTrackList := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Media.Core.ISingleSelectMediaTrackList, WinRt.Windows.Media.Core.IID_ISingleSelectMediaTrackList'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_SelectedIndex (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlayer

   procedure Initialize (this : in out MediaPlayer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlayer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlayer, IMediaPlayer_Ptr);
   begin
      if this.m_IMediaPlayer /= null then
         if this.m_IMediaPlayer.all /= null then
            RefCount := this.m_IMediaPlayer.all.Release;
            Free (this.m_IMediaPlayer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaPlayer

   function Constructor return MediaPlayer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.MediaPlayer");
      m_ComRetVal  : aliased Windows.Media.Playback.IMediaPlayer;
   begin
      return RetVal : MediaPlayer do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaPlayer := new Windows.Media.Playback.IMediaPlayer;
            Retval.m_IMediaPlayer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlayer

   function get_AutoPlay
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlayer.all.get_AutoPlay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoPlay
   (
      this : in out MediaPlayer;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.put_AutoPlay (value);
   end;

   function get_NaturalDuration
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaPlayer.all.get_NaturalDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaPlayer.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out MediaPlayer;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.put_Position (value);
   end;

   function get_BufferingProgress
   (
      this : in out MediaPlayer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlayer.all.get_BufferingProgress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurrentState
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.MediaPlayerState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlayerState;
   begin
      Hr := this.m_IMediaPlayer.all.get_CurrentState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanSeek
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlayer.all.get_CanSeek (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanPause
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlayer.all.get_CanPause (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsLoopingEnabled
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlayer.all.get_IsLoopingEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsLoopingEnabled
   (
      this : in out MediaPlayer;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.put_IsLoopingEnabled (value);
   end;

   function get_IsProtected
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlayer.all.get_IsProtected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsMuted
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaPlayer.all.get_IsMuted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsMuted
   (
      this : in out MediaPlayer;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.put_IsMuted (value);
   end;

   function get_PlaybackRate
   (
      this : in out MediaPlayer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlayer.all.get_PlaybackRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PlaybackRate
   (
      this : in out MediaPlayer;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.put_PlaybackRate (value);
   end;

   function get_Volume
   (
      this : in out MediaPlayer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlayer.all.get_Volume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Volume
   (
      this : in out MediaPlayer;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.put_Volume (value);
   end;

   function get_PlaybackMediaMarkers
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.PlaybackMediaMarkerSequence'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IPlaybackMediaMarkerSequence;
   begin
      return RetVal : WinRt.Windows.Media.Playback.PlaybackMediaMarkerSequence do
         Hr := this.m_IMediaPlayer.all.get_PlaybackMediaMarkers (m_ComRetVal'Access);
         Retval.m_IPlaybackMediaMarkerSequence := new Windows.Media.Playback.IPlaybackMediaMarkerSequence;
         Retval.m_IPlaybackMediaMarkerSequence.all := m_ComRetVal;
      end return;
   end;

   function add_MediaOpened
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_MediaOpened (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MediaOpened
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_MediaOpened (token);
   end;

   function add_MediaEnded
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_MediaEnded (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MediaEnded
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_MediaEnded (token);
   end;

   function add_MediaFailed
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_MediaFailed (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MediaFailed
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_MediaFailed (token);
   end;

   function add_CurrentStateChanged
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_CurrentStateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CurrentStateChanged
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_CurrentStateChanged (token);
   end;

   function add_PlaybackMediaMarkerReached
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_PlaybackMediaMarkerReached (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlaybackMediaMarkerReached
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_PlaybackMediaMarkerReached (token);
   end;

   function add_MediaPlayerRateChanged
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_MediaPlayerRateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MediaPlayerRateChanged
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_MediaPlayerRateChanged (token);
   end;

   function add_VolumeChanged
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_VolumeChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VolumeChanged
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_VolumeChanged (token);
   end;

   function add_SeekCompleted
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_SeekCompleted (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SeekCompleted
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_SeekCompleted (token);
   end;

   function add_BufferingStarted
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_BufferingStarted (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BufferingStarted
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_BufferingStarted (token);
   end;

   function add_BufferingEnded
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaPlayer.all.add_BufferingEnded (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BufferingEnded
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.remove_BufferingEnded (token);
   end;

   procedure Play
   (
      this : in out MediaPlayer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.Play;
   end;

   procedure Pause
   (
      this : in out MediaPlayer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.Pause;
   end;

   procedure SetUriSource
   (
      this : in out MediaPlayer;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaPlayer.all.SetUriSource (value.m_IUriRuntimeClass.all);
   end;

   function get_ProtectionManager
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Protection.MediaProtectionManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerSource := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Protection.IMediaProtectionManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerSource, WinRt.Windows.Media.Playback.IID_IMediaPlayerSource'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Protection.MediaProtectionManager do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_ProtectionManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaProtectionManager := new Windows.Media.Protection.IMediaProtectionManager;
         Retval.m_IMediaProtectionManager.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProtectionManager
   (
      this : in out MediaPlayer;
      value : Windows.Media.Protection.MediaProtectionManager'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerSource := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerSource, WinRt.Windows.Media.Playback.IID_IMediaPlayerSource'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_ProtectionManager (value.m_IMediaProtectionManager.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetFileSource
   (
      this : in out MediaPlayer;
      file : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerSource := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerSource, WinRt.Windows.Media.Playback.IID_IMediaPlayerSource'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.SetFileSource (file);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetStreamSource
   (
      this : in out MediaPlayer;
      stream : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerSource := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerSource, WinRt.Windows.Media.Playback.IID_IMediaPlayerSource'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.SetStreamSource (stream);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetMediaSource
   (
      this : in out MediaPlayer;
      source : Windows.Media.Core.IMediaSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerSource := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerSource, WinRt.Windows.Media.Playback.IID_IMediaPlayerSource'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.SetMediaSource (source);
      m_RefCount := m_Interface.Release;
   end;

   function get_Source
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.IMediaPlaybackSource is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerSource2, WinRt.Windows.Media.Playback.IID_IMediaPlayerSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_Source (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Source
   (
      this : in out MediaPlayer;
      value : Windows.Media.Playback.IMediaPlaybackSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerSource2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerSource2, WinRt.Windows.Media.Playback.IID_IMediaPlayerSource2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_Source (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SystemMediaTransportControls
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.SystemMediaTransportControls'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.ISystemMediaTransportControls;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer2, WinRt.Windows.Media.Playback.IID_IMediaPlayer2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.SystemMediaTransportControls do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_SystemMediaTransportControls (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISystemMediaTransportControls := new Windows.Media.ISystemMediaTransportControls;
         Retval.m_ISystemMediaTransportControls.all := m_ComRetVal;
      end return;
   end;

   function get_AudioCategory
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.MediaPlayerAudioCategory is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlayerAudioCategory;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer2, WinRt.Windows.Media.Playback.IID_IMediaPlayer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_AudioCategory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AudioCategory
   (
      this : in out MediaPlayer;
      value : Windows.Media.Playback.MediaPlayerAudioCategory
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer2, WinRt.Windows.Media.Playback.IID_IMediaPlayer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_AudioCategory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AudioDeviceType
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.MediaPlayerAudioDeviceType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlayerAudioDeviceType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer2, WinRt.Windows.Media.Playback.IID_IMediaPlayer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_AudioDeviceType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AudioDeviceType
   (
      this : in out MediaPlayer;
      value : Windows.Media.Playback.MediaPlayerAudioDeviceType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer2, WinRt.Windows.Media.Playback.IID_IMediaPlayer2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_AudioDeviceType (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure AddAudioEffect
   (
      this : in out MediaPlayer;
      activatableClassId : WinRt.WString;
      effectOptional : WinRt.Boolean;
      configuration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerEffects := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerEffects, WinRt.Windows.Media.Playback.IID_IMediaPlayerEffects'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.AddAudioEffect (HStr_activatableClassId, effectOptional, configuration);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   procedure RemoveAllEffects
   (
      this : in out MediaPlayer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerEffects := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerEffects, WinRt.Windows.Media.Playback.IID_IMediaPlayerEffects'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.RemoveAllEffects;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out MediaPlayer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function add_IsMutedChanged
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.add_IsMutedChanged (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_IsMutedChanged
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.remove_IsMutedChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_SourceChanged
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.add_SourceChanged (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SourceChanged
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.remove_SourceChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_AudioBalance
   (
      this : in out MediaPlayer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_AudioBalance (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AudioBalance
   (
      this : in out MediaPlayer;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_AudioBalance (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_RealTimePlayback
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_RealTimePlayback (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_RealTimePlayback
   (
      this : in out MediaPlayer;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_RealTimePlayback (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StereoscopicVideoRenderMode
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.StereoscopicVideoRenderMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.StereoscopicVideoRenderMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_StereoscopicVideoRenderMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StereoscopicVideoRenderMode
   (
      this : in out MediaPlayer;
      value : Windows.Media.Playback.StereoscopicVideoRenderMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_StereoscopicVideoRenderMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_BreakManager
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.MediaBreakManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaBreakManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaBreakManager do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_BreakManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaBreakManager := new Windows.Media.Playback.IMediaBreakManager;
         Retval.m_IMediaBreakManager.all := m_ComRetVal;
      end return;
   end;

   function get_CommandManager
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackCommandManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackCommandManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackCommandManager do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_CommandManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackCommandManager := new Windows.Media.Playback.IMediaPlaybackCommandManager;
         Retval.m_IMediaPlaybackCommandManager.all := m_ComRetVal;
      end return;
   end;

   function get_AudioDevice
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_AudioDevice (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   procedure put_AudioDevice
   (
      this : in out MediaPlayer;
      value : Windows.Devices.Enumeration.DeviceInformation'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_AudioDevice (value.m_IDeviceInformation.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_TimelineController
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.MediaTimelineController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IMediaTimelineController;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaTimelineController do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_TimelineController (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaTimelineController := new Windows.Media.IMediaTimelineController;
         Retval.m_IMediaTimelineController.all := m_ComRetVal;
      end return;
   end;

   procedure put_TimelineController
   (
      this : in out MediaPlayer;
      value : Windows.Media.MediaTimelineController'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_TimelineController (value.m_IMediaTimelineController.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_TimelineControllerPositionOffset
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_TimelineControllerPositionOffset (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_TimelineControllerPositionOffset
   (
      this : in out MediaPlayer;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_TimelineControllerPositionOffset (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PlaybackSession
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Playback.MediaPlaybackSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlaybackSession;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlaybackSession do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_PlaybackSession (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlaybackSession := new Windows.Media.Playback.IMediaPlaybackSession;
         Retval.m_IMediaPlaybackSession.all := m_ComRetVal;
      end return;
   end;

   procedure StepForwardOneFrame
   (
      this : in out MediaPlayer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.StepForwardOneFrame;
      m_RefCount := m_Interface.Release;
   end;

   procedure StepBackwardOneFrame
   (
      this : in out MediaPlayer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.StepBackwardOneFrame;
      m_RefCount := m_Interface.Release;
   end;

   function GetAsCastingSource
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Casting.CastingSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Casting.ICastingSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer3, WinRt.Windows.Media.Playback.IID_IMediaPlayer3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Casting.CastingSource do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.GetAsCastingSource (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICastingSource := new Windows.Media.Casting.ICastingSource;
         Retval.m_ICastingSource.all := m_ComRetVal;
      end return;
   end;

   procedure SetSurfaceSize
   (
      this : in out MediaPlayer;
      size : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer4, WinRt.Windows.Media.Playback.IID_IMediaPlayer4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.SetSurfaceSize (size);
      m_RefCount := m_Interface.Release;
   end;

   function GetSurface
   (
      this : in out MediaPlayer;
      compositor : Windows.UI.Composition.Compositor'Class
   )
   return WinRt.Windows.Media.Playback.MediaPlayerSurface'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlayerSurface;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer4, WinRt.Windows.Media.Playback.IID_IMediaPlayer4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlayerSurface do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.GetSurface (compositor.m_ICompositor.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaPlayerSurface := new Windows.Media.Playback.IMediaPlayerSurface;
         Retval.m_IMediaPlayerSurface.all := m_ComRetVal;
      end return;
   end;

   procedure AddVideoEffect
   (
      this : in out MediaPlayer;
      activatableClassId : WinRt.WString;
      effectOptional : WinRt.Boolean;
      effectConfiguration : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayerEffects2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activatableClassId : WinRt.HString := To_HString (activatableClassId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayerEffects2, WinRt.Windows.Media.Playback.IID_IMediaPlayerEffects2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.AddVideoEffect (HStr_activatableClassId, effectOptional, effectConfiguration);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_activatableClassId);
   end;

   function add_VideoFrameAvailable
   (
      this : in out MediaPlayer;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer5, WinRt.Windows.Media.Playback.IID_IMediaPlayer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.add_VideoFrameAvailable (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_VideoFrameAvailable
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer5, WinRt.Windows.Media.Playback.IID_IMediaPlayer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.remove_VideoFrameAvailable (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsVideoFrameServerEnabled
   (
      this : in out MediaPlayer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer5, WinRt.Windows.Media.Playback.IID_IMediaPlayer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.get_IsVideoFrameServerEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsVideoFrameServerEnabled
   (
      this : in out MediaPlayer;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer5, WinRt.Windows.Media.Playback.IID_IMediaPlayer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.put_IsVideoFrameServerEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure CopyFrameToVideoSurface
   (
      this : in out MediaPlayer;
      destination : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer5, WinRt.Windows.Media.Playback.IID_IMediaPlayer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.CopyFrameToVideoSurface (destination);
      m_RefCount := m_Interface.Release;
   end;

   procedure CopyFrameToVideoSurface
   (
      this : in out MediaPlayer;
      destination : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      targetRectangle : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer5, WinRt.Windows.Media.Playback.IID_IMediaPlayer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.CopyFrameToVideoSurface (destination, targetRectangle);
      m_RefCount := m_Interface.Release;
   end;

   procedure CopyFrameToStereoscopicVideoSurfaces
   (
      this : in out MediaPlayer;
      destinationLeftEye : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      destinationRightEye : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer5, WinRt.Windows.Media.Playback.IID_IMediaPlayer5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.CopyFrameToStereoscopicVideoSurfaces (destinationLeftEye, destinationRightEye);
      m_RefCount := m_Interface.Release;
   end;

   function add_SubtitleFrameChanged
   (
      this : in out MediaPlayer;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer6, WinRt.Windows.Media.Playback.IID_IMediaPlayer6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.add_SubtitleFrameChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_SubtitleFrameChanged
   (
      this : in out MediaPlayer;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer6, WinRt.Windows.Media.Playback.IID_IMediaPlayer6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.remove_SubtitleFrameChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function RenderSubtitlesToSurface
   (
      this : in out MediaPlayer;
      destination : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer6, WinRt.Windows.Media.Playback.IID_IMediaPlayer6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.RenderSubtitlesToSurface (destination, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function RenderSubtitlesToSurface
   (
      this : in out MediaPlayer;
      destination : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      targetRectangle : Windows.Foundation.Rect
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer6, WinRt.Windows.Media.Playback.IID_IMediaPlayer6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayer.all);
      Hr := m_Interface.RenderSubtitlesToSurface (destination, targetRectangle, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AudioStateMonitor
   (
      this : in out MediaPlayer
   )
   return WinRt.Windows.Media.Audio.AudioStateMonitor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Playback.IMediaPlayer7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioStateMonitor;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayer_Interface, WinRt.Windows.Media.Playback.IMediaPlayer7, WinRt.Windows.Media.Playback.IID_IMediaPlayer7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioStateMonitor do
         m_Interface := QInterface (this.m_IMediaPlayer.all);
         Hr := m_Interface.get_AudioStateMonitor (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioStateMonitor := new Windows.Media.Audio.IAudioStateMonitor;
         Retval.m_IAudioStateMonitor.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlayerDataReceivedEventArgs

   procedure Initialize (this : in out MediaPlayerDataReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlayerDataReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlayerDataReceivedEventArgs, IMediaPlayerDataReceivedEventArgs_Ptr);
   begin
      if this.m_IMediaPlayerDataReceivedEventArgs /= null then
         if this.m_IMediaPlayerDataReceivedEventArgs.all /= null then
            RefCount := this.m_IMediaPlayerDataReceivedEventArgs.all.Release;
            Free (this.m_IMediaPlayerDataReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlayerDataReceivedEventArgs

   function get_Data
   (
      this : in out MediaPlayerDataReceivedEventArgs
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IMediaPlayerDataReceivedEventArgs.all.get_Data (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlayerFailedEventArgs

   procedure Initialize (this : in out MediaPlayerFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlayerFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlayerFailedEventArgs, IMediaPlayerFailedEventArgs_Ptr);
   begin
      if this.m_IMediaPlayerFailedEventArgs /= null then
         if this.m_IMediaPlayerFailedEventArgs.all /= null then
            RefCount := this.m_IMediaPlayerFailedEventArgs.all.Release;
            Free (this.m_IMediaPlayerFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlayerFailedEventArgs

   function get_Error
   (
      this : in out MediaPlayerFailedEventArgs
   )
   return WinRt.Windows.Media.Playback.MediaPlayerError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.MediaPlayerError;
   begin
      Hr := this.m_IMediaPlayerFailedEventArgs.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedErrorCode
   (
      this : in out MediaPlayerFailedEventArgs
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IMediaPlayerFailedEventArgs.all.get_ExtendedErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorMessage
   (
      this : in out MediaPlayerFailedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaPlayerFailedEventArgs.all.get_ErrorMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlayerRateChangedEventArgs

   procedure Initialize (this : in out MediaPlayerRateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlayerRateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlayerRateChangedEventArgs, IMediaPlayerRateChangedEventArgs_Ptr);
   begin
      if this.m_IMediaPlayerRateChangedEventArgs /= null then
         if this.m_IMediaPlayerRateChangedEventArgs.all /= null then
            RefCount := this.m_IMediaPlayerRateChangedEventArgs.all.Release;
            Free (this.m_IMediaPlayerRateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlayerRateChangedEventArgs

   function get_NewRate
   (
      this : in out MediaPlayerRateChangedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaPlayerRateChangedEventArgs.all.get_NewRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPlayerSurface

   procedure Initialize (this : in out MediaPlayerSurface) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPlayerSurface) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaPlayerSurface, IMediaPlayerSurface_Ptr);
   begin
      if this.m_IMediaPlayerSurface /= null then
         if this.m_IMediaPlayerSurface.all /= null then
            RefCount := this.m_IMediaPlayerSurface.all.Release;
            Free (this.m_IMediaPlayerSurface);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPlayerSurface

   function get_CompositionSurface
   (
      this : in out MediaPlayerSurface
   )
   return WinRt.Windows.UI.Composition.ICompositionSurface is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionSurface;
   begin
      Hr := this.m_IMediaPlayerSurface.all.get_CompositionSurface (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Compositor
   (
      this : in out MediaPlayerSurface
   )
   return WinRt.Windows.UI.Composition.Compositor'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositor;
   begin
      return RetVal : WinRt.Windows.UI.Composition.Compositor do
         Hr := this.m_IMediaPlayerSurface.all.get_Compositor (m_ComRetVal'Access);
         Retval.m_ICompositor := new Windows.UI.Composition.ICompositor;
         Retval.m_ICompositor.all := m_ComRetVal;
      end return;
   end;

   function get_MediaPlayer
   (
      this : in out MediaPlayerSurface
   )
   return WinRt.Windows.Media.Playback.MediaPlayer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IMediaPlayer;
   begin
      return RetVal : WinRt.Windows.Media.Playback.MediaPlayer do
         Hr := this.m_IMediaPlayerSurface.all.get_MediaPlayer (m_ComRetVal'Access);
         Retval.m_IMediaPlayer := new Windows.Media.Playback.IMediaPlayer;
         Retval.m_IMediaPlayer.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out MediaPlayerSurface
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IMediaPlayerSurface_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaPlayerSurface.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaybackMediaMarker

   procedure Initialize (this : in out PlaybackMediaMarker) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaybackMediaMarker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaybackMediaMarker, IPlaybackMediaMarker_Ptr);
   begin
      if this.m_IPlaybackMediaMarker /= null then
         if this.m_IPlaybackMediaMarker.all /= null then
            RefCount := this.m_IPlaybackMediaMarker.all.Release;
            Free (this.m_IPlaybackMediaMarker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlaybackMediaMarker

   function Constructor
   (
      value : Windows.Foundation.TimeSpan
   )
   return PlaybackMediaMarker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.PlaybackMediaMarker");
      m_Factory    : access IPlaybackMediaMarkerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Playback.IPlaybackMediaMarker;
   begin
      return RetVal : PlaybackMediaMarker do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaybackMediaMarkerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromTime (value, m_ComRetVal'Access);
            Retval.m_IPlaybackMediaMarker := new Windows.Media.Playback.IPlaybackMediaMarker;
            Retval.m_IPlaybackMediaMarker.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      value : Windows.Foundation.TimeSpan;
      mediaMarketType : WinRt.WString;
      text : WinRt.WString
   )
   return PlaybackMediaMarker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Playback.PlaybackMediaMarker");
      m_Factory    : access IPlaybackMediaMarkerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Playback.IPlaybackMediaMarker;
      HStr_mediaMarketType : WinRt.HString := To_HString (mediaMarketType);
      HStr_text : WinRt.HString := To_HString (text);
   begin
      return RetVal : PlaybackMediaMarker do
         Hr := RoGetActivationFactory (m_hString, IID_IPlaybackMediaMarkerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (value, HStr_mediaMarketType, HStr_text, m_ComRetVal'Access);
            Retval.m_IPlaybackMediaMarker := new Windows.Media.Playback.IPlaybackMediaMarker;
            Retval.m_IPlaybackMediaMarker.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_mediaMarketType);
         Hr := WindowsDeleteString (HStr_text);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaybackMediaMarker

   function get_Time
   (
      this : in out PlaybackMediaMarker
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPlaybackMediaMarker.all.get_Time (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MediaMarkerType
   (
      this : in out PlaybackMediaMarker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlaybackMediaMarker.all.get_MediaMarkerType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Text
   (
      this : in out PlaybackMediaMarker
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlaybackMediaMarker.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaybackMediaMarkerReachedEventArgs

   procedure Initialize (this : in out PlaybackMediaMarkerReachedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaybackMediaMarkerReachedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaybackMediaMarkerReachedEventArgs, IPlaybackMediaMarkerReachedEventArgs_Ptr);
   begin
      if this.m_IPlaybackMediaMarkerReachedEventArgs /= null then
         if this.m_IPlaybackMediaMarkerReachedEventArgs.all /= null then
            RefCount := this.m_IPlaybackMediaMarkerReachedEventArgs.all.Release;
            Free (this.m_IPlaybackMediaMarkerReachedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaybackMediaMarkerReachedEventArgs

   function get_PlaybackMediaMarker
   (
      this : in out PlaybackMediaMarkerReachedEventArgs
   )
   return WinRt.Windows.Media.Playback.PlaybackMediaMarker'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.IPlaybackMediaMarker;
   begin
      return RetVal : WinRt.Windows.Media.Playback.PlaybackMediaMarker do
         Hr := this.m_IPlaybackMediaMarkerReachedEventArgs.all.get_PlaybackMediaMarker (m_ComRetVal'Access);
         Retval.m_IPlaybackMediaMarker := new Windows.Media.Playback.IPlaybackMediaMarker;
         Retval.m_IPlaybackMediaMarker.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaybackMediaMarkerSequence

   procedure Initialize (this : in out PlaybackMediaMarkerSequence) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaybackMediaMarkerSequence) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaybackMediaMarkerSequence, IPlaybackMediaMarkerSequence_Ptr);
   begin
      if this.m_IPlaybackMediaMarkerSequence /= null then
         if this.m_IPlaybackMediaMarkerSequence.all /= null then
            RefCount := this.m_IPlaybackMediaMarkerSequence.all.Release;
            Free (this.m_IPlaybackMediaMarkerSequence);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaybackMediaMarkerSequence

   function get_Size
   (
      this : in out PlaybackMediaMarkerSequence
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IPlaybackMediaMarkerSequence.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Insert
   (
      this : in out PlaybackMediaMarkerSequence;
      value : Windows.Media.Playback.PlaybackMediaMarker'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaybackMediaMarkerSequence.all.Insert (value.m_IPlaybackMediaMarker.all);
   end;

   procedure Clear
   (
      this : in out PlaybackMediaMarkerSequence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlaybackMediaMarkerSequence.all.Clear;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Media.Playback.PlaybackMediaMarker>
   function First
   (
      this : in out PlaybackMediaMarkerSequence
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IPlaybackMediaMarker.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (3740061673, 27649, 22383, (149, 242, 147, 81, 90, 228, 14, 191 ));
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Playback.IPlaybackMediaMarkerSequence_Interface, IIterable_IPlaybackMediaMarker.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlaybackMediaMarkerSequence.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedMetadataPresentationModeChangedEventArgs

   procedure Initialize (this : in out TimedMetadataPresentationModeChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedMetadataPresentationModeChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimedMetadataPresentationModeChangedEventArgs, ITimedMetadataPresentationModeChangedEventArgs_Ptr);
   begin
      if this.m_ITimedMetadataPresentationModeChangedEventArgs /= null then
         if this.m_ITimedMetadataPresentationModeChangedEventArgs.all /= null then
            RefCount := this.m_ITimedMetadataPresentationModeChangedEventArgs.all.Release;
            Free (this.m_ITimedMetadataPresentationModeChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedMetadataPresentationModeChangedEventArgs

   function get_Track
   (
      this : in out TimedMetadataPresentationModeChangedEventArgs
   )
   return WinRt.Windows.Media.Core.TimedMetadataTrack'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.ITimedMetadataTrack;
   begin
      return RetVal : WinRt.Windows.Media.Core.TimedMetadataTrack do
         Hr := this.m_ITimedMetadataPresentationModeChangedEventArgs.all.get_Track (m_ComRetVal'Access);
         Retval.m_ITimedMetadataTrack := new Windows.Media.Core.ITimedMetadataTrack;
         Retval.m_ITimedMetadataTrack.all := m_ComRetVal;
      end return;
   end;

   function get_OldPresentationMode
   (
      this : in out TimedMetadataPresentationModeChangedEventArgs
   )
   return WinRt.Windows.Media.Playback.TimedMetadataTrackPresentationMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.TimedMetadataTrackPresentationMode;
   begin
      Hr := this.m_ITimedMetadataPresentationModeChangedEventArgs.all.get_OldPresentationMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewPresentationMode
   (
      this : in out TimedMetadataPresentationModeChangedEventArgs
   )
   return WinRt.Windows.Media.Playback.TimedMetadataTrackPresentationMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Playback.TimedMetadataTrackPresentationMode;
   begin
      Hr := this.m_ITimedMetadataPresentationModeChangedEventArgs.all.get_NewPresentationMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Background;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI.Notifications;
with WinRt.Windows.Web;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.BackgroundTransfer is

   package IAsyncOperation_DownloadOperation is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation);
   package AsyncOperationCompletedHandler_DownloadOperation is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_UnconstrainedTransferRequestResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult);
   package AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult);

   package IAsyncOperation_UploadOperation is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation);
   package AsyncOperationCompletedHandler_UploadOperation is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundDownloader

   procedure Initialize (this : in out BackgroundDownloader) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundDownloader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundDownloader, IBackgroundDownloader_Ptr);
   begin
      if this.m_IBackgroundDownloader /= null then
         if this.m_IBackgroundDownloader.all /= null then
            RefCount := this.m_IBackgroundDownloader.all.Release;
            Free (this.m_IBackgroundDownloader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BackgroundDownloader

   function Constructor return BackgroundDownloader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundDownloader");
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundDownloader;
   begin
      return RetVal : BackgroundDownloader do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundDownloader := new Windows.Networking.BackgroundTransfer.IBackgroundDownloader;
            Retval.m_IBackgroundDownloader.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      completionGroup : Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup'Class
   )
   return BackgroundDownloader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundDownloader");
      m_Factory    : access IBackgroundDownloaderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundDownloader;
   begin
      return RetVal : BackgroundDownloader do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundDownloaderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithCompletionGroup (completionGroup.m_IBackgroundTransferCompletionGroup.all, m_ComRetVal'Access);
            Retval.m_IBackgroundDownloader := new Windows.Networking.BackgroundTransfer.IBackgroundDownloader;
            Retval.m_IBackgroundDownloader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BackgroundDownloader

   function GetCurrentDownloadsAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundDownloader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloaderStaticMethods_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2923613663, 12354, 23954, (160, 30, 100, 60, 37, 43, 128, 80 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (428258162, 3547, 21004, (183, 45, 251, 37, 119, 233, 159, 245 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundDownloaderStaticMethods'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCurrentDownloadsAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetCurrentDownloadsAsync
   (
      group : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundDownloader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloaderStaticMethods_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_group : WinRt.HString := To_HString (group);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2923613663, 12354, 23954, (160, 30, 100, 60, 37, 43, 128, 80 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (428258162, 3547, 21004, (183, 45, 251, 37, 119, 233, 159, 245 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundDownloaderStaticMethods'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCurrentDownloadsAsync (HStr_group, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_group);
      return m_RetVal;
   end;

   function RequestUnconstrainedDownloadsAsync
   (
      operations : GenericObject
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundDownloader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloaderUserConsent_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UnconstrainedTransferRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UnconstrainedTransferRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult;
      m_IID            : aliased WinRt.IID := (2833000964, 16196, 20550, (129, 130, 205, 14, 193, 71, 225, 125 )); -- Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (1330823144, 39694, 23330, (145, 107, 131, 68, 37, 180, 171, 151 ));
      m_Handler        : AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind := new AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UnconstrainedTransferRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundDownloaderUserConsent'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestUnconstrainedDownloadsAsync (operations, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IUnconstrainedTransferRequestResult := new Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult;
                     Retval.m_IUnconstrainedTransferRequestResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetCurrentDownloadsForTransferGroupAsync
   (
      group : Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundDownloader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloaderStaticMethods2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2923613663, 12354, 23954, (160, 30, 100, 60, 37, 43, 128, 80 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (428258162, 3547, 21004, (183, 45, 251, 37, 119, 233, 159, 245 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundDownloaderStaticMethods2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCurrentDownloadsForTransferGroupAsync (group.m_IBackgroundTransferGroup.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundDownloader

   function CreateDownload
   (
      this : in out BackgroundDownloader;
      uri : Windows.Foundation.Uri'Class;
      resultFile : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IDownloadOperation;
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation do
         Hr := this.m_IBackgroundDownloader.all.CreateDownload (uri.m_IUriRuntimeClass.all, resultFile, m_ComRetVal'Access);
         Retval.m_IDownloadOperation := new Windows.Networking.BackgroundTransfer.IDownloadOperation;
         Retval.m_IDownloadOperation.all := m_ComRetVal;
      end return;
   end;

   function CreateDownload
   (
      this : in out BackgroundDownloader;
      uri : Windows.Foundation.Uri'Class;
      resultFile : Windows.Storage.IStorageFile;
      requestBodyFile : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IDownloadOperation;
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation do
         Hr := this.m_IBackgroundDownloader.all.CreateDownload (uri.m_IUriRuntimeClass.all, resultFile, requestBodyFile, m_ComRetVal'Access);
         Retval.m_IDownloadOperation := new Windows.Networking.BackgroundTransfer.IDownloadOperation;
         Retval.m_IDownloadOperation.all := m_ComRetVal;
      end return;
   end;

   function CreateDownloadAsync
   (
      this : in out BackgroundDownloader;
      uri : Windows.Foundation.Uri'Class;
      resultFile : Windows.Storage.IStorageFile;
      requestBodyStream : Windows.Storage.Streams.IInputStream
   )
   return WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DownloadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DownloadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation;
      m_IID            : aliased WinRt.IID := (1139751519, 52349, 22125, (169, 42, 76, 170, 118, 185, 42, 31 )); -- Windows.Networking.BackgroundTransfer.DownloadOperation;
      m_HandlerIID     : aliased WinRt.IID := (715536471, 65455, 23798, (155, 44, 13, 197, 151, 182, 10, 96 ));
      m_Handler        : AsyncOperationCompletedHandler_DownloadOperation.Kind := new AsyncOperationCompletedHandler_DownloadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DownloadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DownloadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DownloadOperation.Kind_Delegate, AsyncOperationCompletedHandler_DownloadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation do
         Hr := this.m_IBackgroundDownloader.all.CreateDownloadAsync (uri.m_IUriRuntimeClass.all, resultFile, requestBodyStream, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDownloadOperation := new Windows.Networking.BackgroundTransfer.IDownloadOperation;
                  Retval.m_IDownloadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure SetRequestHeader
   (
      this : in out BackgroundDownloader;
      headerName : WinRt.WString;
      headerValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      HStr_headerValue : WinRt.HString := To_HString (headerValue);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.SetRequestHeader (HStr_headerName, HStr_headerValue);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
      Hr := WindowsDeleteString (HStr_headerValue);
   end;

   function get_ServerCredential
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_ServerCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ServerCredential
   (
      this : in out BackgroundDownloader;
      credential : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_ServerCredential (credential.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ProxyCredential
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_ProxyCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyCredential
   (
      this : in out BackgroundDownloader;
      credential : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_ProxyCredential (credential.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_Method
   (
      this : in out BackgroundDownloader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.get_Method (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Method
   (
      this : in out BackgroundDownloader;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_Method (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Group
   (
      this : in out BackgroundDownloader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.get_Group (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Group
   (
      this : in out BackgroundDownloader;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_Group (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CostPolicy
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.get_CostPolicy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CostPolicy
   (
      this : in out BackgroundDownloader;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_CostPolicy (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransferGroup
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_TransferGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTransferGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
         Retval.m_IBackgroundTransferGroup.all := m_ComRetVal;
      end return;
   end;

   procedure put_TransferGroup
   (
      this : in out BackgroundDownloader;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_TransferGroup (value.m_IBackgroundTransferGroup.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SuccessToastNotification
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.UI.Notifications.ToastNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotification do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_SuccessToastNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IToastNotification := new Windows.UI.Notifications.IToastNotification;
         Retval.m_IToastNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_SuccessToastNotification
   (
      this : in out BackgroundDownloader;
      value : Windows.UI.Notifications.ToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_SuccessToastNotification (value.m_IToastNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_FailureToastNotification
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.UI.Notifications.ToastNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotification do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_FailureToastNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IToastNotification := new Windows.UI.Notifications.IToastNotification;
         Retval.m_IToastNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_FailureToastNotification
   (
      this : in out BackgroundDownloader;
      value : Windows.UI.Notifications.ToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_FailureToastNotification (value.m_IToastNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SuccessTileNotification
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.UI.Notifications.TileNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileNotification do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_SuccessTileNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITileNotification := new Windows.UI.Notifications.ITileNotification;
         Retval.m_ITileNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_SuccessTileNotification
   (
      this : in out BackgroundDownloader;
      value : Windows.UI.Notifications.TileNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_SuccessTileNotification (value.m_ITileNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_FailureTileNotification
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.UI.Notifications.TileNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileNotification do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_FailureTileNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITileNotification := new Windows.UI.Notifications.ITileNotification;
         Retval.m_ITileNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_FailureTileNotification
   (
      this : in out BackgroundDownloader;
      value : Windows.UI.Notifications.TileNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundDownloader.all);
      Hr := m_Interface.put_FailureTileNotification (value.m_ITileNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_CompletionGroup
   (
      this : in out BackgroundDownloader
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundDownloader3, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundDownloader3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup do
         m_Interface := QInterface (this.m_IBackgroundDownloader.all);
         Hr := m_Interface.get_CompletionGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTransferCompletionGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup;
         Retval.m_IBackgroundTransferCompletionGroup.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTransferCompletionGroup

   procedure Initialize (this : in out BackgroundTransferCompletionGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTransferCompletionGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTransferCompletionGroup, IBackgroundTransferCompletionGroup_Ptr);
   begin
      if this.m_IBackgroundTransferCompletionGroup /= null then
         if this.m_IBackgroundTransferCompletionGroup.all /= null then
            RefCount := this.m_IBackgroundTransferCompletionGroup.all.Release;
            Free (this.m_IBackgroundTransferCompletionGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BackgroundTransferCompletionGroup

   function Constructor return BackgroundTransferCompletionGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup");
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup;
   begin
      return RetVal : BackgroundTransferCompletionGroup do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTransferCompletionGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup;
            Retval.m_IBackgroundTransferCompletionGroup.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTransferCompletionGroup

   function get_Trigger
   (
      this : in out BackgroundTransferCompletionGroup
   )
   return WinRt.Windows.ApplicationModel.Background.IBackgroundTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      Hr := this.m_IBackgroundTransferCompletionGroup.all.get_Trigger (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsEnabled
   (
      this : in out BackgroundTransferCompletionGroup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBackgroundTransferCompletionGroup.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Enable
   (
      this : in out BackgroundTransferCompletionGroup
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTransferCompletionGroup.all.Enable;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTransferCompletionGroupTriggerDetails

   procedure Initialize (this : in out BackgroundTransferCompletionGroupTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTransferCompletionGroupTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTransferCompletionGroupTriggerDetails, IBackgroundTransferCompletionGroupTriggerDetails_Ptr);
   begin
      if this.m_IBackgroundTransferCompletionGroupTriggerDetails /= null then
         if this.m_IBackgroundTransferCompletionGroupTriggerDetails.all /= null then
            RefCount := this.m_IBackgroundTransferCompletionGroupTriggerDetails.all.Release;
            Free (this.m_IBackgroundTransferCompletionGroupTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTransferCompletionGroupTriggerDetails

   function get_Downloads
   (
      this : in out BackgroundTransferCompletionGroupTriggerDetails
   )
   return IVectorView_IDownloadOperation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IDownloadOperation.Kind;
   begin
      Hr := this.m_IBackgroundTransferCompletionGroupTriggerDetails.all.get_Downloads (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IDownloadOperation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Uploads
   (
      this : in out BackgroundTransferCompletionGroupTriggerDetails
   )
   return IVectorView_IUploadOperation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IUploadOperation.Kind;
   begin
      Hr := this.m_IBackgroundTransferCompletionGroupTriggerDetails.all.get_Uploads (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IUploadOperation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTransferContentPart

   procedure Initialize (this : in out BackgroundTransferContentPart) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTransferContentPart) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTransferContentPart, IBackgroundTransferContentPart_Ptr);
   begin
      if this.m_IBackgroundTransferContentPart /= null then
         if this.m_IBackgroundTransferContentPart.all /= null then
            RefCount := this.m_IBackgroundTransferContentPart.all.Release;
            Free (this.m_IBackgroundTransferContentPart);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BackgroundTransferContentPart

   function Constructor
   (
      name : WinRt.WString
   )
   return BackgroundTransferContentPart is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart");
      m_Factory    : access IBackgroundTransferContentPartFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : BackgroundTransferContentPart do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTransferContentPartFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithName (HStr_name, m_ComRetVal'Access);
            Retval.m_IBackgroundTransferContentPart := new Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart;
            Retval.m_IBackgroundTransferContentPart.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   function Constructor
   (
      name : WinRt.WString;
      fileName : WinRt.WString
   )
   return BackgroundTransferContentPart is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart");
      m_Factory    : access IBackgroundTransferContentPartFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_fileName : WinRt.HString := To_HString (fileName);
   begin
      return RetVal : BackgroundTransferContentPart do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTransferContentPartFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithNameAndFileName (HStr_name, HStr_fileName, m_ComRetVal'Access);
            Retval.m_IBackgroundTransferContentPart := new Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart;
            Retval.m_IBackgroundTransferContentPart.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
         Hr := WindowsDeleteString (HStr_fileName);
      end return;
   end;

   function Constructor return BackgroundTransferContentPart is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart");
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart;
   begin
      return RetVal : BackgroundTransferContentPart do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTransferContentPart := new Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart;
            Retval.m_IBackgroundTransferContentPart.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTransferContentPart

   procedure SetHeader
   (
      this : in out BackgroundTransferContentPart;
      headerName : WinRt.WString;
      headerValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      HStr_headerValue : WinRt.HString := To_HString (headerValue);
   begin
      Hr := this.m_IBackgroundTransferContentPart.all.SetHeader (HStr_headerName, HStr_headerValue);
      Hr := WindowsDeleteString (HStr_headerName);
      Hr := WindowsDeleteString (HStr_headerValue);
   end;

   procedure SetText
   (
      this : in out BackgroundTransferContentPart;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBackgroundTransferContentPart.all.SetText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure SetFile
   (
      this : in out BackgroundTransferContentPart;
      value : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTransferContentPart.all.SetFile (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BackgroundTransferError is

      function GetStatus
      (
         hresult : WinRt.Int32
      )
      return WinRt.Windows.Web.WebErrorStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundTransferError");
         m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferErrorStaticMethods_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Web.WebErrorStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTransferErrorStaticMethods'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStatus (hresult, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end BackgroundTransferError;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTransferGroup

   procedure Initialize (this : in out BackgroundTransferGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTransferGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTransferGroup, IBackgroundTransferGroup_Ptr);
   begin
      if this.m_IBackgroundTransferGroup /= null then
         if this.m_IBackgroundTransferGroup.all /= null then
            RefCount := this.m_IBackgroundTransferGroup.all.Release;
            Free (this.m_IBackgroundTransferGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BackgroundTransferGroup

   function CreateGroup
   (
      name : WinRt.WString
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundTransferGroup");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTransferGroupStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateGroup (HStr_name, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBackgroundTransferGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
            Retval.m_IBackgroundTransferGroup.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTransferGroup

   function get_Name
   (
      this : in out BackgroundTransferGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBackgroundTransferGroup.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TransferBehavior
   (
      this : in out BackgroundTransferGroup
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior;
   begin
      Hr := this.m_IBackgroundTransferGroup.all.get_TransferBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TransferBehavior
   (
      this : in out BackgroundTransferGroup;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTransferGroup.all.put_TransferBehavior (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTransferRangesDownloadedEventArgs

   procedure Initialize (this : in out BackgroundTransferRangesDownloadedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTransferRangesDownloadedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTransferRangesDownloadedEventArgs, IBackgroundTransferRangesDownloadedEventArgs_Ptr);
   begin
      if this.m_IBackgroundTransferRangesDownloadedEventArgs /= null then
         if this.m_IBackgroundTransferRangesDownloadedEventArgs.all /= null then
            RefCount := this.m_IBackgroundTransferRangesDownloadedEventArgs.all.Release;
            Free (this.m_IBackgroundTransferRangesDownloadedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTransferRangesDownloadedEventArgs

   function get_WasDownloadRestarted
   (
      this : in out BackgroundTransferRangesDownloadedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBackgroundTransferRangesDownloadedEventArgs.all.get_WasDownloadRestarted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AddedRanges
   (
      this : in out BackgroundTransferRangesDownloadedEventArgs
   )
   return IVector_BackgroundTransferFileRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_BackgroundTransferFileRange.Kind;
   begin
      Hr := this.m_IBackgroundTransferRangesDownloadedEventArgs.all.get_AddedRanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_BackgroundTransferFileRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDeferral
   (
      this : in out BackgroundTransferRangesDownloadedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IBackgroundTransferRangesDownloadedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundUploader

   procedure Initialize (this : in out BackgroundUploader) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundUploader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundUploader, IBackgroundUploader_Ptr);
   begin
      if this.m_IBackgroundUploader /= null then
         if this.m_IBackgroundUploader.all /= null then
            RefCount := this.m_IBackgroundUploader.all.Release;
            Free (this.m_IBackgroundUploader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BackgroundUploader

   function Constructor return BackgroundUploader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundUploader");
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundUploader;
   begin
      return RetVal : BackgroundUploader do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundUploader := new Windows.Networking.BackgroundTransfer.IBackgroundUploader;
            Retval.m_IBackgroundUploader.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      completionGroup : Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup'Class
   )
   return BackgroundUploader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundUploader");
      m_Factory    : access IBackgroundUploaderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.BackgroundTransfer.IBackgroundUploader;
   begin
      return RetVal : BackgroundUploader do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundUploaderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithCompletionGroup (completionGroup.m_IBackgroundTransferCompletionGroup.all, m_ComRetVal'Access);
            Retval.m_IBackgroundUploader := new Windows.Networking.BackgroundTransfer.IBackgroundUploader;
            Retval.m_IBackgroundUploader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BackgroundUploader

   function GetCurrentUploadsForTransferGroupAsync
   (
      group : Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundUploader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploaderStaticMethods2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1045195324, 18596, 24098, (178, 154, 62, 66, 148, 105, 70, 47 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1619667368, 48069, 24227, (179, 247, 135, 237, 196, 231, 187, 188 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundUploaderStaticMethods2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCurrentUploadsForTransferGroupAsync (group.m_IBackgroundTransferGroup.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetCurrentUploadsAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundUploader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploaderStaticMethods_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1045195324, 18596, 24098, (178, 154, 62, 66, 148, 105, 70, 47 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1619667368, 48069, 24227, (179, 247, 135, 237, 196, 231, 187, 188 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundUploaderStaticMethods'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCurrentUploadsAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetCurrentUploadsAsync
   (
      group : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundUploader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploaderStaticMethods_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_group : WinRt.HString := To_HString (group);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1045195324, 18596, 24098, (178, 154, 62, 66, 148, 105, 70, 47 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1619667368, 48069, 24227, (179, 247, 135, 237, 196, 231, 187, 188 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundUploaderStaticMethods'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetCurrentUploadsAsync (HStr_group, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_group);
      return m_RetVal;
   end;

   function RequestUnconstrainedUploadsAsync
   (
      operations : GenericObject
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.BackgroundUploader");
      m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploaderUserConsent_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UnconstrainedTransferRequestResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UnconstrainedTransferRequestResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult;
      m_IID            : aliased WinRt.IID := (2833000964, 16196, 20550, (129, 130, 205, 14, 193, 71, 225, 125 )); -- Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult;
      m_HandlerIID     : aliased WinRt.IID := (1330823144, 39694, 23330, (145, 107, 131, 68, 37, 180, 171, 151 ));
      m_Handler        : AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind := new AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UnconstrainedTransferRequestResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_UnconstrainedTransferRequestResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundUploaderUserConsent'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestUnconstrainedUploadsAsync (operations, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IUnconstrainedTransferRequestResult := new Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult;
                     Retval.m_IUnconstrainedTransferRequestResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundUploader

   function CreateUpload
   (
      this : in out BackgroundUploader;
      uri : Windows.Foundation.Uri'Class;
      sourceFile : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UploadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IUploadOperation;
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UploadOperation do
         Hr := this.m_IBackgroundUploader.all.CreateUpload (uri.m_IUriRuntimeClass.all, sourceFile, m_ComRetVal'Access);
         Retval.m_IUploadOperation := new Windows.Networking.BackgroundTransfer.IUploadOperation;
         Retval.m_IUploadOperation.all := m_ComRetVal;
      end return;
   end;

   function CreateUploadFromStreamAsync
   (
      this : in out BackgroundUploader;
      uri : Windows.Foundation.Uri'Class;
      sourceStream : Windows.Storage.Streams.IInputStream
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UploadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UploadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UploadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation;
      m_IID            : aliased WinRt.IID := (1143025313, 46372, 23278, (163, 32, 113, 153, 34, 83, 129, 209 )); -- Windows.Networking.BackgroundTransfer.UploadOperation;
      m_HandlerIID     : aliased WinRt.IID := (3939928088, 3128, 23774, (174, 193, 198, 167, 97, 135, 17, 247 ));
      m_Handler        : AsyncOperationCompletedHandler_UploadOperation.Kind := new AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UploadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UploadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate, AsyncOperationCompletedHandler_UploadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UploadOperation do
         Hr := this.m_IBackgroundUploader.all.CreateUploadFromStreamAsync (uri.m_IUriRuntimeClass.all, sourceStream, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUploadOperation := new Windows.Networking.BackgroundTransfer.IUploadOperation;
                  Retval.m_IUploadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateUploadAsync
   (
      this : in out BackgroundUploader;
      uri : Windows.Foundation.Uri'Class;
      parts : GenericObject
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UploadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UploadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UploadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation;
      m_IID            : aliased WinRt.IID := (1143025313, 46372, 23278, (163, 32, 113, 153, 34, 83, 129, 209 )); -- Windows.Networking.BackgroundTransfer.UploadOperation;
      m_HandlerIID     : aliased WinRt.IID := (3939928088, 3128, 23774, (174, 193, 198, 167, 97, 135, 17, 247 ));
      m_Handler        : AsyncOperationCompletedHandler_UploadOperation.Kind := new AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UploadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UploadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate, AsyncOperationCompletedHandler_UploadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UploadOperation do
         Hr := this.m_IBackgroundUploader.all.CreateUploadAsync (uri.m_IUriRuntimeClass.all, parts, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUploadOperation := new Windows.Networking.BackgroundTransfer.IUploadOperation;
                  Retval.m_IUploadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateUploadAsync
   (
      this : in out BackgroundUploader;
      uri : Windows.Foundation.Uri'Class;
      parts : GenericObject;
      subType_x : WinRt.WString
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UploadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subType_x : WinRt.HString := To_HString (subType_x);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UploadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UploadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation;
      m_IID            : aliased WinRt.IID := (1143025313, 46372, 23278, (163, 32, 113, 153, 34, 83, 129, 209 )); -- Windows.Networking.BackgroundTransfer.UploadOperation;
      m_HandlerIID     : aliased WinRt.IID := (3939928088, 3128, 23774, (174, 193, 198, 167, 97, 135, 17, 247 ));
      m_Handler        : AsyncOperationCompletedHandler_UploadOperation.Kind := new AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UploadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UploadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate, AsyncOperationCompletedHandler_UploadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UploadOperation do
         Hr := this.m_IBackgroundUploader.all.CreateUploadAsync (uri.m_IUriRuntimeClass.all, parts, HStr_subType_x, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUploadOperation := new Windows.Networking.BackgroundTransfer.IUploadOperation;
                  Retval.m_IUploadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_subType_x);
      end return;
   end;

   function CreateUploadAsync
   (
      this : in out BackgroundUploader;
      uri : Windows.Foundation.Uri'Class;
      parts : GenericObject;
      subType_x : WinRt.WString;
      boundary : WinRt.WString
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UploadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subType_x : WinRt.HString := To_HString (subType_x);
      HStr_boundary : WinRt.HString := To_HString (boundary);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UploadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UploadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation;
      m_IID            : aliased WinRt.IID := (1143025313, 46372, 23278, (163, 32, 113, 153, 34, 83, 129, 209 )); -- Windows.Networking.BackgroundTransfer.UploadOperation;
      m_HandlerIID     : aliased WinRt.IID := (3939928088, 3128, 23774, (174, 193, 198, 167, 97, 135, 17, 247 ));
      m_Handler        : AsyncOperationCompletedHandler_UploadOperation.Kind := new AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UploadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UploadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate, AsyncOperationCompletedHandler_UploadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UploadOperation do
         Hr := this.m_IBackgroundUploader.all.CreateUploadAsync (uri.m_IUriRuntimeClass.all, parts, HStr_subType_x, HStr_boundary, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUploadOperation := new Windows.Networking.BackgroundTransfer.IUploadOperation;
                  Retval.m_IUploadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_subType_x);
         Hr := WindowsDeleteString (HStr_boundary);
      end return;
   end;

   procedure SetRequestHeader
   (
      this : in out BackgroundUploader;
      headerName : WinRt.WString;
      headerValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      HStr_headerValue : WinRt.HString := To_HString (headerValue);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.SetRequestHeader (HStr_headerName, HStr_headerValue);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
      Hr := WindowsDeleteString (HStr_headerValue);
   end;

   function get_ServerCredential
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_ServerCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ServerCredential
   (
      this : in out BackgroundUploader;
      credential : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_ServerCredential (credential.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ProxyCredential
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_ProxyCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyCredential
   (
      this : in out BackgroundUploader;
      credential : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_ProxyCredential (credential.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_Method
   (
      this : in out BackgroundUploader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.get_Method (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Method
   (
      this : in out BackgroundUploader;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_Method (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Group
   (
      this : in out BackgroundUploader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.get_Group (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Group
   (
      this : in out BackgroundUploader;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_Group (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CostPolicy
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.get_CostPolicy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CostPolicy
   (
      this : in out BackgroundUploader;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferBase, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferBase'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_CostPolicy (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransferGroup
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_TransferGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTransferGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
         Retval.m_IBackgroundTransferGroup.all := m_ComRetVal;
      end return;
   end;

   procedure put_TransferGroup
   (
      this : in out BackgroundUploader;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_TransferGroup (value.m_IBackgroundTransferGroup.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SuccessToastNotification
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.UI.Notifications.ToastNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotification do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_SuccessToastNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IToastNotification := new Windows.UI.Notifications.IToastNotification;
         Retval.m_IToastNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_SuccessToastNotification
   (
      this : in out BackgroundUploader;
      value : Windows.UI.Notifications.ToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_SuccessToastNotification (value.m_IToastNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_FailureToastNotification
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.UI.Notifications.ToastNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotification do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_FailureToastNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IToastNotification := new Windows.UI.Notifications.IToastNotification;
         Retval.m_IToastNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_FailureToastNotification
   (
      this : in out BackgroundUploader;
      value : Windows.UI.Notifications.ToastNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_FailureToastNotification (value.m_IToastNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SuccessTileNotification
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.UI.Notifications.TileNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileNotification do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_SuccessTileNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITileNotification := new Windows.UI.Notifications.ITileNotification;
         Retval.m_ITileNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_SuccessTileNotification
   (
      this : in out BackgroundUploader;
      value : Windows.UI.Notifications.TileNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_SuccessTileNotification (value.m_ITileNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_FailureTileNotification
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.UI.Notifications.TileNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileNotification;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileNotification do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_FailureTileNotification (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ITileNotification := new Windows.UI.Notifications.ITileNotification;
         Retval.m_ITileNotification.all := m_ComRetVal;
      end return;
   end;

   procedure put_FailureTileNotification
   (
      this : in out BackgroundUploader;
      value : Windows.UI.Notifications.TileNotification'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader2, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundUploader.all);
      Hr := m_Interface.put_FailureTileNotification (value.m_ITileNotification.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_CompletionGroup
   (
      this : in out BackgroundUploader
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundUploader3, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundUploader3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup do
         m_Interface := QInterface (this.m_IBackgroundUploader.all);
         Hr := m_Interface.get_CompletionGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTransferCompletionGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup;
         Retval.m_IBackgroundTransferCompletionGroup.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ContentPrefetcher is

      function get_ContentUris
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.ContentPrefetcher");
         m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IContentPrefetcher_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContentPrefetcher'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ContentUris (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure put_IndirectContentUri
      (
         value : Windows.Foundation.Uri'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.ContentPrefetcher");
         m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IContentPrefetcher_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContentPrefetcher'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_IndirectContentUri (value.m_IUriRuntimeClass.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function get_IndirectContentUri
      return WinRt.Windows.Foundation.Uri is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.ContentPrefetcher");
         m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IContentPrefetcher_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      begin
         return RetVal : WinRt.Windows.Foundation.Uri do
            Hr := RoGetActivationFactory (m_hString, IID_IContentPrefetcher'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_IndirectContentUri (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
               Retval.m_IUriRuntimeClass.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function get_LastSuccessfulPrefetchTime
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.BackgroundTransfer.ContentPrefetcher");
         m_Factory        : access WinRt.Windows.Networking.BackgroundTransfer.IContentPrefetcherTime_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IContentPrefetcherTime'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LastSuccessfulPrefetchTime (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end ContentPrefetcher;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DownloadOperation

   procedure Initialize (this : in out DownloadOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DownloadOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDownloadOperation, IDownloadOperation_Ptr);
   begin
      if this.m_IDownloadOperation /= null then
         if this.m_IDownloadOperation.all /= null then
            RefCount := this.m_IDownloadOperation.all.Release;
            Free (this.m_IDownloadOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DownloadOperation

   function get_ResultFile
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Storage.IStorageFile is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      Hr := this.m_IDownloadOperation.all.get_ResultFile (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Progress
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress;
   begin
      Hr := this.m_IDownloadOperation.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function StartAsync
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DownloadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DownloadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation;
      m_IID            : aliased WinRt.IID := (3899281245, 29754, 24344, (157, 76, 188, 142, 213, 148, 38, 89 )); -- Windows.Networking.BackgroundTransfer.DownloadOperation;
      m_HandlerIID     : aliased WinRt.IID := (2015053724, 519, 23829, (164, 229, 120, 55, 209, 59, 249, 61 ));
      m_Handler        : AsyncOperationCompletedHandler_DownloadOperation.Kind := new AsyncOperationCompletedHandler_DownloadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DownloadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DownloadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DownloadOperation.Kind_Delegate, AsyncOperationCompletedHandler_DownloadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation do
         Hr := this.m_IDownloadOperation.all.StartAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDownloadOperation := new Windows.Networking.BackgroundTransfer.IDownloadOperation;
                  Retval.m_IDownloadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function AttachAsync
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DownloadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DownloadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation;
      m_IID            : aliased WinRt.IID := (3899281245, 29754, 24344, (157, 76, 188, 142, 213, 148, 38, 89 )); -- Windows.Networking.BackgroundTransfer.DownloadOperation;
      m_HandlerIID     : aliased WinRt.IID := (2015053724, 519, 23829, (164, 229, 120, 55, 209, 59, 249, 61 ));
      m_Handler        : AsyncOperationCompletedHandler_DownloadOperation.Kind := new AsyncOperationCompletedHandler_DownloadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DownloadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DownloadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DownloadOperation.Kind_Delegate, AsyncOperationCompletedHandler_DownloadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.DownloadOperation do
         Hr := this.m_IDownloadOperation.all.AttachAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDownloadOperation := new Windows.Networking.BackgroundTransfer.IDownloadOperation;
                  Retval.m_IDownloadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Pause
   (
      this : in out DownloadOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDownloadOperation.all.Pause;
   end;

   procedure Resume
   (
      this : in out DownloadOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDownloadOperation.all.Resume;
   end;

   function get_Guid
   (
      this : in out DownloadOperation
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_Guid (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RequestedUri
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IDownloadOperation.all);
         Hr := m_Interface.get_RequestedUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Method
   (
      this : in out DownloadOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_Method (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Group
   (
      this : in out DownloadOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_Group (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CostPolicy
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_CostPolicy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CostPolicy
   (
      this : in out DownloadOperation;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.put_CostPolicy (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetResultStreamAt
   (
      this : in out DownloadOperation;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.GetResultStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetResponseInformation
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.ResponseInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IResponseInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.ResponseInformation do
         m_Interface := QInterface (this.m_IDownloadOperation.all);
         Hr := m_Interface.GetResponseInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IResponseInformation := new Windows.Networking.BackgroundTransfer.IResponseInformation;
         Retval.m_IResponseInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Priority
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferPriority is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundTransferPriority;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperationPriority'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_Priority (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Priority
   (
      this : in out DownloadOperation;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperationPriority'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.put_Priority (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransferGroup
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation2, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup do
         m_Interface := QInterface (this.m_IDownloadOperation.all);
         Hr := m_Interface.get_TransferGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTransferGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
         Retval.m_IBackgroundTransferGroup.all := m_ComRetVal;
      end return;
   end;

   function get_IsRandomAccessRequired
   (
      this : in out DownloadOperation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_IsRandomAccessRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsRandomAccessRequired
   (
      this : in out DownloadOperation;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.put_IsRandomAccessRequired (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetResultRandomAccessStreamReference
   (
      this : in out DownloadOperation
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.GetResultRandomAccessStreamReference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetDownloadedRanges
   (
      this : in out DownloadOperation
   )
   return IVector_BackgroundTransferFileRange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_BackgroundTransferFileRange.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.GetDownloadedRanges (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_BackgroundTransferFileRange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_RangesDownloaded
   (
      this : in out DownloadOperation;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.add_RangesDownloaded (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_RangesDownloaded
   (
      this : in out DownloadOperation;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.remove_RangesDownloaded (eventCookie);
      m_RefCount := m_Interface.Release;
   end;

   procedure put_RequestedUri
   (
      this : in out DownloadOperation;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.put_RequestedUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_RecoverableWebErrorStatuses
   (
      this : in out DownloadOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_RecoverableWebErrorStatuses (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CurrentWebErrorStatus
   (
      this : in out DownloadOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.get_CurrentWebErrorStatus (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure MakeCurrentInTransferGroup
   (
      this : in out DownloadOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation4, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.MakeCurrentInTransferGroup;
      m_RefCount := m_Interface.Release;
   end;

   procedure SetRequestHeader
   (
      this : in out DownloadOperation;
      headerName : WinRt.WString;
      headerValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      HStr_headerValue : WinRt.HString := To_HString (headerValue);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation5, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.SetRequestHeader (HStr_headerName, HStr_headerValue);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
      Hr := WindowsDeleteString (HStr_headerValue);
   end;

   procedure RemoveRequestHeader
   (
      this : in out DownloadOperation;
      headerName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IDownloadOperation5, WinRt.Windows.Networking.BackgroundTransfer.IID_IDownloadOperation5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDownloadOperation.all);
      Hr := m_Interface.RemoveRequestHeader (HStr_headerName);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ResponseInformation

   procedure Initialize (this : in out ResponseInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ResponseInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IResponseInformation, IResponseInformation_Ptr);
   begin
      if this.m_IResponseInformation /= null then
         if this.m_IResponseInformation.all /= null then
            RefCount := this.m_IResponseInformation.all.Release;
            Free (this.m_IResponseInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ResponseInformation

   function get_IsResumable
   (
      this : in out ResponseInformation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IResponseInformation.all.get_IsResumable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActualUri
   (
      this : in out ResponseInformation
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IResponseInformation.all.get_ActualUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_StatusCode
   (
      this : in out ResponseInformation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IResponseInformation.all.get_StatusCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Headers
   (
      this : in out ResponseInformation
   )
   return IMapView_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_HString.Kind;
   begin
      Hr := this.m_IResponseInformation.all.get_Headers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UnconstrainedTransferRequestResult

   procedure Initialize (this : in out UnconstrainedTransferRequestResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out UnconstrainedTransferRequestResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUnconstrainedTransferRequestResult, IUnconstrainedTransferRequestResult_Ptr);
   begin
      if this.m_IUnconstrainedTransferRequestResult /= null then
         if this.m_IUnconstrainedTransferRequestResult.all /= null then
            RefCount := this.m_IUnconstrainedTransferRequestResult.all.Release;
            Free (this.m_IUnconstrainedTransferRequestResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UnconstrainedTransferRequestResult

   function get_IsUnconstrained
   (
      this : in out UnconstrainedTransferRequestResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUnconstrainedTransferRequestResult.all.get_IsUnconstrained (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UploadOperation

   procedure Initialize (this : in out UploadOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out UploadOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUploadOperation, IUploadOperation_Ptr);
   begin
      if this.m_IUploadOperation /= null then
         if this.m_IUploadOperation.all /= null then
            RefCount := this.m_IUploadOperation.all.Release;
            Free (this.m_IUploadOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UploadOperation

   function get_SourceFile
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Storage.IStorageFile is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      Hr := this.m_IUploadOperation.all.get_SourceFile (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Progress
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundUploadProgress is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundUploadProgress;
   begin
      Hr := this.m_IUploadOperation.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function StartAsync
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UploadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UploadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UploadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation;
      m_IID            : aliased WinRt.IID := (903720698, 56170, 23821, (186, 84, 160, 114, 132, 1, 23, 30 )); -- Windows.Networking.BackgroundTransfer.UploadOperation;
      m_HandlerIID     : aliased WinRt.IID := (2046602899, 21484, 24422, (171, 52, 130, 106, 247, 142, 193, 26 ));
      m_Handler        : AsyncOperationCompletedHandler_UploadOperation.Kind := new AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UploadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UploadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate, AsyncOperationCompletedHandler_UploadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UploadOperation do
         Hr := this.m_IUploadOperation.all.StartAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUploadOperation := new Windows.Networking.BackgroundTransfer.IUploadOperation;
                  Retval.m_IUploadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function AttachAsync
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.UploadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UploadOperation.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UploadOperation.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation;
      m_IID            : aliased WinRt.IID := (903720698, 56170, 23821, (186, 84, 160, 114, 132, 1, 23, 30 )); -- Windows.Networking.BackgroundTransfer.UploadOperation;
      m_HandlerIID     : aliased WinRt.IID := (2046602899, 21484, 24422, (171, 52, 130, 106, 247, 142, 193, 26 ));
      m_Handler        : AsyncOperationCompletedHandler_UploadOperation.Kind := new AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UploadOperation.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UploadOperation.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UploadOperation.Kind_Delegate, AsyncOperationCompletedHandler_UploadOperation.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.UploadOperation do
         Hr := this.m_IUploadOperation.all.AttachAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUploadOperation := new Windows.Networking.BackgroundTransfer.IUploadOperation;
                  Retval.m_IUploadOperation.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_Guid
   (
      this : in out UploadOperation
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.get_Guid (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RequestedUri
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IUploadOperation.all);
         Hr := m_Interface.get_RequestedUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Method
   (
      this : in out UploadOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.get_Method (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Group
   (
      this : in out UploadOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.get_Group (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CostPolicy
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.get_CostPolicy (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CostPolicy
   (
      this : in out UploadOperation;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.put_CostPolicy (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetResultStreamAt
   (
      this : in out UploadOperation;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.GetResultStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetResponseInformation
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.ResponseInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IResponseInformation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperation'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.ResponseInformation do
         m_Interface := QInterface (this.m_IUploadOperation.all);
         Hr := m_Interface.GetResponseInformation (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IResponseInformation := new Windows.Networking.BackgroundTransfer.IResponseInformation;
         Retval.m_IResponseInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Priority
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferPriority is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.BackgroundTransferPriority;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperationPriority'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.get_Priority (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Priority
   (
      this : in out UploadOperation;
      value : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority, WinRt.Windows.Networking.BackgroundTransfer.IID_IBackgroundTransferOperationPriority'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.put_Priority (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_TransferGroup
   (
      this : in out UploadOperation
   )
   return WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation2, WinRt.Windows.Networking.BackgroundTransfer.IID_IUploadOperation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.BackgroundTransfer.BackgroundTransferGroup do
         m_Interface := QInterface (this.m_IUploadOperation.all);
         Hr := m_Interface.get_TransferGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTransferGroup := new Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
         Retval.m_IBackgroundTransferGroup.all := m_ComRetVal;
      end return;
   end;

   procedure MakeCurrentInTransferGroup
   (
      this : in out UploadOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation3, WinRt.Windows.Networking.BackgroundTransfer.IID_IUploadOperation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.MakeCurrentInTransferGroup;
      m_RefCount := m_Interface.Release;
   end;

   procedure SetRequestHeader
   (
      this : in out UploadOperation;
      headerName : WinRt.WString;
      headerValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      HStr_headerValue : WinRt.HString := To_HString (headerValue);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation4, WinRt.Windows.Networking.BackgroundTransfer.IID_IUploadOperation4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.SetRequestHeader (HStr_headerName, HStr_headerValue);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
      Hr := WindowsDeleteString (HStr_headerValue);
   end;

   procedure RemoveRequestHeader
   (
      this : in out UploadOperation;
      headerName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation_Interface, WinRt.Windows.Networking.BackgroundTransfer.IUploadOperation4, WinRt.Windows.Networking.BackgroundTransfer.IID_IUploadOperation4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUploadOperation.all);
      Hr := m_Interface.RemoveRequestHeader (HStr_headerName);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
   end;

end;

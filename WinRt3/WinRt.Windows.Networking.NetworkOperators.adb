--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Data.Xml.Dom;
with WinRt.Windows.Devices.Sms;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Connectivity;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.NetworkOperators is

   package IAsyncOperation_ESimOperationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IESimOperationResult);
   package AsyncOperationCompletedHandler_ESimOperationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IESimOperationResult);

   package IAsyncOperation_ESimDownloadProfileMetadataResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult);
   package AsyncOperationCompletedHandler_ESimDownloadProfileMetadataResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult);

   package IAsyncOperation_ESimDiscoverResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IESimDiscoverResult);
   package AsyncOperationCompletedHandler_ESimDiscoverResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IESimDiscoverResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_HotspotCredentialsAuthenticationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult);
   package AsyncOperationCompletedHandler_HotspotCredentialsAuthenticationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult);

   package IAsyncOperation_MobileBroadbandDeviceServiceCommandResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult);
   package AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult);

   package IAsyncOperation_MobileBroadbandModemConfiguration is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration);
   package AsyncOperationCompletedHandler_MobileBroadbandModemConfiguration is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration);

   package IAsyncOperation_MobileBroadbandModemStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModemStatus);
   package AsyncOperationCompletedHandler_MobileBroadbandModemStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModemStatus);

   package IAsyncOperation_MobileBroadbandPco is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPco);
   package AsyncOperationCompletedHandler_MobileBroadbandPco is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPco);

   package IAsyncOperation_MobileBroadbandCellsInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo);
   package AsyncOperationCompletedHandler_MobileBroadbandCellsInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo);

   package IAsyncOperation_MobileBroadbandPinOperationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult);
   package AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult);

   package IAsyncOperation_MobileBroadbandUiccAppsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult);
   package AsyncOperationCompletedHandler_MobileBroadbandUiccAppsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult);

   package IAsyncOperation_MobileBroadbandUiccAppRecordDetailsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult);
   package AsyncOperationCompletedHandler_MobileBroadbandUiccAppRecordDetailsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult);

   package IAsyncOperation_MobileBroadbandUiccAppReadRecordResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult);
   package AsyncOperationCompletedHandler_MobileBroadbandUiccAppReadRecordResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult);

   package IAsyncOperation_NetworkOperatorTetheringOperationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult);
   package AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult);

   package IAsyncOperation_ProvisionFromXmlDocumentResults is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults);
   package AsyncOperationCompletedHandler_ProvisionFromXmlDocumentResults is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults);

   package IAsyncOperation_UssdReply is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.NetworkOperators.IUssdReply);
   package AsyncOperationCompletedHandler_UssdReply is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.NetworkOperators.IUssdReply);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESim

   procedure Initialize (this : in out ESim) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESim) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESim, IESim_Ptr);
   begin
      if this.m_IESim /= null then
         if this.m_IESim.all /= null then
            RefCount := this.m_IESim.all.Release;
            Free (this.m_IESim);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESim

   function get_AvailableMemoryInBytes
   (
      this : in out ESim
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IESim.all.get_AvailableMemoryInBytes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Eid
   (
      this : in out ESim
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESim.all.get_Eid (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirmwareVersion
   (
      this : in out ESim
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESim.all.get_FirmwareVersion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MobileBroadbandModemDeviceId
   (
      this : in out ESim
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESim.all.get_MobileBroadbandModemDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Policy
   (
      this : in out ESim
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimPolicy'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimPolicy;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimPolicy do
         Hr := this.m_IESim.all.get_Policy (m_ComRetVal'Access);
         Retval.m_IESimPolicy := new Windows.Networking.NetworkOperators.IESimPolicy;
         Retval.m_IESimPolicy.all := m_ComRetVal;
      end return;
   end;

   function get_State
   (
      this : in out ESim
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimState;
   begin
      Hr := this.m_IESim.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetProfiles
   (
      this : in out ESim
   )
   return IVectorView_IESimProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IESimProfile.Kind;
   begin
      Hr := this.m_IESim.all.GetProfiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IESimProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function DeleteProfileAsync
   (
      this : in out ESim;
      profileId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_profileId : WinRt.HString := To_HString (profileId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (3709198969, 4726, 22667, (185, 240, 17, 185, 127, 39, 4, 82 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (361264424, 64063, 23266, (189, 127, 17, 25, 230, 45, 133, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESim.all.DeleteProfileAsync (HStr_profileId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_profileId);
      end return;
   end;

   function DownloadProfileMetadataAsync
   (
      this : in out ESim;
      activationCode : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activationCode : WinRt.HString := To_HString (activationCode);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimDownloadProfileMetadataResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimDownloadProfileMetadataResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult;
      m_IID            : aliased WinRt.IID := (1593664406, 18064, 24146, (130, 124, 27, 82, 93, 35, 216, 152 )); -- Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult;
      m_HandlerIID     : aliased WinRt.IID := (2148349334, 64267, 20506, (189, 166, 128, 36, 9, 193, 234, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimDownloadProfileMetadataResult.Kind := new AsyncOperationCompletedHandler_ESimDownloadProfileMetadataResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimDownloadProfileMetadataResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimDownloadProfileMetadataResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimDownloadProfileMetadataResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimDownloadProfileMetadataResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult do
         Hr := this.m_IESim.all.DownloadProfileMetadataAsync (HStr_activationCode, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimDownloadProfileMetadataResult := new Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult;
                  Retval.m_IESimDownloadProfileMetadataResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_activationCode);
      end return;
   end;

   function ResetAsync
   (
      this : in out ESim
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (3709198969, 4726, 22667, (185, 240, 17, 185, 127, 39, 4, 82 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (361264424, 64063, 23266, (189, 127, 17, 25, 230, 45, 133, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESim.all.ResetAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_ProfileChanged
   (
      this : in out ESim;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IESim.all.add_ProfileChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ProfileChanged
   (
      this : in out ESim;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESim.all.remove_ProfileChanged (token);
   end;

   function Discover
   (
      this : in out ESim
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IESim2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimDiscoverResult;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IESim_Interface, WinRt.Windows.Networking.NetworkOperators.IESim2, WinRt.Windows.Networking.NetworkOperators.IID_IESim2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult do
         m_Interface := QInterface (this.m_IESim.all);
         Hr := m_Interface.Discover (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IESimDiscoverResult := new Windows.Networking.NetworkOperators.IESimDiscoverResult;
         Retval.m_IESimDiscoverResult.all := m_ComRetVal;
      end return;
   end;

   function Discover
   (
      this : in out ESim;
      serverAddress : WinRt.WString;
      matchingId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IESim2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimDiscoverResult;
      HStr_serverAddress : WinRt.HString := To_HString (serverAddress);
      HStr_matchingId : WinRt.HString := To_HString (matchingId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IESim_Interface, WinRt.Windows.Networking.NetworkOperators.IESim2, WinRt.Windows.Networking.NetworkOperators.IID_IESim2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult do
         m_Interface := QInterface (this.m_IESim.all);
         Hr := m_Interface.Discover (HStr_serverAddress, HStr_matchingId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IESimDiscoverResult := new Windows.Networking.NetworkOperators.IESimDiscoverResult;
         Retval.m_IESimDiscoverResult.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_serverAddress);
         Hr := WindowsDeleteString (HStr_matchingId);
      end return;
   end;

   function DiscoverAsync
   (
      this : in out ESim
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IESim2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimDiscoverResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimDiscoverResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimDiscoverResult;
      m_IID            : aliased WinRt.IID := (2214938697, 19280, 22069, (188, 201, 118, 39, 58, 60, 80, 7 )); -- Windows.Networking.NetworkOperators.ESimDiscoverResult;
      m_HandlerIID     : aliased WinRt.IID := (3847919519, 2148, 23069, (186, 132, 88, 61, 212, 132, 183, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimDiscoverResult.Kind := new AsyncOperationCompletedHandler_ESimDiscoverResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimDiscoverResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimDiscoverResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimDiscoverResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimDiscoverResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IESim_Interface, WinRt.Windows.Networking.NetworkOperators.IESim2, WinRt.Windows.Networking.NetworkOperators.IID_IESim2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult do
         m_Interface := QInterface (this.m_IESim.all);
         Hr := m_Interface.DiscoverAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimDiscoverResult := new Windows.Networking.NetworkOperators.IESimDiscoverResult;
                  Retval.m_IESimDiscoverResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function DiscoverAsync
   (
      this : in out ESim;
      serverAddress : WinRt.WString;
      matchingId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IESim2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_serverAddress : WinRt.HString := To_HString (serverAddress);
      HStr_matchingId : WinRt.HString := To_HString (matchingId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimDiscoverResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimDiscoverResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimDiscoverResult;
      m_IID            : aliased WinRt.IID := (2214938697, 19280, 22069, (188, 201, 118, 39, 58, 60, 80, 7 )); -- Windows.Networking.NetworkOperators.ESimDiscoverResult;
      m_HandlerIID     : aliased WinRt.IID := (3847919519, 2148, 23069, (186, 132, 88, 61, 212, 132, 183, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimDiscoverResult.Kind := new AsyncOperationCompletedHandler_ESimDiscoverResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimDiscoverResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimDiscoverResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimDiscoverResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimDiscoverResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IESim_Interface, WinRt.Windows.Networking.NetworkOperators.IESim2, WinRt.Windows.Networking.NetworkOperators.IID_IESim2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResult do
         m_Interface := QInterface (this.m_IESim.all);
         Hr := m_Interface.DiscoverAsync (HStr_serverAddress, HStr_matchingId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimDiscoverResult := new Windows.Networking.NetworkOperators.IESimDiscoverResult;
                  Retval.m_IESimDiscoverResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_serverAddress);
         Hr := WindowsDeleteString (HStr_matchingId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimAddedEventArgs

   procedure Initialize (this : in out ESimAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimAddedEventArgs, IESimAddedEventArgs_Ptr);
   begin
      if this.m_IESimAddedEventArgs /= null then
         if this.m_IESimAddedEventArgs.all /= null then
            RefCount := this.m_IESimAddedEventArgs.all.Release;
            Free (this.m_IESimAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimAddedEventArgs

   function get_ESim
   (
      this : in out ESimAddedEventArgs
   )
   return WinRt.Windows.Networking.NetworkOperators.ESim'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESim;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESim do
         Hr := this.m_IESimAddedEventArgs.all.get_ESim (m_ComRetVal'Access);
         Retval.m_IESim := new Windows.Networking.NetworkOperators.IESim;
         Retval.m_IESim.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimDiscoverEvent

   procedure Initialize (this : in out ESimDiscoverEvent) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimDiscoverEvent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimDiscoverEvent, IESimDiscoverEvent_Ptr);
   begin
      if this.m_IESimDiscoverEvent /= null then
         if this.m_IESimDiscoverEvent.all /= null then
            RefCount := this.m_IESimDiscoverEvent.all.Release;
            Free (this.m_IESimDiscoverEvent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimDiscoverEvent

   function get_MatchingId
   (
      this : in out ESimDiscoverEvent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimDiscoverEvent.all.get_MatchingId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RspServerAddress
   (
      this : in out ESimDiscoverEvent
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimDiscoverEvent.all.get_RspServerAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimDiscoverResult

   procedure Initialize (this : in out ESimDiscoverResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimDiscoverResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimDiscoverResult, IESimDiscoverResult_Ptr);
   begin
      if this.m_IESimDiscoverResult /= null then
         if this.m_IESimDiscoverResult.all /= null then
            RefCount := this.m_IESimDiscoverResult.all.Release;
            Free (this.m_IESimDiscoverResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimDiscoverResult

   function get_Events
   (
      this : in out ESimDiscoverResult
   )
   return IVectorView_IESimDiscoverEvent.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IESimDiscoverEvent.Kind;
   begin
      Hr := this.m_IESimDiscoverResult.all.get_Events (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IESimDiscoverEvent (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Kind
   (
      this : in out ESimDiscoverResult
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimDiscoverResultKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimDiscoverResultKind;
   begin
      Hr := this.m_IESimDiscoverResult.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProfileMetadata
   (
      this : in out ESimDiscoverResult
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimProfileMetadata'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimProfileMetadata;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimProfileMetadata do
         Hr := this.m_IESimDiscoverResult.all.get_ProfileMetadata (m_ComRetVal'Access);
         Retval.m_IESimProfileMetadata := new Windows.Networking.NetworkOperators.IESimProfileMetadata;
         Retval.m_IESimProfileMetadata.all := m_ComRetVal;
      end return;
   end;

   function get_Result
   (
      this : in out ESimDiscoverResult
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimOperationResult;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimDiscoverResult.all.get_Result (m_ComRetVal'Access);
         Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
         Retval.m_IESimOperationResult.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimDownloadProfileMetadataResult

   procedure Initialize (this : in out ESimDownloadProfileMetadataResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimDownloadProfileMetadataResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimDownloadProfileMetadataResult, IESimDownloadProfileMetadataResult_Ptr);
   begin
      if this.m_IESimDownloadProfileMetadataResult /= null then
         if this.m_IESimDownloadProfileMetadataResult.all /= null then
            RefCount := this.m_IESimDownloadProfileMetadataResult.all.Release;
            Free (this.m_IESimDownloadProfileMetadataResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimDownloadProfileMetadataResult

   function get_Result
   (
      this : in out ESimDownloadProfileMetadataResult
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimOperationResult;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimDownloadProfileMetadataResult.all.get_Result (m_ComRetVal'Access);
         Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
         Retval.m_IESimOperationResult.all := m_ComRetVal;
      end return;
   end;

   function get_ProfileMetadata
   (
      this : in out ESimDownloadProfileMetadataResult
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimProfileMetadata'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimProfileMetadata;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimProfileMetadata do
         Hr := this.m_IESimDownloadProfileMetadataResult.all.get_ProfileMetadata (m_ComRetVal'Access);
         Retval.m_IESimProfileMetadata := new Windows.Networking.NetworkOperators.IESimProfileMetadata;
         Retval.m_IESimProfileMetadata.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ESimManager is

      function get_ServiceInfo
      return WinRt.Windows.Networking.NetworkOperators.ESimServiceInfo is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.ESimManager");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IESimManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimServiceInfo;
      begin
         return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimServiceInfo do
            Hr := RoGetActivationFactory (m_hString, IID_IESimManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.get_ServiceInfo (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IESimServiceInfo := new Windows.Networking.NetworkOperators.IESimServiceInfo;
               Retval.m_IESimServiceInfo.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function TryCreateESimWatcher
      return WinRt.Windows.Networking.NetworkOperators.ESimWatcher is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.ESimManager");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IESimManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimWatcher;
      begin
         return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimWatcher do
            Hr := RoGetActivationFactory (m_hString, IID_IESimManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.TryCreateESimWatcher (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IESimWatcher := new Windows.Networking.NetworkOperators.IESimWatcher;
               Retval.m_IESimWatcher.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function add_ServiceInfoChanged
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.ESimManager");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IESimManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IESimManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ServiceInfoChanged (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ServiceInfoChanged
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.ESimManager");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IESimManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IESimManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ServiceInfoChanged (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end ESimManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimOperationResult

   procedure Initialize (this : in out ESimOperationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimOperationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimOperationResult, IESimOperationResult_Ptr);
   begin
      if this.m_IESimOperationResult /= null then
         if this.m_IESimOperationResult.all /= null then
            RefCount := this.m_IESimOperationResult.all.Release;
            Free (this.m_IESimOperationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimOperationResult

   function get_Status
   (
      this : in out ESimOperationResult
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimOperationStatus;
   begin
      Hr := this.m_IESimOperationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimPolicy

   procedure Initialize (this : in out ESimPolicy) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimPolicy) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimPolicy, IESimPolicy_Ptr);
   begin
      if this.m_IESimPolicy /= null then
         if this.m_IESimPolicy.all /= null then
            RefCount := this.m_IESimPolicy.all.Release;
            Free (this.m_IESimPolicy);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimPolicy

   function get_ShouldEnableManagingUi
   (
      this : in out ESimPolicy
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IESimPolicy.all.get_ShouldEnableManagingUi (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimProfile

   procedure Initialize (this : in out ESimProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimProfile, IESimProfile_Ptr);
   begin
      if this.m_IESimProfile /= null then
         if this.m_IESimProfile.all /= null then
            RefCount := this.m_IESimProfile.all.Release;
            Free (this.m_IESimProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimProfile

   function get_Class
   (
      this : in out ESimProfile
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimProfileClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimProfileClass;
   begin
      Hr := this.m_IESimProfile.all.get_Class (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Nickname
   (
      this : in out ESimProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimProfile.all.get_Nickname (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Policy
   (
      this : in out ESimProfile
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimProfilePolicy'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimProfilePolicy;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimProfilePolicy do
         Hr := this.m_IESimProfile.all.get_Policy (m_ComRetVal'Access);
         Retval.m_IESimProfilePolicy := new Windows.Networking.NetworkOperators.IESimProfilePolicy;
         Retval.m_IESimProfilePolicy.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out ESimProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimProfile.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProviderIcon
   (
      this : in out ESimProfile
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IESimProfile.all.get_ProviderIcon (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProviderId
   (
      this : in out ESimProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimProfile.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProviderName
   (
      this : in out ESimProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimProfile.all.get_ProviderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out ESimProfile
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimProfileState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimProfileState;
   begin
      Hr := this.m_IESimProfile.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function DisableAsync
   (
      this : in out ESimProfile
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (3709198969, 4726, 22667, (185, 240, 17, 185, 127, 39, 4, 82 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (361264424, 64063, 23266, (189, 127, 17, 25, 230, 45, 133, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimProfile.all.DisableAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function EnableAsync
   (
      this : in out ESimProfile
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (3709198969, 4726, 22667, (185, 240, 17, 185, 127, 39, 4, 82 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (361264424, 64063, 23266, (189, 127, 17, 25, 230, 45, 133, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimProfile.all.EnableAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SetNicknameAsync
   (
      this : in out ESimProfile;
      newNickname : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_newNickname : WinRt.HString := To_HString (newNickname);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (3709198969, 4726, 22667, (185, 240, 17, 185, 127, 39, 4, 82 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (361264424, 64063, 23266, (189, 127, 17, 25, 230, 45, 133, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimProfile.all.SetNicknameAsync (HStr_newNickname, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_newNickname);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimProfileMetadata

   procedure Initialize (this : in out ESimProfileMetadata) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimProfileMetadata) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimProfileMetadata, IESimProfileMetadata_Ptr);
   begin
      if this.m_IESimProfileMetadata /= null then
         if this.m_IESimProfileMetadata.all /= null then
            RefCount := this.m_IESimProfileMetadata.all.Release;
            Free (this.m_IESimProfileMetadata);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimProfileMetadata

   function get_IsConfirmationCodeRequired
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IESimProfileMetadata.all.get_IsConfirmationCodeRequired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Policy
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimProfilePolicy'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESimProfilePolicy;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimProfilePolicy do
         Hr := this.m_IESimProfileMetadata.all.get_Policy (m_ComRetVal'Access);
         Retval.m_IESimProfilePolicy := new Windows.Networking.NetworkOperators.IESimProfilePolicy;
         Retval.m_IESimProfilePolicy.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimProfileMetadata.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProviderIcon
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IESimProfileMetadata.all.get_ProviderIcon (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProviderId
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimProfileMetadata.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProviderName
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IESimProfileMetadata.all.get_ProviderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimProfileMetadataState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimProfileMetadataState;
   begin
      Hr := this.m_IESimProfileMetadata.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function DenyInstallAsync
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (3709198969, 4726, 22667, (185, 240, 17, 185, 127, 39, 4, 82 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (361264424, 64063, 23266, (189, 127, 17, 25, 230, 45, 133, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimProfileMetadata.all.DenyInstallAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConfirmInstallAsync
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (4044557791, 26636, 21908, (162, 236, 171, 203, 12, 82, 17, 67 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (2069802077, 56465, 20593, (169, 159, 37, 107, 79, 181, 99, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimProfileMetadata.all.ConfirmInstallAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConfirmInstallAsync
   (
      this : in out ESimProfileMetadata;
      confirmationCode : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_confirmationCode : WinRt.HString := To_HString (confirmationCode);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (4044557791, 26636, 21908, (162, 236, 171, 203, 12, 82, 17, 67 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (2069802077, 56465, 20593, (169, 159, 37, 107, 79, 181, 99, 98 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimProfileMetadata.all.ConfirmInstallAsync (HStr_confirmationCode, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_confirmationCode);
      end return;
   end;

   function PostponeInstallAsync
   (
      this : in out ESimProfileMetadata
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ESimOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ESimOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IESimOperationResult;
      m_IID            : aliased WinRt.IID := (3709198969, 4726, 22667, (185, 240, 17, 185, 127, 39, 4, 82 )); -- Windows.Networking.NetworkOperators.ESimOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (361264424, 64063, 23266, (189, 127, 17, 25, 230, 45, 133, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_ESimOperationResult.Kind := new AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ESimOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ESimOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ESimOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_ESimOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESimOperationResult do
         Hr := this.m_IESimProfileMetadata.all.PostponeInstallAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IESimOperationResult := new Windows.Networking.NetworkOperators.IESimOperationResult;
                  Retval.m_IESimOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_StateChanged
   (
      this : in out ESimProfileMetadata;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IESimProfileMetadata.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out ESimProfileMetadata;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimProfileMetadata.all.remove_StateChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimProfilePolicy

   procedure Initialize (this : in out ESimProfilePolicy) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimProfilePolicy) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimProfilePolicy, IESimProfilePolicy_Ptr);
   begin
      if this.m_IESimProfilePolicy /= null then
         if this.m_IESimProfilePolicy.all /= null then
            RefCount := this.m_IESimProfilePolicy.all.Release;
            Free (this.m_IESimProfilePolicy);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimProfilePolicy

   function get_CanDelete
   (
      this : in out ESimProfilePolicy
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IESimProfilePolicy.all.get_CanDelete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanDisable
   (
      this : in out ESimProfilePolicy
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IESimProfilePolicy.all.get_CanDisable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsManagedByEnterprise
   (
      this : in out ESimProfilePolicy
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IESimProfilePolicy.all.get_IsManagedByEnterprise (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimRemovedEventArgs

   procedure Initialize (this : in out ESimRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimRemovedEventArgs, IESimRemovedEventArgs_Ptr);
   begin
      if this.m_IESimRemovedEventArgs /= null then
         if this.m_IESimRemovedEventArgs.all /= null then
            RefCount := this.m_IESimRemovedEventArgs.all.Release;
            Free (this.m_IESimRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimRemovedEventArgs

   function get_ESim
   (
      this : in out ESimRemovedEventArgs
   )
   return WinRt.Windows.Networking.NetworkOperators.ESim'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESim;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESim do
         Hr := this.m_IESimRemovedEventArgs.all.get_ESim (m_ComRetVal'Access);
         Retval.m_IESim := new Windows.Networking.NetworkOperators.IESim;
         Retval.m_IESim.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimServiceInfo

   procedure Initialize (this : in out ESimServiceInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimServiceInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimServiceInfo, IESimServiceInfo_Ptr);
   begin
      if this.m_IESimServiceInfo /= null then
         if this.m_IESimServiceInfo.all /= null then
            RefCount := this.m_IESimServiceInfo.all.Release;
            Free (this.m_IESimServiceInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimServiceInfo

   function get_AuthenticationPreference
   (
      this : in out ESimServiceInfo
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimAuthenticationPreference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimAuthenticationPreference;
   begin
      Hr := this.m_IESimServiceInfo.all.get_AuthenticationPreference (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsESimUiEnabled
   (
      this : in out ESimServiceInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IESimServiceInfo.all.get_IsESimUiEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimUpdatedEventArgs

   procedure Initialize (this : in out ESimUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimUpdatedEventArgs, IESimUpdatedEventArgs_Ptr);
   begin
      if this.m_IESimUpdatedEventArgs /= null then
         if this.m_IESimUpdatedEventArgs.all /= null then
            RefCount := this.m_IESimUpdatedEventArgs.all.Release;
            Free (this.m_IESimUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimUpdatedEventArgs

   function get_ESim
   (
      this : in out ESimUpdatedEventArgs
   )
   return WinRt.Windows.Networking.NetworkOperators.ESim'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IESim;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ESim do
         Hr := this.m_IESimUpdatedEventArgs.all.get_ESim (m_ComRetVal'Access);
         Retval.m_IESim := new Windows.Networking.NetworkOperators.IESim;
         Retval.m_IESim.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ESimWatcher

   procedure Initialize (this : in out ESimWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out ESimWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IESimWatcher, IESimWatcher_Ptr);
   begin
      if this.m_IESimWatcher /= null then
         if this.m_IESimWatcher.all /= null then
            RefCount := this.m_IESimWatcher.all.Release;
            Free (this.m_IESimWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ESimWatcher

   function get_Status
   (
      this : in out ESimWatcher
   )
   return WinRt.Windows.Networking.NetworkOperators.ESimWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.ESimWatcherStatus;
   begin
      Hr := this.m_IESimWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out ESimWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out ESimWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimWatcher.all.Stop;
   end;

   function add_Added
   (
      this : in out ESimWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IESimWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out ESimWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimWatcher.all.remove_Added (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out ESimWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IESimWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out ESimWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Removed
   (
      this : in out ESimWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IESimWatcher.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out ESimWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimWatcher.all.remove_Removed (token);
   end;

   function add_Stopped
   (
      this : in out ESimWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IESimWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out ESimWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimWatcher.all.remove_Stopped (token);
   end;

   function add_Updated
   (
      this : in out ESimWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IESimWatcher.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out ESimWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IESimWatcher.all.remove_Updated (token);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body FdnAccessManager is

      function RequestUnlockAsync
      (
         contactListId : WinRt.WString
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.FdnAccessManager");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IFdnAccessManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_contactListId : WinRt.HString := To_HString (contactListId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IFdnAccessManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestUnlockAsync (HStr_contactListId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contactListId);
         return m_RetVal;
      end;

   end FdnAccessManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HotspotAuthenticationContext

   procedure Initialize (this : in out HotspotAuthenticationContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out HotspotAuthenticationContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHotspotAuthenticationContext, IHotspotAuthenticationContext_Ptr);
   begin
      if this.m_IHotspotAuthenticationContext /= null then
         if this.m_IHotspotAuthenticationContext.all /= null then
            RefCount := this.m_IHotspotAuthenticationContext.all.Release;
            Free (this.m_IHotspotAuthenticationContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HotspotAuthenticationContext

   function TryGetAuthenticationContext
   (
      evenToken : WinRt.WString;
      context : access Windows.Networking.NetworkOperators.IHotspotAuthenticationContext
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.HotspotAuthenticationContext");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IHotspotAuthenticationContextStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_evenToken : WinRt.HString := To_HString (evenToken);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHotspotAuthenticationContextStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryGetAuthenticationContext (HStr_evenToken, context, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_evenToken);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HotspotAuthenticationContext

   function get_WirelessNetworkId
   (
      this : in out HotspotAuthenticationContext
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHotspotAuthenticationContext.all.get_WirelessNetworkId (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   function get_NetworkAdapter
   (
      this : in out HotspotAuthenticationContext
   )
   return WinRt.Windows.Networking.Connectivity.NetworkAdapter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkAdapter;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkAdapter do
         Hr := this.m_IHotspotAuthenticationContext.all.get_NetworkAdapter (m_ComRetVal'Access);
         Retval.m_INetworkAdapter := new Windows.Networking.Connectivity.INetworkAdapter;
         Retval.m_INetworkAdapter.all := m_ComRetVal;
      end return;
   end;

   function get_RedirectMessageUrl
   (
      this : in out HotspotAuthenticationContext
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHotspotAuthenticationContext.all.get_RedirectMessageUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_RedirectMessageXml
   (
      this : in out HotspotAuthenticationContext
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_IHotspotAuthenticationContext.all.get_RedirectMessageXml (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   function get_AuthenticationUrl
   (
      this : in out HotspotAuthenticationContext
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHotspotAuthenticationContext.all.get_AuthenticationUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure IssueCredentials
   (
      this : in out HotspotAuthenticationContext;
      userName : WinRt.WString;
      password : WinRt.WString;
      extraParameters : WinRt.WString;
      markAsManualConnectOnFailure : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userName : WinRt.HString := To_HString (userName);
      HStr_password : WinRt.HString := To_HString (password);
      HStr_extraParameters : WinRt.HString := To_HString (extraParameters);
   begin
      Hr := this.m_IHotspotAuthenticationContext.all.IssueCredentials (HStr_userName, HStr_password, HStr_extraParameters, markAsManualConnectOnFailure);
      Hr := WindowsDeleteString (HStr_userName);
      Hr := WindowsDeleteString (HStr_password);
      Hr := WindowsDeleteString (HStr_extraParameters);
   end;

   procedure AbortAuthentication
   (
      this : in out HotspotAuthenticationContext;
      markAsManual : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHotspotAuthenticationContext.all.AbortAuthentication (markAsManual);
   end;

   procedure SkipAuthentication
   (
      this : in out HotspotAuthenticationContext
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHotspotAuthenticationContext.all.SkipAuthentication;
   end;

   procedure TriggerAttentionRequired
   (
      this : in out HotspotAuthenticationContext;
      packageRelativeApplicationId : WinRt.WString;
      applicationParameters : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageRelativeApplicationId : WinRt.HString := To_HString (packageRelativeApplicationId);
      HStr_applicationParameters : WinRt.HString := To_HString (applicationParameters);
   begin
      Hr := this.m_IHotspotAuthenticationContext.all.TriggerAttentionRequired (HStr_packageRelativeApplicationId, HStr_applicationParameters);
      Hr := WindowsDeleteString (HStr_packageRelativeApplicationId);
      Hr := WindowsDeleteString (HStr_applicationParameters);
   end;

   function IssueCredentialsAsync
   (
      this : in out HotspotAuthenticationContext;
      userName : WinRt.WString;
      password : WinRt.WString;
      extraParameters : WinRt.WString;
      markAsManualConnectOnFailure : WinRt.Boolean
   )
   return WinRt.Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IHotspotAuthenticationContext2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_userName : WinRt.HString := To_HString (userName);
      HStr_password : WinRt.HString := To_HString (password);
      HStr_extraParameters : WinRt.HString := To_HString (extraParameters);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HotspotCredentialsAuthenticationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HotspotCredentialsAuthenticationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult;
      m_IID            : aliased WinRt.IID := (1378320856, 10696, 23945, (137, 55, 29, 28, 32, 50, 240, 200 )); -- Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult;
      m_HandlerIID     : aliased WinRt.IID := (2133150699, 18207, 20480, (148, 206, 16, 44, 195, 51, 5, 95 ));
      m_Handler        : AsyncOperationCompletedHandler_HotspotCredentialsAuthenticationResult.Kind := new AsyncOperationCompletedHandler_HotspotCredentialsAuthenticationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HotspotCredentialsAuthenticationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HotspotCredentialsAuthenticationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HotspotCredentialsAuthenticationResult.Kind_Delegate, AsyncOperationCompletedHandler_HotspotCredentialsAuthenticationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IHotspotAuthenticationContext_Interface, WinRt.Windows.Networking.NetworkOperators.IHotspotAuthenticationContext2, WinRt.Windows.Networking.NetworkOperators.IID_IHotspotAuthenticationContext2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult do
         m_Interface := QInterface (this.m_IHotspotAuthenticationContext.all);
         Hr := m_Interface.IssueCredentialsAsync (HStr_userName, HStr_password, HStr_extraParameters, markAsManualConnectOnFailure, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHotspotCredentialsAuthenticationResult := new Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult;
                  Retval.m_IHotspotCredentialsAuthenticationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_userName);
         Hr := WindowsDeleteString (HStr_password);
         Hr := WindowsDeleteString (HStr_extraParameters);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HotspotAuthenticationEventDetails

   procedure Initialize (this : in out HotspotAuthenticationEventDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out HotspotAuthenticationEventDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHotspotAuthenticationEventDetails, IHotspotAuthenticationEventDetails_Ptr);
   begin
      if this.m_IHotspotAuthenticationEventDetails /= null then
         if this.m_IHotspotAuthenticationEventDetails.all /= null then
            RefCount := this.m_IHotspotAuthenticationEventDetails.all.Release;
            Free (this.m_IHotspotAuthenticationEventDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HotspotAuthenticationEventDetails

   function get_EventToken
   (
      this : in out HotspotAuthenticationEventDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IHotspotAuthenticationEventDetails.all.get_EventToken (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HotspotCredentialsAuthenticationResult

   procedure Initialize (this : in out HotspotCredentialsAuthenticationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out HotspotCredentialsAuthenticationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHotspotCredentialsAuthenticationResult, IHotspotCredentialsAuthenticationResult_Ptr);
   begin
      if this.m_IHotspotCredentialsAuthenticationResult /= null then
         if this.m_IHotspotCredentialsAuthenticationResult.all /= null then
            RefCount := this.m_IHotspotCredentialsAuthenticationResult.all.Release;
            Free (this.m_IHotspotCredentialsAuthenticationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HotspotCredentialsAuthenticationResult

   function get_HasNetworkErrorOccurred
   (
      this : in out HotspotCredentialsAuthenticationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHotspotCredentialsAuthenticationResult.all.get_HasNetworkErrorOccurred (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResponseCode
   (
      this : in out HotspotCredentialsAuthenticationResult
   )
   return WinRt.Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode;
   begin
      Hr := this.m_IHotspotCredentialsAuthenticationResult.all.get_ResponseCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LogoffUrl
   (
      this : in out HotspotCredentialsAuthenticationResult
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IHotspotCredentialsAuthenticationResult.all.get_LogoffUrl (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_AuthenticationReplyXml
   (
      this : in out HotspotCredentialsAuthenticationResult
   )
   return WinRt.Windows.Data.Xml.Dom.XmlDocument'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Data.Xml.Dom.IXmlDocument;
   begin
      return RetVal : WinRt.Windows.Data.Xml.Dom.XmlDocument do
         Hr := this.m_IHotspotCredentialsAuthenticationResult.all.get_AuthenticationReplyXml (m_ComRetVal'Access);
         Retval.m_IXmlDocument := new Windows.Data.Xml.Dom.IXmlDocument;
         Retval.m_IXmlDocument.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownCSimFilePaths is

      function get_EFSpn
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownCSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownCSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownCSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EFSpn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid1
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownCSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownCSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownCSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid2
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownCSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownCSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownCSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

   end KnownCSimFilePaths;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownRuimFilePaths is

      function get_EFSpn_KnownRuimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownRuimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownRuimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRuimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EFSpn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid1_KnownRuimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownRuimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownRuimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRuimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid2_KnownRuimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownRuimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownRuimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownRuimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

   end KnownRuimFilePaths;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownSimFilePaths is

      function get_EFOns
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EFOns (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_EFSpn_KnownSimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EFSpn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid1_KnownSimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid2_KnownSimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

   end KnownSimFilePaths;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownUSimFilePaths is

      function get_EFSpn_KnownUSimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownUSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownUSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EFSpn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_EFOpl
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownUSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownUSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EFOpl (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_EFPnn
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownUSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownUSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EFPnn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid1_KnownUSimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownUSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownUSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_Gid2_KnownUSimFilePaths
      return IVectorView_UInt32.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.KnownUSimFilePaths");
         m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IKnownUSimFilePathsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_UInt32.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownUSimFilePathsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gid2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

   end KnownUSimFilePaths;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandAccount

   procedure Initialize (this : in out MobileBroadbandAccount) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandAccount) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandAccount, IMobileBroadbandAccount_Ptr);
   begin
      if this.m_IMobileBroadbandAccount /= null then
         if this.m_IMobileBroadbandAccount.all /= null then
            RefCount := this.m_IMobileBroadbandAccount.all.Release;
            Free (this.m_IMobileBroadbandAccount);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MobileBroadbandAccount

   function get_AvailableNetworkAccountIds
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandAccount");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccountStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMobileBroadbandAccountStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AvailableNetworkAccountIds (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function CreateFromNetworkAccountId
   (
      networkAccountId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandAccount is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandAccount");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccountStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandAccount;
      HStr_networkAccountId : WinRt.HString := To_HString (networkAccountId);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandAccount do
         Hr := RoGetActivationFactory (m_hString, IID_IMobileBroadbandAccountStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNetworkAccountId (HStr_networkAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMobileBroadbandAccount := new Windows.Networking.NetworkOperators.IMobileBroadbandAccount;
            Retval.m_IMobileBroadbandAccount.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_networkAccountId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandAccount

   function get_NetworkAccountId
   (
      this : in out MobileBroadbandAccount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandAccount.all.get_NetworkAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceProviderGuid
   (
      this : in out MobileBroadbandAccount
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IMobileBroadbandAccount.all.get_ServiceProviderGuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceProviderName
   (
      this : in out MobileBroadbandAccount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandAccount.all.get_ServiceProviderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CurrentNetwork
   (
      this : in out MobileBroadbandAccount
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandNetwork'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandNetwork;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandNetwork do
         Hr := this.m_IMobileBroadbandAccount.all.get_CurrentNetwork (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandNetwork := new Windows.Networking.NetworkOperators.IMobileBroadbandNetwork;
         Retval.m_IMobileBroadbandNetwork.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentDeviceInformation
   (
      this : in out MobileBroadbandAccount
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation do
         Hr := this.m_IMobileBroadbandAccount.all.get_CurrentDeviceInformation (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandDeviceInformation := new Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation;
         Retval.m_IMobileBroadbandDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function GetConnectionProfiles
   (
      this : in out MobileBroadbandAccount
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccount2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccount_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccount2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandAccount2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandAccount.all);
      Hr := m_Interface.GetConnectionProfiles (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AccountExperienceUrl
   (
      this : in out MobileBroadbandAccount
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccount3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccount_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandAccount3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandAccount3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IMobileBroadbandAccount.all);
         Hr := m_Interface.get_AccountExperienceUrl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandAccountEventArgs

   procedure Initialize (this : in out MobileBroadbandAccountEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandAccountEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandAccountEventArgs, IMobileBroadbandAccountEventArgs_Ptr);
   begin
      if this.m_IMobileBroadbandAccountEventArgs /= null then
         if this.m_IMobileBroadbandAccountEventArgs.all /= null then
            RefCount := this.m_IMobileBroadbandAccountEventArgs.all.Release;
            Free (this.m_IMobileBroadbandAccountEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandAccountEventArgs

   function get_NetworkAccountId
   (
      this : in out MobileBroadbandAccountEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandAccountEventArgs.all.get_NetworkAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandAccountUpdatedEventArgs

   procedure Initialize (this : in out MobileBroadbandAccountUpdatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandAccountUpdatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandAccountUpdatedEventArgs, IMobileBroadbandAccountUpdatedEventArgs_Ptr);
   begin
      if this.m_IMobileBroadbandAccountUpdatedEventArgs /= null then
         if this.m_IMobileBroadbandAccountUpdatedEventArgs.all /= null then
            RefCount := this.m_IMobileBroadbandAccountUpdatedEventArgs.all.Release;
            Free (this.m_IMobileBroadbandAccountUpdatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandAccountUpdatedEventArgs

   function get_NetworkAccountId
   (
      this : in out MobileBroadbandAccountUpdatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandAccountUpdatedEventArgs.all.get_NetworkAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HasDeviceInformationChanged
   (
      this : in out MobileBroadbandAccountUpdatedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandAccountUpdatedEventArgs.all.get_HasDeviceInformationChanged (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNetworkChanged
   (
      this : in out MobileBroadbandAccountUpdatedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandAccountUpdatedEventArgs.all.get_HasNetworkChanged (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandAccountWatcher

   procedure Initialize (this : in out MobileBroadbandAccountWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandAccountWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandAccountWatcher, IMobileBroadbandAccountWatcher_Ptr);
   begin
      if this.m_IMobileBroadbandAccountWatcher /= null then
         if this.m_IMobileBroadbandAccountWatcher.all /= null then
            RefCount := this.m_IMobileBroadbandAccountWatcher.all.Release;
            Free (this.m_IMobileBroadbandAccountWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandAccountWatcher

   function Constructor return MobileBroadbandAccountWatcher is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher");
      m_ComRetVal  : aliased Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher;
   begin
      return RetVal : MobileBroadbandAccountWatcher do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMobileBroadbandAccountWatcher := new Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher;
            Retval.m_IMobileBroadbandAccountWatcher.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandAccountWatcher

   function add_AccountAdded
   (
      this : in out MobileBroadbandAccountWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.add_AccountAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AccountAdded
   (
      this : in out MobileBroadbandAccountWatcher;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.remove_AccountAdded (cookie);
   end;

   function add_AccountUpdated
   (
      this : in out MobileBroadbandAccountWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.add_AccountUpdated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AccountUpdated
   (
      this : in out MobileBroadbandAccountWatcher;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.remove_AccountUpdated (cookie);
   end;

   function add_AccountRemoved
   (
      this : in out MobileBroadbandAccountWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.add_AccountRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AccountRemoved
   (
      this : in out MobileBroadbandAccountWatcher;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.remove_AccountRemoved (cookie);
   end;

   function add_EnumerationCompleted
   (
      this : in out MobileBroadbandAccountWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out MobileBroadbandAccountWatcher;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.remove_EnumerationCompleted (cookie);
   end;

   function add_Stopped
   (
      this : in out MobileBroadbandAccountWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out MobileBroadbandAccountWatcher;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.remove_Stopped (cookie);
   end;

   function get_Status
   (
      this : in out MobileBroadbandAccountWatcher
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out MobileBroadbandAccountWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out MobileBroadbandAccountWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandAccountWatcher.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandAntennaSar

   procedure Initialize (this : in out MobileBroadbandAntennaSar) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandAntennaSar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandAntennaSar, IMobileBroadbandAntennaSar_Ptr);
   begin
      if this.m_IMobileBroadbandAntennaSar /= null then
         if this.m_IMobileBroadbandAntennaSar.all /= null then
            RefCount := this.m_IMobileBroadbandAntennaSar.all.Release;
            Free (this.m_IMobileBroadbandAntennaSar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandAntennaSar

   function Constructor
   (
      antennaIndex : WinRt.Int32;
      sarBackoffIndex : WinRt.Int32
   )
   return MobileBroadbandAntennaSar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar");
      m_Factory    : access IMobileBroadbandAntennaSarFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar;
   begin
      return RetVal : MobileBroadbandAntennaSar do
         Hr := RoGetActivationFactory (m_hString, IID_IMobileBroadbandAntennaSarFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithIndex (antennaIndex, sarBackoffIndex, m_ComRetVal'Access);
            Retval.m_IMobileBroadbandAntennaSar := new Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar;
            Retval.m_IMobileBroadbandAntennaSar.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandAntennaSar

   function get_AntennaIndex
   (
      this : in out MobileBroadbandAntennaSar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMobileBroadbandAntennaSar.all.get_AntennaIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SarBackoffIndex
   (
      this : in out MobileBroadbandAntennaSar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMobileBroadbandAntennaSar.all.get_SarBackoffIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandCellCdma

   procedure Initialize (this : in out MobileBroadbandCellCdma) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandCellCdma) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandCellCdma, IMobileBroadbandCellCdma_Ptr);
   begin
      if this.m_IMobileBroadbandCellCdma /= null then
         if this.m_IMobileBroadbandCellCdma.all /= null then
            RefCount := this.m_IMobileBroadbandCellCdma.all.Release;
            Free (this.m_IMobileBroadbandCellCdma);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandCellCdma

   function get_BaseStationId
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_BaseStationId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BaseStationPNCode
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_BaseStationPNCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BaseStationLatitude
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_BaseStationLatitude (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BaseStationLongitude
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_BaseStationLongitude (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BaseStationLastBroadcastGpsTime
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_BaseStationLastBroadcastGpsTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NetworkId
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_NetworkId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PilotSignalStrengthInDB
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_PilotSignalStrengthInDB (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SystemId
   (
      this : in out MobileBroadbandCellCdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellCdma.all.get_SystemId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandCellGsm

   procedure Initialize (this : in out MobileBroadbandCellGsm) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandCellGsm) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandCellGsm, IMobileBroadbandCellGsm_Ptr);
   begin
      if this.m_IMobileBroadbandCellGsm /= null then
         if this.m_IMobileBroadbandCellGsm.all /= null then
            RefCount := this.m_IMobileBroadbandCellGsm.all.Release;
            Free (this.m_IMobileBroadbandCellGsm);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandCellGsm

   function get_BaseStationId
   (
      this : in out MobileBroadbandCellGsm
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellGsm.all.get_BaseStationId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CellId
   (
      this : in out MobileBroadbandCellGsm
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellGsm.all.get_CellId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ChannelNumber
   (
      this : in out MobileBroadbandCellGsm
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellGsm.all.get_ChannelNumber (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LocationAreaCode
   (
      this : in out MobileBroadbandCellGsm
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellGsm.all.get_LocationAreaCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProviderId
   (
      this : in out MobileBroadbandCellGsm
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandCellGsm.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ReceivedSignalStrengthInDBm
   (
      this : in out MobileBroadbandCellGsm
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellGsm.all.get_ReceivedSignalStrengthInDBm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TimingAdvanceInBitPeriods
   (
      this : in out MobileBroadbandCellGsm
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellGsm.all.get_TimingAdvanceInBitPeriods (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandCellLte

   procedure Initialize (this : in out MobileBroadbandCellLte) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandCellLte) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandCellLte, IMobileBroadbandCellLte_Ptr);
   begin
      if this.m_IMobileBroadbandCellLte /= null then
         if this.m_IMobileBroadbandCellLte.all /= null then
            RefCount := this.m_IMobileBroadbandCellLte.all.Release;
            Free (this.m_IMobileBroadbandCellLte);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandCellLte

   function get_CellId
   (
      this : in out MobileBroadbandCellLte
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_CellId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ChannelNumber
   (
      this : in out MobileBroadbandCellLte
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_ChannelNumber (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PhysicalCellId
   (
      this : in out MobileBroadbandCellLte
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_PhysicalCellId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProviderId
   (
      this : in out MobileBroadbandCellLte
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ReferenceSignalReceivedPowerInDBm
   (
      this : in out MobileBroadbandCellLte
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_ReferenceSignalReceivedPowerInDBm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ReferenceSignalReceivedQualityInDBm
   (
      this : in out MobileBroadbandCellLte
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_ReferenceSignalReceivedQualityInDBm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TimingAdvanceInBitPeriods
   (
      this : in out MobileBroadbandCellLte
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_TimingAdvanceInBitPeriods (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TrackingAreaCode
   (
      this : in out MobileBroadbandCellLte
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellLte.all.get_TrackingAreaCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandCellTdscdma

   procedure Initialize (this : in out MobileBroadbandCellTdscdma) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandCellTdscdma) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandCellTdscdma, IMobileBroadbandCellTdscdma_Ptr);
   begin
      if this.m_IMobileBroadbandCellTdscdma /= null then
         if this.m_IMobileBroadbandCellTdscdma.all /= null then
            RefCount := this.m_IMobileBroadbandCellTdscdma.all.Release;
            Free (this.m_IMobileBroadbandCellTdscdma);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandCellTdscdma

   function get_CellId
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_CellId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CellParameterId
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_CellParameterId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ChannelNumber
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_ChannelNumber (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LocationAreaCode
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_LocationAreaCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PathLossInDB
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_PathLossInDB (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProviderId
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ReceivedSignalCodePowerInDBm
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_ReceivedSignalCodePowerInDBm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TimingAdvanceInBitPeriods
   (
      this : in out MobileBroadbandCellTdscdma
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellTdscdma.all.get_TimingAdvanceInBitPeriods (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandCellUmts

   procedure Initialize (this : in out MobileBroadbandCellUmts) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandCellUmts) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandCellUmts, IMobileBroadbandCellUmts_Ptr);
   begin
      if this.m_IMobileBroadbandCellUmts /= null then
         if this.m_IMobileBroadbandCellUmts.all /= null then
            RefCount := this.m_IMobileBroadbandCellUmts.all.Release;
            Free (this.m_IMobileBroadbandCellUmts);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandCellUmts

   function get_CellId
   (
      this : in out MobileBroadbandCellUmts
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_CellId (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ChannelNumber
   (
      this : in out MobileBroadbandCellUmts
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_ChannelNumber (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LocationAreaCode
   (
      this : in out MobileBroadbandCellUmts
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_LocationAreaCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PathLossInDB
   (
      this : in out MobileBroadbandCellUmts
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_PathLossInDB (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PrimaryScramblingCode
   (
      this : in out MobileBroadbandCellUmts
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_PrimaryScramblingCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ProviderId
   (
      this : in out MobileBroadbandCellUmts
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ReceivedSignalCodePowerInDBm
   (
      this : in out MobileBroadbandCellUmts
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_ReceivedSignalCodePowerInDBm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SignalToNoiseRatioInDB
   (
      this : in out MobileBroadbandCellUmts
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellUmts.all.get_SignalToNoiseRatioInDB (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandCellsInfo

   procedure Initialize (this : in out MobileBroadbandCellsInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandCellsInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandCellsInfo, IMobileBroadbandCellsInfo_Ptr);
   begin
      if this.m_IMobileBroadbandCellsInfo /= null then
         if this.m_IMobileBroadbandCellsInfo.all /= null then
            RefCount := this.m_IMobileBroadbandCellsInfo.all.Release;
            Free (this.m_IMobileBroadbandCellsInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandCellsInfo

   function get_NeighboringCellsCdma
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellCdma.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellCdma.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_NeighboringCellsCdma (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellCdma (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NeighboringCellsGsm
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellGsm.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellGsm.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_NeighboringCellsGsm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellGsm (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NeighboringCellsLte
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellLte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellLte.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_NeighboringCellsLte (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellLte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NeighboringCellsTdscdma
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellTdscdma.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellTdscdma.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_NeighboringCellsTdscdma (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellTdscdma (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NeighboringCellsUmts
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellUmts.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellUmts.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_NeighboringCellsUmts (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellUmts (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServingCellsCdma
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellCdma.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellCdma.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_ServingCellsCdma (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellCdma (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServingCellsGsm
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellGsm.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellGsm.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_ServingCellsGsm (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellGsm (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServingCellsLte
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellLte.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellLte.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_ServingCellsLte (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellLte (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServingCellsTdscdma
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellTdscdma.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellTdscdma.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_ServingCellsTdscdma (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellTdscdma (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServingCellsUmts
   (
      this : in out MobileBroadbandCellsInfo
   )
   return IVectorView_IMobileBroadbandCellUmts.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandCellUmts.Kind;
   begin
      Hr := this.m_IMobileBroadbandCellsInfo.all.get_ServingCellsUmts (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandCellUmts (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceInformation

   procedure Initialize (this : in out MobileBroadbandDeviceInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceInformation, IMobileBroadbandDeviceInformation_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceInformation /= null then
         if this.m_IMobileBroadbandDeviceInformation.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceInformation.all.Release;
            Free (this.m_IMobileBroadbandDeviceInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceInformation

   function get_NetworkDeviceStatus
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkDeviceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.NetworkDeviceStatus;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_NetworkDeviceStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Manufacturer
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_Manufacturer (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Model
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_Model (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirmwareInformation
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_FirmwareInformation (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CellularClass
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.Windows.Devices.Sms.CellularClass is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.CellularClass;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_CellularClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DataClasses
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.Windows.Networking.NetworkOperators.DataClasses is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.DataClasses;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_DataClasses (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CustomDataClass
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_CustomDataClass (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MobileEquipmentId
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_MobileEquipmentId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TelephoneNumbers
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_TelephoneNumbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SubscriberId
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_SubscriberId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SimIccId
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_SimIccId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceType
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandDeviceType;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_DeviceType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CurrentRadioState
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandRadioState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandRadioState;
   begin
      Hr := this.m_IMobileBroadbandDeviceInformation.all.get_CurrentRadioState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PinManager
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandPinManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandDeviceInformation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinManager do
         m_Interface := QInterface (this.m_IMobileBroadbandDeviceInformation.all);
         Hr := m_Interface.get_PinManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMobileBroadbandPinManager := new Windows.Networking.NetworkOperators.IMobileBroadbandPinManager;
         Retval.m_IMobileBroadbandPinManager.all := m_ComRetVal;
      end return;
   end;

   function get_Revision
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandDeviceInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandDeviceInformation.all);
      Hr := m_Interface.get_Revision (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SerialNumber
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandDeviceInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandDeviceInformation.all);
      Hr := m_Interface.get_SerialNumber (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SimSpn
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandDeviceInformation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandDeviceInformation.all);
      Hr := m_Interface.get_SimSpn (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SimPnn
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandDeviceInformation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandDeviceInformation.all);
      Hr := m_Interface.get_SimPnn (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SimGid1
   (
      this : in out MobileBroadbandDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandDeviceInformation3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandDeviceInformation.all);
      Hr := m_Interface.get_SimGid1 (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceService

   procedure Initialize (this : in out MobileBroadbandDeviceService) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceService) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceService, IMobileBroadbandDeviceService_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceService /= null then
         if this.m_IMobileBroadbandDeviceService.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceService.all.Release;
            Free (this.m_IMobileBroadbandDeviceService);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceService

   function get_DeviceServiceId
   (
      this : in out MobileBroadbandDeviceService
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IMobileBroadbandDeviceService.all.get_DeviceServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedCommands
   (
      this : in out MobileBroadbandDeviceService
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IMobileBroadbandDeviceService.all.get_SupportedCommands (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function OpenDataSession
   (
      this : in out MobileBroadbandDeviceService
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession do
         Hr := this.m_IMobileBroadbandDeviceService.all.OpenDataSession (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandDeviceServiceDataSession := new Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession;
         Retval.m_IMobileBroadbandDeviceServiceDataSession.all := m_ComRetVal;
      end return;
   end;

   function OpenCommandSession
   (
      this : in out MobileBroadbandDeviceService
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession do
         Hr := this.m_IMobileBroadbandDeviceService.all.OpenCommandSession (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandDeviceServiceCommandSession := new Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession;
         Retval.m_IMobileBroadbandDeviceServiceCommandSession.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceServiceCommandResult

   procedure Initialize (this : in out MobileBroadbandDeviceServiceCommandResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceServiceCommandResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceServiceCommandResult, IMobileBroadbandDeviceServiceCommandResult_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceServiceCommandResult /= null then
         if this.m_IMobileBroadbandDeviceServiceCommandResult.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceServiceCommandResult.all.Release;
            Free (this.m_IMobileBroadbandDeviceServiceCommandResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceServiceCommandResult

   function get_StatusCode
   (
      this : in out MobileBroadbandDeviceServiceCommandResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceCommandResult.all.get_StatusCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResponseData
   (
      this : in out MobileBroadbandDeviceServiceCommandResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceCommandResult.all.get_ResponseData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceServiceCommandSession

   procedure Initialize (this : in out MobileBroadbandDeviceServiceCommandSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceServiceCommandSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceServiceCommandSession, IMobileBroadbandDeviceServiceCommandSession_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceServiceCommandSession /= null then
         if this.m_IMobileBroadbandDeviceServiceCommandSession.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceServiceCommandSession.all.Release;
            Free (this.m_IMobileBroadbandDeviceServiceCommandSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceServiceCommandSession

   function SendQueryCommandAsync
   (
      this : in out MobileBroadbandDeviceServiceCommandSession;
      commandId : WinRt.UInt32;
      data : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandDeviceServiceCommandResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandDeviceServiceCommandResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult;
      m_IID            : aliased WinRt.IID := (744962728, 27189, 20733, (148, 34, 54, 21, 161, 194, 140, 203 )); -- Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult;
      m_HandlerIID     : aliased WinRt.IID := (569429583, 36659, 24177, (164, 87, 221, 165, 83, 176, 214, 187 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandDeviceServiceCommandResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult do
         Hr := this.m_IMobileBroadbandDeviceServiceCommandSession.all.SendQueryCommandAsync (commandId, data, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandDeviceServiceCommandResult := new Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult;
                  Retval.m_IMobileBroadbandDeviceServiceCommandResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SendSetCommandAsync
   (
      this : in out MobileBroadbandDeviceServiceCommandSession;
      commandId : WinRt.UInt32;
      data : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandDeviceServiceCommandResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandDeviceServiceCommandResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult;
      m_IID            : aliased WinRt.IID := (744962728, 27189, 20733, (148, 34, 54, 21, 161, 194, 140, 203 )); -- Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult;
      m_HandlerIID     : aliased WinRt.IID := (569429583, 36659, 24177, (164, 87, 221, 165, 83, 176, 214, 187 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandDeviceServiceCommandResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandDeviceServiceCommandResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult do
         Hr := this.m_IMobileBroadbandDeviceServiceCommandSession.all.SendSetCommandAsync (commandId, data, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandDeviceServiceCommandResult := new Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult;
                  Retval.m_IMobileBroadbandDeviceServiceCommandResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure CloseSession
   (
      this : in out MobileBroadbandDeviceServiceCommandSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceCommandSession.all.CloseSession;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceServiceDataReceivedEventArgs

   procedure Initialize (this : in out MobileBroadbandDeviceServiceDataReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceServiceDataReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceServiceDataReceivedEventArgs, IMobileBroadbandDeviceServiceDataReceivedEventArgs_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceServiceDataReceivedEventArgs /= null then
         if this.m_IMobileBroadbandDeviceServiceDataReceivedEventArgs.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceServiceDataReceivedEventArgs.all.Release;
            Free (this.m_IMobileBroadbandDeviceServiceDataReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceServiceDataReceivedEventArgs

   function get_ReceivedData
   (
      this : in out MobileBroadbandDeviceServiceDataReceivedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceDataReceivedEventArgs.all.get_ReceivedData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceServiceDataSession

   procedure Initialize (this : in out MobileBroadbandDeviceServiceDataSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceServiceDataSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceServiceDataSession, IMobileBroadbandDeviceServiceDataSession_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceServiceDataSession /= null then
         if this.m_IMobileBroadbandDeviceServiceDataSession.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceServiceDataSession.all.Release;
            Free (this.m_IMobileBroadbandDeviceServiceDataSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceServiceDataSession

   procedure WriteDataAsync
   (
      this : in out MobileBroadbandDeviceServiceDataSession;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandDeviceServiceDataSession.all.WriteDataAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure CloseSession
   (
      this : in out MobileBroadbandDeviceServiceDataSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceDataSession.all.CloseSession;
   end;

   function add_DataReceived
   (
      this : in out MobileBroadbandDeviceServiceDataSession;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceDataSession.all.add_DataReceived (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DataReceived
   (
      this : in out MobileBroadbandDeviceServiceDataSession;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceDataSession.all.remove_DataReceived (eventCookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceServiceInformation

   procedure Initialize (this : in out MobileBroadbandDeviceServiceInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceServiceInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceServiceInformation, IMobileBroadbandDeviceServiceInformation_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceServiceInformation /= null then
         if this.m_IMobileBroadbandDeviceServiceInformation.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceServiceInformation.all.Release;
            Free (this.m_IMobileBroadbandDeviceServiceInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceServiceInformation

   function get_DeviceServiceId
   (
      this : in out MobileBroadbandDeviceServiceInformation
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceInformation.all.get_DeviceServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDataReadSupported
   (
      this : in out MobileBroadbandDeviceServiceInformation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceInformation.all.get_IsDataReadSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDataWriteSupported
   (
      this : in out MobileBroadbandDeviceServiceInformation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceInformation.all.get_IsDataWriteSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceServiceTriggerDetails

   procedure Initialize (this : in out MobileBroadbandDeviceServiceTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceServiceTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandDeviceServiceTriggerDetails, IMobileBroadbandDeviceServiceTriggerDetails_Ptr);
   begin
      if this.m_IMobileBroadbandDeviceServiceTriggerDetails /= null then
         if this.m_IMobileBroadbandDeviceServiceTriggerDetails.all /= null then
            RefCount := this.m_IMobileBroadbandDeviceServiceTriggerDetails.all.Release;
            Free (this.m_IMobileBroadbandDeviceServiceTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceServiceTriggerDetails

   function get_DeviceId
   (
      this : in out MobileBroadbandDeviceServiceTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceTriggerDetails.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DeviceServiceId
   (
      this : in out MobileBroadbandDeviceServiceTriggerDetails
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceTriggerDetails.all.get_DeviceServiceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReceivedData
   (
      this : in out MobileBroadbandDeviceServiceTriggerDetails
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMobileBroadbandDeviceServiceTriggerDetails.all.get_ReceivedData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandModem

   procedure Initialize (this : in out MobileBroadbandModem) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandModem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandModem, IMobileBroadbandModem_Ptr);
   begin
      if this.m_IMobileBroadbandModem /= null then
         if this.m_IMobileBroadbandModem.all /= null then
            RefCount := this.m_IMobileBroadbandModem.all.Release;
            Free (this.m_IMobileBroadbandModem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MobileBroadbandModem

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandModem");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMobileBroadbandModemStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromId
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModem is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandModem");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandModem;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModem do
         Hr := RoGetActivationFactory (m_hString, IID_IMobileBroadbandModemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromId (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMobileBroadbandModem := new Windows.Networking.NetworkOperators.IMobileBroadbandModem;
            Retval.m_IMobileBroadbandModem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDefault
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModem is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandModem");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandModem;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModem do
         Hr := RoGetActivationFactory (m_hString, IID_IMobileBroadbandModemStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMobileBroadbandModem := new Windows.Networking.NetworkOperators.IMobileBroadbandModem;
            Retval.m_IMobileBroadbandModem.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandModem

   function get_CurrentAccount
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandAccount;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandAccount do
         Hr := this.m_IMobileBroadbandModem.all.get_CurrentAccount (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandAccount := new Windows.Networking.NetworkOperators.IMobileBroadbandAccount;
         Retval.m_IMobileBroadbandAccount.all := m_ComRetVal;
      end return;
   end;

   function get_DeviceInformation
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation do
         Hr := this.m_IMobileBroadbandModem.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandDeviceInformation := new Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation;
         Retval.m_IMobileBroadbandDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_MaxDeviceServiceCommandSizeInBytes
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandModem.all.get_MaxDeviceServiceCommandSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxDeviceServiceDataSizeInBytes
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandModem.all.get_MaxDeviceServiceDataSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceServices
   (
      this : in out MobileBroadbandModem
   )
   return IVectorView_IMobileBroadbandDeviceServiceInformation.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandDeviceServiceInformation.Kind;
   begin
      Hr := this.m_IMobileBroadbandModem.all.get_DeviceServices (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandDeviceServiceInformation (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetDeviceService
   (
      this : in out MobileBroadbandModem;
      deviceServiceId : WinRt.Guid
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceService'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandDeviceService do
         Hr := this.m_IMobileBroadbandModem.all.GetDeviceService (deviceServiceId, m_ComRetVal'Access);
         Retval.m_IMobileBroadbandDeviceService := new Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService;
         Retval.m_IMobileBroadbandDeviceService.all := m_ComRetVal;
      end return;
   end;

   function get_IsResetSupported
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandModem.all.get_IsResetSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ResetAsync
   (
      this : in out MobileBroadbandModem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandModem.all.ResetAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetCurrentConfigurationAsync
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandModemConfiguration.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandModemConfiguration.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration;
      m_IID            : aliased WinRt.IID := (3451781123, 55978, 23689, (146, 230, 164, 127, 252, 36, 24, 162 )); -- Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration;
      m_HandlerIID     : aliased WinRt.IID := (3239970377, 33335, 23699, (187, 219, 46, 218, 82, 22, 253, 63 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandModemConfiguration.Kind := new AsyncOperationCompletedHandler_MobileBroadbandModemConfiguration.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandModemConfiguration.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandModemConfiguration.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandModemConfiguration.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandModemConfiguration.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration do
         Hr := this.m_IMobileBroadbandModem.all.GetCurrentConfigurationAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandModemConfiguration := new Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration;
                  Retval.m_IMobileBroadbandModemConfiguration.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_CurrentNetwork
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandNetwork'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandNetwork;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandNetwork do
         Hr := this.m_IMobileBroadbandModem.all.get_CurrentNetwork (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandNetwork := new Windows.Networking.NetworkOperators.IMobileBroadbandNetwork;
         Retval.m_IMobileBroadbandNetwork.all := m_ComRetVal;
      end return;
   end;

   function GetIsPassthroughEnabledAsync
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandModem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandModem.all);
      Hr := m_Interface.GetIsPassthroughEnabledAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SetIsPassthroughEnabledAsync
   (
      this : in out MobileBroadbandModem;
      value : WinRt.Boolean
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModemStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandModemStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandModemStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.MobileBroadbandModemStatus;
      m_IID            : aliased WinRt.IID := (2869765547, 26829, 21675, (177, 156, 98, 71, 17, 101, 157, 61 )); -- Windows.Networking.NetworkOperators.MobileBroadbandModemStatus;
      m_HandlerIID     : aliased WinRt.IID := (3093463832, 61007, 23284, (158, 59, 175, 153, 79, 169, 108, 81 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandModemStatus.Kind := new AsyncOperationCompletedHandler_MobileBroadbandModemStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandModemStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandModemStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandModemStatus.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandModemStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandModem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandModem.all);
      Hr := m_Interface.SetIsPassthroughEnabledAsync (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryGetPcoAsync
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPco'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandPco.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandPco.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPco;
      m_IID            : aliased WinRt.IID := (2925666912, 3403, 23353, (151, 107, 167, 171, 97, 10, 193, 133 )); -- Windows.Networking.NetworkOperators.MobileBroadbandPco;
      m_HandlerIID     : aliased WinRt.IID := (3352558750, 50049, 21596, (168, 174, 106, 70, 78, 219, 22, 162 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandPco.Kind := new AsyncOperationCompletedHandler_MobileBroadbandPco.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandPco.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandPco.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandPco.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandPco.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandModem3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPco do
         m_Interface := QInterface (this.m_IMobileBroadbandModem.all);
         Hr := m_Interface.TryGetPcoAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandPco := new Windows.Networking.NetworkOperators.IMobileBroadbandPco;
                  Retval.m_IMobileBroadbandPco.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_IsInEmergencyCallMode
   (
      this : in out MobileBroadbandModem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandModem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandModem.all);
      Hr := m_Interface.get_IsInEmergencyCallMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function add_IsInEmergencyCallModeChanged
   (
      this : in out MobileBroadbandModem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandModem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandModem.all);
      Hr := m_Interface.add_IsInEmergencyCallModeChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_IsInEmergencyCallModeChanged
   (
      this : in out MobileBroadbandModem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModem3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandModem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandModem.all);
      Hr := m_Interface.remove_IsInEmergencyCallModeChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandModemConfiguration

   procedure Initialize (this : in out MobileBroadbandModemConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandModemConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandModemConfiguration, IMobileBroadbandModemConfiguration_Ptr);
   begin
      if this.m_IMobileBroadbandModemConfiguration /= null then
         if this.m_IMobileBroadbandModemConfiguration.all /= null then
            RefCount := this.m_IMobileBroadbandModemConfiguration.all.Release;
            Free (this.m_IMobileBroadbandModemConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandModemConfiguration

   function get_Uicc
   (
      this : in out MobileBroadbandModemConfiguration
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUicc'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandUicc;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUicc do
         Hr := this.m_IMobileBroadbandModemConfiguration.all.get_Uicc (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandUicc := new Windows.Networking.NetworkOperators.IMobileBroadbandUicc;
         Retval.m_IMobileBroadbandUicc.all := m_ComRetVal;
      end return;
   end;

   function get_HomeProviderId
   (
      this : in out MobileBroadbandModemConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandModemConfiguration.all.get_HomeProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HomeProviderName
   (
      this : in out MobileBroadbandModemConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandModemConfiguration.all.get_HomeProviderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SarManager
   (
      this : in out MobileBroadbandModemConfiguration
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandSarManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandSarManager;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandModemConfiguration2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandSarManager do
         m_Interface := QInterface (this.m_IMobileBroadbandModemConfiguration.all);
         Hr := m_Interface.get_SarManager (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMobileBroadbandSarManager := new Windows.Networking.NetworkOperators.IMobileBroadbandSarManager;
         Retval.m_IMobileBroadbandSarManager.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandModemIsolation

   procedure Initialize (this : in out MobileBroadbandModemIsolation) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandModemIsolation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandModemIsolation, IMobileBroadbandModemIsolation_Ptr);
   begin
      if this.m_IMobileBroadbandModemIsolation /= null then
         if this.m_IMobileBroadbandModemIsolation.all /= null then
            RefCount := this.m_IMobileBroadbandModemIsolation.all.Release;
            Free (this.m_IMobileBroadbandModemIsolation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandModemIsolation

   function Constructor
   (
      modemDeviceId : WinRt.WString;
      ruleGroupId : WinRt.WString
   )
   return MobileBroadbandModemIsolation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation");
      m_Factory    : access IMobileBroadbandModemIsolationFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation;
      HStr_modemDeviceId : WinRt.HString := To_HString (modemDeviceId);
      HStr_ruleGroupId : WinRt.HString := To_HString (ruleGroupId);
   begin
      return RetVal : MobileBroadbandModemIsolation do
         Hr := RoGetActivationFactory (m_hString, IID_IMobileBroadbandModemIsolationFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_modemDeviceId, HStr_ruleGroupId, m_ComRetVal'Access);
            Retval.m_IMobileBroadbandModemIsolation := new Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation;
            Retval.m_IMobileBroadbandModemIsolation.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_modemDeviceId);
         Hr := WindowsDeleteString (HStr_ruleGroupId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandModemIsolation

   procedure AddAllowedHost
   (
      this : in out MobileBroadbandModemIsolation;
      host : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandModemIsolation.all.AddAllowedHost (host.m_IHostName.all);
   end;

   procedure AddAllowedHostRange
   (
      this : in out MobileBroadbandModemIsolation;
      first : Windows.Networking.HostName'Class;
      last : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandModemIsolation.all.AddAllowedHostRange (first.m_IHostName.all, last.m_IHostName.all);
   end;

   procedure ApplyConfigurationAsync
   (
      this : in out MobileBroadbandModemIsolation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandModemIsolation.all.ApplyConfigurationAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ClearConfigurationAsync
   (
      this : in out MobileBroadbandModemIsolation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandModemIsolation.all.ClearConfigurationAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandNetwork

   procedure Initialize (this : in out MobileBroadbandNetwork) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandNetwork) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandNetwork, IMobileBroadbandNetwork_Ptr);
   begin
      if this.m_IMobileBroadbandNetwork /= null then
         if this.m_IMobileBroadbandNetwork.all /= null then
            RefCount := this.m_IMobileBroadbandNetwork.all.Release;
            Free (this.m_IMobileBroadbandNetwork);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandNetwork

   function get_NetworkAdapter
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.Windows.Networking.Connectivity.NetworkAdapter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkAdapter;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkAdapter do
         Hr := this.m_IMobileBroadbandNetwork.all.get_NetworkAdapter (m_ComRetVal'Access);
         Retval.m_INetworkAdapter := new Windows.Networking.Connectivity.INetworkAdapter;
         Retval.m_INetworkAdapter.all := m_ComRetVal;
      end return;
   end;

   function get_NetworkRegistrationState
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkRegistrationState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.NetworkRegistrationState;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_NetworkRegistrationState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RegistrationNetworkError
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_RegistrationNetworkError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PacketAttachNetworkError
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_PacketAttachNetworkError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActivationNetworkError
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_ActivationNetworkError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AccessPointName
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_AccessPointName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RegisteredDataClass
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.Windows.Networking.NetworkOperators.DataClasses is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.DataClasses;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_RegisteredDataClass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RegisteredProviderId
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_RegisteredProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RegisteredProviderName
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.get_RegisteredProviderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ShowConnectionUI
   (
      this : in out MobileBroadbandNetwork
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandNetwork.all.ShowConnectionUI;
   end;

   function GetVoiceCallSupportAsync
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandNetwork2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandNetwork.all);
      Hr := m_Interface.GetVoiceCallSupportAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_RegistrationUiccApps
   (
      this : in out MobileBroadbandNetwork
   )
   return IVectorView_IMobileBroadbandUiccApp.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandUiccApp.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandNetwork2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMobileBroadbandNetwork.all);
      Hr := m_Interface.get_RegistrationUiccApps (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandUiccApp (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetCellsInfoAsync
   (
      this : in out MobileBroadbandNetwork
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandCellsInfo.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandCellsInfo.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo;
      m_IID            : aliased WinRt.IID := (3121676754, 29209, 21537, (160, 135, 76, 197, 241, 242, 95, 196 )); -- Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo;
      m_HandlerIID     : aliased WinRt.IID := (2566497271, 37538, 21553, (144, 47, 155, 240, 16, 103, 171, 96 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandCellsInfo.Kind := new AsyncOperationCompletedHandler_MobileBroadbandCellsInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandCellsInfo.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandCellsInfo.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandCellsInfo.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandCellsInfo.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork_Interface, WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandNetwork3, WinRt.Windows.Networking.NetworkOperators.IID_IMobileBroadbandNetwork3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo do
         m_Interface := QInterface (this.m_IMobileBroadbandNetwork.all);
         Hr := m_Interface.GetCellsInfoAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandCellsInfo := new Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo;
                  Retval.m_IMobileBroadbandCellsInfo.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandNetworkRegistrationStateChange

   procedure Initialize (this : in out MobileBroadbandNetworkRegistrationStateChange) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandNetworkRegistrationStateChange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandNetworkRegistrationStateChange, IMobileBroadbandNetworkRegistrationStateChange_Ptr);
   begin
      if this.m_IMobileBroadbandNetworkRegistrationStateChange /= null then
         if this.m_IMobileBroadbandNetworkRegistrationStateChange.all /= null then
            RefCount := this.m_IMobileBroadbandNetworkRegistrationStateChange.all.Release;
            Free (this.m_IMobileBroadbandNetworkRegistrationStateChange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandNetworkRegistrationStateChange

   function get_DeviceId
   (
      this : in out MobileBroadbandNetworkRegistrationStateChange
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandNetworkRegistrationStateChange.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Network
   (
      this : in out MobileBroadbandNetworkRegistrationStateChange
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandNetwork'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandNetwork;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandNetwork do
         Hr := this.m_IMobileBroadbandNetworkRegistrationStateChange.all.get_Network (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandNetwork := new Windows.Networking.NetworkOperators.IMobileBroadbandNetwork;
         Retval.m_IMobileBroadbandNetwork.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandNetworkRegistrationStateChangeTriggerDetails

   procedure Initialize (this : in out MobileBroadbandNetworkRegistrationStateChangeTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandNetworkRegistrationStateChangeTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails, IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails_Ptr);
   begin
      if this.m_IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails /= null then
         if this.m_IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails.all /= null then
            RefCount := this.m_IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails.all.Release;
            Free (this.m_IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandNetworkRegistrationStateChangeTriggerDetails

   function get_NetworkRegistrationStateChanges
   (
      this : in out MobileBroadbandNetworkRegistrationStateChangeTriggerDetails
   )
   return IVectorView_IMobileBroadbandNetworkRegistrationStateChange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandNetworkRegistrationStateChange.Kind;
   begin
      Hr := this.m_IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails.all.get_NetworkRegistrationStateChanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandNetworkRegistrationStateChange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPco

   procedure Initialize (this : in out MobileBroadbandPco) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPco) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandPco, IMobileBroadbandPco_Ptr);
   begin
      if this.m_IMobileBroadbandPco /= null then
         if this.m_IMobileBroadbandPco.all /= null then
            RefCount := this.m_IMobileBroadbandPco.all.Release;
            Free (this.m_IMobileBroadbandPco);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPco

   function get_Data
   (
      this : in out MobileBroadbandPco
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMobileBroadbandPco.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsComplete
   (
      this : in out MobileBroadbandPco
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandPco.all.get_IsComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DeviceId
   (
      this : in out MobileBroadbandPco
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandPco.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPcoDataChangeTriggerDetails

   procedure Initialize (this : in out MobileBroadbandPcoDataChangeTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPcoDataChangeTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandPcoDataChangeTriggerDetails, IMobileBroadbandPcoDataChangeTriggerDetails_Ptr);
   begin
      if this.m_IMobileBroadbandPcoDataChangeTriggerDetails /= null then
         if this.m_IMobileBroadbandPcoDataChangeTriggerDetails.all /= null then
            RefCount := this.m_IMobileBroadbandPcoDataChangeTriggerDetails.all.Release;
            Free (this.m_IMobileBroadbandPcoDataChangeTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPcoDataChangeTriggerDetails

   function get_UpdatedData
   (
      this : in out MobileBroadbandPcoDataChangeTriggerDetails
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPco'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandPco;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPco do
         Hr := this.m_IMobileBroadbandPcoDataChangeTriggerDetails.all.get_UpdatedData (m_ComRetVal'Access);
         Retval.m_IMobileBroadbandPco := new Windows.Networking.NetworkOperators.IMobileBroadbandPco;
         Retval.m_IMobileBroadbandPco.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPin

   procedure Initialize (this : in out MobileBroadbandPin) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPin) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandPin, IMobileBroadbandPin_Ptr);
   begin
      if this.m_IMobileBroadbandPin /= null then
         if this.m_IMobileBroadbandPin.all /= null then
            RefCount := this.m_IMobileBroadbandPin.all.Release;
            Free (this.m_IMobileBroadbandPin);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPin

   function get_Type
   (
      this : in out MobileBroadbandPin
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandPinType;
   begin
      Hr := this.m_IMobileBroadbandPin.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LockState
   (
      this : in out MobileBroadbandPin
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinLockState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandPinLockState;
   begin
      Hr := this.m_IMobileBroadbandPin.all.get_LockState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Format
   (
      this : in out MobileBroadbandPin
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandPinFormat;
   begin
      Hr := this.m_IMobileBroadbandPin.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Enabled
   (
      this : in out MobileBroadbandPin
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandPin.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxLength
   (
      this : in out MobileBroadbandPin
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandPin.all.get_MaxLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinLength
   (
      this : in out MobileBroadbandPin
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandPin.all.get_MinLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttemptsRemaining
   (
      this : in out MobileBroadbandPin
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandPin.all.get_AttemptsRemaining (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function EnableAsync
   (
      this : in out MobileBroadbandPin;
      currentPin : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_currentPin : WinRt.HString := To_HString (currentPin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandPinOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandPinOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
      m_IID            : aliased WinRt.IID := (796288540, 12148, 23778, (153, 249, 71, 209, 163, 161, 54, 51 )); -- Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (1499123860, 24803, 21321, (143, 230, 234, 142, 203, 187, 37, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandPinOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult do
         Hr := this.m_IMobileBroadbandPin.all.EnableAsync (HStr_currentPin, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandPinOperationResult := new Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
                  Retval.m_IMobileBroadbandPinOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_currentPin);
      end return;
   end;

   function DisableAsync
   (
      this : in out MobileBroadbandPin;
      currentPin : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_currentPin : WinRt.HString := To_HString (currentPin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandPinOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandPinOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
      m_IID            : aliased WinRt.IID := (796288540, 12148, 23778, (153, 249, 71, 209, 163, 161, 54, 51 )); -- Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (1499123860, 24803, 21321, (143, 230, 234, 142, 203, 187, 37, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandPinOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult do
         Hr := this.m_IMobileBroadbandPin.all.DisableAsync (HStr_currentPin, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandPinOperationResult := new Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
                  Retval.m_IMobileBroadbandPinOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_currentPin);
      end return;
   end;

   function EnterAsync
   (
      this : in out MobileBroadbandPin;
      currentPin : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_currentPin : WinRt.HString := To_HString (currentPin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandPinOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandPinOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
      m_IID            : aliased WinRt.IID := (796288540, 12148, 23778, (153, 249, 71, 209, 163, 161, 54, 51 )); -- Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (1499123860, 24803, 21321, (143, 230, 234, 142, 203, 187, 37, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandPinOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult do
         Hr := this.m_IMobileBroadbandPin.all.EnterAsync (HStr_currentPin, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandPinOperationResult := new Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
                  Retval.m_IMobileBroadbandPinOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_currentPin);
      end return;
   end;

   function ChangeAsync
   (
      this : in out MobileBroadbandPin;
      currentPin : WinRt.WString;
      newPin : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_currentPin : WinRt.HString := To_HString (currentPin);
      HStr_newPin : WinRt.HString := To_HString (newPin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandPinOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandPinOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
      m_IID            : aliased WinRt.IID := (796288540, 12148, 23778, (153, 249, 71, 209, 163, 161, 54, 51 )); -- Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (1499123860, 24803, 21321, (143, 230, 234, 142, 203, 187, 37, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandPinOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult do
         Hr := this.m_IMobileBroadbandPin.all.ChangeAsync (HStr_currentPin, HStr_newPin, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandPinOperationResult := new Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
                  Retval.m_IMobileBroadbandPinOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_currentPin);
         Hr := WindowsDeleteString (HStr_newPin);
      end return;
   end;

   function UnblockAsync
   (
      this : in out MobileBroadbandPin;
      pinUnblockKey : WinRt.WString;
      newPin : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_pinUnblockKey : WinRt.HString := To_HString (pinUnblockKey);
      HStr_newPin : WinRt.HString := To_HString (newPin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandPinOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandPinOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
      m_IID            : aliased WinRt.IID := (796288540, 12148, 23778, (153, 249, 71, 209, 163, 161, 54, 51 )); -- Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (1499123860, 24803, 21321, (143, 230, 234, 142, 203, 187, 37, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandPinOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandPinOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult do
         Hr := this.m_IMobileBroadbandPin.all.UnblockAsync (HStr_pinUnblockKey, HStr_newPin, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandPinOperationResult := new Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
                  Retval.m_IMobileBroadbandPinOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_pinUnblockKey);
         Hr := WindowsDeleteString (HStr_newPin);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPinLockStateChange

   procedure Initialize (this : in out MobileBroadbandPinLockStateChange) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPinLockStateChange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandPinLockStateChange, IMobileBroadbandPinLockStateChange_Ptr);
   begin
      if this.m_IMobileBroadbandPinLockStateChange /= null then
         if this.m_IMobileBroadbandPinLockStateChange.all /= null then
            RefCount := this.m_IMobileBroadbandPinLockStateChange.all.Release;
            Free (this.m_IMobileBroadbandPinLockStateChange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPinLockStateChange

   function get_DeviceId
   (
      this : in out MobileBroadbandPinLockStateChange
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandPinLockStateChange.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PinType
   (
      this : in out MobileBroadbandPinLockStateChange
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandPinType;
   begin
      Hr := this.m_IMobileBroadbandPinLockStateChange.all.get_PinType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PinLockState
   (
      this : in out MobileBroadbandPinLockStateChange
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPinLockState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandPinLockState;
   begin
      Hr := this.m_IMobileBroadbandPinLockStateChange.all.get_PinLockState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPinLockStateChangeTriggerDetails

   procedure Initialize (this : in out MobileBroadbandPinLockStateChangeTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPinLockStateChangeTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandPinLockStateChangeTriggerDetails, IMobileBroadbandPinLockStateChangeTriggerDetails_Ptr);
   begin
      if this.m_IMobileBroadbandPinLockStateChangeTriggerDetails /= null then
         if this.m_IMobileBroadbandPinLockStateChangeTriggerDetails.all /= null then
            RefCount := this.m_IMobileBroadbandPinLockStateChangeTriggerDetails.all.Release;
            Free (this.m_IMobileBroadbandPinLockStateChangeTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPinLockStateChangeTriggerDetails

   function get_PinLockStateChanges
   (
      this : in out MobileBroadbandPinLockStateChangeTriggerDetails
   )
   return IVectorView_IMobileBroadbandPinLockStateChange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandPinLockStateChange.Kind;
   begin
      Hr := this.m_IMobileBroadbandPinLockStateChangeTriggerDetails.all.get_PinLockStateChanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandPinLockStateChange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPinManager

   procedure Initialize (this : in out MobileBroadbandPinManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPinManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandPinManager, IMobileBroadbandPinManager_Ptr);
   begin
      if this.m_IMobileBroadbandPinManager /= null then
         if this.m_IMobileBroadbandPinManager.all /= null then
            RefCount := this.m_IMobileBroadbandPinManager.all.Release;
            Free (this.m_IMobileBroadbandPinManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPinManager

   function get_SupportedPins
   (
      this : in out MobileBroadbandPinManager
   )
   return IVectorView_MobileBroadbandPinType.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_MobileBroadbandPinType.Kind;
   begin
      Hr := this.m_IMobileBroadbandPinManager.all.get_SupportedPins (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_MobileBroadbandPinType (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetPin
   (
      this : in out MobileBroadbandPinManager;
      pinType : Windows.Networking.NetworkOperators.MobileBroadbandPinType
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPin'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IMobileBroadbandPin;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandPin do
         Hr := this.m_IMobileBroadbandPinManager.all.GetPin (pinType, m_ComRetVal'Access);
         Retval.m_IMobileBroadbandPin := new Windows.Networking.NetworkOperators.IMobileBroadbandPin;
         Retval.m_IMobileBroadbandPin.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPinOperationResult

   procedure Initialize (this : in out MobileBroadbandPinOperationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPinOperationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandPinOperationResult, IMobileBroadbandPinOperationResult_Ptr);
   begin
      if this.m_IMobileBroadbandPinOperationResult /= null then
         if this.m_IMobileBroadbandPinOperationResult.all /= null then
            RefCount := this.m_IMobileBroadbandPinOperationResult.all.Release;
            Free (this.m_IMobileBroadbandPinOperationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPinOperationResult

   function get_IsSuccessful
   (
      this : in out MobileBroadbandPinOperationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandPinOperationResult.all.get_IsSuccessful (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttemptsRemaining
   (
      this : in out MobileBroadbandPinOperationResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMobileBroadbandPinOperationResult.all.get_AttemptsRemaining (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandRadioStateChange

   procedure Initialize (this : in out MobileBroadbandRadioStateChange) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandRadioStateChange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandRadioStateChange, IMobileBroadbandRadioStateChange_Ptr);
   begin
      if this.m_IMobileBroadbandRadioStateChange /= null then
         if this.m_IMobileBroadbandRadioStateChange.all /= null then
            RefCount := this.m_IMobileBroadbandRadioStateChange.all.Release;
            Free (this.m_IMobileBroadbandRadioStateChange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandRadioStateChange

   function get_DeviceId
   (
      this : in out MobileBroadbandRadioStateChange
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandRadioStateChange.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RadioState
   (
      this : in out MobileBroadbandRadioStateChange
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandRadioState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandRadioState;
   begin
      Hr := this.m_IMobileBroadbandRadioStateChange.all.get_RadioState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandRadioStateChangeTriggerDetails

   procedure Initialize (this : in out MobileBroadbandRadioStateChangeTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandRadioStateChangeTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandRadioStateChangeTriggerDetails, IMobileBroadbandRadioStateChangeTriggerDetails_Ptr);
   begin
      if this.m_IMobileBroadbandRadioStateChangeTriggerDetails /= null then
         if this.m_IMobileBroadbandRadioStateChangeTriggerDetails.all /= null then
            RefCount := this.m_IMobileBroadbandRadioStateChangeTriggerDetails.all.Release;
            Free (this.m_IMobileBroadbandRadioStateChangeTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandRadioStateChangeTriggerDetails

   function get_RadioStateChanges
   (
      this : in out MobileBroadbandRadioStateChangeTriggerDetails
   )
   return IVectorView_IMobileBroadbandRadioStateChange.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandRadioStateChange.Kind;
   begin
      Hr := this.m_IMobileBroadbandRadioStateChangeTriggerDetails.all.get_RadioStateChanges (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandRadioStateChange (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandSarManager

   procedure Initialize (this : in out MobileBroadbandSarManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandSarManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandSarManager, IMobileBroadbandSarManager_Ptr);
   begin
      if this.m_IMobileBroadbandSarManager /= null then
         if this.m_IMobileBroadbandSarManager.all /= null then
            RefCount := this.m_IMobileBroadbandSarManager.all.Release;
            Free (this.m_IMobileBroadbandSarManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandSarManager

   function get_IsBackoffEnabled
   (
      this : in out MobileBroadbandSarManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.get_IsBackoffEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsWiFiHardwareIntegrated
   (
      this : in out MobileBroadbandSarManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.get_IsWiFiHardwareIntegrated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsSarControlledByHardware
   (
      this : in out MobileBroadbandSarManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.get_IsSarControlledByHardware (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Antennas
   (
      this : in out MobileBroadbandSarManager
   )
   return IVectorView_IMobileBroadbandAntennaSar.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandAntennaSar.Kind;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.get_Antennas (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandAntennaSar (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_HysteresisTimerPeriod
   (
      this : in out MobileBroadbandSarManager
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.get_HysteresisTimerPeriod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_TransmissionStateChanged
   (
      this : in out MobileBroadbandSarManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.add_TransmissionStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TransmissionStateChanged
   (
      this : in out MobileBroadbandSarManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.remove_TransmissionStateChanged (token);
   end;

   procedure EnableBackoffAsync
   (
      this : in out MobileBroadbandSarManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandSarManager.all.EnableBackoffAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure DisableBackoffAsync
   (
      this : in out MobileBroadbandSarManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandSarManager.all.DisableBackoffAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetConfigurationAsync
   (
      this : in out MobileBroadbandSarManager;
      antennas : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandSarManager.all.SetConfigurationAsync (antennas, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure RevertSarToHardwareControlAsync
   (
      this : in out MobileBroadbandSarManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandSarManager.all.RevertSarToHardwareControlAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetTransmissionStateChangedHysteresisAsync
   (
      this : in out MobileBroadbandSarManager;
      timerPeriod : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMobileBroadbandSarManager.all.SetTransmissionStateChangedHysteresisAsync (timerPeriod, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetIsTransmittingAsync
   (
      this : in out MobileBroadbandSarManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMobileBroadbandSarManager.all.GetIsTransmittingAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure StartTransmissionStateMonitoring
   (
      this : in out MobileBroadbandSarManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.StartTransmissionStateMonitoring;
   end;

   procedure StopTransmissionStateMonitoring
   (
      this : in out MobileBroadbandSarManager
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMobileBroadbandSarManager.all.StopTransmissionStateMonitoring;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandTransmissionStateChangedEventArgs

   procedure Initialize (this : in out MobileBroadbandTransmissionStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandTransmissionStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandTransmissionStateChangedEventArgs, IMobileBroadbandTransmissionStateChangedEventArgs_Ptr);
   begin
      if this.m_IMobileBroadbandTransmissionStateChangedEventArgs /= null then
         if this.m_IMobileBroadbandTransmissionStateChangedEventArgs.all /= null then
            RefCount := this.m_IMobileBroadbandTransmissionStateChangedEventArgs.all.Release;
            Free (this.m_IMobileBroadbandTransmissionStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandTransmissionStateChangedEventArgs

   function get_IsTransmitting
   (
      this : in out MobileBroadbandTransmissionStateChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMobileBroadbandTransmissionStateChangedEventArgs.all.get_IsTransmitting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandUicc

   procedure Initialize (this : in out MobileBroadbandUicc) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandUicc) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandUicc, IMobileBroadbandUicc_Ptr);
   begin
      if this.m_IMobileBroadbandUicc /= null then
         if this.m_IMobileBroadbandUicc.all /= null then
            RefCount := this.m_IMobileBroadbandUicc.all.Release;
            Free (this.m_IMobileBroadbandUicc);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandUicc

   function get_SimIccId
   (
      this : in out MobileBroadbandUicc
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMobileBroadbandUicc.all.get_SimIccId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetUiccAppsAsync
   (
      this : in out MobileBroadbandUicc
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandUiccAppsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandUiccAppsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult;
      m_IID            : aliased WinRt.IID := (3474778495, 6785, 23782, (138, 213, 85, 255, 139, 14, 141, 27 )); -- Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult;
      m_HandlerIID     : aliased WinRt.IID := (2704010582, 50802, 22878, (166, 123, 73, 171, 194, 133, 173, 220 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandUiccAppsResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandUiccAppsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandUiccAppsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandUiccAppsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandUiccAppsResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandUiccAppsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult do
         Hr := this.m_IMobileBroadbandUicc.all.GetUiccAppsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandUiccAppsResult := new Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult;
                  Retval.m_IMobileBroadbandUiccAppsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandUiccApp

   procedure Initialize (this : in out MobileBroadbandUiccApp) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandUiccApp) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandUiccApp, IMobileBroadbandUiccApp_Ptr);
   begin
      if this.m_IMobileBroadbandUiccApp /= null then
         if this.m_IMobileBroadbandUiccApp.all /= null then
            RefCount := this.m_IMobileBroadbandUiccApp.all.Release;
            Free (this.m_IMobileBroadbandUiccApp);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandUiccApp

   function get_Id
   (
      this : in out MobileBroadbandUiccApp
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMobileBroadbandUiccApp.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out MobileBroadbandUiccApp
   )
   return WinRt.Windows.Networking.NetworkOperators.UiccAppKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.UiccAppKind;
   begin
      Hr := this.m_IMobileBroadbandUiccApp.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetRecordDetailsAsync
   (
      this : in out MobileBroadbandUiccApp;
      uiccFilePath : GenericObject
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandUiccAppRecordDetailsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandUiccAppRecordDetailsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult;
      m_IID            : aliased WinRt.IID := (125105318, 48574, 23039, (170, 28, 166, 46, 60, 111, 157, 55 )); -- Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult;
      m_HandlerIID     : aliased WinRt.IID := (3501537368, 3668, 22417, (130, 237, 51, 19, 220, 117, 218, 69 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandUiccAppRecordDetailsResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandUiccAppRecordDetailsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandUiccAppRecordDetailsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandUiccAppRecordDetailsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandUiccAppRecordDetailsResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandUiccAppRecordDetailsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult do
         Hr := this.m_IMobileBroadbandUiccApp.all.GetRecordDetailsAsync (uiccFilePath, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandUiccAppRecordDetailsResult := new Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult;
                  Retval.m_IMobileBroadbandUiccAppRecordDetailsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ReadRecordAsync
   (
      this : in out MobileBroadbandUiccApp;
      uiccFilePath : GenericObject;
      recordIndex : WinRt.Int32
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MobileBroadbandUiccAppReadRecordResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MobileBroadbandUiccAppReadRecordResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult;
      m_IID            : aliased WinRt.IID := (670860419, 12504, 23523, (188, 30, 140, 202, 11, 36, 29, 243 )); -- Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult;
      m_HandlerIID     : aliased WinRt.IID := (3088618163, 19625, 24260, (137, 113, 47, 188, 25, 181, 108, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_MobileBroadbandUiccAppReadRecordResult.Kind := new AsyncOperationCompletedHandler_MobileBroadbandUiccAppReadRecordResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MobileBroadbandUiccAppReadRecordResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MobileBroadbandUiccAppReadRecordResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MobileBroadbandUiccAppReadRecordResult.Kind_Delegate, AsyncOperationCompletedHandler_MobileBroadbandUiccAppReadRecordResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult do
         Hr := this.m_IMobileBroadbandUiccApp.all.ReadRecordAsync (uiccFilePath, recordIndex, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMobileBroadbandUiccAppReadRecordResult := new Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult;
                  Retval.m_IMobileBroadbandUiccAppReadRecordResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandUiccAppReadRecordResult

   procedure Initialize (this : in out MobileBroadbandUiccAppReadRecordResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandUiccAppReadRecordResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandUiccAppReadRecordResult, IMobileBroadbandUiccAppReadRecordResult_Ptr);
   begin
      if this.m_IMobileBroadbandUiccAppReadRecordResult /= null then
         if this.m_IMobileBroadbandUiccAppReadRecordResult.all /= null then
            RefCount := this.m_IMobileBroadbandUiccAppReadRecordResult.all.Release;
            Free (this.m_IMobileBroadbandUiccAppReadRecordResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandUiccAppReadRecordResult

   function get_Status
   (
      this : in out MobileBroadbandUiccAppReadRecordResult
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus;
   begin
      Hr := this.m_IMobileBroadbandUiccAppReadRecordResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out MobileBroadbandUiccAppReadRecordResult
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMobileBroadbandUiccAppReadRecordResult.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandUiccAppRecordDetailsResult

   procedure Initialize (this : in out MobileBroadbandUiccAppRecordDetailsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandUiccAppRecordDetailsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandUiccAppRecordDetailsResult, IMobileBroadbandUiccAppRecordDetailsResult_Ptr);
   begin
      if this.m_IMobileBroadbandUiccAppRecordDetailsResult /= null then
         if this.m_IMobileBroadbandUiccAppRecordDetailsResult.all /= null then
            RefCount := this.m_IMobileBroadbandUiccAppRecordDetailsResult.all.Release;
            Free (this.m_IMobileBroadbandUiccAppRecordDetailsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandUiccAppRecordDetailsResult

   function get_Status
   (
      this : in out MobileBroadbandUiccAppRecordDetailsResult
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus;
   begin
      Hr := this.m_IMobileBroadbandUiccAppRecordDetailsResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Kind
   (
      this : in out MobileBroadbandUiccAppRecordDetailsResult
   )
   return WinRt.Windows.Networking.NetworkOperators.UiccAppRecordKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.UiccAppRecordKind;
   begin
      Hr := this.m_IMobileBroadbandUiccAppRecordDetailsResult.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RecordCount
   (
      this : in out MobileBroadbandUiccAppRecordDetailsResult
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMobileBroadbandUiccAppRecordDetailsResult.all.get_RecordCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RecordSize
   (
      this : in out MobileBroadbandUiccAppRecordDetailsResult
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMobileBroadbandUiccAppRecordDetailsResult.all.get_RecordSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReadAccessCondition
   (
      this : in out MobileBroadbandUiccAppRecordDetailsResult
   )
   return WinRt.Windows.Networking.NetworkOperators.UiccAccessCondition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.UiccAccessCondition;
   begin
      Hr := this.m_IMobileBroadbandUiccAppRecordDetailsResult.all.get_ReadAccessCondition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WriteAccessCondition
   (
      this : in out MobileBroadbandUiccAppRecordDetailsResult
   )
   return WinRt.Windows.Networking.NetworkOperators.UiccAccessCondition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.UiccAccessCondition;
   begin
      Hr := this.m_IMobileBroadbandUiccAppRecordDetailsResult.all.get_WriteAccessCondition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandUiccAppsResult

   procedure Initialize (this : in out MobileBroadbandUiccAppsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandUiccAppsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMobileBroadbandUiccAppsResult, IMobileBroadbandUiccAppsResult_Ptr);
   begin
      if this.m_IMobileBroadbandUiccAppsResult /= null then
         if this.m_IMobileBroadbandUiccAppsResult.all /= null then
            RefCount := this.m_IMobileBroadbandUiccAppsResult.all.Release;
            Free (this.m_IMobileBroadbandUiccAppsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandUiccAppsResult

   function get_Status
   (
      this : in out MobileBroadbandUiccAppsResult
   )
   return WinRt.Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus;
   begin
      Hr := this.m_IMobileBroadbandUiccAppsResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UiccApps
   (
      this : in out MobileBroadbandUiccAppsResult
   )
   return IVectorView_IMobileBroadbandUiccApp.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMobileBroadbandUiccApp.Kind;
   begin
      Hr := this.m_IMobileBroadbandUiccAppsResult.all.get_UiccApps (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMobileBroadbandUiccApp (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorDataUsageTriggerDetails

   procedure Initialize (this : in out NetworkOperatorDataUsageTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorDataUsageTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorDataUsageTriggerDetails, INetworkOperatorDataUsageTriggerDetails_Ptr);
   begin
      if this.m_INetworkOperatorDataUsageTriggerDetails /= null then
         if this.m_INetworkOperatorDataUsageTriggerDetails.all /= null then
            RefCount := this.m_INetworkOperatorDataUsageTriggerDetails.all.Release;
            Free (this.m_INetworkOperatorDataUsageTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorDataUsageTriggerDetails

   function get_NotificationKind
   (
      this : in out NetworkOperatorDataUsageTriggerDetails
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind;
   begin
      Hr := this.m_INetworkOperatorDataUsageTriggerDetails.all.get_NotificationKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorNotificationEventDetails

   procedure Initialize (this : in out NetworkOperatorNotificationEventDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorNotificationEventDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorNotificationEventDetails, INetworkOperatorNotificationEventDetails_Ptr);
   begin
      if this.m_INetworkOperatorNotificationEventDetails /= null then
         if this.m_INetworkOperatorNotificationEventDetails.all /= null then
            RefCount := this.m_INetworkOperatorNotificationEventDetails.all.Release;
            Free (this.m_INetworkOperatorNotificationEventDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorNotificationEventDetails

   function get_NotificationType
   (
      this : in out NetworkOperatorNotificationEventDetails
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType;
   begin
      Hr := this.m_INetworkOperatorNotificationEventDetails.all.get_NotificationType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkAccountId
   (
      this : in out NetworkOperatorNotificationEventDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorNotificationEventDetails.all.get_NetworkAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EncodingType
   (
      this : in out NetworkOperatorNotificationEventDetails
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_INetworkOperatorNotificationEventDetails.all.get_EncodingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Message
   (
      this : in out NetworkOperatorNotificationEventDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorNotificationEventDetails.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RuleId
   (
      this : in out NetworkOperatorNotificationEventDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorNotificationEventDetails.all.get_RuleId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SmsMessage
   (
      this : in out NetworkOperatorNotificationEventDetails
   )
   return WinRt.Windows.Devices.Sms.ISmsMessage is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Sms.ISmsMessage;
   begin
      Hr := this.m_INetworkOperatorNotificationEventDetails.all.get_SmsMessage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AuthorizeTethering
   (
      this : in out NetworkOperatorNotificationEventDetails;
      allow : WinRt.Boolean;
      entitlementFailureReason : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringEntitlementCheck := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_entitlementFailureReason : WinRt.HString := To_HString (entitlementFailureReason);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails_Interface, WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringEntitlementCheck, WinRt.Windows.Networking.NetworkOperators.IID_INetworkOperatorTetheringEntitlementCheck'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkOperatorNotificationEventDetails.all);
      Hr := m_Interface.AuthorizeTethering (allow, HStr_entitlementFailureReason);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_entitlementFailureReason);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorTetheringAccessPointConfiguration

   procedure Initialize (this : in out NetworkOperatorTetheringAccessPointConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorTetheringAccessPointConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorTetheringAccessPointConfiguration, INetworkOperatorTetheringAccessPointConfiguration_Ptr);
   begin
      if this.m_INetworkOperatorTetheringAccessPointConfiguration /= null then
         if this.m_INetworkOperatorTetheringAccessPointConfiguration.all /= null then
            RefCount := this.m_INetworkOperatorTetheringAccessPointConfiguration.all.Release;
            Free (this.m_INetworkOperatorTetheringAccessPointConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NetworkOperatorTetheringAccessPointConfiguration

   function Constructor return NetworkOperatorTetheringAccessPointConfiguration is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration");
      m_ComRetVal  : aliased Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration;
   begin
      return RetVal : NetworkOperatorTetheringAccessPointConfiguration do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INetworkOperatorTetheringAccessPointConfiguration := new Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration;
            Retval.m_INetworkOperatorTetheringAccessPointConfiguration.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorTetheringAccessPointConfiguration

   function get_Ssid
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorTetheringAccessPointConfiguration.all.get_Ssid (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Ssid
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_INetworkOperatorTetheringAccessPointConfiguration.all.put_Ssid (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Passphrase
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorTetheringAccessPointConfiguration.all.get_Passphrase (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Passphrase
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_INetworkOperatorTetheringAccessPointConfiguration.all.put_Passphrase (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function IsBandSupported
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration;
      band : Windows.Networking.NetworkOperators.TetheringWiFiBand
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration_Interface, WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2, WinRt.Windows.Networking.NetworkOperators.IID_INetworkOperatorTetheringAccessPointConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkOperatorTetheringAccessPointConfiguration.all);
      Hr := m_Interface.IsBandSupported (band, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsBandSupportedAsync
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration;
      band : Windows.Networking.NetworkOperators.TetheringWiFiBand
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration_Interface, WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2, WinRt.Windows.Networking.NetworkOperators.IID_INetworkOperatorTetheringAccessPointConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkOperatorTetheringAccessPointConfiguration.all);
      Hr := m_Interface.IsBandSupportedAsync (band, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_Band
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration
   )
   return WinRt.Windows.Networking.NetworkOperators.TetheringWiFiBand is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.TetheringWiFiBand;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration_Interface, WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2, WinRt.Windows.Networking.NetworkOperators.IID_INetworkOperatorTetheringAccessPointConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkOperatorTetheringAccessPointConfiguration.all);
      Hr := m_Interface.get_Band (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Band
   (
      this : in out NetworkOperatorTetheringAccessPointConfiguration;
      value : Windows.Networking.NetworkOperators.TetheringWiFiBand
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration_Interface, WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2, WinRt.Windows.Networking.NetworkOperators.IID_INetworkOperatorTetheringAccessPointConfiguration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkOperatorTetheringAccessPointConfiguration.all);
      Hr := m_Interface.put_Band (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorTetheringClient

   procedure Initialize (this : in out NetworkOperatorTetheringClient) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorTetheringClient) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorTetheringClient, INetworkOperatorTetheringClient_Ptr);
   begin
      if this.m_INetworkOperatorTetheringClient /= null then
         if this.m_INetworkOperatorTetheringClient.all /= null then
            RefCount := this.m_INetworkOperatorTetheringClient.all.Release;
            Free (this.m_INetworkOperatorTetheringClient);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorTetheringClient

   function get_MacAddress
   (
      this : in out NetworkOperatorTetheringClient
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorTetheringClient.all.get_MacAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_HostNames
   (
      this : in out NetworkOperatorTetheringClient
   )
   return IVectorView_IHostName.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHostName.Kind;
   begin
      Hr := this.m_INetworkOperatorTetheringClient.all.get_HostNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHostName (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorTetheringManager

   procedure Initialize (this : in out NetworkOperatorTetheringManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorTetheringManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorTetheringManager, INetworkOperatorTetheringManager_Ptr);
   begin
      if this.m_INetworkOperatorTetheringManager /= null then
         if this.m_INetworkOperatorTetheringManager.all /= null then
            RefCount := this.m_INetworkOperatorTetheringManager.all.Release;
            Free (this.m_INetworkOperatorTetheringManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for NetworkOperatorTetheringManager

   function GetTetheringCapabilityFromConnectionProfile
   (
      profile : Windows.Networking.Connectivity.ConnectionProfile'Class
   )
   return WinRt.Windows.Networking.NetworkOperators.TetheringCapability is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.TetheringCapability;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetTetheringCapabilityFromConnectionProfile (profile.m_IConnectionProfile.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function CreateFromConnectionProfile
   (
      profile : Windows.Networking.Connectivity.ConnectionProfile'Class
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager do
         Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromConnectionProfile (profile.m_IConnectionProfile.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_INetworkOperatorTetheringManager := new Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager;
            Retval.m_INetworkOperatorTetheringManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromConnectionProfile
   (
      profile : Windows.Networking.Connectivity.ConnectionProfile'Class;
      adapter : Windows.Networking.Connectivity.NetworkAdapter'Class
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager do
         Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromConnectionProfile (profile.m_IConnectionProfile.all, adapter.m_INetworkAdapter.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_INetworkOperatorTetheringManager := new Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager;
            Retval.m_INetworkOperatorTetheringManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function IsNoConnectionsTimeoutEnabled
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsNoConnectionsTimeoutEnabled (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   procedure EnableNoConnectionsTimeout is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.EnableNoConnectionsTimeout;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure EnableNoConnectionsTimeoutAsync is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.EnableNoConnectionsTimeoutAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure DisableNoConnectionsTimeout is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.DisableNoConnectionsTimeout;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   procedure DisableNoConnectionsTimeoutAsync is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics4_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics4'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.DisableNoConnectionsTimeoutAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetTetheringCapability
   (
      networkAccountId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.TetheringCapability is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.TetheringCapability;
      HStr_networkAccountId : WinRt.HString := To_HString (networkAccountId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetTetheringCapability (HStr_networkAccountId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_networkAccountId);
      return m_ComRetVal;
   end;

   function CreateFromNetworkAccountId
   (
      networkAccountId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager;
      HStr_networkAccountId : WinRt.HString := To_HString (networkAccountId);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager do
         Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorTetheringManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNetworkAccountId (HStr_networkAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_INetworkOperatorTetheringManager := new Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager;
            Retval.m_INetworkOperatorTetheringManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_networkAccountId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorTetheringManager

   function get_MaxClientCount
   (
      this : in out NetworkOperatorTetheringManager
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_INetworkOperatorTetheringManager.all.get_MaxClientCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ClientCount
   (
      this : in out NetworkOperatorTetheringManager
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_INetworkOperatorTetheringManager.all.get_ClientCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TetheringOperationalState
   (
      this : in out NetworkOperatorTetheringManager
   )
   return WinRt.Windows.Networking.NetworkOperators.TetheringOperationalState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.TetheringOperationalState;
   begin
      Hr := this.m_INetworkOperatorTetheringManager.all.get_TetheringOperationalState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetCurrentAccessPointConfiguration
   (
      this : in out NetworkOperatorTetheringManager
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration do
         Hr := this.m_INetworkOperatorTetheringManager.all.GetCurrentAccessPointConfiguration (m_ComRetVal'Access);
         Retval.m_INetworkOperatorTetheringAccessPointConfiguration := new Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration;
         Retval.m_INetworkOperatorTetheringAccessPointConfiguration.all := m_ComRetVal;
      end return;
   end;

   procedure ConfigureAccessPointAsync
   (
      this : in out NetworkOperatorTetheringManager;
      configuration : Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_INetworkOperatorTetheringManager.all.ConfigureAccessPointAsync (configuration.m_INetworkOperatorTetheringAccessPointConfiguration.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function StartTetheringAsync
   (
      this : in out NetworkOperatorTetheringManager
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_NetworkOperatorTetheringOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_NetworkOperatorTetheringOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult;
      m_IID            : aliased WinRt.IID := (1612394733, 39807, 21686, (182, 27, 36, 160, 155, 197, 99, 4 )); -- Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (2838935847, 30007, 22982, (137, 222, 51, 243, 106, 151, 37, 171 ));
      m_Handler        : AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind := new AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_NetworkOperatorTetheringOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult do
         Hr := this.m_INetworkOperatorTetheringManager.all.StartTetheringAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_INetworkOperatorTetheringOperationResult := new Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult;
                  Retval.m_INetworkOperatorTetheringOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StopTetheringAsync
   (
      this : in out NetworkOperatorTetheringManager
   )
   return WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_NetworkOperatorTetheringOperationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_NetworkOperatorTetheringOperationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult;
      m_IID            : aliased WinRt.IID := (1612394733, 39807, 21686, (182, 27, 36, 160, 155, 197, 99, 4 )); -- Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult;
      m_HandlerIID     : aliased WinRt.IID := (2838935847, 30007, 22982, (137, 222, 51, 243, 106, 151, 37, 171 ));
      m_Handler        : AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind := new AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_NetworkOperatorTetheringOperationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind_Delegate, AsyncOperationCompletedHandler_NetworkOperatorTetheringOperationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult do
         Hr := this.m_INetworkOperatorTetheringManager.all.StopTetheringAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_INetworkOperatorTetheringOperationResult := new Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult;
                  Retval.m_INetworkOperatorTetheringOperationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetTetheringClients
   (
      this : in out NetworkOperatorTetheringManager
   )
   return IVectorView_INetworkOperatorTetheringClient.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringClientManager := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_INetworkOperatorTetheringClient.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager_Interface, WinRt.Windows.Networking.NetworkOperators.INetworkOperatorTetheringClientManager, WinRt.Windows.Networking.NetworkOperators.IID_INetworkOperatorTetheringClientManager'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_INetworkOperatorTetheringManager.all);
      Hr := m_Interface.GetTetheringClients (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_INetworkOperatorTetheringClient (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorTetheringOperationResult

   procedure Initialize (this : in out NetworkOperatorTetheringOperationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorTetheringOperationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorTetheringOperationResult, INetworkOperatorTetheringOperationResult_Ptr);
   begin
      if this.m_INetworkOperatorTetheringOperationResult /= null then
         if this.m_INetworkOperatorTetheringOperationResult.all /= null then
            RefCount := this.m_INetworkOperatorTetheringOperationResult.all.Release;
            Free (this.m_INetworkOperatorTetheringOperationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorTetheringOperationResult

   function get_Status
   (
      this : in out NetworkOperatorTetheringOperationResult
   )
   return WinRt.Windows.Networking.NetworkOperators.TetheringOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.TetheringOperationStatus;
   begin
      Hr := this.m_INetworkOperatorTetheringOperationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AdditionalErrorMessage
   (
      this : in out NetworkOperatorTetheringOperationResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorTetheringOperationResult.all.get_AdditionalErrorMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProvisionFromXmlDocumentResults

   procedure Initialize (this : in out ProvisionFromXmlDocumentResults) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProvisionFromXmlDocumentResults) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProvisionFromXmlDocumentResults, IProvisionFromXmlDocumentResults_Ptr);
   begin
      if this.m_IProvisionFromXmlDocumentResults /= null then
         if this.m_IProvisionFromXmlDocumentResults.all /= null then
            RefCount := this.m_IProvisionFromXmlDocumentResults.all.Release;
            Free (this.m_IProvisionFromXmlDocumentResults);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProvisionFromXmlDocumentResults

   function get_AllElementsProvisioned
   (
      this : in out ProvisionFromXmlDocumentResults
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IProvisionFromXmlDocumentResults.all.get_AllElementsProvisioned (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProvisionResultsXml
   (
      this : in out ProvisionFromXmlDocumentResults
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IProvisionFromXmlDocumentResults.all.get_ProvisionResultsXml (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProvisionedProfile

   procedure Initialize (this : in out ProvisionedProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProvisionedProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProvisionedProfile, IProvisionedProfile_Ptr);
   begin
      if this.m_IProvisionedProfile /= null then
         if this.m_IProvisionedProfile.all /= null then
            RefCount := this.m_IProvisionedProfile.all.Release;
            Free (this.m_IProvisionedProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProvisionedProfile

   procedure UpdateCost
   (
      this : in out ProvisionedProfile;
      value : Windows.Networking.Connectivity.NetworkCostType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProvisionedProfile.all.UpdateCost (value);
   end;

   procedure UpdateUsage
   (
      this : in out ProvisionedProfile;
      value : Windows.Networking.NetworkOperators.ProfileUsage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IProvisionedProfile.all.UpdateUsage (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ProvisioningAgent

   procedure Initialize (this : in out ProvisioningAgent) is
   begin
      null;
   end;

   procedure Finalize (this : in out ProvisioningAgent) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IProvisioningAgent, IProvisioningAgent_Ptr);
   begin
      if this.m_IProvisioningAgent /= null then
         if this.m_IProvisioningAgent.all /= null then
            RefCount := this.m_IProvisioningAgent.all.Release;
            Free (this.m_IProvisioningAgent);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ProvisioningAgent

   function Constructor return ProvisioningAgent is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.ProvisioningAgent");
      m_ComRetVal  : aliased Windows.Networking.NetworkOperators.IProvisioningAgent;
   begin
      return RetVal : ProvisioningAgent do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IProvisioningAgent := new Windows.Networking.NetworkOperators.IProvisioningAgent;
            Retval.m_IProvisioningAgent.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ProvisioningAgent

   function CreateFromNetworkAccountId
   (
      networkAccountId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ProvisioningAgent is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.ProvisioningAgent");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IProvisioningAgentStaticMethods_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IProvisioningAgent;
      HStr_networkAccountId : WinRt.HString := To_HString (networkAccountId);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ProvisioningAgent do
         Hr := RoGetActivationFactory (m_hString, IID_IProvisioningAgentStaticMethods'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNetworkAccountId (HStr_networkAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IProvisioningAgent := new Windows.Networking.NetworkOperators.IProvisioningAgent;
            Retval.m_IProvisioningAgent.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_networkAccountId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ProvisioningAgent

   function ProvisionFromXmlDocumentAsync
   (
      this : in out ProvisioningAgent;
      provisioningXmlDocument : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_provisioningXmlDocument : WinRt.HString := To_HString (provisioningXmlDocument);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ProvisionFromXmlDocumentResults.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ProvisionFromXmlDocumentResults.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults;
      m_IID            : aliased WinRt.IID := (2677007160, 50865, 22036, (161, 79, 137, 119, 167, 126, 23, 242 )); -- Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults;
      m_HandlerIID     : aliased WinRt.IID := (2055138843, 6137, 23105, (134, 27, 195, 14, 161, 39, 208, 241 ));
      m_Handler        : AsyncOperationCompletedHandler_ProvisionFromXmlDocumentResults.Kind := new AsyncOperationCompletedHandler_ProvisionFromXmlDocumentResults.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ProvisionFromXmlDocumentResults.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ProvisionFromXmlDocumentResults.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ProvisionFromXmlDocumentResults.Kind_Delegate, AsyncOperationCompletedHandler_ProvisionFromXmlDocumentResults.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults do
         Hr := this.m_IProvisioningAgent.all.ProvisionFromXmlDocumentAsync (HStr_provisioningXmlDocument, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IProvisionFromXmlDocumentResults := new Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults;
                  Retval.m_IProvisionFromXmlDocumentResults.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_provisioningXmlDocument);
      end return;
   end;

   function GetProvisionedProfile
   (
      this : in out ProvisioningAgent;
      mediaType : Windows.Networking.NetworkOperators.ProfileMediaType;
      profileName : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.ProvisionedProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IProvisionedProfile;
      HStr_profileName : WinRt.HString := To_HString (profileName);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.ProvisionedProfile do
         Hr := this.m_IProvisioningAgent.all.GetProvisionedProfile (mediaType, HStr_profileName, m_ComRetVal'Access);
         Retval.m_IProvisionedProfile := new Windows.Networking.NetworkOperators.IProvisionedProfile;
         Retval.m_IProvisionedProfile.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_profileName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TetheringEntitlementCheckTriggerDetails

   procedure Initialize (this : in out TetheringEntitlementCheckTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out TetheringEntitlementCheckTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITetheringEntitlementCheckTriggerDetails, ITetheringEntitlementCheckTriggerDetails_Ptr);
   begin
      if this.m_ITetheringEntitlementCheckTriggerDetails /= null then
         if this.m_ITetheringEntitlementCheckTriggerDetails.all /= null then
            RefCount := this.m_ITetheringEntitlementCheckTriggerDetails.all.Release;
            Free (this.m_ITetheringEntitlementCheckTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TetheringEntitlementCheckTriggerDetails

   function get_NetworkAccountId
   (
      this : in out TetheringEntitlementCheckTriggerDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITetheringEntitlementCheckTriggerDetails.all.get_NetworkAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AllowTethering
   (
      this : in out TetheringEntitlementCheckTriggerDetails
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITetheringEntitlementCheckTriggerDetails.all.AllowTethering;
   end;

   procedure DenyTethering
   (
      this : in out TetheringEntitlementCheckTriggerDetails;
      entitlementFailureReason : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_entitlementFailureReason : WinRt.HString := To_HString (entitlementFailureReason);
   begin
      Hr := this.m_ITetheringEntitlementCheckTriggerDetails.all.DenyTethering (HStr_entitlementFailureReason);
      Hr := WindowsDeleteString (HStr_entitlementFailureReason);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UssdMessage

   procedure Initialize (this : in out UssdMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out UssdMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUssdMessage, IUssdMessage_Ptr);
   begin
      if this.m_IUssdMessage /= null then
         if this.m_IUssdMessage.all /= null then
            RefCount := this.m_IUssdMessage.all.Release;
            Free (this.m_IUssdMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UssdMessage

   function Constructor
   (
      messageText : WinRt.WString
   )
   return UssdMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.UssdMessage");
      m_Factory    : access IUssdMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.NetworkOperators.IUssdMessage;
      HStr_messageText : WinRt.HString := To_HString (messageText);
   begin
      return RetVal : UssdMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IUssdMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMessage (HStr_messageText, m_ComRetVal'Access);
            Retval.m_IUssdMessage := new Windows.Networking.NetworkOperators.IUssdMessage;
            Retval.m_IUssdMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_messageText);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UssdMessage

   function get_DataCodingScheme
   (
      this : in out UssdMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IUssdMessage.all.get_DataCodingScheme (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DataCodingScheme
   (
      this : in out UssdMessage;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUssdMessage.all.put_DataCodingScheme (value);
   end;

   function GetPayload
   (
      this : in out UssdMessage
   )
   return WinRt.Byte_Array is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte_Ptr;
      m_ComRetValSize  : aliased WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUssdMessage.all.GetPayload (m_ComRetValSize'Access, m_ComRetVal'Access);
      declare
         ArrayRetVal : WinRt.Byte_Array (1..Integer(m_ComRetValSize));
         function To_Ada_Byte is new To_Ada_Type (WinRt.Byte, WinRt.Byte_Ptr); 
      begin
         for i in ArrayRetVal'Range loop
            ArrayRetval (i) := To_Ada_Byte (m_ComRetVal, i);
         end loop;
         return ArrayRetVal;
      end;
   end;

   procedure SetPayload
   (
      this : in out UssdMessage;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IUssdMessage.all.SetPayload (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   function get_PayloadAsText
   (
      this : in out UssdMessage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUssdMessage.all.get_PayloadAsText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PayloadAsText
   (
      this : in out UssdMessage;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUssdMessage.all.put_PayloadAsText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UssdReply

   procedure Initialize (this : in out UssdReply) is
   begin
      null;
   end;

   procedure Finalize (this : in out UssdReply) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUssdReply, IUssdReply_Ptr);
   begin
      if this.m_IUssdReply /= null then
         if this.m_IUssdReply.all /= null then
            RefCount := this.m_IUssdReply.all.Release;
            Free (this.m_IUssdReply);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UssdReply

   function get_ResultCode
   (
      this : in out UssdReply
   )
   return WinRt.Windows.Networking.NetworkOperators.UssdResultCode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.UssdResultCode;
   begin
      Hr := this.m_IUssdReply.all.get_ResultCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Message
   (
      this : in out UssdReply
   )
   return WinRt.Windows.Networking.NetworkOperators.UssdMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IUssdMessage;
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.UssdMessage do
         Hr := this.m_IUssdReply.all.get_Message (m_ComRetVal'Access);
         Retval.m_IUssdMessage := new Windows.Networking.NetworkOperators.IUssdMessage;
         Retval.m_IUssdMessage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UssdSession

   procedure Initialize (this : in out UssdSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out UssdSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUssdSession, IUssdSession_Ptr);
   begin
      if this.m_IUssdSession /= null then
         if this.m_IUssdSession.all /= null then
            RefCount := this.m_IUssdSession.all.Release;
            Free (this.m_IUssdSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UssdSession

   function CreateFromNetworkAccountId
   (
      networkAccountId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.UssdSession is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.UssdSession");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IUssdSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IUssdSession;
      HStr_networkAccountId : WinRt.HString := To_HString (networkAccountId);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.UssdSession do
         Hr := RoGetActivationFactory (m_hString, IID_IUssdSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNetworkAccountId (HStr_networkAccountId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUssdSession := new Windows.Networking.NetworkOperators.IUssdSession;
            Retval.m_IUssdSession.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_networkAccountId);
      end return;
   end;

   function CreateFromNetworkInterfaceId
   (
      networkInterfaceId : WinRt.WString
   )
   return WinRt.Windows.Networking.NetworkOperators.UssdSession is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.NetworkOperators.UssdSession");
      m_Factory        : access WinRt.Windows.Networking.NetworkOperators.IUssdSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.NetworkOperators.IUssdSession;
      HStr_networkInterfaceId : WinRt.HString := To_HString (networkInterfaceId);
   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.UssdSession do
         Hr := RoGetActivationFactory (m_hString, IID_IUssdSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromNetworkInterfaceId (HStr_networkInterfaceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUssdSession := new Windows.Networking.NetworkOperators.IUssdSession;
            Retval.m_IUssdSession.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_networkInterfaceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UssdSession

   function SendMessageAndGetReplyAsync
   (
      this : in out UssdSession;
      message : Windows.Networking.NetworkOperators.UssdMessage'Class
   )
   return WinRt.Windows.Networking.NetworkOperators.UssdReply'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UssdReply.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UssdReply.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.NetworkOperators.IUssdReply;
      m_IID            : aliased WinRt.IID := (2647695459, 24915, 23293, (130, 136, 135, 112, 221, 207, 242, 219 )); -- Windows.Networking.NetworkOperators.UssdReply;
      m_HandlerIID     : aliased WinRt.IID := (2475015567, 24084, 21882, (167, 241, 99, 243, 61, 158, 202, 207 ));
      m_Handler        : AsyncOperationCompletedHandler_UssdReply.Kind := new AsyncOperationCompletedHandler_UssdReply.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UssdReply.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UssdReply.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UssdReply.Kind_Delegate, AsyncOperationCompletedHandler_UssdReply.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.NetworkOperators.UssdReply do
         Hr := this.m_IUssdSession.all.SendMessageAndGetReplyAsync (message.m_IUssdMessage.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUssdReply := new Windows.Networking.NetworkOperators.IUssdReply;
                  Retval.m_IUssdReply.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Close
   (
      this : in out UssdSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUssdSession.all.Close;
   end;

end;

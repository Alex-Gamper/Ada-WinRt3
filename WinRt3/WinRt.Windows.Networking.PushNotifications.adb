--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.UI.Notifications;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.PushNotifications is

   package IAsyncOperation_PushNotificationChannel is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel);
   package AsyncOperationCompletedHandler_PushNotificationChannel is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PushNotificationChannel

   procedure Initialize (this : in out PushNotificationChannel) is
   begin
      null;
   end;

   procedure Finalize (this : in out PushNotificationChannel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPushNotificationChannel, IPushNotificationChannel_Ptr);
   begin
      if this.m_IPushNotificationChannel /= null then
         if this.m_IPushNotificationChannel.all /= null then
            RefCount := this.m_IPushNotificationChannel.all.Release;
            Free (this.m_IPushNotificationChannel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PushNotificationChannel

   function get_Uri
   (
      this : in out PushNotificationChannel
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPushNotificationChannel.all.get_Uri (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ExpirationTime
   (
      this : in out PushNotificationChannel
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPushNotificationChannel.all.get_ExpirationTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out PushNotificationChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPushNotificationChannel.all.Close;
   end;

   function add_PushNotificationReceived
   (
      this : in out PushNotificationChannel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPushNotificationChannel.all.add_PushNotificationReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PushNotificationReceived
   (
      this : in out PushNotificationChannel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPushNotificationChannel.all.remove_PushNotificationReceived (token);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body PushNotificationChannelManager is

      function GetForUser
      (
         user : Windows.System.User'Class
      )
      return WinRt.Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.PushNotifications.PushNotificationChannelManager");
         m_Factory        : access WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser;
      begin
         return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationChannelManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPushNotificationChannelManagerForUser := new Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser;
               Retval.m_IPushNotificationChannelManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetDefault
      return WinRt.Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.PushNotifications.PushNotificationChannelManager");
         m_Factory        : access WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser;
      begin
         return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser do
            Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationChannelManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetDefault (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IPushNotificationChannelManagerForUser := new Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser;
               Retval.m_IPushNotificationChannelManagerForUser.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function add_ChannelsRevoked
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.PushNotifications.PushNotificationChannelManager");
         m_Factory        : access WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationChannelManagerStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_ChannelsRevoked (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_ChannelsRevoked
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.PushNotifications.PushNotificationChannelManager");
         m_Factory        : access WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationChannelManagerStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_ChannelsRevoked (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function CreatePushNotificationChannelForApplicationAsync
      return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.PushNotifications.PushNotificationChannelManager");
         m_Factory        : access WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PushNotificationChannel.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
         m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
         m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
         m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
            Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationChannelManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreatePushNotificationChannelForApplicationAsync (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                        Retval.m_IPushNotificationChannel.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function CreatePushNotificationChannelForApplicationAsync
      (
         applicationId : WinRt.WString
      )
      return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.PushNotifications.PushNotificationChannelManager");
         m_Factory        : access WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PushNotificationChannel.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
         m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
         m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
         m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
            Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationChannelManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreatePushNotificationChannelForApplicationAsync (HStr_applicationId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                        Retval.m_IPushNotificationChannel.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_applicationId);
         end return;
      end;

      function CreatePushNotificationChannelForSecondaryTileAsync
      (
         tileId : WinRt.WString
      )
      return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.PushNotifications.PushNotificationChannelManager");
         m_Factory        : access WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_tileId : WinRt.HString := To_HString (tileId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_PushNotificationChannel.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
         m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
         m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
         m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
            Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationChannelManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreatePushNotificationChannelForSecondaryTileAsync (HStr_tileId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                        Retval.m_IPushNotificationChannel.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_tileId);
         end return;
      end;

   end PushNotificationChannelManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PushNotificationChannelManagerForUser

   procedure Initialize (this : in out PushNotificationChannelManagerForUser) is
   begin
      null;
   end;

   procedure Finalize (this : in out PushNotificationChannelManagerForUser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPushNotificationChannelManagerForUser, IPushNotificationChannelManagerForUser_Ptr);
   begin
      if this.m_IPushNotificationChannelManagerForUser /= null then
         if this.m_IPushNotificationChannelManagerForUser.all /= null then
            RefCount := this.m_IPushNotificationChannelManagerForUser.all.Release;
            Free (this.m_IPushNotificationChannelManagerForUser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PushNotificationChannelManagerForUser

   function CreatePushNotificationChannelForApplicationAsync
   (
      this : in out PushNotificationChannelManagerForUser
   )
   return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PushNotificationChannel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
      m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
      m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
         Hr := this.m_IPushNotificationChannelManagerForUser.all.CreatePushNotificationChannelForApplicationAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                  Retval.m_IPushNotificationChannel.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreatePushNotificationChannelForApplicationAsync
   (
      this : in out PushNotificationChannelManagerForUser;
      applicationId : WinRt.WString
   )
   return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PushNotificationChannel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
      m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
      m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
         Hr := this.m_IPushNotificationChannelManagerForUser.all.CreatePushNotificationChannelForApplicationAsync (HStr_applicationId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                  Retval.m_IPushNotificationChannel.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_applicationId);
      end return;
   end;

   function CreatePushNotificationChannelForSecondaryTileAsync
   (
      this : in out PushNotificationChannelManagerForUser;
      tileId : WinRt.WString
   )
   return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_tileId : WinRt.HString := To_HString (tileId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PushNotificationChannel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
      m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
      m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
         Hr := this.m_IPushNotificationChannelManagerForUser.all.CreatePushNotificationChannelForSecondaryTileAsync (HStr_tileId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                  Retval.m_IPushNotificationChannel.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_tileId);
      end return;
   end;

   function get_User
   (
      this : in out PushNotificationChannelManagerForUser
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
   begin
      return RetVal : WinRt.Windows.System.User do
         Hr := this.m_IPushNotificationChannelManagerForUser.all.get_User (m_ComRetVal'Access);
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync
   (
      this : in out PushNotificationChannelManagerForUser;
      appServerKey : Windows.Storage.Streams.IBuffer;
      channelId : WinRt.WString
   )
   return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_channelId : WinRt.HString := To_HString (channelId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PushNotificationChannel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
      m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
      m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser_Interface, WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2, WinRt.Windows.Networking.PushNotifications.IID_IPushNotificationChannelManagerForUser2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
         m_Interface := QInterface (this.m_IPushNotificationChannelManagerForUser.all);
         Hr := m_Interface.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync (appServerKey, HStr_channelId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                  Retval.m_IPushNotificationChannel.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_channelId);
      end return;
   end;

   function CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync
   (
      this : in out PushNotificationChannelManagerForUser;
      appServerKey : Windows.Storage.Streams.IBuffer;
      channelId : WinRt.WString;
      appId : WinRt.WString
   )
   return WinRt.Windows.Networking.PushNotifications.PushNotificationChannel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_channelId : WinRt.HString := To_HString (channelId);
      HStr_appId : WinRt.HString := To_HString (appId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PushNotificationChannel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PushNotificationChannel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.PushNotifications.IPushNotificationChannel;
      m_IID            : aliased WinRt.IID := (1888770569, 13082, 24128, (184, 84, 102, 183, 163, 35, 59, 171 )); -- Windows.Networking.PushNotifications.PushNotificationChannel;
      m_HandlerIID     : aliased WinRt.IID := (3481047087, 3853, 23330, (144, 177, 133, 20, 27, 88, 22, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_PushNotificationChannel.Kind := new AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PushNotificationChannel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PushNotificationChannel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PushNotificationChannel.Kind_Delegate, AsyncOperationCompletedHandler_PushNotificationChannel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser_Interface, WinRt.Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2, WinRt.Windows.Networking.PushNotifications.IID_IPushNotificationChannelManagerForUser2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.PushNotifications.PushNotificationChannel do
         m_Interface := QInterface (this.m_IPushNotificationChannelManagerForUser.all);
         Hr := m_Interface.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync (appServerKey, HStr_channelId, HStr_appId, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPushNotificationChannel := new Windows.Networking.PushNotifications.IPushNotificationChannel;
                  Retval.m_IPushNotificationChannel.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_channelId);
         Hr := WindowsDeleteString (HStr_appId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PushNotificationChannelsRevokedEventArgs

   procedure Initialize (this : in out PushNotificationChannelsRevokedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PushNotificationChannelsRevokedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPushNotificationChannelsRevokedEventArgs, IPushNotificationChannelsRevokedEventArgs_Ptr);
   begin
      if this.m_IPushNotificationChannelsRevokedEventArgs /= null then
         if this.m_IPushNotificationChannelsRevokedEventArgs.all /= null then
            RefCount := this.m_IPushNotificationChannelsRevokedEventArgs.all.Release;
            Free (this.m_IPushNotificationChannelsRevokedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PushNotificationChannelsRevokedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PushNotificationReceivedEventArgs

   procedure Initialize (this : in out PushNotificationReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PushNotificationReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPushNotificationReceivedEventArgs, IPushNotificationReceivedEventArgs_Ptr);
   begin
      if this.m_IPushNotificationReceivedEventArgs /= null then
         if this.m_IPushNotificationReceivedEventArgs.all /= null then
            RefCount := this.m_IPushNotificationReceivedEventArgs.all.Release;
            Free (this.m_IPushNotificationReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PushNotificationReceivedEventArgs

   procedure put_Cancel
   (
      this : in out PushNotificationReceivedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPushNotificationReceivedEventArgs.all.put_Cancel (value);
   end;

   function get_Cancel
   (
      this : in out PushNotificationReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPushNotificationReceivedEventArgs.all.get_Cancel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NotificationType
   (
      this : in out PushNotificationReceivedEventArgs
   )
   return WinRt.Windows.Networking.PushNotifications.PushNotificationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.PushNotifications.PushNotificationType;
   begin
      Hr := this.m_IPushNotificationReceivedEventArgs.all.get_NotificationType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ToastNotification
   (
      this : in out PushNotificationReceivedEventArgs
   )
   return WinRt.Windows.UI.Notifications.ToastNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IToastNotification;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.ToastNotification do
         Hr := this.m_IPushNotificationReceivedEventArgs.all.get_ToastNotification (m_ComRetVal'Access);
         Retval.m_IToastNotification := new Windows.UI.Notifications.IToastNotification;
         Retval.m_IToastNotification.all := m_ComRetVal;
      end return;
   end;

   function get_TileNotification
   (
      this : in out PushNotificationReceivedEventArgs
   )
   return WinRt.Windows.UI.Notifications.TileNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.ITileNotification;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.TileNotification do
         Hr := this.m_IPushNotificationReceivedEventArgs.all.get_TileNotification (m_ComRetVal'Access);
         Retval.m_ITileNotification := new Windows.UI.Notifications.ITileNotification;
         Retval.m_ITileNotification.all := m_ComRetVal;
      end return;
   end;

   function get_BadgeNotification
   (
      this : in out PushNotificationReceivedEventArgs
   )
   return WinRt.Windows.UI.Notifications.BadgeNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Notifications.IBadgeNotification;
   begin
      return RetVal : WinRt.Windows.UI.Notifications.BadgeNotification do
         Hr := this.m_IPushNotificationReceivedEventArgs.all.get_BadgeNotification (m_ComRetVal'Access);
         Retval.m_IBadgeNotification := new Windows.UI.Notifications.IBadgeNotification;
         Retval.m_IBadgeNotification.all := m_ComRetVal;
      end return;
   end;

   function get_RawNotification
   (
      this : in out PushNotificationReceivedEventArgs
   )
   return WinRt.Windows.Networking.PushNotifications.RawNotification'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.PushNotifications.IRawNotification;
   begin
      return RetVal : WinRt.Windows.Networking.PushNotifications.RawNotification do
         Hr := this.m_IPushNotificationReceivedEventArgs.all.get_RawNotification (m_ComRetVal'Access);
         Retval.m_IRawNotification := new Windows.Networking.PushNotifications.IRawNotification;
         Retval.m_IRawNotification.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RawNotification

   procedure Initialize (this : in out RawNotification) is
   begin
      null;
   end;

   procedure Finalize (this : in out RawNotification) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRawNotification, IRawNotification_Ptr);
   begin
      if this.m_IRawNotification /= null then
         if this.m_IRawNotification.all /= null then
            RefCount := this.m_IRawNotification.all.Release;
            Free (this.m_IRawNotification);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RawNotification

   function get_Content
   (
      this : in out RawNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRawNotification.all.get_Content (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Headers
   (
      this : in out RawNotification
   )
   return IMapView_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.PushNotifications.IRawNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.PushNotifications.IRawNotification_Interface, WinRt.Windows.Networking.PushNotifications.IRawNotification2, WinRt.Windows.Networking.PushNotifications.IID_IRawNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRawNotification.all);
      Hr := m_Interface.get_Headers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IMapView_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ChannelId
   (
      this : in out RawNotification
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.PushNotifications.IRawNotification2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.PushNotifications.IRawNotification_Interface, WinRt.Windows.Networking.PushNotifications.IRawNotification2, WinRt.Windows.Networking.PushNotifications.IID_IRawNotification2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRawNotification.all);
      Hr := m_Interface.get_ChannelId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContentBytes
   (
      this : in out RawNotification
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.PushNotifications.IRawNotification3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.PushNotifications.IRawNotification_Interface, WinRt.Windows.Networking.PushNotifications.IRawNotification3, WinRt.Windows.Networking.PushNotifications.IID_IRawNotification3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRawNotification.all);
      Hr := m_Interface.get_ContentBytes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

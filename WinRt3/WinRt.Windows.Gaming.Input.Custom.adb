--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Gaming.Input.Custom is

   package IAsyncOperation_GipFirmwareUpdateResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Gaming.Input.Custom.IGipFirmwareUpdateResult, GenericObject);
   package AsyncOperationCompletedHandler_GipFirmwareUpdateResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Gaming.Input.Custom.IGipFirmwareUpdateResult, GenericObject);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body GameControllerFactoryManager is

      function TryGetFactoryControllerFromGameController
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         gameController : Windows.Gaming.Input.IGameController
      )
      return WinRt.Windows.Gaming.Input.IGameController is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Gaming.Input.Custom.GameControllerFactoryManager");
         m_Factory        : access WinRt.Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Gaming.Input.IGameController;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGameControllerFactoryManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryGetFactoryControllerFromGameController (factory, gameController, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure RegisterCustomFactoryForGipInterface
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         interfaceId : WinRt.Guid
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Gaming.Input.Custom.GameControllerFactoryManager");
         m_Factory        : access WinRt.Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGameControllerFactoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterCustomFactoryForGipInterface (factory, interfaceId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RegisterCustomFactoryForHardwareId
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         hardwareVendorId : WinRt.UInt16;
         hardwareProductId : WinRt.UInt16
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Gaming.Input.Custom.GameControllerFactoryManager");
         m_Factory        : access WinRt.Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGameControllerFactoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterCustomFactoryForHardwareId (factory, hardwareVendorId, hardwareProductId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RegisterCustomFactoryForXusbType
      (
         factory : Windows.Gaming.Input.Custom.ICustomGameControllerFactory;
         xusbType : Windows.Gaming.Input.Custom.XusbDeviceType;
         xusbSubtype : Windows.Gaming.Input.Custom.XusbDeviceSubtype
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Gaming.Input.Custom.GameControllerFactoryManager");
         m_Factory        : access WinRt.Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IGameControllerFactoryManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterCustomFactoryForXusbType (factory, xusbType, xusbSubtype);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end GameControllerFactoryManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GipFirmwareUpdateResult

   procedure Initialize (this : in out GipFirmwareUpdateResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GipFirmwareUpdateResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGipFirmwareUpdateResult, IGipFirmwareUpdateResult_Ptr);
   begin
      if this.m_IGipFirmwareUpdateResult /= null then
         if this.m_IGipFirmwareUpdateResult.all /= null then
            RefCount := this.m_IGipFirmwareUpdateResult.all.Release;
            Free (this.m_IGipFirmwareUpdateResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GipFirmwareUpdateResult

   function get_ExtendedErrorCode
   (
      this : in out GipFirmwareUpdateResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IGipFirmwareUpdateResult.all.get_ExtendedErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FinalComponentId
   (
      this : in out GipFirmwareUpdateResult
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IGipFirmwareUpdateResult.all.get_FinalComponentId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out GipFirmwareUpdateResult
   )
   return WinRt.Windows.Gaming.Input.Custom.GipFirmwareUpdateStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.Custom.GipFirmwareUpdateStatus;
   begin
      Hr := this.m_IGipFirmwareUpdateResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GipGameControllerProvider

   procedure Initialize (this : in out GipGameControllerProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out GipGameControllerProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGipGameControllerProvider, IGipGameControllerProvider_Ptr);
   begin
      if this.m_IGipGameControllerProvider /= null then
         if this.m_IGipGameControllerProvider.all /= null then
            RefCount := this.m_IGipGameControllerProvider.all.Release;
            Free (this.m_IGipGameControllerProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GipGameControllerProvider

   procedure SendMessage
   (
      this : in out GipGameControllerProvider;
      messageClass : Windows.Gaming.Input.Custom.GipMessageClass;
      messageId : WinRt.Byte;
      messageBuffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_messageBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IGipGameControllerProvider.all.SendMessage (messageClass, messageId, WinRt.UInt32(messageBuffer'Length), Convert_messageBuffer (messageBuffer (messageBuffer'First)'Address));
   end;

   procedure SendReceiveMessage
   (
      this : in out GipGameControllerProvider;
      messageClass : Windows.Gaming.Input.Custom.GipMessageClass;
      messageId : WinRt.Byte;
      requestMessageBuffer : WinRt.Byte_Array;
      responseMessageBuffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_requestMessageBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
      function Convert_responseMessageBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IGipGameControllerProvider.all.SendReceiveMessage (messageClass, messageId, WinRt.UInt32(requestMessageBuffer'Length), Convert_requestMessageBuffer (requestMessageBuffer (requestMessageBuffer'First)'Address), WinRt.UInt32(responseMessageBuffer'Length), Convert_responseMessageBuffer (responseMessageBuffer (responseMessageBuffer'First)'Address));
   end;

   function UpdateFirmwareAsync
   (
      this : in out GipGameControllerProvider;
      firmwareImage : Windows.Storage.Streams.IInputStream
   )
   return WinRt.Windows.Gaming.Input.Custom.GipFirmwareUpdateResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GipFirmwareUpdateResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GipFirmwareUpdateResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.Input.Custom.IGipFirmwareUpdateResult;
      m_IID            : aliased WinRt.IID := (3215607997, 5471, 20754, (189, 134, 224, 29, 111, 124, 212, 5 )); -- Windows.Gaming.Input.Custom.GipFirmwareUpdateResult;
      m_HandlerIID     : aliased WinRt.IID := (1639536969, 40999, 20952, (159, 51, 55, 146, 116, 81, 80, 43 ));
      m_Handler        : AsyncOperationCompletedHandler_GipFirmwareUpdateResult.Kind := new AsyncOperationCompletedHandler_GipFirmwareUpdateResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GipFirmwareUpdateResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GipFirmwareUpdateResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GipFirmwareUpdateResult.Kind_Delegate, AsyncOperationCompletedHandler_GipFirmwareUpdateResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Gaming.Input.Custom.GipFirmwareUpdateResult do
         Hr := this.m_IGipGameControllerProvider.all.UpdateFirmwareAsync (firmwareImage, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGipFirmwareUpdateResult := new Windows.Gaming.Input.Custom.IGipFirmwareUpdateResult;
                  Retval.m_IGipFirmwareUpdateResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_FirmwareVersionInfo
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.Custom.GameControllerVersionInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IGipGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGipGameControllerProvider.all);
      Hr := m_Interface.get_FirmwareVersionInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareProductId
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IGipGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGipGameControllerProvider.all);
      Hr := m_Interface.get_HardwareProductId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareVendorId
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IGipGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGipGameControllerProvider.all);
      Hr := m_Interface.get_HardwareVendorId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareVersionInfo
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.Custom.GameControllerVersionInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IGipGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGipGameControllerProvider.all);
      Hr := m_Interface.get_HardwareVersionInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsConnected
   (
      this : in out GipGameControllerProvider
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IGipGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGipGameControllerProvider.all);
      Hr := m_Interface.get_IsConnected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidGameControllerProvider

   procedure Initialize (this : in out HidGameControllerProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidGameControllerProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidGameControllerProvider, IHidGameControllerProvider_Ptr);
   begin
      if this.m_IHidGameControllerProvider /= null then
         if this.m_IHidGameControllerProvider.all /= null then
            RefCount := this.m_IHidGameControllerProvider.all.Release;
            Free (this.m_IHidGameControllerProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidGameControllerProvider

   function get_UsageId
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidGameControllerProvider.all.get_UsageId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsagePage
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidGameControllerProvider.all.get_UsagePage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetFeatureReport
   (
      this : in out HidGameControllerProvider;
      reportId : WinRt.Byte;
      reportBuffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_reportBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IHidGameControllerProvider.all.GetFeatureReport (reportId, WinRt.UInt32(reportBuffer'Length), Convert_reportBuffer (reportBuffer (reportBuffer'First)'Address));
   end;

   procedure SendFeatureReport
   (
      this : in out HidGameControllerProvider;
      reportId : WinRt.Byte;
      reportBuffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_reportBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IHidGameControllerProvider.all.SendFeatureReport (reportId, WinRt.UInt32(reportBuffer'Length), Convert_reportBuffer (reportBuffer (reportBuffer'First)'Address));
   end;

   procedure SendOutputReport
   (
      this : in out HidGameControllerProvider;
      reportId : WinRt.Byte;
      reportBuffer : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_reportBuffer is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IHidGameControllerProvider.all.SendOutputReport (reportId, WinRt.UInt32(reportBuffer'Length), Convert_reportBuffer (reportBuffer (reportBuffer'First)'Address));
   end;

   function get_FirmwareVersionInfo
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.Custom.GameControllerVersionInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IHidGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHidGameControllerProvider.all);
      Hr := m_Interface.get_FirmwareVersionInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareProductId
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IHidGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHidGameControllerProvider.all);
      Hr := m_Interface.get_HardwareProductId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareVendorId
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IHidGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHidGameControllerProvider.all);
      Hr := m_Interface.get_HardwareVendorId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareVersionInfo
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.Custom.GameControllerVersionInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IHidGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHidGameControllerProvider.all);
      Hr := m_Interface.get_HardwareVersionInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsConnected
   (
      this : in out HidGameControllerProvider
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IHidGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHidGameControllerProvider.all);
      Hr := m_Interface.get_IsConnected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for XusbGameControllerProvider

   procedure Initialize (this : in out XusbGameControllerProvider) is
   begin
      null;
   end;

   procedure Finalize (this : in out XusbGameControllerProvider) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IXusbGameControllerProvider, IXusbGameControllerProvider_Ptr);
   begin
      if this.m_IXusbGameControllerProvider /= null then
         if this.m_IXusbGameControllerProvider.all /= null then
            RefCount := this.m_IXusbGameControllerProvider.all.Release;
            Free (this.m_IXusbGameControllerProvider);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for XusbGameControllerProvider

   procedure SetVibration
   (
      this : in out XusbGameControllerProvider;
      lowFrequencyMotorSpeed : WinRt.Double;
      highFrequencyMotorSpeed : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IXusbGameControllerProvider.all.SetVibration (lowFrequencyMotorSpeed, highFrequencyMotorSpeed);
   end;

   function get_FirmwareVersionInfo
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.Custom.GameControllerVersionInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IXusbGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXusbGameControllerProvider.all);
      Hr := m_Interface.get_FirmwareVersionInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareProductId
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IXusbGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXusbGameControllerProvider.all);
      Hr := m_Interface.get_HardwareProductId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareVendorId
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IXusbGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXusbGameControllerProvider.all);
      Hr := m_Interface.get_HardwareVendorId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_HardwareVersionInfo
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.Windows.Gaming.Input.Custom.GameControllerVersionInfo is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.Custom.GameControllerVersionInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IXusbGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXusbGameControllerProvider.all);
      Hr := m_Interface.get_HardwareVersionInfo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsConnected
   (
      this : in out XusbGameControllerProvider
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.Custom.IXusbGameControllerProvider_Interface, WinRt.Windows.Gaming.Input.Custom.IGameControllerProvider, WinRt.Windows.Gaming.Input.Custom.IID_IGameControllerProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IXusbGameControllerProvider.all);
      Hr := m_Interface.get_IsConnected (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;
